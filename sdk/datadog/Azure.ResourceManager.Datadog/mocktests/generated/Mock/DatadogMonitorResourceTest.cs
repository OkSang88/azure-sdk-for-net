// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using MicrosoftDatadogClient;
using MicrosoftDatadogClient.Models;

namespace MicrosoftDatadogClient.Tests.Mock
{
    /// <summary> Test for DatadogMonitorResource. </summary>
    public partial class DatadogMonitorResourceMockTests : MockTestBase
    {
        public DatadogMonitorResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Monitors_Get
            var datadogMonitorResourceId = MicrosoftDatadogClient.DatadogMonitorResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor");
            var datadogMonitorResource = GetArmClient().GetDatadogMonitorResource(datadogMonitorResourceId);

            await datadogMonitorResource.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Monitors_Delete
            var datadogMonitorResourceId = MicrosoftDatadogClient.DatadogMonitorResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor");
            var datadogMonitorResource = GetArmClient().GetDatadogMonitorResource(datadogMonitorResourceId);

            await datadogMonitorResource.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Monitors_Update
            var datadogMonitorResourceId = MicrosoftDatadogClient.DatadogMonitorResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor");
            var datadogMonitorResource = GetArmClient().GetDatadogMonitorResource(datadogMonitorResourceId);
            MicrosoftDatadogClient.Models.DatadogMonitorResourceUpdateParameters body = null;

            await datadogMonitorResource.UpdateAsync(true, body);
        }

        [RecordedTest]
        public async Task GetApiKeys()
        {
            // Example: Monitors_ListApiKeys
            var datadogMonitorResourceId = MicrosoftDatadogClient.DatadogMonitorResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor");
            var datadogMonitorResource = GetArmClient().GetDatadogMonitorResource(datadogMonitorResourceId);

            await foreach (var _ in datadogMonitorResource.GetApiKeysAsync())
            {
            }
        }

        [RecordedTest]
        public async Task GetDefaultKey()
        {
            // Example: Monitors_GetDefaultKey
            var datadogMonitorResourceId = MicrosoftDatadogClient.DatadogMonitorResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor");
            var datadogMonitorResource = GetArmClient().GetDatadogMonitorResource(datadogMonitorResourceId);

            await datadogMonitorResource.GetDefaultKeyAsync();
        }

        [RecordedTest]
        public async Task SetDefaultKey()
        {
            // Example: Monitors_SetDefaultKey
            var datadogMonitorResourceId = MicrosoftDatadogClient.DatadogMonitorResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor");
            var datadogMonitorResource = GetArmClient().GetDatadogMonitorResource(datadogMonitorResourceId);
            MicrosoftDatadogClient.Models.DatadogApiKey body = null;

            await datadogMonitorResource.SetDefaultKeyAsync(body);
        }

        [RecordedTest]
        public async Task GetHosts()
        {
            // Example: Monitors_ListHosts
            var datadogMonitorResourceId = MicrosoftDatadogClient.DatadogMonitorResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor");
            var datadogMonitorResource = GetArmClient().GetDatadogMonitorResource(datadogMonitorResourceId);

            await foreach (var _ in datadogMonitorResource.GetHostsAsync())
            {
            }
        }

        [RecordedTest]
        public async Task GetLinkedResources()
        {
            // Example: Monitors_ListLinkedResources
            var datadogMonitorResourceId = MicrosoftDatadogClient.DatadogMonitorResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor");
            var datadogMonitorResource = GetArmClient().GetDatadogMonitorResource(datadogMonitorResourceId);

            await foreach (var _ in datadogMonitorResource.GetLinkedResourcesAsync())
            {
            }
        }

        [RecordedTest]
        public async Task GetMonitoredResources()
        {
            // Example: Monitors_ListMonitoredResources
            var datadogMonitorResourceId = MicrosoftDatadogClient.DatadogMonitorResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor");
            var datadogMonitorResource = GetArmClient().GetDatadogMonitorResource(datadogMonitorResourceId);

            await foreach (var _ in datadogMonitorResource.GetMonitoredResourcesAsync())
            {
            }
        }

        [RecordedTest]
        public async Task RefreshSetPasswordLink()
        {
            // Example: Monitors_RefreshSetPasswordLink
            var datadogMonitorResourceId = MicrosoftDatadogClient.DatadogMonitorResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor");
            var datadogMonitorResource = GetArmClient().GetDatadogMonitorResource(datadogMonitorResourceId);

            await datadogMonitorResource.RefreshSetPasswordLinkAsync();
        }
    }
}
