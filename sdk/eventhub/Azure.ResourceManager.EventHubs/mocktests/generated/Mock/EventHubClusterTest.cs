// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.EventHubs;
using Azure.ResourceManager.EventHubs.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.EventHubs.Tests.Mock
{
    /// <summary> Test for EventHubCluster. </summary>
    public partial class EventHubClusterMockTests : MockTestBase
    {
        public EventHubClusterMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: ClusterGet
            var eventHubClusterId = EventHubs.EventHubCluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "testCluster");
            var eventHubCluster = GetArmClient().GetEventHubCluster(eventHubClusterId);

            await eventHubCluster.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: ClusterDelete
            var eventHubClusterId = EventHubs.EventHubCluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "testCluster");
            var eventHubCluster = GetArmClient().GetEventHubCluster(eventHubClusterId);

            await eventHubCluster.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: ClusterPatch
            var eventHubClusterId = EventHubs.EventHubCluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "testCluster");
            var eventHubCluster = GetArmClient().GetEventHubCluster(eventHubClusterId);
            EventHubs.EventHubClusterData parameters = new EventHubs.EventHubClusterData(location: "South Central US")
            {
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>() { ["tag3"] = "value3", ["tag4"] = "value4", });
            await eventHubCluster.UpdateAsync(true, parameters);
        }

        [RecordedTest]
        public async Task GetNamespaces()
        {
            // Example: ListNamespacesInCluster
            var eventHubClusterId = EventHubs.EventHubCluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "testCluster");
            var eventHubCluster = GetArmClient().GetEventHubCluster(eventHubClusterId);

            await foreach (var _ in eventHubCluster.GetNamespacesAsync())
            {
            }
        }

        [RecordedTest]
        public async Task PatchConfiguration()
        {
            // Example: ClustersQuotasConfigurationPatch
            var eventHubClusterId = EventHubs.EventHubCluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ArunMonocle", "testCluster");
            var eventHubCluster = GetArmClient().GetEventHubCluster(eventHubClusterId);
            EventHubs.Models.ClusterQuotaConfigurationProperties parameters = new EventHubs.Models.ClusterQuotaConfigurationProperties();

            await eventHubCluster.PatchConfigurationAsync(parameters);
        }

        [RecordedTest]
        public async Task GetConfiguration()
        {
            // Example: ClustersQuotasConfigurationGet
            var eventHubClusterId = EventHubs.EventHubCluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "testCluster");
            var eventHubCluster = GetArmClient().GetEventHubCluster(eventHubClusterId);

            await eventHubCluster.GetConfigurationAsync();
        }
    }
}
