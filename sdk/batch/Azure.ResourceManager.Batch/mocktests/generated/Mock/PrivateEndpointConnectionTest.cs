// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using BatchManagementClient;
using BatchManagementClient.Models;

namespace BatchManagementClient.Tests.Mock
{
    /// <summary> Test for PrivateEndpointConnection. </summary>
    public partial class PrivateEndpointConnectionMockTests : MockTestBase
    {
        public PrivateEndpointConnectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: GetPrivateEndpointConnection
            var privateEndpointConnectionId = BatchManagementClient.PrivateEndpointConnection.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct", "testprivateEndpointConnection5testprivateEndpointConnection5.24d6b4b5-e65c-4330-bbe9-3a290d62f8e0");
            var privateEndpointConnection = GetArmClient().GetPrivateEndpointConnection(privateEndpointConnectionId);

            await privateEndpointConnection.GetAsync();
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: UpdatePrivateEndpointConnection
            var privateEndpointConnectionId = BatchManagementClient.PrivateEndpointConnection.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct", "testprivateEndpointConnection5.24d6b4b5-e65c-4330-bbe9-3a290d62f8e0");
            var privateEndpointConnection = GetArmClient().GetPrivateEndpointConnection(privateEndpointConnectionId);
            BatchManagementClient.PrivateEndpointConnectionData parameters = new BatchManagementClient.PrivateEndpointConnectionData()
            {
                PrivateLinkServiceConnectionState = new BatchManagementClient.Models.PrivateLinkServiceConnectionState(status: BatchManagementClient.Models.PrivateLinkServiceConnectionStatus.Approved)
                {
                    Description = "Approved by xyz.abc@company.com",
                },
            };
            string ifMatch = null;

            await privateEndpointConnection.UpdateAsync(true, parameters, ifMatch);
        }
    }
}
