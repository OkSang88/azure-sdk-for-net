// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for DiskEncryptionSet. </summary>
    public partial class DiskEncryptionSetMockTests : MockTestBase
    {
        public DiskEncryptionSetMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get information about a disk encryption set when auto-key rotation failed.
            var diskEncryptionSetId = Compute.DiskEncryptionSet.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myDiskEncryptionSet");
            var diskEncryptionSet = GetArmClient().GetDiskEncryptionSet(diskEncryptionSetId);

            await diskEncryptionSet.GetAsync();
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: Get information about a disk encryption set.
            var diskEncryptionSetId = Compute.DiskEncryptionSet.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myDiskEncryptionSet");
            var diskEncryptionSet = GetArmClient().GetDiskEncryptionSet(diskEncryptionSetId);

            await diskEncryptionSet.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete a disk encryption set.
            var diskEncryptionSetId = Compute.DiskEncryptionSet.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myDiskEncryptionSet");
            var diskEncryptionSet = GetArmClient().GetDiskEncryptionSet(diskEncryptionSetId);

            await diskEncryptionSet.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Update a disk encryption set with rotationToLatestKeyVersionEnabled set to true - Succeeded
            var diskEncryptionSetId = Compute.DiskEncryptionSet.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myDiskEncryptionSet");
            var diskEncryptionSet = GetArmClient().GetDiskEncryptionSet(diskEncryptionSetId);
            Compute.Models.DiskEncryptionSetUpdate diskEncryptionSet2 = new Compute.Models.DiskEncryptionSetUpdate()
            {
                Identity = new Compute.Models.EncryptionSetIdentity()
                {
                    Type = new Compute.Models.DiskEncryptionSetIdentityType("SystemAssigned"),
                },
                EncryptionType = new Compute.Models.DiskEncryptionSetType("EncryptionAtRestWithCustomerKey"),
                ActiveKey = new Compute.Models.KeyForDiskEncryptionSet(keyUrl: "https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/keyVersion1"),
                RotationToLatestKeyVersionEnabled = true,
            };

            await diskEncryptionSet.UpdateAsync(true, diskEncryptionSet2);
        }

        [RecordedTest]
        public async Task Update2()
        {
            // Example: Update a disk encryption set with rotationToLatestKeyVersionEnabled set to true - Updating
            var diskEncryptionSetId = Compute.DiskEncryptionSet.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myDiskEncryptionSet");
            var diskEncryptionSet = GetArmClient().GetDiskEncryptionSet(diskEncryptionSetId);
            Compute.Models.DiskEncryptionSetUpdate diskEncryptionSet2 = new Compute.Models.DiskEncryptionSetUpdate()
            {
                Identity = new Compute.Models.EncryptionSetIdentity()
                {
                    Type = new Compute.Models.DiskEncryptionSetIdentityType("SystemAssigned"),
                },
                EncryptionType = new Compute.Models.DiskEncryptionSetType("EncryptionAtRestWithCustomerKey"),
                ActiveKey = new Compute.Models.KeyForDiskEncryptionSet(keyUrl: "https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/keyVersion1"),
                RotationToLatestKeyVersionEnabled = true,
            };

            await diskEncryptionSet.UpdateAsync(true, diskEncryptionSet2);
        }

        [RecordedTest]
        public async Task Update3()
        {
            // Example: Update a disk encryption set.
            var diskEncryptionSetId = Compute.DiskEncryptionSet.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myDiskEncryptionSet");
            var diskEncryptionSet = GetArmClient().GetDiskEncryptionSet(diskEncryptionSetId);
            Compute.Models.DiskEncryptionSetUpdate diskEncryptionSet2 = new Compute.Models.DiskEncryptionSetUpdate()
            {
                EncryptionType = new Compute.Models.DiskEncryptionSetType("EncryptionAtRestWithCustomerKey"),
                ActiveKey = new Compute.Models.KeyForDiskEncryptionSet(keyUrl: "https://myvmvault.vault-int.azure-int.net/keys/keyName/keyVersion")
                {
                    SourceVault = new WritableSubResource()
                    {
                        Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
                    },
                },
            };

            await diskEncryptionSet.UpdateAsync(true, diskEncryptionSet2);
        }

        [RecordedTest]
        public async Task GetAssociatedResources()
        {
            // Example: List all resources that are encrypted with this disk encryption set.
            var diskEncryptionSetId = Compute.DiskEncryptionSet.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myDiskEncryptionSet");
            var diskEncryptionSet = GetArmClient().GetDiskEncryptionSet(diskEncryptionSetId);

            await foreach (var _ in diskEncryptionSet.GetAssociatedResourcesAsync())
            {
            }
        }
    }
}
