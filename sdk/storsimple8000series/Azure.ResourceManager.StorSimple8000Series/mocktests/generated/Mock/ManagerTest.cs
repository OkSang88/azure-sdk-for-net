// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using StorSimple8000SeriesManagementClient;
using StorSimple8000SeriesManagementClient.Models;

namespace StorSimple8000SeriesManagementClient.Tests.Mock
{
    /// <summary> Test for Manager. </summary>
    public partial class ManagerMockTests : MockTestBase
    {
        public ManagerMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: ManagersGet
            var managerId = StorSimple8000SeriesManagementClient.Manager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest2");
            var manager = GetArmClient().GetManager(managerId);

            await manager.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: ManagersDelete
            var managerId = StorSimple8000SeriesManagementClient.Manager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest2");
            var manager = GetArmClient().GetManager(managerId);

            await manager.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: ManagersUpdate
            var managerId = StorSimple8000SeriesManagementClient.Manager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest2");
            var manager = GetArmClient().GetManager(managerId);
            StorSimple8000SeriesManagementClient.Models.ManagerPatch parameters = new StorSimple8000SeriesManagementClient.Models.ManagerPatch();

            await manager.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task GetFeatureSupportStatus()
        {
            // Example: ManagersListFeatureSupportStatus
            var managerId = StorSimple8000SeriesManagementClient.Manager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1");
            var manager = GetArmClient().GetManager(managerId);
            string filter = null;

            await foreach (var _ in manager.GetFeatureSupportStatusAsync(filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetActivationKey()
        {
            // Example: ManagersGetActivationKey
            var managerId = StorSimple8000SeriesManagementClient.Manager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1");
            var manager = GetArmClient().GetManager(managerId);

            await manager.GetActivationKeyAsync();
        }

        [RecordedTest]
        public async Task GetPublicEncryptionKey()
        {
            // Example: ManagersGetPublicEncryptionKey
            var managerId = StorSimple8000SeriesManagementClient.Manager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1");
            var manager = GetArmClient().GetManager(managerId);

            await manager.GetPublicEncryptionKeyAsync();
        }

        [RecordedTest]
        public async Task GetMetrics()
        {
            // Example: ManagersListMetrics
            var managerId = StorSimple8000SeriesManagementClient.Manager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1");
            var manager = GetArmClient().GetManager(managerId);
            string filter = "name/value eq 'PrimaryStorageTieredUsed' and timeGrain eq 'PT1H' and startTime ge '2017-06-17T18:30:00Z' and endTime le '2017-06-21T18:30:00Z' and category eq 'CapacityUtilization'";

            await foreach (var _ in manager.GetMetricsAsync(filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetMetricDefinition()
        {
            // Example: ManagersListMetricDefinition
            var managerId = StorSimple8000SeriesManagementClient.Manager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1");
            var manager = GetArmClient().GetManager(managerId);

            await foreach (var _ in manager.GetMetricDefinitionAsync())
            {
            }
        }

        [RecordedTest]
        public async Task RegenerateActivationKey()
        {
            // Example: ManagersRegenerateActivationKey
            var managerId = StorSimple8000SeriesManagementClient.Manager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest2");
            var manager = GetArmClient().GetManager(managerId);

            await manager.RegenerateActivationKeyAsync();
        }

        [RecordedTest]
        public async Task GetAlerts()
        {
            // Example: AlertsListByManager
            var managerId = StorSimple8000SeriesManagementClient.Manager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1");
            var manager = GetArmClient().GetManager(managerId);
            string filter = "status eq 'Active' and appearedOnTime ge '2017-06-09T18:30:00Z' and appearedOnTime le '2017-06-19T18:30:00Z' and sourceType eq 'Device' and sourceName eq 'Device05ForSDKTest'";

            await foreach (var _ in manager.GetAlertsAsync(filter))
            {
            }
        }

        [RecordedTest]
        public async Task ClearAlert()
        {
            // Example: AlertsClear
            var managerId = StorSimple8000SeriesManagementClient.Manager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1");
            var manager = GetArmClient().GetManager(managerId);
            StorSimple8000SeriesManagementClient.Models.ClearAlertRequest parameters = new StorSimple8000SeriesManagementClient.Models.ClearAlertRequest(alerts: new List<string>()
{
"/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.StorSimple/managers/ManagerForSDKTest1/devices/Device05ForSDKTest/alerts/308b5bd2-824b-436f-840e-44bde075ef33",});

            await manager.ClearAlertAsync(parameters);
        }

        [RecordedTest]
        public async Task GetSupportedConfigurationsCloudAppliances()
        {
            // Example: CloudAppliancesListSupportedConfigurations
            var managerId = StorSimple8000SeriesManagementClient.Manager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1");
            var manager = GetArmClient().GetManager(managerId);

            await foreach (var _ in manager.GetSupportedConfigurationsCloudAppliancesAsync())
            {
            }
        }

        [RecordedTest]
        public async Task ProvisionCloudAppliance()
        {
            // Example: CloudAppliancesProvision
            var managerId = StorSimple8000SeriesManagementClient.Manager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1");
            var manager = GetArmClient().GetManager(managerId);
            StorSimple8000SeriesManagementClient.Models.CloudAppliance parameters = new StorSimple8000SeriesManagementClient.Models.CloudAppliance(name: "sca07forsdktest", vnetRegion: "West US")
            {
                ModelNumber = "8020",
            };

            await manager.ProvisionCloudApplianceAsync(true, parameters);
        }

        [RecordedTest]
        public async Task ConfigureDevice()
        {
            // Example: DevicesConfigure
            var managerId = StorSimple8000SeriesManagementClient.Manager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1");
            var manager = GetArmClient().GetManager(managerId);
            StorSimple8000SeriesManagementClient.Models.ConfigureDeviceRequest parameters = new StorSimple8000SeriesManagementClient.Models.ConfigureDeviceRequest(friendlyName: "Device001ForSDKTest", currentDeviceName: "Device001ForSDKTest", timeZone: "Pacific Standard Time")
            {
                NetworkInterfaceData0Settings = new StorSimple8000SeriesManagementClient.Models.NetworkInterfaceData0Settings()
                {
                    ControllerZeroIp = "10.168.220.227",
                    ControllerOneIp = "10.168.220.228",
                },
            };

            await manager.ConfigureDeviceAsync(true, parameters);
        }

        [RecordedTest]
        public async Task GetJobs()
        {
            // Example: JobsListByManager
            var managerId = StorSimple8000SeriesManagementClient.Manager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1");
            var manager = GetArmClient().GetManager(managerId);
            string filter = "jobType eq 'FailoverVolumeContainers'";

            await foreach (var _ in manager.GetJobsAsync(filter))
            {
            }
        }

        [RecordedTest]
        public async Task EncryptionSettingsGet()
        {
            // Example: ManagersGetEncryptionSettings
            var encryptionSettingsId = StorSimple8000SeriesManagementClient.EncryptionSettings.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1");
            var encryptionSettings = GetArmClient().GetEncryptionSettings(encryptionSettingsId);

            await encryptionSettings.GetAsync();
        }

        [RecordedTest]
        public async Task ManagerExtendedInfoGet()
        {
            // Example: ManagersGetExtendedInfo
            var managerExtendedInfoId = StorSimple8000SeriesManagementClient.ManagerExtendedInfo.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1");
            var managerExtendedInfo = GetArmClient().GetManagerExtendedInfo(managerExtendedInfoId);

            await managerExtendedInfo.GetAsync();
        }

        [RecordedTest]
        public async Task ManagerExtendedInfoDelete()
        {
            // Example: ManagersDeleteExtendedInfo
            var managerExtendedInfoId = StorSimple8000SeriesManagementClient.ManagerExtendedInfo.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest2");
            var managerExtendedInfo = GetArmClient().GetManagerExtendedInfo(managerExtendedInfoId);

            await managerExtendedInfo.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task ManagerExtendedInfoUpdate()
        {
            // Example: ManagersUpdateExtendedInfo
            var managerExtendedInfoId = StorSimple8000SeriesManagementClient.ManagerExtendedInfo.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest2");
            var managerExtendedInfo = GetArmClient().GetManagerExtendedInfo(managerExtendedInfoId);
            string ifMatch = "674ab9df-af56-4c5c-a5ca-2bddcf1b781a";
            StorSimple8000SeriesManagementClient.ManagerExtendedInfoData parameters = new StorSimple8000SeriesManagementClient.ManagerExtendedInfoData()
            {
                Etag = "674ab9df-af56-4c5c-a5ca-2bddcf1b781a",
                IntegrityKey = "BIl+RHqO8PZ6DRvuXTTK7g==",
                Algorithm = "SHA256",
            };

            await managerExtendedInfo.UpdateAsync(ifMatch, parameters);
        }
    }
}
