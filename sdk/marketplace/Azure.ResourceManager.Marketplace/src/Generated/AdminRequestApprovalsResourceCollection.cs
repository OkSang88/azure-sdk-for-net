// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Marketplace.Models;

namespace Azure.ResourceManager.Marketplace
{
    /// <summary> A class representing collection of AdminRequestApprovalsResource and their operations over its parent. </summary>
    public partial class AdminRequestApprovalsResourceCollection : ArmCollection, IEnumerable<AdminRequestApprovalsResource>, IAsyncEnumerable<AdminRequestApprovalsResource>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly PrivateStoreRestOperations _privateStoreRestClient;

        /// <summary> Initializes a new instance of the <see cref="AdminRequestApprovalsResourceCollection"/> class for mocking. </summary>
        protected AdminRequestApprovalsResourceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="AdminRequestApprovalsResourceCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal AdminRequestApprovalsResourceCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _privateStoreRestClient = new PrivateStoreRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != PrivateStore.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, PrivateStore.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Update the admin action, weather the request is approved or rejected and the approved plans. </summary>
        /// <param name="adminRequestApprovalId"> The admin request approval ID to get create or update. </param>
        /// <param name="payload"> The AdminRequestApprovalsResource to use. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adminRequestApprovalId"/> is null. </exception>
        public virtual PrivateStoreUpdateAdminRequestApprovalOperation CreateOrUpdate(bool waitForCompletion, string adminRequestApprovalId, AdminRequestApprovalsResourceData payload = null, CancellationToken cancellationToken = default)
        {
            if (adminRequestApprovalId == null)
            {
                throw new ArgumentNullException(nameof(adminRequestApprovalId));
            }

            using var scope = _clientDiagnostics.CreateScope("AdminRequestApprovalsResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.UpdateAdminRequestApproval(Id.Name, adminRequestApprovalId, payload, cancellationToken);
                var operation = new PrivateStoreUpdateAdminRequestApprovalOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the admin action, weather the request is approved or rejected and the approved plans. </summary>
        /// <param name="adminRequestApprovalId"> The admin request approval ID to get create or update. </param>
        /// <param name="payload"> The AdminRequestApprovalsResource to use. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adminRequestApprovalId"/> is null. </exception>
        public async virtual Task<PrivateStoreUpdateAdminRequestApprovalOperation> CreateOrUpdateAsync(bool waitForCompletion, string adminRequestApprovalId, AdminRequestApprovalsResourceData payload = null, CancellationToken cancellationToken = default)
        {
            if (adminRequestApprovalId == null)
            {
                throw new ArgumentNullException(nameof(adminRequestApprovalId));
            }

            using var scope = _clientDiagnostics.CreateScope("AdminRequestApprovalsResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.UpdateAdminRequestApprovalAsync(Id.Name, adminRequestApprovalId, payload, cancellationToken).ConfigureAwait(false);
                var operation = new PrivateStoreUpdateAdminRequestApprovalOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get open approval requests. </summary>
        /// <param name="adminRequestApprovalId"> The admin request approval ID to get create or update. </param>
        /// <param name="publisherId"> The publisher id of this offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adminRequestApprovalId"/> or <paramref name="publisherId"/> is null. </exception>
        public virtual Response<AdminRequestApprovalsResource> Get(string adminRequestApprovalId, string publisherId, CancellationToken cancellationToken = default)
        {
            if (adminRequestApprovalId == null)
            {
                throw new ArgumentNullException(nameof(adminRequestApprovalId));
            }
            if (publisherId == null)
            {
                throw new ArgumentNullException(nameof(publisherId));
            }

            using var scope = _clientDiagnostics.CreateScope("AdminRequestApprovalsResourceCollection.Get");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.GetAdminRequestApproval(Id.Name, adminRequestApprovalId, publisherId, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AdminRequestApprovalsResource(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get open approval requests. </summary>
        /// <param name="adminRequestApprovalId"> The admin request approval ID to get create or update. </param>
        /// <param name="publisherId"> The publisher id of this offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adminRequestApprovalId"/> or <paramref name="publisherId"/> is null. </exception>
        public async virtual Task<Response<AdminRequestApprovalsResource>> GetAsync(string adminRequestApprovalId, string publisherId, CancellationToken cancellationToken = default)
        {
            if (adminRequestApprovalId == null)
            {
                throw new ArgumentNullException(nameof(adminRequestApprovalId));
            }
            if (publisherId == null)
            {
                throw new ArgumentNullException(nameof(publisherId));
            }

            using var scope = _clientDiagnostics.CreateScope("AdminRequestApprovalsResourceCollection.Get");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.GetAdminRequestApprovalAsync(Id.Name, adminRequestApprovalId, publisherId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new AdminRequestApprovalsResource(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="adminRequestApprovalId"> The admin request approval ID to get create or update. </param>
        /// <param name="publisherId"> The publisher id of this offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adminRequestApprovalId"/> or <paramref name="publisherId"/> is null. </exception>
        public virtual Response<AdminRequestApprovalsResource> GetIfExists(string adminRequestApprovalId, string publisherId, CancellationToken cancellationToken = default)
        {
            if (adminRequestApprovalId == null)
            {
                throw new ArgumentNullException(nameof(adminRequestApprovalId));
            }
            if (publisherId == null)
            {
                throw new ArgumentNullException(nameof(publisherId));
            }

            using var scope = _clientDiagnostics.CreateScope("AdminRequestApprovalsResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.GetAdminRequestApproval(Id.Name, adminRequestApprovalId, publisherId, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<AdminRequestApprovalsResource>(null, response.GetRawResponse());
                return Response.FromValue(new AdminRequestApprovalsResource(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="adminRequestApprovalId"> The admin request approval ID to get create or update. </param>
        /// <param name="publisherId"> The publisher id of this offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adminRequestApprovalId"/> or <paramref name="publisherId"/> is null. </exception>
        public async virtual Task<Response<AdminRequestApprovalsResource>> GetIfExistsAsync(string adminRequestApprovalId, string publisherId, CancellationToken cancellationToken = default)
        {
            if (adminRequestApprovalId == null)
            {
                throw new ArgumentNullException(nameof(adminRequestApprovalId));
            }
            if (publisherId == null)
            {
                throw new ArgumentNullException(nameof(publisherId));
            }

            using var scope = _clientDiagnostics.CreateScope("AdminRequestApprovalsResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.GetAdminRequestApprovalAsync(Id.Name, adminRequestApprovalId, publisherId, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<AdminRequestApprovalsResource>(null, response.GetRawResponse());
                return Response.FromValue(new AdminRequestApprovalsResource(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="adminRequestApprovalId"> The admin request approval ID to get create or update. </param>
        /// <param name="publisherId"> The publisher id of this offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adminRequestApprovalId"/> or <paramref name="publisherId"/> is null. </exception>
        public virtual Response<bool> Exists(string adminRequestApprovalId, string publisherId, CancellationToken cancellationToken = default)
        {
            if (adminRequestApprovalId == null)
            {
                throw new ArgumentNullException(nameof(adminRequestApprovalId));
            }
            if (publisherId == null)
            {
                throw new ArgumentNullException(nameof(publisherId));
            }

            using var scope = _clientDiagnostics.CreateScope("AdminRequestApprovalsResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(adminRequestApprovalId, publisherId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="adminRequestApprovalId"> The admin request approval ID to get create or update. </param>
        /// <param name="publisherId"> The publisher id of this offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adminRequestApprovalId"/> or <paramref name="publisherId"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string adminRequestApprovalId, string publisherId, CancellationToken cancellationToken = default)
        {
            if (adminRequestApprovalId == null)
            {
                throw new ArgumentNullException(nameof(adminRequestApprovalId));
            }
            if (publisherId == null)
            {
                throw new ArgumentNullException(nameof(publisherId));
            }

            using var scope = _clientDiagnostics.CreateScope("AdminRequestApprovalsResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(adminRequestApprovalId, publisherId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of admin request approvals. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AdminRequestApprovalsResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AdminRequestApprovalsResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<AdminRequestApprovalsResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AdminRequestApprovalsResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _privateStoreRestClient.AdminRequestApprovalsList(Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AdminRequestApprovalsResource(Parent, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Get list of admin request approvals. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AdminRequestApprovalsResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AdminRequestApprovalsResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AdminRequestApprovalsResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AdminRequestApprovalsResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _privateStoreRestClient.AdminRequestApprovalsListAsync(Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AdminRequestApprovalsResource(Parent, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        IEnumerator<AdminRequestApprovalsResource> IEnumerable<AdminRequestApprovalsResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<AdminRequestApprovalsResource> IAsyncEnumerable<AdminRequestApprovalsResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, AdminRequestApprovalsResource, AdminRequestApprovalsResourceData> Construct() { }
    }
}
