// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;
using Insights.Models;

namespace Insights.Tests.Mock
{
    /// <summary> Test for MetricAlertResource. </summary>
    public partial class MetricAlertResourceMockTests : MockTestBase
    {
        public MetricAlertResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get a dynamic alert rule for multiple resources
            var metricAlertResource = GetArmClient().GetMetricAlertResource(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Insights/metricAlerts/MetricAlertOnMultipleResources"));

            await metricAlertResource.GetAsync();
        }

        [RecordedTest]
        public async Task GetAsync2()
        {
            // Example: Get a dynamic alert rule for single resource
            var metricAlertResource = GetArmClient().GetMetricAlertResource(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Insights/metricAlerts/chiricutin"));

            await metricAlertResource.GetAsync();
        }

        [RecordedTest]
        public async Task GetAsync3()
        {
            // Example: Get a web test alert rule
            var metricAlertResource = GetArmClient().GetMetricAlertResource(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-example/providers/Microsoft.Insights/metricAlerts/webtest-name-example"));

            await metricAlertResource.GetAsync();
        }

        [RecordedTest]
        public async Task GetAsync4()
        {
            // Example: Get an alert rule for multiple resources
            var metricAlertResource = GetArmClient().GetMetricAlertResource(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Insights/metricAlerts/MetricAlertOnMultipleResources"));

            await metricAlertResource.GetAsync();
        }

        [RecordedTest]
        public async Task GetAsync5()
        {
            // Example: Get an alert rule for single resource
            var metricAlertResource = GetArmClient().GetMetricAlertResource(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Insights/metricAlerts/chiricutin"));

            await metricAlertResource.GetAsync();
        }

        [RecordedTest]
        public async Task GetAsync6()
        {
            // Example: Get an alert rule on resource group(s)
            var metricAlertResource = GetArmClient().GetMetricAlertResource(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest1/providers/Microsoft.Insights/metricAlerts/MetricAlertAtResourceGroupLevel"));

            await metricAlertResource.GetAsync();
        }

        [RecordedTest]
        public async Task GetAsync7()
        {
            // Example: Get an alert rule on subscription
            var metricAlertResource = GetArmClient().GetMetricAlertResource(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Insights/metricAlerts/MetricAlertAtSubscriptionLevel"));

            await metricAlertResource.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: Delete an alert rule
            var metricAlertResource = GetArmClient().GetMetricAlertResource(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Insights/metricAlerts/chiricutin"));

            await metricAlertResource.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: Create or update an alert rule
            var metricAlertResource = GetArmClient().GetMetricAlertResource(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Insights/metricAlerts/chiricutin"));
            Insights.Models.MetricAlertResourcePatch parameters = new Insights.Models.MetricAlertResourcePatch()
            {
                Description = "This is the description of the rule1",
                Severity = 3,
                Enabled = true,
                EvaluationFrequency = TimeSpan.Parse("Pt1m"),
                WindowSize = TimeSpan.Parse("Pt15m"),
                Criteria = new Insights.Models.MetricAlertSingleResourceMultipleMetricCriteria()
                {
                    OdataType = new Insights.Models.Odatatype("Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"),
                },
                AutoMitigate = false,
            };

            await metricAlertResource.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task GetMetricAlertsStatusesAsync()
        {
            // Example: Get an alert rule status
            var metricAlertResource = GetArmClient().GetMetricAlertResource(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Insights/metricAlerts/chiricutin"));

            await metricAlertResource.GetMetricAlertsStatusesAsync();
        }

        [RecordedTest]
        public async Task GetMetricAlertsStatusesByNameAsync()
        {
            // Example: Get an alert rule status
            var metricAlertResource = GetArmClient().GetMetricAlertResource(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/EastUs/providers/Microsoft.Insights/metricAlerts/custom1"));
            string statusName = "cmVzb3VyY2VJZD0vc3Vic2NyaXB0aW9ucy8xNGRkZjBjNS03N2M1LTRiNTMtODRmNi1lMWZhNDNhZDY4ZjcvcmVzb3VyY2VHcm91cHMvZ2lndGVzdC9wcm92aWRlcnMvTWljcm9zb2Z0LkNvbXB1dGUvdmlydHVhbE1hY2hpbmVzL2dpZ3dhZG1l";

            await metricAlertResource.GetMetricAlertsStatusesByNameAsync(statusName);
        }
    }
}
