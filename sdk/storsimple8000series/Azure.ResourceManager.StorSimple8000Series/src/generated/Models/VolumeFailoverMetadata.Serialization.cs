// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace StorSimple8000SeriesManagementClient.Models
{
    public partial class VolumeFailoverMetadata
    {
        internal static VolumeFailoverMetadata DeserializeVolumeFailoverMetadata(JsonElement element)
        {
            Optional<string> volumeId = default;
            Optional<VolumeType> volumeType = default;
            Optional<long> sizeInBytes = default;
            Optional<DateTimeOffset> backupCreatedDate = default;
            Optional<string> backupElementId = default;
            Optional<string> backupId = default;
            Optional<string> backupPolicyId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("volumeId"))
                {
                    volumeId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("volumeType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    volumeType = property.Value.GetString().ToVolumeType();
                    continue;
                }
                if (property.NameEquals("sizeInBytes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    sizeInBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("backupCreatedDate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    backupCreatedDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("backupElementId"))
                {
                    backupElementId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("backupId"))
                {
                    backupId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("backupPolicyId"))
                {
                    backupPolicyId = property.Value.GetString();
                    continue;
                }
            }
            return new VolumeFailoverMetadata(volumeId.Value, Optional.ToNullable(volumeType), Optional.ToNullable(sizeInBytes), Optional.ToNullable(backupCreatedDate), backupElementId.Value, backupId.Value, backupPolicyId.Value);
        }
    }
}
