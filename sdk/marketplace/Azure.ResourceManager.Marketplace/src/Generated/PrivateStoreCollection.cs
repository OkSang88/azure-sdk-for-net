// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Marketplace.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Marketplace
{
    /// <summary> A class representing collection of PrivateStore and their operations over its parent. </summary>
    public partial class PrivateStoreCollection : ArmCollection, IEnumerable<PrivateStore>, IAsyncEnumerable<PrivateStore>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly PrivateStoreRestOperations _privateStoreRestClient;

        /// <summary> Initializes a new instance of the <see cref="PrivateStoreCollection"/> class for mocking. </summary>
        protected PrivateStoreCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="PrivateStoreCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal PrivateStoreCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            ClientOptions.TryGetApiVersion(PrivateStore.ResourceType, out string apiVersion);
            _privateStoreRestClient = new PrivateStoreRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != Tenant.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, Tenant.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Changes private store properties. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="payload"> The PrivateStore to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public virtual PrivateStoreCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string privateStoreId, PrivateStoreData payload = null, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var scope = _clientDiagnostics.CreateScope("PrivateStoreCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.CreateOrUpdate(privateStoreId, payload, cancellationToken);
                var operation = new PrivateStoreCreateOrUpdateOperation(response);
                if (waitForCompletion)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Changes private store properties. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="payload"> The PrivateStore to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public async virtual Task<PrivateStoreCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string privateStoreId, PrivateStoreData payload = null, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var scope = _clientDiagnostics.CreateScope("PrivateStoreCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.CreateOrUpdateAsync(privateStoreId, payload, cancellationToken).ConfigureAwait(false);
                var operation = new PrivateStoreCreateOrUpdateOperation(response);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get information about the private store. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public virtual Response<PrivateStore> Get(string privateStoreId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var scope = _clientDiagnostics.CreateScope("PrivateStoreCollection.Get");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.Get(privateStoreId, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PrivateStore(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get information about the private store. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public async virtual Task<Response<PrivateStore>> GetAsync(string privateStoreId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var scope = _clientDiagnostics.CreateScope("PrivateStoreCollection.Get");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.GetAsync(privateStoreId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new PrivateStore(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public virtual Response<PrivateStore> GetIfExists(string privateStoreId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var scope = _clientDiagnostics.CreateScope("PrivateStoreCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.Get(privateStoreId, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<PrivateStore>(null, response.GetRawResponse());
                return Response.FromValue(new PrivateStore(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public async virtual Task<Response<PrivateStore>> GetIfExistsAsync(string privateStoreId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var scope = _clientDiagnostics.CreateScope("PrivateStoreCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.GetAsync(privateStoreId, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<PrivateStore>(null, response.GetRawResponse());
                return Response.FromValue(new PrivateStore(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public virtual Response<bool> Exists(string privateStoreId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var scope = _clientDiagnostics.CreateScope("PrivateStoreCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(privateStoreId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string privateStoreId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var scope = _clientDiagnostics.CreateScope("PrivateStoreCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(privateStoreId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the list of available private stores. </summary>
        /// <param name="useCache"> Determines if to use cache or DB for serving this request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PrivateStore" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PrivateStore> GetAll(string useCache = null, CancellationToken cancellationToken = default)
        {
            Page<PrivateStore> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PrivateStoreCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _privateStoreRestClient.List(useCache, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PrivateStore(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PrivateStore> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PrivateStoreCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _privateStoreRestClient.ListNextPage(nextLink, useCache, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PrivateStore(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets the list of available private stores. </summary>
        /// <param name="useCache"> Determines if to use cache or DB for serving this request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PrivateStore" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PrivateStore> GetAllAsync(string useCache = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<PrivateStore>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PrivateStoreCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _privateStoreRestClient.ListAsync(useCache, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PrivateStore(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PrivateStore>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PrivateStoreCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _privateStoreRestClient.ListNextPageAsync(nextLink, useCache, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PrivateStore(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<PrivateStore> IEnumerable<PrivateStore>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<PrivateStore> IAsyncEnumerable<PrivateStore>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, PrivateStore, PrivateStoreData> Construct() { }
    }
}
