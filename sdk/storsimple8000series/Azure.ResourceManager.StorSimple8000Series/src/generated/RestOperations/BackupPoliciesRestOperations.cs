// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using StorSimple8000SeriesManagementClient.Models;

namespace StorSimple8000SeriesManagementClient
{
    internal partial class BackupPoliciesRestOperations
    {
        private Uri endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;
        private readonly string _userAgent;

        /// <summary> Initializes a new instance of BackupPoliciesRestOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="options"> The client options used to construct the current client. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public BackupPoliciesRestOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, ClientOptions options, Uri endpoint = null, string apiVersion = "2017-06-01")
        {
            this.endpoint = endpoint ?? new Uri("https://management.azure.com");
            this.apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _userAgent = HttpMessageUtilities.GetUserAgentName(this, options);
        }

        internal HttpMessage CreateListByDeviceRequest(string subscriptionId, string resourceGroupName, string managerName, string deviceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, false);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, false);
            uri.AppendPath("/providers/Microsoft.StorSimple/managers/", false);
            uri.AppendPath(managerName, false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceName, false);
            uri.AppendPath("/backupPolicies", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Gets all the backup policies in a device. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, or <paramref name="deviceName"/> is null. </exception>
        public async Task<Response<BackupPolicyList>> ListByDeviceAsync(string subscriptionId, string resourceGroupName, string managerName, string deviceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }

            using var message = CreateListByDeviceRequest(subscriptionId, resourceGroupName, managerName, deviceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        BackupPolicyList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = BackupPolicyList.DeserializeBackupPolicyList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets all the backup policies in a device. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, or <paramref name="deviceName"/> is null. </exception>
        public Response<BackupPolicyList> ListByDevice(string subscriptionId, string resourceGroupName, string managerName, string deviceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }

            using var message = CreateListByDeviceRequest(subscriptionId, resourceGroupName, managerName, deviceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        BackupPolicyList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = BackupPolicyList.DeserializeBackupPolicyList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string managerName, string deviceName, string backupPolicyName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, false);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, false);
            uri.AppendPath("/providers/Microsoft.StorSimple/managers/", false);
            uri.AppendPath(managerName, false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceName, false);
            uri.AppendPath("/backupPolicies/", false);
            uri.AppendPath(backupPolicyName, false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Gets the properties of the specified backup policy name. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="backupPolicyName"> The name of backup policy to be fetched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, <paramref name="deviceName"/>, or <paramref name="backupPolicyName"/> is null. </exception>
        public async Task<Response<BackupPolicyData>> GetAsync(string subscriptionId, string resourceGroupName, string managerName, string deviceName, string backupPolicyName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }
            if (backupPolicyName == null)
            {
                throw new ArgumentNullException(nameof(backupPolicyName));
            }

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, managerName, deviceName, backupPolicyName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        BackupPolicyData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = BackupPolicyData.DeserializeBackupPolicyData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((BackupPolicyData)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the properties of the specified backup policy name. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="backupPolicyName"> The name of backup policy to be fetched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, <paramref name="deviceName"/>, or <paramref name="backupPolicyName"/> is null. </exception>
        public Response<BackupPolicyData> Get(string subscriptionId, string resourceGroupName, string managerName, string deviceName, string backupPolicyName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }
            if (backupPolicyName == null)
            {
                throw new ArgumentNullException(nameof(backupPolicyName));
            }

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, managerName, deviceName, backupPolicyName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        BackupPolicyData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = BackupPolicyData.DeserializeBackupPolicyData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((BackupPolicyData)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string subscriptionId, string resourceGroupName, string managerName, string deviceName, string backupPolicyName, BackupPolicyData parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, false);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, false);
            uri.AppendPath("/providers/Microsoft.StorSimple/managers/", false);
            uri.AppendPath(managerName, false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceName, false);
            uri.AppendPath("/backupPolicies/", false);
            uri.AppendPath(backupPolicyName, false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Creates or updates the backup policy. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="backupPolicyName"> The name of the backup policy to be created/updated. </param>
        /// <param name="parameters"> The backup policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, <paramref name="deviceName"/>, <paramref name="backupPolicyName"/>, or <paramref name="parameters"/> is null. </exception>
        public async Task<Response> CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string managerName, string deviceName, string backupPolicyName, BackupPolicyData parameters, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }
            if (backupPolicyName == null)
            {
                throw new ArgumentNullException(nameof(backupPolicyName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, managerName, deviceName, backupPolicyName, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates or updates the backup policy. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="backupPolicyName"> The name of the backup policy to be created/updated. </param>
        /// <param name="parameters"> The backup policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, <paramref name="deviceName"/>, <paramref name="backupPolicyName"/>, or <paramref name="parameters"/> is null. </exception>
        public Response CreateOrUpdate(string subscriptionId, string resourceGroupName, string managerName, string deviceName, string backupPolicyName, BackupPolicyData parameters, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }
            if (backupPolicyName == null)
            {
                throw new ArgumentNullException(nameof(backupPolicyName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, managerName, deviceName, backupPolicyName, parameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRequest(string subscriptionId, string resourceGroupName, string managerName, string deviceName, string backupPolicyName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, false);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, false);
            uri.AppendPath("/providers/Microsoft.StorSimple/managers/", false);
            uri.AppendPath(managerName, false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceName, false);
            uri.AppendPath("/backupPolicies/", false);
            uri.AppendPath(backupPolicyName, false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Deletes the backup policy. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="backupPolicyName"> The name of the backup policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, <paramref name="deviceName"/>, or <paramref name="backupPolicyName"/> is null. </exception>
        public async Task<Response> DeleteAsync(string subscriptionId, string resourceGroupName, string managerName, string deviceName, string backupPolicyName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }
            if (backupPolicyName == null)
            {
                throw new ArgumentNullException(nameof(backupPolicyName));
            }

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, managerName, deviceName, backupPolicyName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes the backup policy. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="backupPolicyName"> The name of the backup policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, <paramref name="deviceName"/>, or <paramref name="backupPolicyName"/> is null. </exception>
        public Response Delete(string subscriptionId, string resourceGroupName, string managerName, string deviceName, string backupPolicyName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }
            if (backupPolicyName == null)
            {
                throw new ArgumentNullException(nameof(backupPolicyName));
            }

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, managerName, deviceName, backupPolicyName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateBackupNowRequest(string subscriptionId, string resourceGroupName, string managerName, string deviceName, string backupPolicyName, string backupType)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, false);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, false);
            uri.AppendPath("/providers/Microsoft.StorSimple/managers/", false);
            uri.AppendPath(managerName, false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceName, false);
            uri.AppendPath("/backupPolicies/", false);
            uri.AppendPath(backupPolicyName, false);
            uri.AppendPath("/backup", false);
            uri.AppendQuery("backupType", backupType, false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Backup the backup policy now. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="backupPolicyName"> The backup policy name. </param>
        /// <param name="backupType"> The backup Type. This can be cloudSnapshot or localSnapshot. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, <paramref name="deviceName"/>, <paramref name="backupPolicyName"/>, or <paramref name="backupType"/> is null. </exception>
        public async Task<Response> BackupNowAsync(string subscriptionId, string resourceGroupName, string managerName, string deviceName, string backupPolicyName, string backupType, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }
            if (backupPolicyName == null)
            {
                throw new ArgumentNullException(nameof(backupPolicyName));
            }
            if (backupType == null)
            {
                throw new ArgumentNullException(nameof(backupType));
            }

            using var message = CreateBackupNowRequest(subscriptionId, resourceGroupName, managerName, deviceName, backupPolicyName, backupType);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Backup the backup policy now. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="backupPolicyName"> The backup policy name. </param>
        /// <param name="backupType"> The backup Type. This can be cloudSnapshot or localSnapshot. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, <paramref name="deviceName"/>, <paramref name="backupPolicyName"/>, or <paramref name="backupType"/> is null. </exception>
        public Response BackupNow(string subscriptionId, string resourceGroupName, string managerName, string deviceName, string backupPolicyName, string backupType, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }
            if (backupPolicyName == null)
            {
                throw new ArgumentNullException(nameof(backupPolicyName));
            }
            if (backupType == null)
            {
                throw new ArgumentNullException(nameof(backupType));
            }

            using var message = CreateBackupNowRequest(subscriptionId, resourceGroupName, managerName, deviceName, backupPolicyName, backupType);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
