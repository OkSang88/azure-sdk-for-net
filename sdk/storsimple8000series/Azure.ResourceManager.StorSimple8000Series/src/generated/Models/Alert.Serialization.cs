// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace StorSimple8000SeriesManagementClient.Models
{
    public partial class Alert : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind");
                writer.WriteStringValue(Kind);
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            writer.WritePropertyName("title");
            writer.WriteStringValue(Title);
            writer.WritePropertyName("scope");
            writer.WriteStringValue(Scope.ToSerialString());
            writer.WritePropertyName("alertType");
            writer.WriteStringValue(AlertType);
            writer.WritePropertyName("appearedAtTime");
            writer.WriteStringValue(AppearedAtTime, "O");
            writer.WritePropertyName("appearedAtSourceTime");
            writer.WriteStringValue(AppearedAtSourceTime, "O");
            if (Optional.IsDefined(ClearedAtTime))
            {
                writer.WritePropertyName("clearedAtTime");
                writer.WriteStringValue(ClearedAtTime.Value, "O");
            }
            if (Optional.IsDefined(ClearedAtSourceTime))
            {
                writer.WritePropertyName("clearedAtSourceTime");
                writer.WriteStringValue(ClearedAtSourceTime.Value, "O");
            }
            writer.WritePropertyName("source");
            writer.WriteObjectValue(Source);
            if (Optional.IsDefined(Recommendation))
            {
                writer.WritePropertyName("recommendation");
                writer.WriteStringValue(Recommendation);
            }
            if (Optional.IsDefined(ResolutionReason))
            {
                writer.WritePropertyName("resolutionReason");
                writer.WriteStringValue(ResolutionReason);
            }
            writer.WritePropertyName("severity");
            writer.WriteStringValue(Severity.ToSerialString());
            writer.WritePropertyName("status");
            writer.WriteStringValue(Status.ToSerialString());
            if (Optional.IsDefined(ErrorDetails))
            {
                writer.WritePropertyName("errorDetails");
                writer.WriteObjectValue(ErrorDetails);
            }
            if (Optional.IsCollectionDefined(DetailedInformation))
            {
                writer.WritePropertyName("detailedInformation");
                writer.WriteStartObject();
                foreach (var item in DetailedInformation)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static Alert DeserializeAlert(JsonElement element)
        {
            Optional<string> kind = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            string title = default;
            AlertScope scope = default;
            string alertType = default;
            DateTimeOffset appearedAtTime = default;
            DateTimeOffset appearedAtSourceTime = default;
            Optional<DateTimeOffset> clearedAtTime = default;
            Optional<DateTimeOffset> clearedAtSourceTime = default;
            AlertSource source = default;
            Optional<string> recommendation = default;
            Optional<string> resolutionReason = default;
            AlertSeverity severity = default;
            AlertStatus status = default;
            Optional<AlertErrorDetails> errorDetails = default;
            Optional<IDictionary<string, string>> detailedInformation = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("title"))
                        {
                            title = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("scope"))
                        {
                            scope = property0.Value.GetString().ToAlertScope();
                            continue;
                        }
                        if (property0.NameEquals("alertType"))
                        {
                            alertType = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("appearedAtTime"))
                        {
                            appearedAtTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("appearedAtSourceTime"))
                        {
                            appearedAtSourceTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("clearedAtTime"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            clearedAtTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("clearedAtSourceTime"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            clearedAtSourceTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("source"))
                        {
                            source = AlertSource.DeserializeAlertSource(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("recommendation"))
                        {
                            recommendation = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("resolutionReason"))
                        {
                            resolutionReason = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("severity"))
                        {
                            severity = property0.Value.GetString().ToAlertSeverity();
                            continue;
                        }
                        if (property0.NameEquals("status"))
                        {
                            status = property0.Value.GetString().ToAlertStatus();
                            continue;
                        }
                        if (property0.NameEquals("errorDetails"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            errorDetails = AlertErrorDetails.DeserializeAlertErrorDetails(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("detailedInformation"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            Dictionary<string, string> dictionary = new Dictionary<string, string>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetString());
                            }
                            detailedInformation = dictionary;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new Alert(id, name, type, kind.Value, title, scope, alertType, appearedAtTime, appearedAtSourceTime, Optional.ToNullable(clearedAtTime), Optional.ToNullable(clearedAtSourceTime), source, recommendation.Value, resolutionReason.Value, severity, status, errorDetails.Value, Optional.ToDictionary(detailedInformation));
        }
    }
}
