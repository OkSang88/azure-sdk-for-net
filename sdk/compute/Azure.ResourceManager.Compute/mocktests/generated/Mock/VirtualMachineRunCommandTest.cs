// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for VirtualMachineRunCommand. </summary>
    public partial class VirtualMachineRunCommandMockTests : MockTestBase
    {
        public VirtualMachineRunCommandMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get a run command.
            var virtualMachineRunCommandId = Compute.VirtualMachineRunCommand.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myVM", "myRunCommand");
            var virtualMachineRunCommand = GetArmClient().GetVirtualMachineRunCommand(virtualMachineRunCommandId);
            string expand = null;

            await virtualMachineRunCommand.GetAsync(expand);
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete a run command.
            var virtualMachineRunCommandId = Compute.VirtualMachineRunCommand.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myVM", "myRunCommand");
            var virtualMachineRunCommand = GetArmClient().GetVirtualMachineRunCommand(virtualMachineRunCommandId);

            await virtualMachineRunCommand.DeleteAsync();
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Update a run command.
            var virtualMachineRunCommandId = Compute.VirtualMachineRunCommand.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myVM", "myRunCommand");
            var virtualMachineRunCommand = GetArmClient().GetVirtualMachineRunCommand(virtualMachineRunCommandId);
            Compute.Models.VirtualMachineRunCommandUpdate runCommand = new Compute.Models.VirtualMachineRunCommandUpdate()
            {
                Source = new Compute.Models.VirtualMachineRunCommandScriptSource()
                {
                    Script = "Write-Host Script Source Updated!",
                },
            };

            await virtualMachineRunCommand.UpdateAsync(runCommand);
        }
    }
}
