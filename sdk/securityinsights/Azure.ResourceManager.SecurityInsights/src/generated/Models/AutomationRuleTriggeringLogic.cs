// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace SecurityInsights.Models
{
    /// <summary> Describes automation rule triggering logic. </summary>
    public partial class AutomationRuleTriggeringLogic
    {
        /// <summary> Initializes a new instance of AutomationRuleTriggeringLogic. </summary>
        /// <param name="isEnabled"> Determines whether the automation rule is enabled or disabled. </param>
        /// <param name="triggersOn"> The type of object the automation rule triggers on. </param>
        /// <param name="triggersWhen"> The type of event the automation rule triggers on. </param>
        public AutomationRuleTriggeringLogic(bool isEnabled, TriggersOn triggersOn, TriggersWhen triggersWhen)
        {
            IsEnabled = isEnabled;
            TriggersOn = triggersOn;
            TriggersWhen = triggersWhen;
            Conditions = new ChangeTrackingList<AutomationRuleCondition>();
        }

        /// <summary> Initializes a new instance of AutomationRuleTriggeringLogic. </summary>
        /// <param name="isEnabled"> Determines whether the automation rule is enabled or disabled. </param>
        /// <param name="expirationTimeUtc"> Determines when the automation rule should automatically expire and be disabled. </param>
        /// <param name="triggersOn"> The type of object the automation rule triggers on. </param>
        /// <param name="triggersWhen"> The type of event the automation rule triggers on. </param>
        /// <param name="conditions"> The conditions to evaluate to determine if the automation rule should be triggered on a given object. </param>
        internal AutomationRuleTriggeringLogic(bool isEnabled, DateTimeOffset? expirationTimeUtc, TriggersOn triggersOn, TriggersWhen triggersWhen, IList<AutomationRuleCondition> conditions)
        {
            IsEnabled = isEnabled;
            ExpirationTimeUtc = expirationTimeUtc;
            TriggersOn = triggersOn;
            TriggersWhen = triggersWhen;
            Conditions = conditions;
        }

        /// <summary> Determines whether the automation rule is enabled or disabled. </summary>
        public bool IsEnabled { get; set; }
        /// <summary> Determines when the automation rule should automatically expire and be disabled. </summary>
        public DateTimeOffset? ExpirationTimeUtc { get; set; }
        /// <summary> The type of object the automation rule triggers on. </summary>
        public TriggersOn TriggersOn { get; set; }
        /// <summary> The type of event the automation rule triggers on. </summary>
        public TriggersWhen TriggersWhen { get; set; }
        /// <summary> The conditions to evaluate to determine if the automation rule should be triggered on a given object. </summary>
        public IList<AutomationRuleCondition> Conditions { get; }
    }
}
