// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.IotHub.Models;

namespace Azure.ResourceManager.IotHub
{
    /// <summary> A class representing collection of EventHubConsumerGroupInfo and their operations over its parent. </summary>
    public partial class EventHubConsumerGroupInfoCollection : ArmCollection, IEnumerable<EventHubConsumerGroupInfo>, IAsyncEnumerable<EventHubConsumerGroupInfo>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly IotHubResourceRestOperations _iotHubResourceRestClient;
        private readonly string _eventHubEndpointName;

        /// <summary> Initializes a new instance of the <see cref="EventHubConsumerGroupInfoCollection"/> class for mocking. </summary>
        protected EventHubConsumerGroupInfoCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EventHubConsumerGroupInfoCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        /// <param name="eventHubEndpointName"> The name of the Event Hub-compatible endpoint. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="eventHubEndpointName"/> is null. </exception>
        internal EventHubConsumerGroupInfoCollection(ArmResource parent, string eventHubEndpointName) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            ClientOptions.TryGetApiVersion(EventHubConsumerGroupInfo.ResourceType, out string apiVersion);
            _iotHubResourceRestClient = new IotHubResourceRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _eventHubEndpointName = eventHubEndpointName;
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != IotHubDescription.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, IotHubDescription.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Add a consumer group to an Event Hub-compatible endpoint in an IoT hub. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="name"> The name of the consumer group to add. </param>
        /// <param name="consumerGroupBody"> The consumer group to add. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="consumerGroupBody"/> is null. </exception>
        public virtual EventHubConsumerGroupInfoCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string name, EventHubConsumerGroupBodyDescription consumerGroupBody, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (consumerGroupBody == null)
            {
                throw new ArgumentNullException(nameof(consumerGroupBody));
            }

            using var scope = _clientDiagnostics.CreateScope("EventHubConsumerGroupInfoCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _iotHubResourceRestClient.CreateEventHubConsumerGroup(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _eventHubEndpointName, name, consumerGroupBody, cancellationToken);
                var operation = new EventHubConsumerGroupInfoCreateOrUpdateOperation(this, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add a consumer group to an Event Hub-compatible endpoint in an IoT hub. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="name"> The name of the consumer group to add. </param>
        /// <param name="consumerGroupBody"> The consumer group to add. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="consumerGroupBody"/> is null. </exception>
        public async virtual Task<EventHubConsumerGroupInfoCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string name, EventHubConsumerGroupBodyDescription consumerGroupBody, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (consumerGroupBody == null)
            {
                throw new ArgumentNullException(nameof(consumerGroupBody));
            }

            using var scope = _clientDiagnostics.CreateScope("EventHubConsumerGroupInfoCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _iotHubResourceRestClient.CreateEventHubConsumerGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _eventHubEndpointName, name, consumerGroupBody, cancellationToken).ConfigureAwait(false);
                var operation = new EventHubConsumerGroupInfoCreateOrUpdateOperation(this, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a consumer group from the Event Hub-compatible device-to-cloud endpoint for an IoT hub. </summary>
        /// <param name="name"> The name of the consumer group to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public virtual Response<EventHubConsumerGroupInfo> Get(string name, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            using var scope = _clientDiagnostics.CreateScope("EventHubConsumerGroupInfoCollection.Get");
            scope.Start();
            try
            {
                var response = _iotHubResourceRestClient.GetEventHubConsumerGroup(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _eventHubEndpointName, name, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EventHubConsumerGroupInfo(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a consumer group from the Event Hub-compatible device-to-cloud endpoint for an IoT hub. </summary>
        /// <param name="name"> The name of the consumer group to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public async virtual Task<Response<EventHubConsumerGroupInfo>> GetAsync(string name, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            using var scope = _clientDiagnostics.CreateScope("EventHubConsumerGroupInfoCollection.Get");
            scope.Start();
            try
            {
                var response = await _iotHubResourceRestClient.GetEventHubConsumerGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _eventHubEndpointName, name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new EventHubConsumerGroupInfo(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="name"> The name of the consumer group to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public virtual Response<EventHubConsumerGroupInfo> GetIfExists(string name, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            using var scope = _clientDiagnostics.CreateScope("EventHubConsumerGroupInfoCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _iotHubResourceRestClient.GetEventHubConsumerGroup(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _eventHubEndpointName, name, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<EventHubConsumerGroupInfo>(null, response.GetRawResponse());
                return Response.FromValue(new EventHubConsumerGroupInfo(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="name"> The name of the consumer group to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public async virtual Task<Response<EventHubConsumerGroupInfo>> GetIfExistsAsync(string name, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            using var scope = _clientDiagnostics.CreateScope("EventHubConsumerGroupInfoCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _iotHubResourceRestClient.GetEventHubConsumerGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _eventHubEndpointName, name, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<EventHubConsumerGroupInfo>(null, response.GetRawResponse());
                return Response.FromValue(new EventHubConsumerGroupInfo(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="name"> The name of the consumer group to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public virtual Response<bool> Exists(string name, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            using var scope = _clientDiagnostics.CreateScope("EventHubConsumerGroupInfoCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(name, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="name"> The name of the consumer group to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string name, CancellationToken cancellationToken = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            using var scope = _clientDiagnostics.CreateScope("EventHubConsumerGroupInfoCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(name, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EventHubConsumerGroupInfo" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EventHubConsumerGroupInfo> GetAll(CancellationToken cancellationToken = default)
        {
            Page<EventHubConsumerGroupInfo> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EventHubConsumerGroupInfoCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _iotHubResourceRestClient.ListEventHubConsumerGroups(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _eventHubEndpointName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new EventHubConsumerGroupInfo(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<EventHubConsumerGroupInfo> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EventHubConsumerGroupInfoCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _iotHubResourceRestClient.ListEventHubConsumerGroupsNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _eventHubEndpointName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new EventHubConsumerGroupInfo(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EventHubConsumerGroupInfo" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EventHubConsumerGroupInfo> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<EventHubConsumerGroupInfo>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EventHubConsumerGroupInfoCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _iotHubResourceRestClient.ListEventHubConsumerGroupsAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _eventHubEndpointName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new EventHubConsumerGroupInfo(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<EventHubConsumerGroupInfo>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EventHubConsumerGroupInfoCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _iotHubResourceRestClient.ListEventHubConsumerGroupsNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _eventHubEndpointName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new EventHubConsumerGroupInfo(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<EventHubConsumerGroupInfo> IEnumerable<EventHubConsumerGroupInfo>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EventHubConsumerGroupInfo> IAsyncEnumerable<EventHubConsumerGroupInfo>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, EventHubConsumerGroupInfo, EventHubConsumerGroupInfoData> Construct() { }
    }
}
