// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.RecoveryServicesSiteRecovery.Models;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery
{
    public partial class Sample_RecoveryPlanResource
    {
        // Gets the requested recovery plan.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetsTheRequestedRecoveryPlan()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationRecoveryPlans_Get.json
            // this example is just showing the usage of "ReplicationRecoveryPlans_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this RecoveryPlanResource created on azure
            // for more information of creating RecoveryPlanResource, please refer to the document of RecoveryPlanResource
            string subscriptionId = "c183865e-6077-46f2-a3b1-deb0f4f4650a";
            string resourceGroupName = "resourceGroupPS1";
            string resourceName = "vault1";
            string recoveryPlanName = "RPtest1";
            ResourceIdentifier recoveryPlanResourceId = RecoveryPlanResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, recoveryPlanName);
            RecoveryPlanResource recoveryPlan = client.GetRecoveryPlanResource(recoveryPlanResourceId);

            // invoke the operation
            RecoveryPlanResource result = await recoveryPlan.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RecoveryPlanData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Deletes the specified recovery plan.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeletesTheSpecifiedRecoveryPlan()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationRecoveryPlans_Delete.json
            // this example is just showing the usage of "ReplicationRecoveryPlans_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this RecoveryPlanResource created on azure
            // for more information of creating RecoveryPlanResource, please refer to the document of RecoveryPlanResource
            string subscriptionId = "c183865e-6077-46f2-a3b1-deb0f4f4650a";
            string resourceGroupName = "resourceGroupPS1";
            string resourceName = "vault1";
            string recoveryPlanName = "RPtest1";
            ResourceIdentifier recoveryPlanResourceId = RecoveryPlanResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, recoveryPlanName);
            RecoveryPlanResource recoveryPlan = client.GetRecoveryPlanResource(recoveryPlanResourceId);

            // invoke the operation
            await recoveryPlan.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Updates the given recovery plan.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_UpdatesTheGivenRecoveryPlan()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationRecoveryPlans_Update.json
            // this example is just showing the usage of "ReplicationRecoveryPlans_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this RecoveryPlanResource created on azure
            // for more information of creating RecoveryPlanResource, please refer to the document of RecoveryPlanResource
            string subscriptionId = "c183865e-6077-46f2-a3b1-deb0f4f4650a";
            string resourceGroupName = "resourceGroupPS1";
            string resourceName = "vault1";
            string recoveryPlanName = "RPtest1";
            ResourceIdentifier recoveryPlanResourceId = RecoveryPlanResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, recoveryPlanName);
            RecoveryPlanResource recoveryPlan = client.GetRecoveryPlanResource(recoveryPlanResourceId);

            // invoke the operation
            RecoveryPlanPatch patch = new RecoveryPlanPatch();
            ArmOperation<RecoveryPlanResource> lro = await recoveryPlan.UpdateAsync(WaitUntil.Completed, patch);
            RecoveryPlanResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RecoveryPlanData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Execute cancel failover of the recovery plan.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task FailoverCancel_ExecuteCancelFailoverOfTheRecoveryPlan()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationRecoveryPlans_FailoverCancel.json
            // this example is just showing the usage of "ReplicationRecoveryPlans_FailoverCancel" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this RecoveryPlanResource created on azure
            // for more information of creating RecoveryPlanResource, please refer to the document of RecoveryPlanResource
            string subscriptionId = "c183865e-6077-46f2-a3b1-deb0f4f4650a";
            string resourceGroupName = "resourceGroupPS1";
            string resourceName = "vault1";
            string recoveryPlanName = "RPtest1";
            ResourceIdentifier recoveryPlanResourceId = RecoveryPlanResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, recoveryPlanName);
            RecoveryPlanResource recoveryPlan = client.GetRecoveryPlanResource(recoveryPlanResourceId);

            // invoke the operation
            ArmOperation<RecoveryPlanResource> lro = await recoveryPlan.FailoverCancelAsync(WaitUntil.Completed);
            RecoveryPlanResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RecoveryPlanData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Execute commit failover of the recovery plan.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task FailoverCommit_ExecuteCommitFailoverOfTheRecoveryPlan()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationRecoveryPlans_FailoverCommit.json
            // this example is just showing the usage of "ReplicationRecoveryPlans_FailoverCommit" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this RecoveryPlanResource created on azure
            // for more information of creating RecoveryPlanResource, please refer to the document of RecoveryPlanResource
            string subscriptionId = "c183865e-6077-46f2-a3b1-deb0f4f4650a";
            string resourceGroupName = "resourceGroupPS1";
            string resourceName = "vault1";
            string recoveryPlanName = "RPtest1";
            ResourceIdentifier recoveryPlanResourceId = RecoveryPlanResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, recoveryPlanName);
            RecoveryPlanResource recoveryPlan = client.GetRecoveryPlanResource(recoveryPlanResourceId);

            // invoke the operation
            ArmOperation<RecoveryPlanResource> lro = await recoveryPlan.FailoverCommitAsync(WaitUntil.Completed);
            RecoveryPlanResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RecoveryPlanData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Execute planned failover of the recovery plan.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task PlannedFailover_ExecutePlannedFailoverOfTheRecoveryPlan()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationRecoveryPlans_PlannedFailover.json
            // this example is just showing the usage of "ReplicationRecoveryPlans_PlannedFailover" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this RecoveryPlanResource created on azure
            // for more information of creating RecoveryPlanResource, please refer to the document of RecoveryPlanResource
            string subscriptionId = "c183865e-6077-46f2-a3b1-deb0f4f4650a";
            string resourceGroupName = "resourceGroupPS1";
            string resourceName = "vault1";
            string recoveryPlanName = "RPtest1";
            ResourceIdentifier recoveryPlanResourceId = RecoveryPlanResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, recoveryPlanName);
            RecoveryPlanResource recoveryPlan = client.GetRecoveryPlanResource(recoveryPlanResourceId);

            // invoke the operation
            RecoveryPlanPlannedFailoverContent content = new RecoveryPlanPlannedFailoverContent(new RecoveryPlanPlannedFailoverInputProperties(PossibleOperationsDirection.PrimaryToRecovery)
            {
                ProviderSpecificDetails =
{
new RecoveryPlanProviderSpecificFailoverInput()
{
InstanceType = "HyperVReplicaAzure",
}
},
            });
            ArmOperation<RecoveryPlanResource> lro = await recoveryPlan.PlannedFailoverAsync(WaitUntil.Completed, content);
            RecoveryPlanResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RecoveryPlanData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Execute reprotect of the recovery plan.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Reprotect_ExecuteReprotectOfTheRecoveryPlan()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationRecoveryPlans_Reprotect.json
            // this example is just showing the usage of "ReplicationRecoveryPlans_Reprotect" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this RecoveryPlanResource created on azure
            // for more information of creating RecoveryPlanResource, please refer to the document of RecoveryPlanResource
            string subscriptionId = "c183865e-6077-46f2-a3b1-deb0f4f4650a";
            string resourceGroupName = "resourceGroupPS1";
            string resourceName = "vault1";
            string recoveryPlanName = "RPtest1";
            ResourceIdentifier recoveryPlanResourceId = RecoveryPlanResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, recoveryPlanName);
            RecoveryPlanResource recoveryPlan = client.GetRecoveryPlanResource(recoveryPlanResourceId);

            // invoke the operation
            ArmOperation<RecoveryPlanResource> lro = await recoveryPlan.ReprotectAsync(WaitUntil.Completed);
            RecoveryPlanResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RecoveryPlanData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Execute test failover of the recovery plan.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task TestFailover_ExecuteTestFailoverOfTheRecoveryPlan()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationRecoveryPlans_TestFailover.json
            // this example is just showing the usage of "ReplicationRecoveryPlans_TestFailover" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this RecoveryPlanResource created on azure
            // for more information of creating RecoveryPlanResource, please refer to the document of RecoveryPlanResource
            string subscriptionId = "c183865e-6077-46f2-a3b1-deb0f4f4650a";
            string resourceGroupName = "resourceGroupPS1";
            string resourceName = "vault1";
            string recoveryPlanName = "RPtest1";
            ResourceIdentifier recoveryPlanResourceId = RecoveryPlanResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, recoveryPlanName);
            RecoveryPlanResource recoveryPlan = client.GetRecoveryPlanResource(recoveryPlanResourceId);

            // invoke the operation
            RecoveryPlanTestFailoverContent content = new RecoveryPlanTestFailoverContent(new RecoveryPlanTestFailoverInputProperties(PossibleOperationsDirection.PrimaryToRecovery, "VmNetworkAsInput")
            {
                NetworkId = "/subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/siterecoveryProd1/providers/Microsoft.Network/virtualNetworks/vnetavrai",
                ProviderSpecificDetails =
{
new RecoveryPlanProviderSpecificFailoverInput()
{
InstanceType = "HyperVReplicaAzure",
}
},
            });
            ArmOperation<RecoveryPlanResource> lro = await recoveryPlan.TestFailoverAsync(WaitUntil.Completed, content);
            RecoveryPlanResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RecoveryPlanData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Execute test failover cleanup of the recovery plan.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task TestFailoverCleanup_ExecuteTestFailoverCleanupOfTheRecoveryPlan()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationRecoveryPlans_TestFailoverCleanup.json
            // this example is just showing the usage of "ReplicationRecoveryPlans_TestFailoverCleanup" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this RecoveryPlanResource created on azure
            // for more information of creating RecoveryPlanResource, please refer to the document of RecoveryPlanResource
            string subscriptionId = "c183865e-6077-46f2-a3b1-deb0f4f4650a";
            string resourceGroupName = "resourceGroupPS1";
            string resourceName = "vault1";
            string recoveryPlanName = "RPtest1";
            ResourceIdentifier recoveryPlanResourceId = RecoveryPlanResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, recoveryPlanName);
            RecoveryPlanResource recoveryPlan = client.GetRecoveryPlanResource(recoveryPlanResourceId);

            // invoke the operation
            RecoveryPlanTestFailoverCleanupContent content = new RecoveryPlanTestFailoverCleanupContent(new RecoveryPlanTestFailoverCleanupInputProperties()
            {
                Comments = "Test Failover Cleanup",
            });
            ArmOperation<RecoveryPlanResource> lro = await recoveryPlan.TestFailoverCleanupAsync(WaitUntil.Completed, content);
            RecoveryPlanResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RecoveryPlanData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Execute unplanned failover of the recovery plan.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task UnplannedFailover_ExecuteUnplannedFailoverOfTheRecoveryPlan()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationRecoveryPlans_UnplannedFailover.json
            // this example is just showing the usage of "ReplicationRecoveryPlans_UnplannedFailover" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this RecoveryPlanResource created on azure
            // for more information of creating RecoveryPlanResource, please refer to the document of RecoveryPlanResource
            string subscriptionId = "c183865e-6077-46f2-a3b1-deb0f4f4650a";
            string resourceGroupName = "resourceGroupPS1";
            string resourceName = "vault1";
            string recoveryPlanName = "RPtest1";
            ResourceIdentifier recoveryPlanResourceId = RecoveryPlanResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, recoveryPlanName);
            RecoveryPlanResource recoveryPlan = client.GetRecoveryPlanResource(recoveryPlanResourceId);

            // invoke the operation
            RecoveryPlanUnplannedFailoverContent content = new RecoveryPlanUnplannedFailoverContent(new RecoveryPlanUnplannedFailoverInputProperties(PossibleOperationsDirection.PrimaryToRecovery, SourceSiteOperation.Required)
            {
                ProviderSpecificDetails =
{
new RecoveryPlanProviderSpecificFailoverInput()
{
InstanceType = "HyperVReplicaAzure",
}
},
            });
            ArmOperation<RecoveryPlanResource> lro = await recoveryPlan.UnplannedFailoverAsync(WaitUntil.Completed, content);
            RecoveryPlanResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RecoveryPlanData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
