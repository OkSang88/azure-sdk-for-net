// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceFabricMesh.Models
{
    public partial class GatewayProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            writer.WritePropertyName("sourceNetwork");
            writer.WriteObjectValue(SourceNetwork);
            writer.WritePropertyName("destinationNetwork");
            writer.WriteObjectValue(DestinationNetwork);
            if (Optional.IsCollectionDefined(Tcp))
            {
                writer.WritePropertyName("tcp");
                writer.WriteStartArray();
                foreach (var item in Tcp)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Http))
            {
                writer.WritePropertyName("http");
                writer.WriteStartArray();
                foreach (var item in Http)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static GatewayProperties DeserializeGatewayProperties(JsonElement element)
        {
            Optional<string> description = default;
            NetworkRef sourceNetwork = default;
            NetworkRef destinationNetwork = default;
            Optional<IList<TcpConfig>> tcp = default;
            Optional<IList<HttpConfig>> http = default;
            Optional<ResourceStatus> status = default;
            Optional<string> statusDetails = default;
            Optional<string> ipAddress = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceNetwork"))
                {
                    sourceNetwork = NetworkRef.DeserializeNetworkRef(property.Value);
                    continue;
                }
                if (property.NameEquals("destinationNetwork"))
                {
                    destinationNetwork = NetworkRef.DeserializeNetworkRef(property.Value);
                    continue;
                }
                if (property.NameEquals("tcp"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TcpConfig> array = new List<TcpConfig>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TcpConfig.DeserializeTcpConfig(item));
                    }
                    tcp = array;
                    continue;
                }
                if (property.NameEquals("http"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<HttpConfig> array = new List<HttpConfig>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HttpConfig.DeserializeHttpConfig(item));
                    }
                    http = array;
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    status = new ResourceStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("statusDetails"))
                {
                    statusDetails = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipAddress"))
                {
                    ipAddress = property.Value.GetString();
                    continue;
                }
            }
            return new GatewayProperties(description.Value, sourceNetwork, destinationNetwork, Optional.ToList(tcp), Optional.ToList(http), Optional.ToNullable(status), statusDetails.Value, ipAddress.Value);
        }
    }
}
