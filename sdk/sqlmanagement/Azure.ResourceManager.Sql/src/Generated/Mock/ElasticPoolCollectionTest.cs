// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for ElasticPool. </summary>
    public partial class ElasticPoolCollectionMockTests : MockTestBase
    {
        public ElasticPoolCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create or update elastic pool with all parameter
            var collection = GetArmClient().GetSqlServer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-2369/providers/Microsoft.Sql/servers/sqlcrudtest-8069")).GetElasticPools();
            string elasticPoolName = "sqlcrudtest-8102";
            Sql.ElasticPoolData parameters = new Sql.ElasticPoolData(location: "Japan East")
            {
                Sku = new Sql.Models.Sku(name: "GP_Gen4_2")
                {
                    Tier = "GeneralPurpose",
                    Capacity = 2,
                },
                PerDatabaseSettings = new Sql.Models.ElasticPoolPerDatabaseSettings()
                {
                    MinCapacity = 0.25,
                    MaxCapacity = 2,
                },
            };

            await collection.CreateOrUpdateAsync(elasticPoolName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync2()
        {
            // Example: Create or update elastic pool with maintenance configuration parameter
            var collection = GetArmClient().GetSqlServer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-2369/providers/Microsoft.Sql/servers/sqlcrudtest-8069")).GetElasticPools();
            string elasticPoolName = "sqlcrudtest-8102";
            Sql.ElasticPoolData parameters = new Sql.ElasticPoolData(location: "Japan East")
            {
                MaintenanceConfigurationId = "/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_1",
            };

            await collection.CreateOrUpdateAsync(elasticPoolName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync3()
        {
            // Example: Create or update elastic pool with minimum parameters
            var collection = GetArmClient().GetSqlServer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-2369/providers/Microsoft.Sql/servers/sqlcrudtest-8069")).GetElasticPools();
            string elasticPoolName = "sqlcrudtest-8102";
            Sql.ElasticPoolData parameters = new Sql.ElasticPoolData(location: "Japan East");

            await collection.CreateOrUpdateAsync(elasticPoolName, parameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get an elastic pool
            var collection = GetArmClient().GetSqlServer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-2369/providers/Microsoft.Sql/servers/sqlcrudtest-8069")).GetElasticPools();
            string elasticPoolName = "sqlcrudtest-8102";

            await collection.GetAsync(elasticPoolName);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: Get all elastic pools in a server
            var collection = GetArmClient().GetSqlServer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-2369/providers/Microsoft.Sql/servers/sqlcrudtest-8069")).GetElasticPools();
            int? skip = null;

            collection.GetAllAsync(skip);
        }
    }
}
