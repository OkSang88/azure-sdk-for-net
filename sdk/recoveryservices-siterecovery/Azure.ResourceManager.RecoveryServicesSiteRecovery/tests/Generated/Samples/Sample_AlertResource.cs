// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.RecoveryServicesSiteRecovery.Models;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery
{
    public partial class Sample_AlertResource
    {
        // Gets an email notification(alert) configuration.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetsAnEmailNotificationAlertConfiguration()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationAlertSettings_Get.json
            // this example is just showing the usage of "ReplicationAlertSettings_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AlertResource created on azure
            // for more information of creating AlertResource, please refer to the document of AlertResource
            string subscriptionId = "c183865e-6077-46f2-a3b1-deb0f4f4650a";
            string resourceGroupName = "resourceGroupPS1";
            string resourceName = "vault1";
            string alertSettingName = "defaultAlertSetting";
            ResourceIdentifier alertResourceId = AlertResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, alertSettingName);
            AlertResource alert = client.GetAlertResource(alertResourceId);

            // invoke the operation
            AlertResource result = await alert.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AlertData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Configures email notifications for this vault.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_ConfiguresEmailNotificationsForThisVault()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationAlertSettings_Create.json
            // this example is just showing the usage of "ReplicationAlertSettings_Create" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AlertResource created on azure
            // for more information of creating AlertResource, please refer to the document of AlertResource
            string subscriptionId = "c183865e-6077-46f2-a3b1-deb0f4f4650a";
            string resourceGroupName = "resourceGroupPS1";
            string resourceName = "vault1";
            string alertSettingName = "defaultAlertSetting";
            ResourceIdentifier alertResourceId = AlertResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, alertSettingName);
            AlertResource alert = client.GetAlertResource(alertResourceId);

            // invoke the operation
            AlertCreateOrUpdateContent content = new AlertCreateOrUpdateContent()
            {
                Properties = new ConfigureAlertRequestProperties()
                {
                    SendToOwners = "false",
                    CustomEmailAddresses =
{
"ronehr@microsoft.com"
},
                    Locale = "",
                },
            };
            ArmOperation<AlertResource> lro = await alert.UpdateAsync(WaitUntil.Completed, content);
            AlertResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AlertData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
