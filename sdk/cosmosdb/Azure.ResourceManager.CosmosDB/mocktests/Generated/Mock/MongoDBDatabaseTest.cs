// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.CosmosDB.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.CosmosDB.Tests.Mock
{
    /// <summary> Test for MongoDBDatabase. </summary>
    public partial class MongoDBDatabaseMockTests : MockTestBase
    {
        public MongoDBDatabaseMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: CosmosDBMongoDBDatabaseGet
            var mongoDBDatabase = GetArmClient().GetMongoDBDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName"));

            await mongoDBDatabase.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: CosmosDBMongoDBDatabaseDelete
            var mongoDBDatabase = GetArmClient().GetMongoDBDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName"));

            await mongoDBDatabase.DeleteAsync();
        }

        [RecordedTest]
        public async Task DatabaseAccountMongodbDatabaseThroughputSettingGetAsync()
        {
            // Example: CosmosDBMongoDBDatabaseThroughputGet
            var databaseAccountMongodbDatabaseThroughputSetting = GetArmClient().GetDatabaseAccountMongodbDatabaseThroughputSetting(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName/throughputSettings/default"));

            await databaseAccountMongodbDatabaseThroughputSetting.GetAsync();
        }

        [RecordedTest]
        public async Task DatabaseAccountMongodbDatabaseThroughputSettingMigrateMongoDBDatabaseToAutoscaleAsync()
        {
            // Example: CosmosDBMongoDBDatabaseMigrateToAutoscale
            var databaseAccountMongodbDatabaseThroughputSetting = GetArmClient().GetDatabaseAccountMongodbDatabaseThroughputSetting(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName/throughputSettings/default"));

            await databaseAccountMongodbDatabaseThroughputSetting.MigrateMongoDBDatabaseToAutoscaleAsync();
        }

        [RecordedTest]
        public async Task DatabaseAccountMongodbDatabaseThroughputSettingMigrateMongoDBDatabaseToManualThroughputAsync()
        {
            // Example: CosmosDBMongoDBDatabaseMigrateToManualThroughput
            var databaseAccountMongodbDatabaseThroughputSetting = GetArmClient().GetDatabaseAccountMongodbDatabaseThroughputSetting(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName/throughputSettings/default"));

            await databaseAccountMongodbDatabaseThroughputSetting.MigrateMongoDBDatabaseToManualThroughputAsync();
        }
    }
}
