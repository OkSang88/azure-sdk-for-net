// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.ServiceFabric;
using Azure.ResourceManager.ServiceFabric.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.ServiceFabric.Tests.Mock
{
    /// <summary> Test for ServiceResource. </summary>
    public partial class ServiceResourceCollectionMockTests : MockTestBase
    {
        public ServiceResourceCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Put a service with maximum parameters
            string serviceName = "myService";
            ServiceFabric.ServiceResourceData parameters = new ServiceFabric.ServiceResourceData(location: AzureLocation.WestUS)
            {
                PlacementConstraints = "NodeType==frontend",
                DefaultMoveCost = new ServiceFabric.Models.MoveCost("Medium"),
                ServiceKind = new ServiceFabric.Models.ServiceKind("Stateless"),
                ServiceTypeName = "myServiceType",
                PartitionDescription = new ServiceFabric.Models.SingletonPartitionSchemeDescription()
                {
                    PartitionScheme = new ServiceFabric.Models.PartitionScheme("Singleton"),
                },
                ServicePackageActivationMode = new ServiceFabric.Models.ArmServicePackageActivationMode("SharedProcess"),
                ServiceDnsName = "my.service.dns",
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>()
            {
            });

            var applicationResourceId = ServiceFabric.ApplicationResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster", "myApp");
            var collection = GetArmClient().GetApplicationResource(applicationResourceId).GetServiceResources();
            await collection.CreateOrUpdateAsync(true, serviceName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Put a service with minimum parameters
            string serviceName = "myService";
            ServiceFabric.ServiceResourceData parameters = new ServiceFabric.ServiceResourceData(location: AzureLocation.WestUS)
            {
                ServiceKind = new ServiceFabric.Models.ServiceKind("Stateless"),
                ServiceTypeName = "myServiceType",
                PartitionDescription = new ServiceFabric.Models.SingletonPartitionSchemeDescription()
                {
                    PartitionScheme = new ServiceFabric.Models.PartitionScheme("Singleton"),
                },
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>()
            {
            });

            var applicationResourceId = ServiceFabric.ApplicationResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster", "myApp");
            var collection = GetArmClient().GetApplicationResource(applicationResourceId).GetServiceResources();
            await collection.CreateOrUpdateAsync(true, serviceName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get a service
            string serviceName = "myService";

            var applicationResourceId = ServiceFabric.ApplicationResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster", "myApp");
            var collection = GetArmClient().GetApplicationResource(applicationResourceId).GetServiceResources();
            await collection.GetAsync(serviceName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: Get a list of service resources

            var applicationResourceId = ServiceFabric.ApplicationResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster", "myApp");
            var collection = GetArmClient().GetApplicationResource(applicationResourceId).GetServiceResources();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
