// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.StorSimple8000Series.Models
{
    public partial class NetworkAdapters : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("interfaceId");
            writer.WriteStringValue(InterfaceId.ToSerialString());
            writer.WritePropertyName("netInterfaceStatus");
            writer.WriteStringValue(NetInterfaceStatus.ToSerialString());
            if (Optional.IsDefined(IsDefault))
            {
                writer.WritePropertyName("isDefault");
                writer.WriteBooleanValue(IsDefault.Value);
            }
            writer.WritePropertyName("iscsiAndCloudStatus");
            writer.WriteStringValue(IscsiAndCloudStatus.ToSerialString());
            if (Optional.IsDefined(Speed))
            {
                writer.WritePropertyName("speed");
                writer.WriteNumberValue(Speed.Value);
            }
            writer.WritePropertyName("mode");
            writer.WriteStringValue(Mode.ToSerialString());
            if (Optional.IsDefined(NicIpv4Settings))
            {
                writer.WritePropertyName("nicIpv4Settings");
                writer.WriteObjectValue(NicIpv4Settings);
            }
            if (Optional.IsDefined(NicIpv6Settings))
            {
                writer.WritePropertyName("nicIpv6Settings");
                writer.WriteObjectValue(NicIpv6Settings);
            }
            writer.WriteEndObject();
        }

        internal static NetworkAdapters DeserializeNetworkAdapters(JsonElement element)
        {
            NetInterfaceId interfaceId = default;
            NetInterfaceStatus netInterfaceStatus = default;
            Optional<bool> isDefault = default;
            IscsiAndCloudStatus iscsiAndCloudStatus = default;
            Optional<long> speed = default;
            NetworkMode mode = default;
            Optional<NicIPv4> nicIpv4Settings = default;
            Optional<NicIPv6> nicIpv6Settings = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("interfaceId"))
                {
                    interfaceId = property.Value.GetString().ToNetInterfaceId();
                    continue;
                }
                if (property.NameEquals("netInterfaceStatus"))
                {
                    netInterfaceStatus = property.Value.GetString().ToNetInterfaceStatus();
                    continue;
                }
                if (property.NameEquals("isDefault"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isDefault = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("iscsiAndCloudStatus"))
                {
                    iscsiAndCloudStatus = property.Value.GetString().ToIscsiAndCloudStatus();
                    continue;
                }
                if (property.NameEquals("speed"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    speed = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("mode"))
                {
                    mode = property.Value.GetString().ToNetworkMode();
                    continue;
                }
                if (property.NameEquals("nicIpv4Settings"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    nicIpv4Settings = NicIPv4.DeserializeNicIPv4(property.Value);
                    continue;
                }
                if (property.NameEquals("nicIpv6Settings"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    nicIpv6Settings = NicIPv6.DeserializeNicIPv6(property.Value);
                    continue;
                }
            }
            return new NetworkAdapters(interfaceId, netInterfaceStatus, Optional.ToNullable(isDefault), iscsiAndCloudStatus, Optional.ToNullable(speed), mode, nicIpv4Settings.Value, nicIpv6Settings.Value);
        }
    }
}
