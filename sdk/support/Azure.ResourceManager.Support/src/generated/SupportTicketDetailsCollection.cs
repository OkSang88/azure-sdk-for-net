// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Resources;
using MicrosoftSupport.Models;

namespace MicrosoftSupport
{
    /// <summary> A class representing collection of SupportTicketDetails and their operations over its parent. </summary>
    public partial class SupportTicketDetailsCollection : ArmCollection, IEnumerable<SupportTicketDetails>, IAsyncEnumerable<SupportTicketDetails>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly SupportTicketsRestOperations _supportTicketsRestClient;

        /// <summary> Initializes a new instance of the <see cref="SupportTicketDetailsCollection"/> class for mocking. </summary>
        protected SupportTicketDetailsCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SupportTicketDetailsCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal SupportTicketDetailsCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _supportTicketsRestClient = new SupportTicketsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != Subscription.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, Subscription.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Creates a new support ticket for Subscription and Service limits (Quota), Technical, Billing, and Subscription Management issues for the specified subscription. Learn the [prerequisites](https://aka.ms/supportAPI) required to create a support ticket.&lt;br/&gt;&lt;br/&gt;Always call the Services and ProblemClassifications API to get the most recent set of services and problem categories required for support ticket creation.&lt;br/&gt;&lt;br/&gt;Adding attachments is not currently supported via the API. To add a file to an existing support ticket, visit the [Manage support ticket](https://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/managesupportrequest) page in the Azure portal, select the support ticket, and use the file upload control to add a new file.&lt;br/&gt;&lt;br/&gt;Providing consent to share diagnostic information with Azure support is currently not supported via the API. The Azure support engineer working on your ticket will reach out to you for consent if your issue requires gathering diagnostic information from your Azure resources.&lt;br/&gt;&lt;br/&gt;**Creating a support ticket for on-behalf-of**: Include _x-ms-authorization-auxiliary_ header to provide an auxiliary token as per [documentation](https://docs.microsoft.com/azure/azure-resource-manager/management/authenticate-multi-tenant). The primary token will be from the tenant for whom a support ticket is being raised against the subscription, i.e. Cloud solution provider (CSP) customer tenant. The auxiliary token will be from the Cloud solution provider (CSP) partner tenant. </summary>
        /// <param name="supportTicketName"> Support ticket name. </param>
        /// <param name="createSupportTicketParameters"> Support ticket request payload. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="supportTicketName"/> or <paramref name="createSupportTicketParameters"/> is null. </exception>
        public virtual SupportTicketCreateOperation CreateOrUpdate(bool waitForCompletion, string supportTicketName, SupportTicketDetailsData createSupportTicketParameters, CancellationToken cancellationToken = default)
        {
            if (supportTicketName == null)
            {
                throw new ArgumentNullException(nameof(supportTicketName));
            }
            if (createSupportTicketParameters == null)
            {
                throw new ArgumentNullException(nameof(createSupportTicketParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("SupportTicketDetailsCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _supportTicketsRestClient.Create(Id.SubscriptionId, supportTicketName, createSupportTicketParameters, cancellationToken);
                var operation = new SupportTicketCreateOperation(Parent, _clientDiagnostics, Pipeline, _supportTicketsRestClient.CreateCreateRequest(Id.SubscriptionId, supportTicketName, createSupportTicketParameters).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new support ticket for Subscription and Service limits (Quota), Technical, Billing, and Subscription Management issues for the specified subscription. Learn the [prerequisites](https://aka.ms/supportAPI) required to create a support ticket.&lt;br/&gt;&lt;br/&gt;Always call the Services and ProblemClassifications API to get the most recent set of services and problem categories required for support ticket creation.&lt;br/&gt;&lt;br/&gt;Adding attachments is not currently supported via the API. To add a file to an existing support ticket, visit the [Manage support ticket](https://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/managesupportrequest) page in the Azure portal, select the support ticket, and use the file upload control to add a new file.&lt;br/&gt;&lt;br/&gt;Providing consent to share diagnostic information with Azure support is currently not supported via the API. The Azure support engineer working on your ticket will reach out to you for consent if your issue requires gathering diagnostic information from your Azure resources.&lt;br/&gt;&lt;br/&gt;**Creating a support ticket for on-behalf-of**: Include _x-ms-authorization-auxiliary_ header to provide an auxiliary token as per [documentation](https://docs.microsoft.com/azure/azure-resource-manager/management/authenticate-multi-tenant). The primary token will be from the tenant for whom a support ticket is being raised against the subscription, i.e. Cloud solution provider (CSP) customer tenant. The auxiliary token will be from the Cloud solution provider (CSP) partner tenant. </summary>
        /// <param name="supportTicketName"> Support ticket name. </param>
        /// <param name="createSupportTicketParameters"> Support ticket request payload. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="supportTicketName"/> or <paramref name="createSupportTicketParameters"/> is null. </exception>
        public async virtual Task<SupportTicketCreateOperation> CreateOrUpdateAsync(bool waitForCompletion, string supportTicketName, SupportTicketDetailsData createSupportTicketParameters, CancellationToken cancellationToken = default)
        {
            if (supportTicketName == null)
            {
                throw new ArgumentNullException(nameof(supportTicketName));
            }
            if (createSupportTicketParameters == null)
            {
                throw new ArgumentNullException(nameof(createSupportTicketParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("SupportTicketDetailsCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _supportTicketsRestClient.CreateAsync(Id.SubscriptionId, supportTicketName, createSupportTicketParameters, cancellationToken).ConfigureAwait(false);
                var operation = new SupportTicketCreateOperation(Parent, _clientDiagnostics, Pipeline, _supportTicketsRestClient.CreateCreateRequest(Id.SubscriptionId, supportTicketName, createSupportTicketParameters).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get ticket details for an Azure subscription. Support ticket data is available for 18 months after ticket creation. If a ticket was created more than 18 months ago, a request for data might cause an error. </summary>
        /// <param name="supportTicketName"> Support ticket name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="supportTicketName"/> is null. </exception>
        public virtual Response<SupportTicketDetails> Get(string supportTicketName, CancellationToken cancellationToken = default)
        {
            if (supportTicketName == null)
            {
                throw new ArgumentNullException(nameof(supportTicketName));
            }

            using var scope = _clientDiagnostics.CreateScope("SupportTicketDetailsCollection.Get");
            scope.Start();
            try
            {
                var response = _supportTicketsRestClient.Get(Id.SubscriptionId, supportTicketName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SupportTicketDetails(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get ticket details for an Azure subscription. Support ticket data is available for 18 months after ticket creation. If a ticket was created more than 18 months ago, a request for data might cause an error. </summary>
        /// <param name="supportTicketName"> Support ticket name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="supportTicketName"/> is null. </exception>
        public async virtual Task<Response<SupportTicketDetails>> GetAsync(string supportTicketName, CancellationToken cancellationToken = default)
        {
            if (supportTicketName == null)
            {
                throw new ArgumentNullException(nameof(supportTicketName));
            }

            using var scope = _clientDiagnostics.CreateScope("SupportTicketDetailsCollection.Get");
            scope.Start();
            try
            {
                var response = await _supportTicketsRestClient.GetAsync(Id.SubscriptionId, supportTicketName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new SupportTicketDetails(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="supportTicketName"> Support ticket name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="supportTicketName"/> is null. </exception>
        public virtual Response<SupportTicketDetails> GetIfExists(string supportTicketName, CancellationToken cancellationToken = default)
        {
            if (supportTicketName == null)
            {
                throw new ArgumentNullException(nameof(supportTicketName));
            }

            using var scope = _clientDiagnostics.CreateScope("SupportTicketDetailsCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _supportTicketsRestClient.Get(Id.SubscriptionId, supportTicketName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<SupportTicketDetails>(null, response.GetRawResponse());
                return Response.FromValue(new SupportTicketDetails(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="supportTicketName"> Support ticket name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="supportTicketName"/> is null. </exception>
        public async virtual Task<Response<SupportTicketDetails>> GetIfExistsAsync(string supportTicketName, CancellationToken cancellationToken = default)
        {
            if (supportTicketName == null)
            {
                throw new ArgumentNullException(nameof(supportTicketName));
            }

            using var scope = _clientDiagnostics.CreateScope("SupportTicketDetailsCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _supportTicketsRestClient.GetAsync(Id.SubscriptionId, supportTicketName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<SupportTicketDetails>(null, response.GetRawResponse());
                return Response.FromValue(new SupportTicketDetails(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="supportTicketName"> Support ticket name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="supportTicketName"/> is null. </exception>
        public virtual Response<bool> Exists(string supportTicketName, CancellationToken cancellationToken = default)
        {
            if (supportTicketName == null)
            {
                throw new ArgumentNullException(nameof(supportTicketName));
            }

            using var scope = _clientDiagnostics.CreateScope("SupportTicketDetailsCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(supportTicketName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="supportTicketName"> Support ticket name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="supportTicketName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string supportTicketName, CancellationToken cancellationToken = default)
        {
            if (supportTicketName == null)
            {
                throw new ArgumentNullException(nameof(supportTicketName));
            }

            using var scope = _clientDiagnostics.CreateScope("SupportTicketDetailsCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(supportTicketName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all the support tickets for an Azure subscription. You can also filter the support tickets by _Status_ or _CreatedDate_ using the $filter parameter. Output will be a paged result with _nextLink_, using which you can retrieve the next set of support tickets. &lt;br/&gt;&lt;br/&gt;Support ticket data is available for 18 months after ticket creation. If a ticket was created more than 18 months ago, a request for data might cause an error. </summary>
        /// <param name="top"> The number of values to return in the collection. Default is 25 and max is 100. </param>
        /// <param name="filter"> The filter to apply on the operation. We support &apos;odata v4.0&apos; filter semantics. [Learn more](https://docs.microsoft.com/odata/concepts/queryoptions-overview). _Status_ filter can only be used with Equals (&apos;eq&apos;) operator. For _CreatedDate_ filter, the supported operators are Greater Than (&apos;gt&apos;) and Greater Than or Equals (&apos;ge&apos;). When using both filters, combine them using the logical &apos;AND&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SupportTicketDetails" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SupportTicketDetails> GetAll(int? top = null, string filter = null, CancellationToken cancellationToken = default)
        {
            Page<SupportTicketDetails> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SupportTicketDetailsCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _supportTicketsRestClient.List(Id.SubscriptionId, top, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SupportTicketDetails(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SupportTicketDetails> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SupportTicketDetailsCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _supportTicketsRestClient.ListNextPage(nextLink, Id.SubscriptionId, top, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SupportTicketDetails(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists all the support tickets for an Azure subscription. You can also filter the support tickets by _Status_ or _CreatedDate_ using the $filter parameter. Output will be a paged result with _nextLink_, using which you can retrieve the next set of support tickets. &lt;br/&gt;&lt;br/&gt;Support ticket data is available for 18 months after ticket creation. If a ticket was created more than 18 months ago, a request for data might cause an error. </summary>
        /// <param name="top"> The number of values to return in the collection. Default is 25 and max is 100. </param>
        /// <param name="filter"> The filter to apply on the operation. We support &apos;odata v4.0&apos; filter semantics. [Learn more](https://docs.microsoft.com/odata/concepts/queryoptions-overview). _Status_ filter can only be used with Equals (&apos;eq&apos;) operator. For _CreatedDate_ filter, the supported operators are Greater Than (&apos;gt&apos;) and Greater Than or Equals (&apos;ge&apos;). When using both filters, combine them using the logical &apos;AND&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SupportTicketDetails" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SupportTicketDetails> GetAllAsync(int? top = null, string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<SupportTicketDetails>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SupportTicketDetailsCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _supportTicketsRestClient.ListAsync(Id.SubscriptionId, top, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SupportTicketDetails(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SupportTicketDetails>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SupportTicketDetailsCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _supportTicketsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, top, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SupportTicketDetails(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Filters the list of <see cref="SupportTicketDetails" /> for this subscription represented as generic resources. </summary>
        /// <param name="nameFilter"> The filter used in this operation. </param>
        /// <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. </param>
        /// <param name="top"> The number of results to return. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of resource that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<GenericResource> GetAllAsGenericResources(string nameFilter, string expand = null, int? top = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SupportTicketDetailsCollection.GetAllAsGenericResources");
            scope.Start();
            try
            {
                var filters = new ResourceFilterCollection(SupportTicketDetails.ResourceType);
                filters.SubstringFilter = nameFilter;
                return ResourceListOperations.GetAtContext(Parent as Subscription, filters, expand, top, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Filters the list of <see cref="SupportTicketDetails" /> for this subscription represented as generic resources. </summary>
        /// <param name="nameFilter"> The filter used in this operation. </param>
        /// <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. </param>
        /// <param name="top"> The number of results to return. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> An async collection of resource that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<GenericResource> GetAllAsGenericResourcesAsync(string nameFilter, string expand = null, int? top = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SupportTicketDetailsCollection.GetAllAsGenericResources");
            scope.Start();
            try
            {
                var filters = new ResourceFilterCollection(SupportTicketDetails.ResourceType);
                filters.SubstringFilter = nameFilter;
                return ResourceListOperations.GetAtContextAsync(Parent as Subscription, filters, expand, top, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<SupportTicketDetails> IEnumerable<SupportTicketDetails>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<SupportTicketDetails> IAsyncEnumerable<SupportTicketDetails>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, SupportTicketDetails, SupportTicketDetailsData> Construct() { }
    }
}
