// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.AppService;
using Azure.ResourceManager.AppService.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.AppService.Tests.Mock
{
    /// <summary> Test for RemotePrivateEndpointConnectionARMResource. </summary>
    public partial class StaticSitePrivateEndpointConnectionCollectionMockTests : MockTestBase
    {
        public StaticSitePrivateEndpointConnectionCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Approves or rejects a private endpoint connection for a site.
            string privateEndpointConnectionName = "connection";
            AppService.Models.PrivateLinkConnectionApprovalRequestResource privateEndpointWrapper = new AppService.Models.PrivateLinkConnectionApprovalRequestResource()
            {
                PrivateLinkServiceConnectionState = new AppService.Models.PrivateLinkConnectionState()
                {
                    Status = "Approved",
                    Description = "Approved by admin.",
                    ActionsRequired = "",
                },
            };

            var staticSiteARMResourceId = AppService.StaticSiteARMResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg", "testSite");
            var collection = GetArmClient().GetStaticSiteARMResource(staticSiteARMResourceId).GetStaticSitePrivateEndpointConnections();
            await collection.CreateOrUpdateAsync(true, privateEndpointConnectionName, privateEndpointWrapper);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get a private endpoint connection for a site.
            string privateEndpointConnectionName = "connection";

            var staticSiteARMResourceId = AppService.StaticSiteARMResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg", "testSite");
            var collection = GetArmClient().GetStaticSiteARMResource(staticSiteARMResourceId).GetStaticSitePrivateEndpointConnections();
            await collection.GetAsync(privateEndpointConnectionName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: Get a list of private endpoint connections associated with a site.

            var staticSiteARMResourceId = AppService.StaticSiteARMResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg", "testStaticSite0");
            var collection = GetArmClient().GetStaticSiteARMResource(staticSiteARMResourceId).GetStaticSitePrivateEndpointConnections();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
