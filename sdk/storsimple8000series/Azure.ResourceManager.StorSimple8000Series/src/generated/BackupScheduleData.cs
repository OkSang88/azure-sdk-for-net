// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;
using StorSimple8000SeriesManagementClient.Models;

namespace StorSimple8000SeriesManagementClient
{
    /// <summary> A class representing the BackupSchedule data model. </summary>
    public partial class BackupScheduleData : BaseModel
    {
        /// <summary> Initializes a new instance of BackupScheduleData. </summary>
        /// <param name="scheduleRecurrence"> The schedule recurrence. </param>
        /// <param name="backupType"> The type of backup which needs to be taken. </param>
        /// <param name="retentionCount"> The number of backups to be retained. </param>
        /// <param name="startTime"> The start time of the schedule. </param>
        /// <param name="scheduleStatus"> The schedule status. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleRecurrence"/> is null. </exception>
        public BackupScheduleData(ScheduleRecurrence scheduleRecurrence, BackupType backupType, long retentionCount, DateTimeOffset startTime, ScheduleStatus scheduleStatus)
        {
            if (scheduleRecurrence == null)
            {
                throw new ArgumentNullException(nameof(scheduleRecurrence));
            }

            ScheduleRecurrence = scheduleRecurrence;
            BackupType = backupType;
            RetentionCount = retentionCount;
            StartTime = startTime;
            ScheduleStatus = scheduleStatus;
        }

        /// <summary> Initializes a new instance of BackupScheduleData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="type"> The type. </param>
        /// <param name="kind"> The Kind of the object. Currently only Series8000 is supported. </param>
        /// <param name="scheduleRecurrence"> The schedule recurrence. </param>
        /// <param name="backupType"> The type of backup which needs to be taken. </param>
        /// <param name="retentionCount"> The number of backups to be retained. </param>
        /// <param name="startTime"> The start time of the schedule. </param>
        /// <param name="scheduleStatus"> The schedule status. </param>
        /// <param name="lastSuccessfulRun"> The last successful backup run which was triggered for the schedule. </param>
        internal BackupScheduleData(ResourceIdentifier id, string name, ResourceType type, string kind, ScheduleRecurrence scheduleRecurrence, BackupType backupType, long retentionCount, DateTimeOffset startTime, ScheduleStatus scheduleStatus, DateTimeOffset? lastSuccessfulRun) : base(id, name, type, kind)
        {
            ScheduleRecurrence = scheduleRecurrence;
            BackupType = backupType;
            RetentionCount = retentionCount;
            StartTime = startTime;
            ScheduleStatus = scheduleStatus;
            LastSuccessfulRun = lastSuccessfulRun;
        }

        /// <summary> The schedule recurrence. </summary>
        public ScheduleRecurrence ScheduleRecurrence { get; set; }
        /// <summary> The type of backup which needs to be taken. </summary>
        public BackupType BackupType { get; set; }
        /// <summary> The number of backups to be retained. </summary>
        public long RetentionCount { get; set; }
        /// <summary> The start time of the schedule. </summary>
        public DateTimeOffset StartTime { get; set; }
        /// <summary> The schedule status. </summary>
        public ScheduleStatus ScheduleStatus { get; set; }
        /// <summary> The last successful backup run which was triggered for the schedule. </summary>
        public DateTimeOffset? LastSuccessfulRun { get; }
    }
}
