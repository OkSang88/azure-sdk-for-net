// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Batch.Tests.Mock;
using Azure.ResourceManager.Batch.Tests.Mock.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Batch.Tests.Mock.Tests.Mock
{
    /// <summary> Test for Certificate. </summary>
    public partial class CertificateMockTests : MockTestBase
    {
        public CertificateMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get Certificate
            var certificateId = Batch.Tests.Mock.Certificate.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct", "sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e");
            var certificate = GetArmClient().GetCertificate(certificateId);

            await certificate.GetAsync();
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: Get Certificate with Deletion Error
            var certificateId = Batch.Tests.Mock.Certificate.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct", "sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e");
            var certificate = GetArmClient().GetCertificate(certificateId);

            await certificate.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: CertificateDelete
            var certificateId = Batch.Tests.Mock.Certificate.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct", "sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e");
            var certificate = GetArmClient().GetCertificate(certificateId);

            await certificate.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: UpdateCertificate
            var certificateId = Batch.Tests.Mock.Certificate.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct", "sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e");
            var certificate = GetArmClient().GetCertificate(certificateId);
            Batch.Tests.Mock.Models.CertificateCreateOrUpdateParameters parameters = new Batch.Tests.Mock.Models.CertificateCreateOrUpdateParameters()
            {
                Data = "MIIJsgIBAzCCCW4GCSqGSIb3DQE...",
                Password = "<ExamplePassword>",
            };
            string ifMatch = null;

            await certificate.UpdateAsync(parameters, ifMatch);
        }

        [RecordedTest]
        public async Task CancelDeletion()
        {
            // Example: CertificateCancelDeletion
            var certificateId = Batch.Tests.Mock.Certificate.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct", "sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e");
            var certificate = GetArmClient().GetCertificate(certificateId);

            await certificate.CancelDeletionAsync();
        }
    }
}
