// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using RelayAPI;
using RelayAPI.Models;

namespace RelayAPI.Tests.Mock
{
    /// <summary> Test for AuthorizationRule. </summary>
    public partial class NamespaceHybridConnectionAuthorizationRuleMockTests : MockTestBase
    {
        public NamespaceHybridConnectionAuthorizationRuleMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: RelayHybridConnectionAutorizationRuleGet
            var namespaceHybridConnectionAuthorizationRuleId = RelayAPI.NamespaceHybridConnectionAuthorizationRule.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourcegroup", "example-RelayNamespace-01", "example-Relay-Hybrid-01", "example-RelayAuthRules-01");
            var namespaceHybridConnectionAuthorizationRule = GetArmClient().GetNamespaceHybridConnectionAuthorizationRule(namespaceHybridConnectionAuthorizationRuleId);

            await namespaceHybridConnectionAuthorizationRule.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: RelayHybridConnectionAutorizationRuleDelete
            var namespaceHybridConnectionAuthorizationRuleId = RelayAPI.NamespaceHybridConnectionAuthorizationRule.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourcegroup", "example-RelayNamespace-01", "example-Relay-Hybrid-01", "example-RelayAuthRules-01");
            var namespaceHybridConnectionAuthorizationRule = GetArmClient().GetNamespaceHybridConnectionAuthorizationRule(namespaceHybridConnectionAuthorizationRuleId);

            await namespaceHybridConnectionAuthorizationRule.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task GetKeys()
        {
            // Example: RelayHybridConnectionAuthorizationRuleListKey
            var namespaceHybridConnectionAuthorizationRuleId = RelayAPI.NamespaceHybridConnectionAuthorizationRule.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourcegroup", "example-RelayNamespace-01", "example-Relay-Hybrid-01", "example-RelayAuthRules-01");
            var namespaceHybridConnectionAuthorizationRule = GetArmClient().GetNamespaceHybridConnectionAuthorizationRule(namespaceHybridConnectionAuthorizationRuleId);

            await namespaceHybridConnectionAuthorizationRule.GetKeysAsync();
        }

        [RecordedTest]
        public async Task RegenerateKeys()
        {
            // Example: RelayHybridConnectionAuthorizationRuleRegenrateKey
            var namespaceHybridConnectionAuthorizationRuleId = RelayAPI.NamespaceHybridConnectionAuthorizationRule.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourcegroup", "example-RelayNamespace-01", "example-Relay-Hybrid-01", "example-RelayAuthRules-01");
            var namespaceHybridConnectionAuthorizationRule = GetArmClient().GetNamespaceHybridConnectionAuthorizationRule(namespaceHybridConnectionAuthorizationRuleId);
            RelayAPI.Models.RegenerateAccessKeyParameters parameters = new RelayAPI.Models.RegenerateAccessKeyParameters(keyType: RelayAPI.Models.KeyType.PrimaryKey);

            await namespaceHybridConnectionAuthorizationRule.RegenerateKeysAsync(parameters);
        }
    }
}
