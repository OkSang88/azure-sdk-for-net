// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.StorSimple8000Series.Models
{
    public partial class ScheduleRecurrence : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("recurrenceType");
            writer.WriteStringValue(RecurrenceType.ToSerialString());
            writer.WritePropertyName("recurrenceValue");
            writer.WriteNumberValue(RecurrenceValue);
            if (Optional.IsCollectionDefined(WeeklyDaysList))
            {
                writer.WritePropertyName("weeklyDaysList");
                writer.WriteStartArray();
                foreach (var item in WeeklyDaysList)
                {
                    writer.WriteStringValue(item.ToSerialString());
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static ScheduleRecurrence DeserializeScheduleRecurrence(JsonElement element)
        {
            RecurrenceType recurrenceType = default;
            int recurrenceValue = default;
            Optional<IList<DayOfWeek>> weeklyDaysList = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("recurrenceType"))
                {
                    recurrenceType = property.Value.GetString().ToRecurrenceType();
                    continue;
                }
                if (property.NameEquals("recurrenceValue"))
                {
                    recurrenceValue = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("weeklyDaysList"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<DayOfWeek> array = new List<DayOfWeek>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString().ToDayOfWeek());
                    }
                    weeklyDaysList = array;
                    continue;
                }
            }
            return new ScheduleRecurrence(recurrenceType, recurrenceValue, Optional.ToList(weeklyDaysList));
        }
    }
}
