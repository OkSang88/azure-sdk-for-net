// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using HybridDataManagementClient.Models;

namespace HybridDataManagementClient
{
    /// <summary> A class representing the DataStore data model. </summary>
    public partial class DataStoreData : Azure.ResourceManager.Models.Resource
    {
        /// <summary> Initializes a new instance of DataStoreData. </summary>
        /// <param name="state"> State of the data source. </param>
        /// <param name="dataStoreTypeId"> The arm id of the data store type. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataStoreTypeId"/> is null. </exception>
        public DataStoreData(State state, string dataStoreTypeId)
        {
            if (dataStoreTypeId == null)
            {
                throw new ArgumentNullException(nameof(dataStoreTypeId));
            }

            State = state;
            DataStoreTypeId = dataStoreTypeId;
            CustomerSecrets = new ChangeTrackingList<CustomerSecret>();
        }

        /// <summary> Initializes a new instance of DataStoreData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="type"> The type. </param>
        /// <param name="repositoryId"> Arm Id for the manager resource to which the data source is associated. This is optional. </param>
        /// <param name="state"> State of the data source. </param>
        /// <param name="extendedProperties"> A generic json used differently by each data source type. </param>
        /// <param name="dataStoreTypeId"> The arm id of the data store type. </param>
        /// <param name="customerSecrets"> List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys. </param>
        internal DataStoreData(ResourceIdentifier id, string name, ResourceType type, string repositoryId, State state, object extendedProperties, string dataStoreTypeId, IList<CustomerSecret> customerSecrets) : base(id, name, type)
        {
            RepositoryId = repositoryId;
            State = state;
            ExtendedProperties = extendedProperties;
            DataStoreTypeId = dataStoreTypeId;
            CustomerSecrets = customerSecrets;
        }

        /// <summary> Arm Id for the manager resource to which the data source is associated. This is optional. </summary>
        public string RepositoryId { get; set; }
        /// <summary> State of the data source. </summary>
        public State State { get; set; }
        /// <summary> A generic json used differently by each data source type. </summary>
        public object ExtendedProperties { get; set; }
        /// <summary> The arm id of the data store type. </summary>
        public string DataStoreTypeId { get; set; }
        /// <summary> List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys. </summary>
        public IList<CustomerSecret> CustomerSecrets { get; }
    }
}
