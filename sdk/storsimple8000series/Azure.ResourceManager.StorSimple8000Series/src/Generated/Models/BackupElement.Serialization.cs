// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.StorSimple8000Series.Models
{
    public partial class BackupElement : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("elementId");
            writer.WriteStringValue(ElementId);
            writer.WritePropertyName("elementName");
            writer.WriteStringValue(ElementName);
            writer.WritePropertyName("elementType");
            writer.WriteStringValue(ElementType);
            writer.WritePropertyName("sizeInBytes");
            writer.WriteNumberValue(SizeInBytes);
            writer.WritePropertyName("volumeName");
            writer.WriteStringValue(VolumeName);
            writer.WritePropertyName("volumeContainerId");
            writer.WriteStringValue(VolumeContainerId);
            if (Optional.IsDefined(VolumeType))
            {
                writer.WritePropertyName("volumeType");
                writer.WriteStringValue(VolumeType.Value.ToSerialString());
            }
            writer.WriteEndObject();
        }

        internal static BackupElement DeserializeBackupElement(JsonElement element)
        {
            string elementId = default;
            string elementName = default;
            string elementType = default;
            long sizeInBytes = default;
            string volumeName = default;
            string volumeContainerId = default;
            Optional<VolumeType> volumeType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("elementId"))
                {
                    elementId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("elementName"))
                {
                    elementName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("elementType"))
                {
                    elementType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sizeInBytes"))
                {
                    sizeInBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("volumeName"))
                {
                    volumeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("volumeContainerId"))
                {
                    volumeContainerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("volumeType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    volumeType = property.Value.GetString().ToVolumeType();
                    continue;
                }
            }
            return new BackupElement(elementId, elementName, elementType, sizeInBytes, volumeName, volumeContainerId, Optional.ToNullable(volumeType));
        }
    }
}
