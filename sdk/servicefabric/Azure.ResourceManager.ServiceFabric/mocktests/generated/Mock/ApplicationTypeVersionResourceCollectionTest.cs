// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.ServiceFabric.Tests.Mock;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.ServiceFabric.Tests.Mock.Tests.Mock
{
    /// <summary> Test for ApplicationTypeVersionResource. </summary>
    public partial class ApplicationTypeVersionResourceCollectionMockTests : MockTestBase
    {
        public ApplicationTypeVersionResourceCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Put an application type version
            string version = "1.0";
            ServiceFabric.Tests.Mock.ApplicationTypeVersionResourceData parameters = new ServiceFabric.Tests.Mock.ApplicationTypeVersionResourceData(location: AzureLocation.WestUS)
            {
                AppPackageUrl = "http://fakelink.test.com/MyAppType",
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>()
            {
            });

            var applicationTypeResourceId = ServiceFabric.Tests.Mock.ApplicationTypeResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster", "myAppType");
            var collection = GetArmClient().GetApplicationTypeResource(applicationTypeResourceId).GetApplicationTypeVersionResources();
            await collection.CreateOrUpdateAsync(true, version, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get an application type version
            string version = "1.0";

            var applicationTypeResourceId = ServiceFabric.Tests.Mock.ApplicationTypeResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster", "myAppType");
            var collection = GetArmClient().GetApplicationTypeResource(applicationTypeResourceId).GetApplicationTypeVersionResources();
            await collection.GetAsync(version);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: Get a list of application type version resources

            var applicationTypeResourceId = ServiceFabric.Tests.Mock.ApplicationTypeResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster", "myAppType");
            var collection = GetArmClient().GetApplicationTypeResource(applicationTypeResourceId).GetApplicationTypeVersionResources();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
