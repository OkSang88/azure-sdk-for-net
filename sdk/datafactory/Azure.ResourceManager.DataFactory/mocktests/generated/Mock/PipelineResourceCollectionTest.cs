// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using DataFactoryManagementClient;
using DataFactoryManagementClient.Models;

namespace DataFactoryManagementClient.Tests.Mock
{
    /// <summary> Test for PipelineResource. </summary>
    public partial class PipelineResourceCollectionMockTests : MockTestBase
    {
        public PipelineResourceCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Pipelines_Create
            string pipelineName = "examplePipeline";
            DataFactoryManagementClient.PipelineResourceData pipeline = new DataFactoryManagementClient.PipelineResourceData()
            {
                Policy = new DataFactoryManagementClient.Models.PipelinePolicy()
                {
                    ElapsedTimeMetric = new DataFactoryManagementClient.Models.PipelineElapsedTimeMetricPolicy()
                    {
                        Duration = "0.00:10:00",
                    },
                },
            };
            string ifMatch = null;

            var factoryId = DataFactoryManagementClient.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var collection = GetArmClient().GetFactory(factoryId).GetPipelineResources();
            await collection.CreateOrUpdateAsync(true, pipelineName, pipeline, ifMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Pipelines_Update
            string pipelineName = "examplePipeline";
            DataFactoryManagementClient.PipelineResourceData pipeline = new DataFactoryManagementClient.PipelineResourceData()
            {
                Description = "Example description",
                Policy = new DataFactoryManagementClient.Models.PipelinePolicy()
                {
                    ElapsedTimeMetric = new DataFactoryManagementClient.Models.PipelineElapsedTimeMetricPolicy()
                    {
                        Duration = "0.00:10:00",
                    },
                },
            };
            string ifMatch = null;

            var factoryId = DataFactoryManagementClient.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var collection = GetArmClient().GetFactory(factoryId).GetPipelineResources();
            await collection.CreateOrUpdateAsync(true, pipelineName, pipeline, ifMatch);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Pipelines_Get
            string pipelineName = "examplePipeline";
            string ifNoneMatch = null;

            var factoryId = DataFactoryManagementClient.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var collection = GetArmClient().GetFactory(factoryId).GetPipelineResources();
            await collection.GetAsync(pipelineName, ifNoneMatch);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: Pipelines_ListByFactory

            var factoryId = DataFactoryManagementClient.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var collection = GetArmClient().GetFactory(factoryId).GetPipelineResources();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
