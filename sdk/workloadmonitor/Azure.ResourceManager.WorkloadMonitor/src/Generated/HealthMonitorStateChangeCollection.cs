// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.WorkloadMonitor
{
    /// <summary> A class representing collection of HealthMonitorStateChange and their operations over its parent. </summary>
    public partial class HealthMonitorStateChangeCollection : ArmCollection, IEnumerable<HealthMonitorStateChange>, IAsyncEnumerable<HealthMonitorStateChange>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HealthMonitorsRestOperations _healthMonitorsRestClient;

        /// <summary> Initializes a new instance of the <see cref="HealthMonitorStateChangeCollection"/> class for mocking. </summary>
        protected HealthMonitorStateChangeCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="HealthMonitorStateChangeCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal HealthMonitorStateChangeCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _healthMonitorsRestClient = new HealthMonitorsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != HealthMonitor.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, HealthMonitor.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Get the health state change of a monitor of a virtual machine at the provided timestamp. Optional parameter: $expand (retrieve the monitor&apos;s evidence and configuration). </summary>
        /// <param name="timestampUnix"> The timestamp of the state change (unix format). </param>
        /// <param name="expand"> Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="timestampUnix"/> is null. </exception>
        public virtual Response<HealthMonitorStateChange> Get(string timestampUnix, string expand = null, CancellationToken cancellationToken = default)
        {
            if (timestampUnix == null)
            {
                throw new ArgumentNullException(nameof(timestampUnix));
            }

            using var scope = _clientDiagnostics.CreateScope("HealthMonitorStateChangeCollection.Get");
            scope.Start();
            try
            {
                var response = _healthMonitorsRestClient.GetStateChange(Id.SubscriptionId, Id.ResourceGroupName, Id.ResourceType.Namespace, Id.Parent.ResourceType.GetLastType(), Id.Parent.Name, Id.Name, timestampUnix, expand, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new HealthMonitorStateChange(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the health state change of a monitor of a virtual machine at the provided timestamp. Optional parameter: $expand (retrieve the monitor&apos;s evidence and configuration). </summary>
        /// <param name="timestampUnix"> The timestamp of the state change (unix format). </param>
        /// <param name="expand"> Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="timestampUnix"/> is null. </exception>
        public async virtual Task<Response<HealthMonitorStateChange>> GetAsync(string timestampUnix, string expand = null, CancellationToken cancellationToken = default)
        {
            if (timestampUnix == null)
            {
                throw new ArgumentNullException(nameof(timestampUnix));
            }

            using var scope = _clientDiagnostics.CreateScope("HealthMonitorStateChangeCollection.Get");
            scope.Start();
            try
            {
                var response = await _healthMonitorsRestClient.GetStateChangeAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.ResourceType.Namespace, Id.Parent.ResourceType.GetLastType(), Id.Parent.Name, Id.Name, timestampUnix, expand, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new HealthMonitorStateChange(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="timestampUnix"> The timestamp of the state change (unix format). </param>
        /// <param name="expand"> Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="timestampUnix"/> is null. </exception>
        public virtual Response<HealthMonitorStateChange> GetIfExists(string timestampUnix, string expand = null, CancellationToken cancellationToken = default)
        {
            if (timestampUnix == null)
            {
                throw new ArgumentNullException(nameof(timestampUnix));
            }

            using var scope = _clientDiagnostics.CreateScope("HealthMonitorStateChangeCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _healthMonitorsRestClient.GetStateChange(Id.SubscriptionId, Id.ResourceGroupName, Id.ResourceType.Namespace, Id.Parent.ResourceType.GetLastType(), Id.Parent.Name, Id.Name, timestampUnix, expand, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<HealthMonitorStateChange>(null, response.GetRawResponse());
                return Response.FromValue(new HealthMonitorStateChange(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="timestampUnix"> The timestamp of the state change (unix format). </param>
        /// <param name="expand"> Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="timestampUnix"/> is null. </exception>
        public async virtual Task<Response<HealthMonitorStateChange>> GetIfExistsAsync(string timestampUnix, string expand = null, CancellationToken cancellationToken = default)
        {
            if (timestampUnix == null)
            {
                throw new ArgumentNullException(nameof(timestampUnix));
            }

            using var scope = _clientDiagnostics.CreateScope("HealthMonitorStateChangeCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _healthMonitorsRestClient.GetStateChangeAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.ResourceType.Namespace, Id.Parent.ResourceType.GetLastType(), Id.Parent.Name, Id.Name, timestampUnix, expand, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<HealthMonitorStateChange>(null, response.GetRawResponse());
                return Response.FromValue(new HealthMonitorStateChange(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="timestampUnix"> The timestamp of the state change (unix format). </param>
        /// <param name="expand"> Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="timestampUnix"/> is null. </exception>
        public virtual Response<bool> Exists(string timestampUnix, string expand = null, CancellationToken cancellationToken = default)
        {
            if (timestampUnix == null)
            {
                throw new ArgumentNullException(nameof(timestampUnix));
            }

            using var scope = _clientDiagnostics.CreateScope("HealthMonitorStateChangeCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(timestampUnix, expand, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="timestampUnix"> The timestamp of the state change (unix format). </param>
        /// <param name="expand"> Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="timestampUnix"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string timestampUnix, string expand = null, CancellationToken cancellationToken = default)
        {
            if (timestampUnix == null)
            {
                throw new ArgumentNullException(nameof(timestampUnix));
            }

            using var scope = _clientDiagnostics.CreateScope("HealthMonitorStateChangeCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(timestampUnix, expand, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the health state changes of a monitor of a virtual machine within the provided time window (default is the last 24 hours). Optional parameters: $expand (retrieve the monitor&apos;s evidence and configuration) and $filter (filter by heartbeat condition). </summary>
        /// <param name="filter"> Optionally filter by heartbeat condition. Example: $filter=isHeartbeat eq false. </param>
        /// <param name="expand"> Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration. </param>
        /// <param name="startTimestampUtc"> The start of the time window. </param>
        /// <param name="endTimestampUtc"> The end of the time window. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HealthMonitorStateChange" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<HealthMonitorStateChange> GetAll(string filter = null, string expand = null, DateTimeOffset? startTimestampUtc = null, DateTimeOffset? endTimestampUtc = null, CancellationToken cancellationToken = default)
        {
            Page<HealthMonitorStateChange> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("HealthMonitorStateChangeCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _healthMonitorsRestClient.ListStateChanges(Id.SubscriptionId, Id.ResourceGroupName, Id.ResourceType.Namespace, Id.Parent.ResourceType.GetLastType(), Id.Parent.Name, Id.Name, filter, expand, startTimestampUtc, endTimestampUtc, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new HealthMonitorStateChange(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<HealthMonitorStateChange> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("HealthMonitorStateChangeCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _healthMonitorsRestClient.ListStateChangesNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.ResourceType.Namespace, Id.Parent.ResourceType.GetLastType(), Id.Parent.Name, Id.Name, filter, expand, startTimestampUtc, endTimestampUtc, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new HealthMonitorStateChange(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get the health state changes of a monitor of a virtual machine within the provided time window (default is the last 24 hours). Optional parameters: $expand (retrieve the monitor&apos;s evidence and configuration) and $filter (filter by heartbeat condition). </summary>
        /// <param name="filter"> Optionally filter by heartbeat condition. Example: $filter=isHeartbeat eq false. </param>
        /// <param name="expand"> Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration. </param>
        /// <param name="startTimestampUtc"> The start of the time window. </param>
        /// <param name="endTimestampUtc"> The end of the time window. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="HealthMonitorStateChange" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<HealthMonitorStateChange> GetAllAsync(string filter = null, string expand = null, DateTimeOffset? startTimestampUtc = null, DateTimeOffset? endTimestampUtc = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<HealthMonitorStateChange>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("HealthMonitorStateChangeCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _healthMonitorsRestClient.ListStateChangesAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.ResourceType.Namespace, Id.Parent.ResourceType.GetLastType(), Id.Parent.Name, Id.Name, filter, expand, startTimestampUtc, endTimestampUtc, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new HealthMonitorStateChange(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<HealthMonitorStateChange>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("HealthMonitorStateChangeCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _healthMonitorsRestClient.ListStateChangesNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.ResourceType.Namespace, Id.Parent.ResourceType.GetLastType(), Id.Parent.Name, Id.Name, filter, expand, startTimestampUtc, endTimestampUtc, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new HealthMonitorStateChange(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<HealthMonitorStateChange> IEnumerable<HealthMonitorStateChange>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<HealthMonitorStateChange> IAsyncEnumerable<HealthMonitorStateChange>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, HealthMonitorStateChange, HealthMonitorStateChangeData> Construct() { }
    }
}
