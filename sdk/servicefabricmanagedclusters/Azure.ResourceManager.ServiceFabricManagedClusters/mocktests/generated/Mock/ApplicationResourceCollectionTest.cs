// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.ServiceFabricManagedClusters;
using Azure.ResourceManager.ServiceFabricManagedClusters.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.ServiceFabricManagedClusters.Tests.Mock
{
    /// <summary> Test for ApplicationResource. </summary>
    public partial class ApplicationResourceCollectionMockTests : MockTestBase
    {
        public ApplicationResourceCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Put an application with maximum parameters
            string applicationName = "myApp";
            ServiceFabricManagedClusters.ApplicationResourceData parameters = new ServiceFabricManagedClusters.ApplicationResourceData(location: "eastus")
            {
                Version = "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedclusters/myCluster/applicationTypes/myAppType/versions/1.0",
                UpgradePolicy = new ServiceFabricManagedClusters.Models.ApplicationUpgradePolicy()
                {
                    ApplicationHealthPolicy = new ServiceFabricManagedClusters.Models.ApplicationHealthPolicy(considerWarningAsError: true, maxPercentUnhealthyDeployedApplications: 0)
                    {
                        DefaultServiceTypeHealthPolicy = new ServiceFabricManagedClusters.Models.ServiceTypeHealthPolicy(maxPercentUnhealthyServices: 0, maxPercentUnhealthyPartitionsPerService: 0, maxPercentUnhealthyReplicasPerPartition: 0),
                    },
                    ForceRestart = false,
                    RollingUpgradeMonitoringPolicy = new ServiceFabricManagedClusters.Models.RollingUpgradeMonitoringPolicy(failureAction: new ServiceFabricManagedClusters.Models.FailureAction("Rollback"), healthCheckWaitDuration: "00:02:00", healthCheckStableDuration: "00:05:00", healthCheckRetryTimeout: "00:10:00", upgradeTimeout: "01:00:00", upgradeDomainTimeout: "00:15:00"),
                    InstanceCloseDelayDuration = 600,
                    UpgradeMode = new ServiceFabricManagedClusters.Models.RollingUpgradeMode("UnmonitoredAuto"),
                    UpgradeReplicaSetCheckTimeout = 3600,
                    RecreateApplication = false,
                },
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>()
            {
                ["a"] = "b",
            });

            var managedClusterId = ServiceFabricManagedClusters.ManagedCluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster");
            var collection = GetArmClient().GetManagedCluster(managedClusterId).GetApplicationResources();
            await collection.CreateOrUpdateAsync(true, applicationName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Put an application with minimum parameters
            string applicationName = "myApp";
            ServiceFabricManagedClusters.ApplicationResourceData parameters = new ServiceFabricManagedClusters.ApplicationResourceData(location: "eastus")
            {
                Version = "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedclusters/myCluster/applicationTypes/myAppType/versions/1.0",
            };

            var managedClusterId = ServiceFabricManagedClusters.ManagedCluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster");
            var collection = GetArmClient().GetManagedCluster(managedClusterId).GetApplicationResources();
            await collection.CreateOrUpdateAsync(true, applicationName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get an application
            string applicationName = "myApp";

            var managedClusterId = ServiceFabricManagedClusters.ManagedCluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster");
            var collection = GetArmClient().GetManagedCluster(managedClusterId).GetApplicationResources();
            await collection.GetAsync(applicationName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: Get a list of application resources

            var managedClusterId = ServiceFabricManagedClusters.ManagedCluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster");
            var collection = GetArmClient().GetManagedCluster(managedClusterId).GetApplicationResources();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
