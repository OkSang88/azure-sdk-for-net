// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using DataFactoryManagementClient;
using DataFactoryManagementClient.Models;

namespace DataFactoryManagementClient.Tests.Mock
{
    /// <summary> Test for DataFlowResource. </summary>
    public partial class DataFlowResourceCollectionMockTests : MockTestBase
    {
        public DataFlowResourceCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: DataFlows_Create
            string dataFlowName = "exampleDataFlow";
            DataFactoryManagementClient.DataFlowResourceData dataFlow = new DataFactoryManagementClient.DataFlowResourceData(properties: new DataFactoryManagementClient.Models.MappingDataFlow()
            {
                Script = "source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: false,validateSchema: false) ~> USDCurrency\nsource(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: true,validateSchema: false) ~> CADSource\nUSDCurrency, CADSource union(byName: true)~> Union\nUnion derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn\nNewCurrencyColumn split(Country == 'USD',Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)\nConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink\nConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink",
                Type = "MappingDataFlow",
                Description = "Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation.",
            });
            string ifMatch = null;

            var factoryId = DataFactoryManagementClient.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var collection = GetArmClient().GetFactory(factoryId).GetDataFlowResources();
            await collection.CreateOrUpdateAsync(true, dataFlowName, dataFlow, ifMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: DataFlows_Update
            string dataFlowName = "exampleDataFlow";
            DataFactoryManagementClient.DataFlowResourceData dataFlow = new DataFactoryManagementClient.DataFlowResourceData(properties: new DataFactoryManagementClient.Models.MappingDataFlow()
            {
                Script = "source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: false,validateSchema: false) ~> USDCurrency\nsource(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: true,validateSchema: false) ~> CADSource\nUSDCurrency, CADSource union(byName: true)~> Union\nUnion derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn\nNewCurrencyColumn split(Country == 'USD',Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)\nConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink\nConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink",
                Type = "MappingDataFlow",
                Description = "Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation.",
            });
            string ifMatch = null;

            var factoryId = DataFactoryManagementClient.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var collection = GetArmClient().GetFactory(factoryId).GetDataFlowResources();
            await collection.CreateOrUpdateAsync(true, dataFlowName, dataFlow, ifMatch);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: DataFlows_Get
            string dataFlowName = "exampleDataFlow";
            string ifNoneMatch = null;

            var factoryId = DataFactoryManagementClient.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var collection = GetArmClient().GetFactory(factoryId).GetDataFlowResources();
            await collection.GetAsync(dataFlowName, ifNoneMatch);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: DataFlows_ListByFactory

            var factoryId = DataFactoryManagementClient.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var collection = GetArmClient().GetFactory(factoryId).GetDataFlowResources();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
