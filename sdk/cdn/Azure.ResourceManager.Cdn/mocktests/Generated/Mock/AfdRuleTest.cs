// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Cdn.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Cdn.Tests.Mock
{
    /// <summary> Test for AfdRule. </summary>
    public partial class AfdRuleMockTests : MockTestBase
    {
        public AfdRuleMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Rules_Get
            var afdRule = GetArmClient().GetAfdRule(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/ruleSets/ruleSet1/rules/rule1"));

            await afdRule.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: Rules_Delete
            var afdRule = GetArmClient().GetAfdRule(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/ruleSets/ruleSet1/rules/rule1"));

            await afdRule.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: Rules_Update
            var afdRule = GetArmClient().GetAfdRule(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/ruleSets/ruleSet1/rules/rule1"));
            Cdn.Models.RuleUpdateOptions ruleUpdateProperties = new Cdn.Models.RuleUpdateOptions()
            {
                Order = 1,
            };

            await afdRule.UpdateAsync(ruleUpdateProperties);
        }
    }
}
