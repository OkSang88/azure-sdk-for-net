// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.ServiceFabricMesh.Models;

namespace Azure.ResourceManager.ServiceFabricMesh
{
    public partial class GatewayResourceDescriptionData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("tags");
            writer.WriteStartObject();
            foreach (var item in Tags)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("location");
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            writer.WritePropertyName("sourceNetwork");
            writer.WriteObjectValue(SourceNetwork);
            writer.WritePropertyName("destinationNetwork");
            writer.WriteObjectValue(DestinationNetwork);
            if (Optional.IsCollectionDefined(Tcp))
            {
                writer.WritePropertyName("tcp");
                writer.WriteStartArray();
                foreach (var item in Tcp)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Http))
            {
                writer.WritePropertyName("http");
                writer.WriteStartArray();
                foreach (var item in Http)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static GatewayResourceDescriptionData DeserializeGatewayResourceDescriptionData(JsonElement element)
        {
            IDictionary<string, string> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<string> provisioningState = default;
            Optional<string> description = default;
            NetworkRef sourceNetwork = default;
            NetworkRef destinationNetwork = default;
            Optional<IList<TcpConfig>> tcp = default;
            Optional<IList<HttpConfig>> http = default;
            Optional<ResourceStatus> status = default;
            Optional<string> statusDetails = default;
            Optional<string> ipAddress = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tags"))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    location = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("provisioningState"))
                        {
                            provisioningState = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("description"))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("sourceNetwork"))
                        {
                            sourceNetwork = NetworkRef.DeserializeNetworkRef(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("destinationNetwork"))
                        {
                            destinationNetwork = NetworkRef.DeserializeNetworkRef(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("tcp"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<TcpConfig> array = new List<TcpConfig>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(TcpConfig.DeserializeTcpConfig(item));
                            }
                            tcp = array;
                            continue;
                        }
                        if (property0.NameEquals("http"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<HttpConfig> array = new List<HttpConfig>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(HttpConfig.DeserializeHttpConfig(item));
                            }
                            http = array;
                            continue;
                        }
                        if (property0.NameEquals("status"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            status = new ResourceStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("statusDetails"))
                        {
                            statusDetails = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("ipAddress"))
                        {
                            ipAddress = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new GatewayResourceDescriptionData(id, name, type, tags, location, provisioningState.Value, description.Value, sourceNetwork, destinationNetwork, Optional.ToList(tcp), Optional.ToList(http), Optional.ToNullable(status), statusDetails.Value, ipAddress.Value);
        }
    }
}
