// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace StorSimple8000SeriesManagementClient.Models
{
    public partial class FailoverTarget
    {
        internal static FailoverTarget DeserializeFailoverTarget(JsonElement element)
        {
            Optional<string> deviceId = default;
            Optional<DeviceStatus> deviceStatus = default;
            Optional<string> modelDescription = default;
            Optional<string> deviceSoftwareVersion = default;
            Optional<int> dataContainersCount = default;
            Optional<int> volumesCount = default;
            Optional<long> availableLocalStorageInBytes = default;
            Optional<long> availableTieredStorageInBytes = default;
            Optional<string> deviceLocation = default;
            Optional<string> friendlyDeviceSoftwareVersion = default;
            Optional<TargetEligibilityResult> eligibilityResult = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("deviceId"))
                {
                    deviceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("deviceStatus"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    deviceStatus = property.Value.GetString().ToDeviceStatus();
                    continue;
                }
                if (property.NameEquals("modelDescription"))
                {
                    modelDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("deviceSoftwareVersion"))
                {
                    deviceSoftwareVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dataContainersCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dataContainersCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("volumesCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    volumesCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("availableLocalStorageInBytes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    availableLocalStorageInBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("availableTieredStorageInBytes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    availableTieredStorageInBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("deviceLocation"))
                {
                    deviceLocation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("friendlyDeviceSoftwareVersion"))
                {
                    friendlyDeviceSoftwareVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("eligibilityResult"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    eligibilityResult = TargetEligibilityResult.DeserializeTargetEligibilityResult(property.Value);
                    continue;
                }
            }
            return new FailoverTarget(deviceId.Value, Optional.ToNullable(deviceStatus), modelDescription.Value, deviceSoftwareVersion.Value, Optional.ToNullable(dataContainersCount), Optional.ToNullable(volumesCount), Optional.ToNullable(availableLocalStorageInBytes), Optional.ToNullable(availableTieredStorageInBytes), deviceLocation.Value, friendlyDeviceSoftwareVersion.Value, eligibilityResult.Value);
        }
    }
}
