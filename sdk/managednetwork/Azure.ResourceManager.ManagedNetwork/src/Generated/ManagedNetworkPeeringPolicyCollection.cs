// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.ManagedNetwork.Models;

namespace Azure.ResourceManager.ManagedNetwork
{
    /// <summary> A class representing collection of ManagedNetworkPeeringPolicy and their operations over its parent. </summary>
    public partial class ManagedNetworkPeeringPolicyCollection : ArmCollection, IEnumerable<ManagedNetworkPeeringPolicy>, IAsyncEnumerable<ManagedNetworkPeeringPolicy>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly ManagedNetworkPeeringPoliciesRestOperations _managedNetworkPeeringPoliciesRestClient;

        /// <summary> Initializes a new instance of the <see cref="ManagedNetworkPeeringPolicyCollection"/> class for mocking. </summary>
        protected ManagedNetworkPeeringPolicyCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ManagedNetworkPeeringPolicyCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal ManagedNetworkPeeringPolicyCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            ClientOptions.TryGetApiVersion(ManagedNetworkPeeringPolicy.ResourceType, out string apiVersion);
            _managedNetworkPeeringPoliciesRestClient = new ManagedNetworkPeeringPoliciesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ManagedNetwork.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ManagedNetwork.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> The Put ManagedNetworkPeeringPolicies operation creates/updates a new Managed Network Peering Policy. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="managedNetworkPeeringPolicyName"> The name of the Managed Network Peering Policy. </param>
        /// <param name="managedNetworkPolicy"> Parameters supplied to create/update a Managed Network Peering Policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managedNetworkPeeringPolicyName"/> or <paramref name="managedNetworkPolicy"/> is null. </exception>
        public virtual ManagedNetworkPeeringPolicyCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string managedNetworkPeeringPolicyName, ManagedNetworkPeeringPolicyData managedNetworkPolicy, CancellationToken cancellationToken = default)
        {
            if (managedNetworkPeeringPolicyName == null)
            {
                throw new ArgumentNullException(nameof(managedNetworkPeeringPolicyName));
            }
            if (managedNetworkPolicy == null)
            {
                throw new ArgumentNullException(nameof(managedNetworkPolicy));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedNetworkPeeringPolicyCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _managedNetworkPeeringPoliciesRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, managedNetworkPeeringPolicyName, managedNetworkPolicy, cancellationToken);
                var operation = new ManagedNetworkPeeringPolicyCreateOrUpdateOperation(this, _clientDiagnostics, Pipeline, _managedNetworkPeeringPoliciesRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, managedNetworkPeeringPolicyName, managedNetworkPolicy).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The Put ManagedNetworkPeeringPolicies operation creates/updates a new Managed Network Peering Policy. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="managedNetworkPeeringPolicyName"> The name of the Managed Network Peering Policy. </param>
        /// <param name="managedNetworkPolicy"> Parameters supplied to create/update a Managed Network Peering Policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managedNetworkPeeringPolicyName"/> or <paramref name="managedNetworkPolicy"/> is null. </exception>
        public async virtual Task<ManagedNetworkPeeringPolicyCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string managedNetworkPeeringPolicyName, ManagedNetworkPeeringPolicyData managedNetworkPolicy, CancellationToken cancellationToken = default)
        {
            if (managedNetworkPeeringPolicyName == null)
            {
                throw new ArgumentNullException(nameof(managedNetworkPeeringPolicyName));
            }
            if (managedNetworkPolicy == null)
            {
                throw new ArgumentNullException(nameof(managedNetworkPolicy));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedNetworkPeeringPolicyCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _managedNetworkPeeringPoliciesRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, managedNetworkPeeringPolicyName, managedNetworkPolicy, cancellationToken).ConfigureAwait(false);
                var operation = new ManagedNetworkPeeringPolicyCreateOrUpdateOperation(this, _clientDiagnostics, Pipeline, _managedNetworkPeeringPoliciesRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, managedNetworkPeeringPolicyName, managedNetworkPolicy).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The Get ManagedNetworkPeeringPolicies operation gets a Managed Network Peering Policy resource, specified by the  resource group, Managed Network name, and peering policy name. </summary>
        /// <param name="managedNetworkPeeringPolicyName"> The name of the Managed Network Peering Policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managedNetworkPeeringPolicyName"/> is null. </exception>
        public virtual Response<ManagedNetworkPeeringPolicy> Get(string managedNetworkPeeringPolicyName, CancellationToken cancellationToken = default)
        {
            if (managedNetworkPeeringPolicyName == null)
            {
                throw new ArgumentNullException(nameof(managedNetworkPeeringPolicyName));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedNetworkPeeringPolicyCollection.Get");
            scope.Start();
            try
            {
                var response = _managedNetworkPeeringPoliciesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, managedNetworkPeeringPolicyName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ManagedNetworkPeeringPolicy(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The Get ManagedNetworkPeeringPolicies operation gets a Managed Network Peering Policy resource, specified by the  resource group, Managed Network name, and peering policy name. </summary>
        /// <param name="managedNetworkPeeringPolicyName"> The name of the Managed Network Peering Policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managedNetworkPeeringPolicyName"/> is null. </exception>
        public async virtual Task<Response<ManagedNetworkPeeringPolicy>> GetAsync(string managedNetworkPeeringPolicyName, CancellationToken cancellationToken = default)
        {
            if (managedNetworkPeeringPolicyName == null)
            {
                throw new ArgumentNullException(nameof(managedNetworkPeeringPolicyName));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedNetworkPeeringPolicyCollection.Get");
            scope.Start();
            try
            {
                var response = await _managedNetworkPeeringPoliciesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, managedNetworkPeeringPolicyName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new ManagedNetworkPeeringPolicy(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="managedNetworkPeeringPolicyName"> The name of the Managed Network Peering Policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managedNetworkPeeringPolicyName"/> is null. </exception>
        public virtual Response<ManagedNetworkPeeringPolicy> GetIfExists(string managedNetworkPeeringPolicyName, CancellationToken cancellationToken = default)
        {
            if (managedNetworkPeeringPolicyName == null)
            {
                throw new ArgumentNullException(nameof(managedNetworkPeeringPolicyName));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedNetworkPeeringPolicyCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _managedNetworkPeeringPoliciesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, managedNetworkPeeringPolicyName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<ManagedNetworkPeeringPolicy>(null, response.GetRawResponse());
                return Response.FromValue(new ManagedNetworkPeeringPolicy(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="managedNetworkPeeringPolicyName"> The name of the Managed Network Peering Policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managedNetworkPeeringPolicyName"/> is null. </exception>
        public async virtual Task<Response<ManagedNetworkPeeringPolicy>> GetIfExistsAsync(string managedNetworkPeeringPolicyName, CancellationToken cancellationToken = default)
        {
            if (managedNetworkPeeringPolicyName == null)
            {
                throw new ArgumentNullException(nameof(managedNetworkPeeringPolicyName));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedNetworkPeeringPolicyCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _managedNetworkPeeringPoliciesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, managedNetworkPeeringPolicyName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<ManagedNetworkPeeringPolicy>(null, response.GetRawResponse());
                return Response.FromValue(new ManagedNetworkPeeringPolicy(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="managedNetworkPeeringPolicyName"> The name of the Managed Network Peering Policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managedNetworkPeeringPolicyName"/> is null. </exception>
        public virtual Response<bool> Exists(string managedNetworkPeeringPolicyName, CancellationToken cancellationToken = default)
        {
            if (managedNetworkPeeringPolicyName == null)
            {
                throw new ArgumentNullException(nameof(managedNetworkPeeringPolicyName));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedNetworkPeeringPolicyCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(managedNetworkPeeringPolicyName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="managedNetworkPeeringPolicyName"> The name of the Managed Network Peering Policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managedNetworkPeeringPolicyName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string managedNetworkPeeringPolicyName, CancellationToken cancellationToken = default)
        {
            if (managedNetworkPeeringPolicyName == null)
            {
                throw new ArgumentNullException(nameof(managedNetworkPeeringPolicyName));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedNetworkPeeringPolicyCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(managedNetworkPeeringPolicyName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The ListByManagedNetwork PeeringPolicies operation retrieves all the Managed Network Peering Policies in a specified Managed Network, in a paginated format. </summary>
        /// <param name="top"> May be used to limit the number of results in a page for list queries. </param>
        /// <param name="skiptoken"> Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ManagedNetworkPeeringPolicy" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ManagedNetworkPeeringPolicy> GetAll(int? top = null, string skiptoken = null, CancellationToken cancellationToken = default)
        {
            Page<ManagedNetworkPeeringPolicy> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ManagedNetworkPeeringPolicyCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _managedNetworkPeeringPoliciesRestClient.ListByManagedNetwork(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, top, skiptoken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ManagedNetworkPeeringPolicy(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ManagedNetworkPeeringPolicy> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ManagedNetworkPeeringPolicyCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _managedNetworkPeeringPoliciesRestClient.ListByManagedNetworkNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, top, skiptoken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ManagedNetworkPeeringPolicy(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> The ListByManagedNetwork PeeringPolicies operation retrieves all the Managed Network Peering Policies in a specified Managed Network, in a paginated format. </summary>
        /// <param name="top"> May be used to limit the number of results in a page for list queries. </param>
        /// <param name="skiptoken"> Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ManagedNetworkPeeringPolicy" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ManagedNetworkPeeringPolicy> GetAllAsync(int? top = null, string skiptoken = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<ManagedNetworkPeeringPolicy>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ManagedNetworkPeeringPolicyCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _managedNetworkPeeringPoliciesRestClient.ListByManagedNetworkAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, top, skiptoken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ManagedNetworkPeeringPolicy(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ManagedNetworkPeeringPolicy>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ManagedNetworkPeeringPolicyCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _managedNetworkPeeringPoliciesRestClient.ListByManagedNetworkNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, top, skiptoken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ManagedNetworkPeeringPolicy(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<ManagedNetworkPeeringPolicy> IEnumerable<ManagedNetworkPeeringPolicy>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ManagedNetworkPeeringPolicy> IAsyncEnumerable<ManagedNetworkPeeringPolicy>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, ManagedNetworkPeeringPolicy, ManagedNetworkPeeringPolicyData> Construct() { }
    }
}
