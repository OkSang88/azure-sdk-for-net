// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.StorSimple8000Series.Tests.Mock;
using Azure.ResourceManager.StorSimple8000Series.Tests.Mock.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.StorSimple8000Series.Tests.Mock.Tests.Mock
{
    /// <summary> Test for BandwidthSetting. </summary>
    public partial class BandwidthSettingCollectionMockTests : MockTestBase
    {
        public BandwidthSettingCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: BandwidthSettingsCreateOrUpdate
            string bandwidthSettingName = "BWSForTest";
            StorSimple8000Series.Tests.Mock.BandwidthSettingData parameters = new StorSimple8000Series.Tests.Mock.BandwidthSettingData(schedules: new List<StorSimple8000Series.Tests.Mock.Models.BandwidthSchedule>()
{
new StorSimple8000Series.Tests.Mock.Models.BandwidthSchedule(start: new StorSimple8000Series.Tests.Mock.Models.Time(hours: 10,minutes: 0,seconds: 0),stop: new StorSimple8000Series.Tests.Mock.Models.Time(hours: 20,minutes: 0,seconds: 0),rateInMbps: 10,days: new List<StorSimple8000Series.Tests.Mock.Models.DayOfWeek>()
{
StorSimple8000Series.Tests.Mock.Models.DayOfWeek.Saturday,StorSimple8000Series.Tests.Mock.Models.DayOfWeek.Sunday,}),});

            var managerId = StorSimple8000Series.Tests.Mock.Manager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1");
            var collection = GetArmClient().GetManager(managerId).GetBandwidthSettings();
            await collection.CreateOrUpdateAsync(true, bandwidthSettingName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: BandwidthSettingsGet
            string bandwidthSettingName = "bandwidthSetting1";

            var managerId = StorSimple8000Series.Tests.Mock.Manager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1");
            var collection = GetArmClient().GetManager(managerId).GetBandwidthSettings();
            await collection.GetAsync(bandwidthSettingName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: BandwidthSettingsListByManager

            var managerId = StorSimple8000Series.Tests.Mock.Manager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1");
            var collection = GetArmClient().GetManager(managerId).GetBandwidthSettings();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
