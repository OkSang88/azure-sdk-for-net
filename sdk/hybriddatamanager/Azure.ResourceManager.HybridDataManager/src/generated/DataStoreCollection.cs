// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using HybridDataManagementClient.Models;

namespace HybridDataManagementClient
{
    /// <summary> A class representing collection of DataStore and their operations over its parent. </summary>
    public partial class DataStoreCollection : ArmCollection, IEnumerable<DataStore>, IAsyncEnumerable<DataStore>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly DataStoresRestOperations _dataStoresRestClient;

        /// <summary> Initializes a new instance of the <see cref="DataStoreCollection"/> class for mocking. </summary>
        protected DataStoreCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="DataStoreCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal DataStoreCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _dataStoresRestClient = new DataStoresRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != DataManager.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, DataManager.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Creates or updates the data store/repository in the data manager. </summary>
        /// <param name="dataStoreName"> The data store/repository name to be created or updated. </param>
        /// <param name="dataStore"> The data store/repository object to be created or updated. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataStoreName"/> or <paramref name="dataStore"/> is null. </exception>
        public virtual DataStoreCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string dataStoreName, DataStoreData dataStore, CancellationToken cancellationToken = default)
        {
            if (dataStoreName == null)
            {
                throw new ArgumentNullException(nameof(dataStoreName));
            }
            if (dataStore == null)
            {
                throw new ArgumentNullException(nameof(dataStore));
            }

            using var scope = _clientDiagnostics.CreateScope("DataStoreCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _dataStoresRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dataStoreName, dataStore, cancellationToken);
                var operation = new DataStoreCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _dataStoresRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dataStoreName, dataStore).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates the data store/repository in the data manager. </summary>
        /// <param name="dataStoreName"> The data store/repository name to be created or updated. </param>
        /// <param name="dataStore"> The data store/repository object to be created or updated. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataStoreName"/> or <paramref name="dataStore"/> is null. </exception>
        public async virtual Task<DataStoreCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string dataStoreName, DataStoreData dataStore, CancellationToken cancellationToken = default)
        {
            if (dataStoreName == null)
            {
                throw new ArgumentNullException(nameof(dataStoreName));
            }
            if (dataStore == null)
            {
                throw new ArgumentNullException(nameof(dataStore));
            }

            using var scope = _clientDiagnostics.CreateScope("DataStoreCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _dataStoresRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dataStoreName, dataStore, cancellationToken).ConfigureAwait(false);
                var operation = new DataStoreCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _dataStoresRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dataStoreName, dataStore).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This method gets the data store/repository by name. </summary>
        /// <param name="dataStoreName"> The data store/repository name queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataStoreName"/> is null. </exception>
        public virtual Response<DataStore> Get(string dataStoreName, CancellationToken cancellationToken = default)
        {
            if (dataStoreName == null)
            {
                throw new ArgumentNullException(nameof(dataStoreName));
            }

            using var scope = _clientDiagnostics.CreateScope("DataStoreCollection.Get");
            scope.Start();
            try
            {
                var response = _dataStoresRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dataStoreName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DataStore(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This method gets the data store/repository by name. </summary>
        /// <param name="dataStoreName"> The data store/repository name queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataStoreName"/> is null. </exception>
        public async virtual Task<Response<DataStore>> GetAsync(string dataStoreName, CancellationToken cancellationToken = default)
        {
            if (dataStoreName == null)
            {
                throw new ArgumentNullException(nameof(dataStoreName));
            }

            using var scope = _clientDiagnostics.CreateScope("DataStoreCollection.Get");
            scope.Start();
            try
            {
                var response = await _dataStoresRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dataStoreName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new DataStore(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="dataStoreName"> The data store/repository name queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataStoreName"/> is null. </exception>
        public virtual Response<DataStore> GetIfExists(string dataStoreName, CancellationToken cancellationToken = default)
        {
            if (dataStoreName == null)
            {
                throw new ArgumentNullException(nameof(dataStoreName));
            }

            using var scope = _clientDiagnostics.CreateScope("DataStoreCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _dataStoresRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dataStoreName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<DataStore>(null, response.GetRawResponse());
                return Response.FromValue(new DataStore(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="dataStoreName"> The data store/repository name queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataStoreName"/> is null. </exception>
        public async virtual Task<Response<DataStore>> GetIfExistsAsync(string dataStoreName, CancellationToken cancellationToken = default)
        {
            if (dataStoreName == null)
            {
                throw new ArgumentNullException(nameof(dataStoreName));
            }

            using var scope = _clientDiagnostics.CreateScope("DataStoreCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _dataStoresRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, dataStoreName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<DataStore>(null, response.GetRawResponse());
                return Response.FromValue(new DataStore(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="dataStoreName"> The data store/repository name queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataStoreName"/> is null. </exception>
        public virtual Response<bool> Exists(string dataStoreName, CancellationToken cancellationToken = default)
        {
            if (dataStoreName == null)
            {
                throw new ArgumentNullException(nameof(dataStoreName));
            }

            using var scope = _clientDiagnostics.CreateScope("DataStoreCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(dataStoreName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="dataStoreName"> The data store/repository name queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataStoreName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string dataStoreName, CancellationToken cancellationToken = default)
        {
            if (dataStoreName == null)
            {
                throw new ArgumentNullException(nameof(dataStoreName));
            }

            using var scope = _clientDiagnostics.CreateScope("DataStoreCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(dataStoreName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets all the data stores/repositories in the given resource. </summary>
        /// <param name="filter"> OData Filter options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DataStore" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DataStore> GetAll(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<DataStore> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DataStoreCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _dataStoresRestClient.ListByDataManager(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DataStore(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DataStore> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DataStoreCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _dataStoresRestClient.ListByDataManagerNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DataStore(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all the data stores/repositories in the given resource. </summary>
        /// <param name="filter"> OData Filter options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DataStore" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DataStore> GetAllAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<DataStore>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DataStoreCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _dataStoresRestClient.ListByDataManagerAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DataStore(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DataStore>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DataStoreCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _dataStoresRestClient.ListByDataManagerNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DataStore(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<DataStore> IEnumerable<DataStore>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<DataStore> IAsyncEnumerable<DataStore>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, DataStore, DataStoreData> Construct() { }
    }
}
