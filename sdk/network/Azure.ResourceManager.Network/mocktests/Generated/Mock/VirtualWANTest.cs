// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for VirtualWAN. </summary>
    public partial class VirtualWANMockTests : MockTestBase
    {
        public VirtualWANMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: VirtualWANGet
            var virtualWAN = GetArmClient().GetVirtualWAN(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualWans/wan1"));

            await virtualWAN.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: VirtualWANDelete
            var virtualWAN = GetArmClient().GetVirtualWAN(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualWans/virtualWan1"));

            await virtualWAN.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: VirtualWANUpdate
            var virtualWAN = GetArmClient().GetVirtualWAN(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualWans/wan1"));
            Network.Models.TagsObject wANParameters = new Network.Models.TagsObject();

            await virtualWAN.UpdateAsync(wANParameters);
        }

        [RecordedTest]
        public async Task SupportedSecurityProvidersAsync()
        {
            // Example: supportedSecurityProviders
            var virtualWAN = GetArmClient().GetVirtualWAN(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualWans/wan1"));

            await virtualWAN.SupportedSecurityProvidersAsync();
        }

        [RecordedTest]
        public async Task GeneratevirtualwanvpnserverconfigurationvpnprofileAsync()
        {
            // Example: GenerateVirtualWanVpnServerConfigurationVpnProfile
            var virtualWAN = GetArmClient().GetVirtualWAN(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualWans/wan1"));
            Network.Models.VirtualWanVpnProfileParameters vpnClientParams = new Network.Models.VirtualWanVpnProfileParameters()
            {
                VpnServerConfigurationResourceId = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnServerConfigurations/vpnconfig1",
                AuthenticationMethod = new Network.Models.AuthenticationMethod("EAPTLS"),
            };

            await virtualWAN.GeneratevirtualwanvpnserverconfigurationvpnprofileAsync(vpnClientParams);
        }

        [RecordedTest]
        public async Task DownloadVpnSitesConfigurationAsync()
        {
            // Example: VpnSitesConfigurationDownload
            var virtualWAN = GetArmClient().GetVirtualWAN(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualWans/wan1"));
            Network.Models.GetVpnSitesConfigurationRequest request = new Network.Models.GetVpnSitesConfigurationRequest(outputBlobSasUrl: "https://blobcortextesturl.blob.core.windows.net/folderforconfig/vpnFile?sp=rw&se=2018-01-10T03%3A42%3A04Z&sv=2017-04-17&sig=WvXrT5bDmDFfgHs%2Brz%2BjAu123eRCNE9BO0eQYcPDT7pY%3D&sr=b");

            await virtualWAN.DownloadVpnSitesConfigurationAsync(request);
        }

        [RecordedTest]
        public async Task GetVpnServerConfigurationsAssociatedWithVirtualWanAsync()
        {
            // Example: GetVirtualWanVpnServerConfigurations
            var virtualWAN = GetArmClient().GetVirtualWAN(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualWans/wan1"));

            await virtualWAN.GetVpnServerConfigurationsAssociatedWithVirtualWanAsync();
        }
    }
}
