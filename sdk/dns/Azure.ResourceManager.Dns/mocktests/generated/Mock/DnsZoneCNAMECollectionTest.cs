// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;
using DnsManagementClient;
using DnsManagementClient.Models;

namespace DnsManagementClient.Tests.Mock
{
    /// <summary> Test for RecordSet. </summary>
    public partial class DnsZoneCNAMECollectionMockTests : MockTestBase
    {
        public DnsZoneCNAMECollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create A recordset
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.A;
            string relativeRecordSetName = "record1";
            DnsManagementClient.RecordSetData parameters = new DnsManagementClient.RecordSetData()
            {
                TTL = 3600,
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await collection.CreateOrUpdateAsync(recordType, relativeRecordSetName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Create A recordset with alias target resource
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.A;
            string relativeRecordSetName = "record1";
            DnsManagementClient.RecordSetData parameters = new DnsManagementClient.RecordSetData()
            {
                TTL = 3600,
                TargetResource = new WritableSubResource()
                {
                    Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test/providers/Microsoft.Network/trafficManagerProfiles/testpp2"),
                },
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await collection.CreateOrUpdateAsync(recordType, relativeRecordSetName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate3()
        {
            // Example: Create AAAA recordset
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.Aaaa;
            string relativeRecordSetName = "record1";
            DnsManagementClient.RecordSetData parameters = new DnsManagementClient.RecordSetData()
            {
                TTL = 3600,
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await collection.CreateOrUpdateAsync(recordType, relativeRecordSetName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate4()
        {
            // Example: Create CAA recordset
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.CAA;
            string relativeRecordSetName = "record1";
            DnsManagementClient.RecordSetData parameters = new DnsManagementClient.RecordSetData()
            {
                TTL = 3600,
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await collection.CreateOrUpdateAsync(recordType, relativeRecordSetName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate5()
        {
            // Example: Create CNAME recordset
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.Cname;
            string relativeRecordSetName = "record1";
            DnsManagementClient.RecordSetData parameters = new DnsManagementClient.RecordSetData()
            {
                TTL = 3600,
                CnameRecord = new DnsManagementClient.Models.CnameRecord()
                {
                    Cname = "contoso.com",
                },
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await collection.CreateOrUpdateAsync(recordType, relativeRecordSetName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate6()
        {
            // Example: Create MX recordset
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.MX;
            string relativeRecordSetName = "record1";
            DnsManagementClient.RecordSetData parameters = new DnsManagementClient.RecordSetData()
            {
                TTL = 3600,
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await collection.CreateOrUpdateAsync(recordType, relativeRecordSetName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate7()
        {
            // Example: Create NS recordset
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.NS;
            string relativeRecordSetName = "record1";
            DnsManagementClient.RecordSetData parameters = new DnsManagementClient.RecordSetData()
            {
                TTL = 3600,
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await collection.CreateOrUpdateAsync(recordType, relativeRecordSetName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate8()
        {
            // Example: Create PTR recordset
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.PTR;
            string relativeRecordSetName = "1";
            DnsManagementClient.RecordSetData parameters = new DnsManagementClient.RecordSetData()
            {
                TTL = 3600,
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "0.0.127.in-addr.arpa");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await collection.CreateOrUpdateAsync(recordType, relativeRecordSetName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate9()
        {
            // Example: Create SOA recordset
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.SOA;
            string relativeRecordSetName = "@";
            DnsManagementClient.RecordSetData parameters = new DnsManagementClient.RecordSetData()
            {
                TTL = 3600,
                SoaRecord = new DnsManagementClient.Models.SoaRecord()
                {
                    Host = "ns1.contoso.com",
                    Email = "hostmaster.contoso.com",
                    SerialNumber = 1,
                    RefreshTime = 3600,
                    RetryTime = 300,
                    ExpireTime = 2419200,
                    MinimumTtl = 300,
                },
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await collection.CreateOrUpdateAsync(recordType, relativeRecordSetName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate10()
        {
            // Example: Create SRV recordset
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.SRV;
            string relativeRecordSetName = "record1";
            DnsManagementClient.RecordSetData parameters = new DnsManagementClient.RecordSetData()
            {
                TTL = 3600,
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await collection.CreateOrUpdateAsync(recordType, relativeRecordSetName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate11()
        {
            // Example: Create TXT recordset
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.TXT;
            string relativeRecordSetName = "record1";
            DnsManagementClient.RecordSetData parameters = new DnsManagementClient.RecordSetData()
            {
                TTL = 3600,
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await collection.CreateOrUpdateAsync(recordType, relativeRecordSetName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get A recordset
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.A;
            string relativeRecordSetName = "record1";

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await collection.GetAsync(recordType, relativeRecordSetName);
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: Get AAAA recordset
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.Aaaa;
            string relativeRecordSetName = "record1";

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await collection.GetAsync(recordType, relativeRecordSetName);
        }

        [RecordedTest]
        public async Task Get3()
        {
            // Example: Get CAA recordset
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.CAA;
            string relativeRecordSetName = "record1";

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await collection.GetAsync(recordType, relativeRecordSetName);
        }

        [RecordedTest]
        public async Task Get4()
        {
            // Example: Get CNAME recordset
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.Cname;
            string relativeRecordSetName = "record1";

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await collection.GetAsync(recordType, relativeRecordSetName);
        }

        [RecordedTest]
        public async Task Get5()
        {
            // Example: Get MX recordset
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.MX;
            string relativeRecordSetName = "record1";

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await collection.GetAsync(recordType, relativeRecordSetName);
        }

        [RecordedTest]
        public async Task Get6()
        {
            // Example: Get NS recordset
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.NS;
            string relativeRecordSetName = "record1";

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await collection.GetAsync(recordType, relativeRecordSetName);
        }

        [RecordedTest]
        public async Task Get7()
        {
            // Example: Get PTR recordset
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.PTR;
            string relativeRecordSetName = "1";

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "0.0.127.in-addr.arpa");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await collection.GetAsync(recordType, relativeRecordSetName);
        }

        [RecordedTest]
        public async Task Get8()
        {
            // Example: Get SOA recordset
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.SOA;
            string relativeRecordSetName = "@";

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await collection.GetAsync(recordType, relativeRecordSetName);
        }

        [RecordedTest]
        public async Task Get9()
        {
            // Example: Get SRV recordset
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.SRV;
            string relativeRecordSetName = "record1";

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await collection.GetAsync(recordType, relativeRecordSetName);
        }

        [RecordedTest]
        public async Task Get10()
        {
            // Example: Get TXT recordset
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.TXT;
            string relativeRecordSetName = "record1";

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await collection.GetAsync(recordType, relativeRecordSetName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List A recordsets
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.A;
            int? top = null;
            string recordsetnamesuffix = null;

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await foreach (var _ in collection.GetAllAsync(recordType, top, recordsetnamesuffix))
            {
            }
        }

        [RecordedTest]
        public async Task GetAll2()
        {
            // Example: List AAAA recordsets
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.Aaaa;
            int? top = null;
            string recordsetnamesuffix = null;

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await foreach (var _ in collection.GetAllAsync(recordType, top, recordsetnamesuffix))
            {
            }
        }

        [RecordedTest]
        public async Task GetAll3()
        {
            // Example: List CAA recordsets
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.CAA;
            int? top = null;
            string recordsetnamesuffix = null;

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await foreach (var _ in collection.GetAllAsync(recordType, top, recordsetnamesuffix))
            {
            }
        }

        [RecordedTest]
        public async Task GetAll4()
        {
            // Example: List CNAME recordsets
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.Cname;
            int? top = null;
            string recordsetnamesuffix = null;

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await foreach (var _ in collection.GetAllAsync(recordType, top, recordsetnamesuffix))
            {
            }
        }

        [RecordedTest]
        public async Task GetAll5()
        {
            // Example: List MX recordsets
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.MX;
            int? top = null;
            string recordsetnamesuffix = null;

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await foreach (var _ in collection.GetAllAsync(recordType, top, recordsetnamesuffix))
            {
            }
        }

        [RecordedTest]
        public async Task GetAll6()
        {
            // Example: List NS recordsets
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.NS;
            int? top = null;
            string recordsetnamesuffix = null;

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await foreach (var _ in collection.GetAllAsync(recordType, top, recordsetnamesuffix))
            {
            }
        }

        [RecordedTest]
        public async Task GetAll7()
        {
            // Example: List PTR recordsets
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.PTR;
            int? top = null;
            string recordsetnamesuffix = null;

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "0.0.127.in-addr.arpa");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await foreach (var _ in collection.GetAllAsync(recordType, top, recordsetnamesuffix))
            {
            }
        }

        [RecordedTest]
        public async Task GetAll8()
        {
            // Example: List SOA recordsets
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.SOA;
            int? top = null;
            string recordsetnamesuffix = null;

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await foreach (var _ in collection.GetAllAsync(recordType, top, recordsetnamesuffix))
            {
            }
        }

        [RecordedTest]
        public async Task GetAll9()
        {
            // Example: List SRV recordsets
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.SRV;
            int? top = null;
            string recordsetnamesuffix = null;

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await foreach (var _ in collection.GetAllAsync(recordType, top, recordsetnamesuffix))
            {
            }
        }

        [RecordedTest]
        public async Task GetAll10()
        {
            // Example: List TXT recordsets
            DnsManagementClient.Models.RecordType recordType = DnsManagementClient.Models.RecordType.TXT;
            int? top = null;
            string recordsetnamesuffix = null;

            var zoneId = DnsManagementClient.Zone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "zone1");
            var collection = GetArmClient().GetZone(zoneId).GetDnsZoneCNAMEs();
            await foreach (var _ in collection.GetAllAsync(recordType, top, recordsetnamesuffix))
            {
            }
        }
    }
}
