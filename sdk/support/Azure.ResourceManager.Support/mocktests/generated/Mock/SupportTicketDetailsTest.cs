// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using MicrosoftSupport;
using MicrosoftSupport.Models;

namespace MicrosoftSupport.Tests.Mock
{
    /// <summary> Test for SupportTicketDetails. </summary>
    public partial class SupportTicketDetailsMockTests : MockTestBase
    {
        public SupportTicketDetailsMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get details of a subscription ticket
            var supportTicketDetailsId = MicrosoftSupport.SupportTicketDetails.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testticket");
            var supportTicketDetails = GetArmClient().GetSupportTicketDetails(supportTicketDetailsId);

            await supportTicketDetails.GetAsync();
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Update contact details of a support ticket
            var supportTicketDetailsId = MicrosoftSupport.SupportTicketDetails.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testticket");
            var supportTicketDetails = GetArmClient().GetSupportTicketDetails(supportTicketDetailsId);
            MicrosoftSupport.Models.UpdateSupportTicket updateSupportTicket = new MicrosoftSupport.Models.UpdateSupportTicket()
            {
                ContactDetails = new MicrosoftSupport.Models.UpdateContactProfile()
                {
                    FirstName = "first name",
                    LastName = "last name",
                    PreferredContactMethod = new MicrosoftSupport.Models.PreferredContactMethod("email"),
                    PrimaryEmailAddress = "test.name@contoso.com",
                    PhoneNumber = "123-456-7890",
                    PreferredTimeZone = "Pacific Standard Time",
                    Country = "USA",
                    PreferredSupportLanguage = "en-US",
                },
            };

            await supportTicketDetails.UpdateAsync(updateSupportTicket);
        }

        [RecordedTest]
        public async Task Update2()
        {
            // Example: Update severity of a support ticket
            var supportTicketDetailsId = MicrosoftSupport.SupportTicketDetails.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testticket");
            var supportTicketDetails = GetArmClient().GetSupportTicketDetails(supportTicketDetailsId);
            MicrosoftSupport.Models.UpdateSupportTicket updateSupportTicket = new MicrosoftSupport.Models.UpdateSupportTicket()
            {
                Severity = new MicrosoftSupport.Models.SeverityLevel("critical"),
            };

            await supportTicketDetails.UpdateAsync(updateSupportTicket);
        }

        [RecordedTest]
        public async Task Update3()
        {
            // Example: Update status of a support ticket
            var supportTicketDetailsId = MicrosoftSupport.SupportTicketDetails.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testticket");
            var supportTicketDetails = GetArmClient().GetSupportTicketDetails(supportTicketDetailsId);
            MicrosoftSupport.Models.UpdateSupportTicket updateSupportTicket = new MicrosoftSupport.Models.UpdateSupportTicket()
            {
                Status = new MicrosoftSupport.Models.Status("closed"),
            };

            await supportTicketDetails.UpdateAsync(updateSupportTicket);
        }

        [RecordedTest]
        public async Task CheckNameAvailabilityCommunication()
        {
            // Example: Checks whether name is available for Communication resource
            var supportTicketDetailsId = MicrosoftSupport.SupportTicketDetails.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testticket");
            var supportTicketDetails = GetArmClient().GetSupportTicketDetails(supportTicketDetailsId);
            MicrosoftSupport.Models.CheckNameAvailabilityInput checkNameAvailabilityInput = new MicrosoftSupport.Models.CheckNameAvailabilityInput(name: "sampleName", type: MicrosoftSupport.Models.Type.MicrosoftSupportCommunications);

            await supportTicketDetails.CheckNameAvailabilityCommunicationAsync(checkNameAvailabilityInput);
        }
    }
}
