// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.KubernetesConfiguration.Tests.Mock;
using Azure.ResourceManager.KubernetesConfiguration.Tests.Mock.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.KubernetesConfiguration.Tests.Mock.Tests.Mock
{
    /// <summary> Test for Extension. </summary>
    public partial class ExtensionMockTests : MockTestBase
    {
        public ExtensionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get Extension
            var extensionId = KubernetesConfiguration.Tests.Mock.Extension.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "Microsoft.Kubernetes", "connectedClusters", "clusterName1", "ClusterMonitor");
            var extension = GetArmClient().GetExtension(extensionId);

            await extension.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete Extension
            var extensionId = KubernetesConfiguration.Tests.Mock.Extension.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "Microsoft.Kubernetes", "connectedClusters", "clusterName1", "ClusterMonitor");
            var extension = GetArmClient().GetExtension(extensionId);
            bool? forceDelete = null;

            await extension.DeleteAsync(true, forceDelete);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Update Extension
            var extensionId = KubernetesConfiguration.Tests.Mock.Extension.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "Microsoft.Kubernetes", "connectedClusters", "clusterName1", "ClusterMonitor");
            var extension = GetArmClient().GetExtension(extensionId);
            KubernetesConfiguration.Tests.Mock.Models.PatchExtension patchExtension = new KubernetesConfiguration.Tests.Mock.Models.PatchExtension()
            {
                AutoUpgradeMinorVersion = true,
                ReleaseTrain = "Preview",
                ConfigurationSettings = new Dictionary<string, string>()
                {
                    ["omsagent.env.clusterName"] = "clusterName1",
                    ["omsagent.secret.wsid"] = "a38cef99-5a89-52ed-b6db-22095c23664b",
                },
                ConfigurationProtectedSettings = new Dictionary<string, string>()
                {
                    ["omsagent.secret.key"] = "secretKeyValue01",
                },
            };

            await extension.UpdateAsync(true, patchExtension);
        }

        [RecordedTest]
        public async Task GetOperationStatu()
        {
            // Example: ExtensionAsyncOperationStatus Get
            var extensionId = KubernetesConfiguration.Tests.Mock.Extension.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "Microsoft.Kubernetes", "connectedClusters", "clusterName1", "ClusterMonitor");
            var extension = GetArmClient().GetExtension(extensionId);
            string operationId = "99999999-9999-9999-9999-999999999999";

            await extension.GetOperationStatuAsync(operationId);
        }
    }
}
