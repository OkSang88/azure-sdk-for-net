// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.ManagedNetwork.Models;

namespace Azure.ResourceManager.ManagedNetwork
{
    /// <summary> A class representing collection of ScopeAssignment and their operations over its parent. </summary>
    public partial class ScopeAssignmentCollection : ArmCollection, IEnumerable<ScopeAssignment>, IAsyncEnumerable<ScopeAssignment>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly ScopeAssignmentsRestOperations _scopeAssignmentsRestClient;

        /// <summary> Initializes a new instance of the <see cref="ScopeAssignmentCollection"/> class for mocking. </summary>
        protected ScopeAssignmentCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ScopeAssignmentCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal ScopeAssignmentCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            ClientOptions.TryGetApiVersion(ScopeAssignment.ResourceType, out string apiVersion);
            _scopeAssignmentsRestClient = new ScopeAssignmentsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
        }

        // Collection level operations.

        /// <summary> Creates a scope assignment. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="scopeAssignmentName"> The name of the scope assignment to create. </param>
        /// <param name="parameters"> Parameters supplied to the specify which Managed Network this scope is being assigned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scopeAssignmentName"/> or <paramref name="parameters"/> is null. </exception>
        public virtual ScopeAssignmentCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string scopeAssignmentName, ScopeAssignmentData parameters, CancellationToken cancellationToken = default)
        {
            if (scopeAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(scopeAssignmentName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("ScopeAssignmentCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _scopeAssignmentsRestClient.CreateOrUpdate(Id, scopeAssignmentName, parameters, cancellationToken);
                var operation = new ScopeAssignmentCreateOrUpdateOperation(this, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a scope assignment. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="scopeAssignmentName"> The name of the scope assignment to create. </param>
        /// <param name="parameters"> Parameters supplied to the specify which Managed Network this scope is being assigned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scopeAssignmentName"/> or <paramref name="parameters"/> is null. </exception>
        public async virtual Task<ScopeAssignmentCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string scopeAssignmentName, ScopeAssignmentData parameters, CancellationToken cancellationToken = default)
        {
            if (scopeAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(scopeAssignmentName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("ScopeAssignmentCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _scopeAssignmentsRestClient.CreateOrUpdateAsync(Id, scopeAssignmentName, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new ScopeAssignmentCreateOrUpdateOperation(this, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the specified scope assignment. </summary>
        /// <param name="scopeAssignmentName"> The name of the scope assignment to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scopeAssignmentName"/> is null. </exception>
        public virtual Response<ScopeAssignment> Get(string scopeAssignmentName, CancellationToken cancellationToken = default)
        {
            if (scopeAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(scopeAssignmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("ScopeAssignmentCollection.Get");
            scope.Start();
            try
            {
                var response = _scopeAssignmentsRestClient.Get(Id, scopeAssignmentName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ScopeAssignment(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the specified scope assignment. </summary>
        /// <param name="scopeAssignmentName"> The name of the scope assignment to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scopeAssignmentName"/> is null. </exception>
        public async virtual Task<Response<ScopeAssignment>> GetAsync(string scopeAssignmentName, CancellationToken cancellationToken = default)
        {
            if (scopeAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(scopeAssignmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("ScopeAssignmentCollection.Get");
            scope.Start();
            try
            {
                var response = await _scopeAssignmentsRestClient.GetAsync(Id, scopeAssignmentName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new ScopeAssignment(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="scopeAssignmentName"> The name of the scope assignment to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scopeAssignmentName"/> is null. </exception>
        public virtual Response<ScopeAssignment> GetIfExists(string scopeAssignmentName, CancellationToken cancellationToken = default)
        {
            if (scopeAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(scopeAssignmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("ScopeAssignmentCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _scopeAssignmentsRestClient.Get(Id, scopeAssignmentName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<ScopeAssignment>(null, response.GetRawResponse());
                return Response.FromValue(new ScopeAssignment(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="scopeAssignmentName"> The name of the scope assignment to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scopeAssignmentName"/> is null. </exception>
        public async virtual Task<Response<ScopeAssignment>> GetIfExistsAsync(string scopeAssignmentName, CancellationToken cancellationToken = default)
        {
            if (scopeAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(scopeAssignmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("ScopeAssignmentCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _scopeAssignmentsRestClient.GetAsync(Id, scopeAssignmentName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<ScopeAssignment>(null, response.GetRawResponse());
                return Response.FromValue(new ScopeAssignment(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="scopeAssignmentName"> The name of the scope assignment to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scopeAssignmentName"/> is null. </exception>
        public virtual Response<bool> Exists(string scopeAssignmentName, CancellationToken cancellationToken = default)
        {
            if (scopeAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(scopeAssignmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("ScopeAssignmentCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(scopeAssignmentName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="scopeAssignmentName"> The name of the scope assignment to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scopeAssignmentName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string scopeAssignmentName, CancellationToken cancellationToken = default)
        {
            if (scopeAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(scopeAssignmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("ScopeAssignmentCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(scopeAssignmentName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the specified scope assignment. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ScopeAssignment" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ScopeAssignment> GetAll(CancellationToken cancellationToken = default)
        {
            Page<ScopeAssignment> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ScopeAssignmentCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _scopeAssignmentsRestClient.List(Id, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ScopeAssignment(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ScopeAssignment> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ScopeAssignmentCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _scopeAssignmentsRestClient.ListNextPage(nextLink, Id, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ScopeAssignment(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get the specified scope assignment. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ScopeAssignment" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ScopeAssignment> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ScopeAssignment>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ScopeAssignmentCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _scopeAssignmentsRestClient.ListAsync(Id, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ScopeAssignment(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ScopeAssignment>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ScopeAssignmentCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _scopeAssignmentsRestClient.ListNextPageAsync(nextLink, Id, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ScopeAssignment(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<ScopeAssignment> IEnumerable<ScopeAssignment>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ScopeAssignment> IAsyncEnumerable<ScopeAssignment>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, ScopeAssignment, ScopeAssignmentData> Construct() { }
    }
}
