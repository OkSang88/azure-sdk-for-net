// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Storage;
using Azure.ResourceManager.Storage.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Storage.Tests.Mock
{
    /// <summary> Test for BlobContainer. </summary>
    public partial class BlobContainerCollectionMockTests : MockTestBase
    {
        public BlobContainerCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: PutContainerWithDefaultEncryptionScope
            string containerName = "container6185";
            Storage.BlobContainerData blobContainer = new Storage.BlobContainerData()
            {
                DefaultEncryptionScope = "encryptionscope185",
                DenyEncryptionScopeOverride = true,
            };

            var blobServiceId = Storage.BlobService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res3376", "sto328");
            var collection = GetArmClient().GetBlobService(blobServiceId).GetBlobContainers();
            await collection.CreateOrUpdateAsync(containerName, blobContainer);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: PutContainerWithObjectLevelWorm
            string containerName = "container6185";
            Storage.BlobContainerData blobContainer = new Storage.BlobContainerData()
            {
                ImmutableStorageWithVersioning = new Storage.Models.ImmutableStorageWithVersioning()
                {
                    Enabled = true,
                },
            };

            var blobServiceId = Storage.BlobService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res3376", "sto328");
            var collection = GetArmClient().GetBlobService(blobServiceId).GetBlobContainers();
            await collection.CreateOrUpdateAsync(containerName, blobContainer);
        }

        [RecordedTest]
        public async Task CreateOrUpdate3()
        {
            // Example: PutContainers
            string containerName = "container6185";
            Storage.BlobContainerData blobContainer = new Storage.BlobContainerData();

            var blobServiceId = Storage.BlobService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res3376", "sto328");
            var collection = GetArmClient().GetBlobService(blobServiceId).GetBlobContainers();
            await collection.CreateOrUpdateAsync(containerName, blobContainer);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: GetContainers
            string containerName = "container1634";

            var blobServiceId = Storage.BlobService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res9871", "sto6217");
            var collection = GetArmClient().GetBlobService(blobServiceId).GetBlobContainers();
            await collection.GetAsync(containerName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: ListContainers
            string maxpagesize = null;
            string filter = null;
            Storage.Models.ListContainersInclude? include = null;

            var blobServiceId = Storage.BlobService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res9290", "sto1590");
            var collection = GetArmClient().GetBlobService(blobServiceId).GetBlobContainers();
            await foreach (var _ in collection.GetAllAsync(maxpagesize, filter, include))
            {
            }
        }

        [RecordedTest]
        public async Task GetAll2()
        {
            // Example: ListDeletedContainers
            string maxpagesize = null;
            string filter = null;
            Storage.Models.ListContainersInclude? include = new Storage.Models.ListContainersInclude("deleted");

            var blobServiceId = Storage.BlobService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res9290", "sto1590");
            var collection = GetArmClient().GetBlobService(blobServiceId).GetBlobContainers();
            await foreach (var _ in collection.GetAllAsync(maxpagesize, filter, include))
            {
            }
        }
    }
}
