// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for JobStep. </summary>
    public partial class ServerJobAgentJobStepCollectionMockTests : MockTestBase
    {
        public ServerJobAgentJobStepCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create or update a job step with all properties specified.
            string stepName = "step1";
            Sql.JobStepData parameters = new Sql.JobStepData()
            {
                StepId = 1,
                TargetGroup = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/targetGroups/targetGroup1",
                Credential = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred1",
                Action = new Sql.Models.JobStepAction(value: "select 2")
                {
                    Type = new Sql.Models.JobStepActionType("TSql"),
                    Source = new Sql.Models.JobStepActionSource("Inline"),
                },
                Output = new Sql.Models.JobStepOutput(serverName: "server3", databaseName: "database3", tableName: "mytable5678", credential: "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred0")
                {
                    Type = new Sql.Models.JobStepOutputType("SqlDatabase"),
                    SubscriptionId = Guid.Parse("3501b905-a848-4b5d-96e8-b253f62d735a"),
                    ResourceGroupName = "group3",
                    SchemaName = "myschema1234",
                },
                ExecutionOptions = new Sql.Models.JobStepExecutionOptions()
                {
                    TimeoutSeconds = 1234,
                    RetryAttempts = 42,
                    InitialRetryIntervalSeconds = 11,
                    MaximumRetryIntervalSeconds = 222,
                    RetryIntervalBackoffMultiplier = 3,
                },
            };

            var sqlJobId = Sql.SqlJob.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "group1", "server1", "agent1", "job1");
            var collection = GetArmClient().GetSqlJob(sqlJobId).GetServerJobAgentJobSteps();
            await collection.CreateOrUpdateAsync(true, stepName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Create or update a job step with minimal properties specified.
            string stepName = "step1";
            Sql.JobStepData parameters = new Sql.JobStepData()
            {
                TargetGroup = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/targetGroups/targetGroup0",
                Credential = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/cred0",
                Action = new Sql.Models.JobStepAction(value: "select 1"),
            };

            var sqlJobId = Sql.SqlJob.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "group1", "server1", "agent1", "job1");
            var collection = GetArmClient().GetSqlJob(sqlJobId).GetServerJobAgentJobSteps();
            await collection.CreateOrUpdateAsync(true, stepName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get the latest version of a job step.
            string stepName = "step1";

            var sqlJobId = Sql.SqlJob.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "group1", "server1", "agent1", "job1");
            var collection = GetArmClient().GetSqlJob(sqlJobId).GetServerJobAgentJobSteps();
            await collection.GetAsync(stepName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List job steps for the latest version of a job.

            var sqlJobId = Sql.SqlJob.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "group1", "server1", "agent1", "job1");
            var collection = GetArmClient().GetSqlJob(sqlJobId).GetServerJobAgentJobSteps();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
