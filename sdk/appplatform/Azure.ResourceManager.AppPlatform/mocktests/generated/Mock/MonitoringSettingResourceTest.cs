// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.AppPlatform;
using Azure.ResourceManager.AppPlatform.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.AppPlatform.Tests.Mock
{
    /// <summary> Test for MonitoringSettingResource. </summary>
    public partial class MonitoringSettingResourceMockTests : MockTestBase
    {
        public MonitoringSettingResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: MonitoringSettings_Get
            var monitoringSettingResourceId = AppPlatform.MonitoringSettingResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var monitoringSettingResource = GetArmClient().GetMonitoringSettingResource(monitoringSettingResourceId);

            await monitoringSettingResource.GetAsync();
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: MonitoringSettings_UpdatePatch
            var monitoringSettingResourceId = AppPlatform.MonitoringSettingResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var monitoringSettingResource = GetArmClient().GetMonitoringSettingResource(monitoringSettingResourceId);
            AppPlatform.MonitoringSettingResourceData monitoringSettingResource2 = new AppPlatform.MonitoringSettingResourceData()
            {
                Properties = new AppPlatform.Models.MonitoringSettingProperties()
                {
                    TraceEnabled = true,
                    AppInsightsInstrumentationKey = "00000000-0000-0000-0000-000000000000",
                    AppInsightsSamplingRate = 10,
                },
            };

            await monitoringSettingResource.UpdateAsync(true, monitoringSettingResource2);
        }
    }
}
