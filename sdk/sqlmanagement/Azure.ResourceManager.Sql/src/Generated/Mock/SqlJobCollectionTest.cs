// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for SqlJob. </summary>
    public partial class SqlJobCollectionMockTests : MockTestBase
    {
        public SqlJobCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create a job with all properties specified
            var collection = GetArmClient().GetJobAgent(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1")).GetSqlJobs();
            string jobName = "job1";
            Sql.SqlJobData parameters = new Sql.SqlJobData()
            {
                Description = "my favourite job",
                Schedule = new Sql.Models.JobSchedule()
                {
                    StartTime = DateTimeOffset.Parse("2015-09-24T18:30:01Z"),
                    EndTime = DateTimeOffset.Parse("2015-09-24T23:59:59Z"),
                    Type = Sql.Models.JobScheduleType.Recurring,
                    Enabled = true,
                    Interval = "PT5M",
                },
            };

            await collection.CreateOrUpdateAsync(jobName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync2()
        {
            // Example: Create a job with default properties
            var collection = GetArmClient().GetJobAgent(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1")).GetSqlJobs();
            string jobName = "job1";
            Sql.SqlJobData parameters = new Sql.SqlJobData();

            await collection.CreateOrUpdateAsync(jobName, parameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get a job
            var collection = GetArmClient().GetJobAgent(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1")).GetSqlJobs();
            string jobName = "job1";

            await collection.GetAsync(jobName);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: List jobs in a job agent
            var collection = GetArmClient().GetJobAgent(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1")).GetSqlJobs();

            collection.GetAllAsync();
        }
    }
}
