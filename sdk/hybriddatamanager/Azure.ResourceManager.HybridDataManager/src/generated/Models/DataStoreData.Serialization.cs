// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using HybridDataManagementClient.Models;

namespace HybridDataManagementClient
{
    public partial class DataStoreData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(RepositoryId))
            {
                writer.WritePropertyName("repositoryId");
                writer.WriteStringValue(RepositoryId);
            }
            writer.WritePropertyName("state");
            writer.WriteStringValue(State.ToSerialString());
            if (Optional.IsDefined(ExtendedProperties))
            {
                writer.WritePropertyName("extendedProperties");
                writer.WriteObjectValue(ExtendedProperties);
            }
            writer.WritePropertyName("dataStoreTypeId");
            writer.WriteStringValue(DataStoreTypeId);
            if (Optional.IsCollectionDefined(CustomerSecrets))
            {
                writer.WritePropertyName("customerSecrets");
                writer.WriteStartArray();
                foreach (var item in CustomerSecrets)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static DataStoreData DeserializeDataStoreData(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<string> repositoryId = default;
            State state = default;
            Optional<object> extendedProperties = default;
            string dataStoreTypeId = default;
            Optional<IList<CustomerSecret>> customerSecrets = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("repositoryId"))
                        {
                            repositoryId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("state"))
                        {
                            state = property0.Value.GetString().ToState();
                            continue;
                        }
                        if (property0.NameEquals("extendedProperties"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            extendedProperties = property0.Value.GetObject();
                            continue;
                        }
                        if (property0.NameEquals("dataStoreTypeId"))
                        {
                            dataStoreTypeId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("customerSecrets"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<CustomerSecret> array = new List<CustomerSecret>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(CustomerSecret.DeserializeCustomerSecret(item));
                            }
                            customerSecrets = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new DataStoreData(id, name, type, repositoryId.Value, state, extendedProperties.Value, dataStoreTypeId, Optional.ToList(customerSecrets));
        }
    }
}
