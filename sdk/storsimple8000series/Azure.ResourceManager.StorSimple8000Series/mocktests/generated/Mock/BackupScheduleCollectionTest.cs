// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.StorSimple8000Series.Tests.Mock;
using Azure.ResourceManager.StorSimple8000Series.Tests.Mock.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.StorSimple8000Series.Tests.Mock.Tests.Mock
{
    /// <summary> Test for BackupSchedule. </summary>
    public partial class BackupScheduleCollectionMockTests : MockTestBase
    {
        public BackupScheduleCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: BackupSchedulesCreateOrUpdate
            string backupScheduleName = "schedule2";
            StorSimple8000Series.Tests.Mock.BackupScheduleData parameters = new StorSimple8000Series.Tests.Mock.BackupScheduleData(scheduleRecurrence: new StorSimple8000Series.Tests.Mock.Models.ScheduleRecurrence(recurrenceType: StorSimple8000Series.Tests.Mock.Models.RecurrenceType.Weekly, recurrenceValue: 1), backupType: StorSimple8000Series.Tests.Mock.Models.BackupType.CloudSnapshot, retentionCount: 1, startTime: DateTimeOffset.Parse("2017-06-24T01:00:00Z"), scheduleStatus: StorSimple8000Series.Tests.Mock.Models.ScheduleStatus.Enabled)
            {
                Kind = "Series8000",
            };

            var backupPolicyId = StorSimple8000Series.Tests.Mock.BackupPolicy.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest", "BkUpPolicy01ForSDKTest");
            var collection = GetArmClient().GetBackupPolicy(backupPolicyId).GetBackupSchedules();
            await collection.CreateOrUpdateAsync(true, backupScheduleName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: BackupSchedulesGet
            string backupScheduleName = "schedule2";

            var backupPolicyId = StorSimple8000Series.Tests.Mock.BackupPolicy.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest", "BkUpPolicy01ForSDKTest");
            var collection = GetArmClient().GetBackupPolicy(backupPolicyId).GetBackupSchedules();
            await collection.GetAsync(backupScheduleName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: BackupSchedulesListByBackupPolicy

            var backupPolicyId = StorSimple8000Series.Tests.Mock.BackupPolicy.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest", "BkUpPolicy01ForSDKTest");
            var collection = GetArmClient().GetBackupPolicy(backupPolicyId).GetBackupSchedules();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
