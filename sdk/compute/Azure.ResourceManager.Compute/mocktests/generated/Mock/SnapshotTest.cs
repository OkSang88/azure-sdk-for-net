// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for Snapshot. </summary>
    public partial class SnapshotMockTests : MockTestBase
    {
        public SnapshotMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get information about a snapshot.
            var snapshotId = Compute.Snapshot.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "mySnapshot");
            var snapshot = GetArmClient().GetSnapshot(snapshotId);

            await snapshot.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete a snapshot.
            var snapshotId = Compute.Snapshot.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "mySnapshot");
            var snapshot = GetArmClient().GetSnapshot(snapshotId);

            await snapshot.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Update a snapshot.
            var snapshotId = Compute.Snapshot.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "mySnapshot");
            var snapshot = GetArmClient().GetSnapshot(snapshotId);
            Compute.Models.SnapshotUpdate snapshot2 = new Compute.Models.SnapshotUpdate()
            {
                DiskSizeGB = 20,
            };

            await snapshot.UpdateAsync(true, snapshot2);
        }

        [RecordedTest]
        public async Task GrantAccess()
        {
            // Example: Get a sas on a snapshot.
            var snapshotId = Compute.Snapshot.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "mySnapshot");
            var snapshot = GetArmClient().GetSnapshot(snapshotId);
            Compute.Models.GrantAccessData grantAccessData = new Compute.Models.GrantAccessData(access: new Compute.Models.AccessLevel("Read"), durationInSeconds: 300);

            await snapshot.GrantAccessAsync(true, grantAccessData);
        }

        [RecordedTest]
        public async Task RevokeAccess()
        {
            // Example: Revoke access to a snapshot.
            var snapshotId = Compute.Snapshot.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "mySnapshot");
            var snapshot = GetArmClient().GetSnapshot(snapshotId);

            await snapshot.RevokeAccessAsync(true);
        }
    }
}
