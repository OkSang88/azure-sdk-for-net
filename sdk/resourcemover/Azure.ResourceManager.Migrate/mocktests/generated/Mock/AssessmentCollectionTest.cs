// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using AzureMigrateV2;
using AzureMigrateV2.Models;

namespace AzureMigrateV2.Tests.Mock
{
    /// <summary> Test for Assessment. </summary>
    public partial class AssessmentCollectionMockTests : MockTestBase
    {
        public AssessmentCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Assessments_Create
            string assessmentName = "assessment_5_14_2019_16_48_47";
            AzureMigrateV2.AssessmentData assessment = new AzureMigrateV2.AssessmentData(properties: new AzureMigrateV2.Models.AssessmentProperties(azureLocation: new AzureMigrateV2.Models.AzureLocation("NorthEurope"), azureOfferCode: new AzureMigrateV2.Models.AzureOfferCode("MSAZR0003P"), azurePricingTier: new AzureMigrateV2.Models.AzurePricingTier("Standard"), azureStorageRedundancy: new AzureMigrateV2.Models.AzureStorageRedundancy("LocallyRedundant"), scalingFactor: 1, percentile: new AzureMigrateV2.Models.Percentile("Percentile95"), timeRange: new AzureMigrateV2.Models.TimeRange("Day"), stage: new AzureMigrateV2.Models.AssessmentStage("InProgress"), currency: new AzureMigrateV2.Models.Currency("USD"), azureHybridUseBenefit: new AzureMigrateV2.Models.AzureHybridUseBenefit("Yes"), discountPercentage: 100, sizingCriterion: new AzureMigrateV2.Models.AssessmentSizingCriterion("PerformanceBased"), reservedInstance: new AzureMigrateV2.Models.ReservedInstance("RI3Year"), azureVmFamilies: new List<AzureMigrateV2.Models.AzureVmFamily>()
{
new AzureMigrateV2.Models.AzureVmFamily("Dv2_series"),new AzureMigrateV2.Models.AzureVmFamily("F_series"),new AzureMigrateV2.Models.AzureVmFamily("Dv3_series"),new AzureMigrateV2.Models.AzureVmFamily("DS_series"),new AzureMigrateV2.Models.AzureVmFamily("DSv2_series"),new AzureMigrateV2.Models.AzureVmFamily("Fs_series"),new AzureMigrateV2.Models.AzureVmFamily("Dsv3_series"),new AzureMigrateV2.Models.AzureVmFamily("Ev3_series"),new AzureMigrateV2.Models.AzureVmFamily("Esv3_series"),new AzureMigrateV2.Models.AzureVmFamily("D_series"),new AzureMigrateV2.Models.AzureVmFamily("M_series"),new AzureMigrateV2.Models.AzureVmFamily("Fsv2_series"),new AzureMigrateV2.Models.AzureVmFamily("H_series"),}, azureDiskType: new AzureMigrateV2.Models.AzureDiskType("StandardOrPremium"), vmUptime: new AzureMigrateV2.Models.VmUptime()
{
    DaysPerMonth = 31,
    HoursPerDay = 24,
}))
            {
                ETag = "\"1e000c2c-0000-0d00-0000-5cdaa4190000\"",
            };

            var groupId = AzureMigrateV2.Group.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "abgoyal-westEurope", "abgoyalWEselfhostb72bproject", "Group2");
            var collection = GetArmClient().GetGroup(groupId).GetAssessments();
            await collection.CreateOrUpdateAsync(true, assessmentName, assessment);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Assessments_Get
            string assessmentName = "assessment_5_9_2019_16_22_14";

            var groupId = AzureMigrateV2.Group.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "abgoyal-westEurope", "abgoyalWEselfhostb72bproject", "Test1");
            var collection = GetArmClient().GetGroup(groupId).GetAssessments();
            await collection.GetAsync(assessmentName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: Assessments_ListByGroup

            var groupId = AzureMigrateV2.Group.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "abgoyal-westEurope", "abgoyalWEselfhostb72bproject", "Test1");
            var collection = GetArmClient().GetGroup(groupId).GetAssessments();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
