// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using DataFactoryManagementClient;
using DataFactoryManagementClient.Models;

namespace DataFactoryManagementClient.Tests.Mock
{
    /// <summary> Test for ManagedPrivateEndpointResource. </summary>
    public partial class ManagedPrivateEndpointResourceCollectionMockTests : MockTestBase
    {
        public ManagedPrivateEndpointResourceCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: ManagedVirtualNetworks_Create
            string managedPrivateEndpointName = "exampleManagedPrivateEndpointName";
            DataFactoryManagementClient.ManagedPrivateEndpointResourceData managedPrivateEndpoint = new DataFactoryManagementClient.ManagedPrivateEndpointResourceData(properties: new DataFactoryManagementClient.Models.ManagedPrivateEndpoint()
            {
                GroupId = "blob",
                PrivateLinkResourceId = "/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.Storage/storageAccounts/exampleBlobStorage",
            });
            string ifMatch = null;

            var managedVirtualNetworkResourceId = DataFactoryManagementClient.ManagedVirtualNetworkResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName", "exampleManagedVirtualNetworkName");
            var collection = GetArmClient().GetManagedVirtualNetworkResource(managedVirtualNetworkResourceId).GetManagedPrivateEndpointResources();
            await collection.CreateOrUpdateAsync(true, managedPrivateEndpointName, managedPrivateEndpoint, ifMatch);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: ManagedPrivateEndpoints_Get
            string managedPrivateEndpointName = "exampleManagedPrivateEndpointName";
            string ifNoneMatch = null;

            var managedVirtualNetworkResourceId = DataFactoryManagementClient.ManagedVirtualNetworkResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName", "exampleManagedVirtualNetworkName");
            var collection = GetArmClient().GetManagedVirtualNetworkResource(managedVirtualNetworkResourceId).GetManagedPrivateEndpointResources();
            await collection.GetAsync(managedPrivateEndpointName, ifNoneMatch);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: ManagedPrivateEndpoints_ListByFactory

            var managedVirtualNetworkResourceId = DataFactoryManagementClient.ManagedVirtualNetworkResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName", "exampleManagedVirtualNetworkName");
            var collection = GetArmClient().GetManagedVirtualNetworkResource(managedVirtualNetworkResourceId).GetManagedPrivateEndpointResources();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
