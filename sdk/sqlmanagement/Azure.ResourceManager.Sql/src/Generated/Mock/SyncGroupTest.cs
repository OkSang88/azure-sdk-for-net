// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for SyncGroup. </summary>
    public partial class SyncGroupMockTests : MockTestBase
    {
        public SyncGroupMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get a sync group
            var syncGroupId = Sql.SyncGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "syncgroupcrud-65440", "syncgroupcrud-8475", "syncgroupcrud-4328", "syncgroupcrud-3187");
            var syncGroup = GetArmClient().GetSyncGroup(syncGroupId);

            await syncGroup.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete a sync group
            var syncGroupId = Sql.SyncGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "syncgroupcrud-65440", "syncgroupcrud-8475", "syncgroupcrud-4328", "syncgroupcrud-3187");
            var syncGroup = GetArmClient().GetSyncGroup(syncGroupId);

            await syncGroup.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Update a sync group
            var syncGroupId = Sql.SyncGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "syncgroupcrud-65440", "syncgroupcrud-8475", "syncgroupcrud-4328", "syncgroupcrud-3187");
            var syncGroup = GetArmClient().GetSyncGroup(syncGroupId);
            Sql.SyncGroupData parameters = new Sql.SyncGroupData()
            {
                Interval = -1,
                ConflictResolutionPolicy = new Sql.Models.SyncConflictResolutionPolicy("HubWin"),
                SyncDatabaseId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-3521/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328",
                HubDatabaseUserName = "hubUser",
                HubDatabasePassword = "hubPassword",
                UsePrivateLinkConnection = true,
            };

            await syncGroup.UpdateAsync(true, parameters);
        }

        [RecordedTest]
        public async Task RefreshHubSchema()
        {
            // Example: Refresh a hub database schema.
            var syncGroupId = Sql.SyncGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "syncgroupcrud-65440", "syncgroupcrud-8475", "syncgroupcrud-4328", "syncgroupcrud-3187");
            var syncGroup = GetArmClient().GetSyncGroup(syncGroupId);

            await syncGroup.RefreshHubSchemaAsync(true);
        }

        [RecordedTest]
        public async Task GetHubSchemas()
        {
            // Example: Get a hub database schema.
            var syncGroupId = Sql.SyncGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "syncgroupcrud-65440", "syncgroupcrud-8475", "syncgroupcrud-4328", "syncgroupcrud-3187");
            var syncGroup = GetArmClient().GetSyncGroup(syncGroupId);

            await foreach (var _ in syncGroup.GetHubSchemasAsync())
            {
            }
        }

        [RecordedTest]
        public async Task GetLogs()
        {
            // Example: Get sync group logs
            var syncGroupId = Sql.SyncGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "syncgroupcrud-65440", "syncgroupcrud-8475", "syncgroupcrud-4328", "syncgroupcrud-3187");
            var syncGroup = GetArmClient().GetSyncGroup(syncGroupId);
            string startTime = "2017-01-01T00:00:00";
            string endTime = "2017-12-31T00:00:00";
            Sql.Models.SyncGroupLogType type = new Sql.Models.SyncGroupLogType("All");
            string continuationToken = null;

            await foreach (var _ in syncGroup.GetLogsAsync(startTime, endTime, type, continuationToken))
            {
            }
        }

        [RecordedTest]
        public async Task CancelSync()
        {
            // Example: Cancel a sync group synchronization
            var syncGroupId = Sql.SyncGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "syncgroupcrud-65440", "syncgroupcrud-8475", "syncgroupcrud-4328", "syncgroupcrud-3187");
            var syncGroup = GetArmClient().GetSyncGroup(syncGroupId);

            await syncGroup.CancelSyncAsync();
        }

        [RecordedTest]
        public async Task TriggerSync()
        {
            // Example: Trigger a sync group synchronization.
            var syncGroupId = Sql.SyncGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "syncgroupcrud-65440", "syncgroupcrud-8475", "syncgroupcrud-4328", "syncgroupcrud-3187");
            var syncGroup = GetArmClient().GetSyncGroup(syncGroupId);

            await syncGroup.TriggerSyncAsync();
        }
    }
}
