// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for InboundNatRule. </summary>
    public partial class InboundNatRuleCollectionMockTests : MockTestBase
    {
        public InboundNatRuleCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: InboundNatRuleCreate
            string inboundNatRuleName = "natRule1.1";
            Network.InboundNatRuleData inboundNatRuleParameters = new Network.InboundNatRuleData()
            {
                FrontendIPConfiguration = new WritableSubResource()
                {
                    Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lb1/frontendIPConfigurations/ip1"),
                },
                Protocol = new Network.Models.TransportProtocol("Tcp"),
                FrontendPort = 3390,
                BackendPort = 3389,
                IdleTimeoutInMinutes = 4,
                EnableFloatingIP = false,
                EnableTcpReset = false,
            };

            var loadBalancerId = Network.LoadBalancer.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg", "lb1");
            var collection = GetArmClient().GetLoadBalancer(loadBalancerId).GetInboundNatRules();
            await collection.CreateOrUpdateAsync(inboundNatRuleName, inboundNatRuleParameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: InboundNatRuleGet
            string inboundNatRuleName = "natRule1.1";
            string expand = null;

            var loadBalancerId = Network.LoadBalancer.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg", "lb1");
            var collection = GetArmClient().GetLoadBalancer(loadBalancerId).GetInboundNatRules();
            await collection.GetAsync(inboundNatRuleName, expand);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: InboundNatRuleList

            var loadBalancerId = Network.LoadBalancer.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg", "lb1");
            var collection = GetArmClient().GetLoadBalancer(loadBalancerId).GetInboundNatRules();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
