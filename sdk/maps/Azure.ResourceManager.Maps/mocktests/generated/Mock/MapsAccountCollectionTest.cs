// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Maps.Tests.Mock;
using Azure.ResourceManager.Maps.Tests.Mock.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Maps.Tests.Mock.Tests.Mock
{
    /// <summary> Test for MapsAccount. </summary>
    public partial class MapsAccountCollectionMockTests : MockTestBase
    {
        public MapsAccountCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create Account with Managed Identities
            string accountName = "myMapsAccount";
            Maps.Tests.Mock.MapsAccountData mapsAccount = new Maps.Tests.Mock.MapsAccountData(location: "eastus", sku: new Maps.Tests.Mock.Models.Sku(name: new Maps.Tests.Mock.Models.Name("G2")))
            {
                Kind = new Maps.Tests.Mock.Models.Kind("Gen2"),
                Identity = new ResourceIdentity(),
                Properties = new Maps.Tests.Mock.Models.MapsAccountProperties()
                {
                    DisableLocalAuth = false,
                },
            };
            mapsAccount.Tags.ReplaceWith(new Dictionary<string, string>()
            {
                ["test"] = "true",
            });

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetMapsAccounts();
            await collection.CreateOrUpdateAsync(true, accountName, mapsAccount);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Create Gen1 Account
            string accountName = "myMapsAccount";
            Maps.Tests.Mock.MapsAccountData mapsAccount = new Maps.Tests.Mock.MapsAccountData(location: "eastus", sku: new Maps.Tests.Mock.Models.Sku(name: new Maps.Tests.Mock.Models.Name("S0")))
            {
                Kind = new Maps.Tests.Mock.Models.Kind("Gen1"),
                Properties = new Maps.Tests.Mock.Models.MapsAccountProperties()
                {
                    DisableLocalAuth = false,
                    Cors = new Maps.Tests.Mock.Models.CorsRules(),
                },
            };
            mapsAccount.Tags.ReplaceWith(new Dictionary<string, string>()
            {
                ["test"] = "true",
            });

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetMapsAccounts();
            await collection.CreateOrUpdateAsync(true, accountName, mapsAccount);
        }

        [RecordedTest]
        public async Task CreateOrUpdate3()
        {
            // Example: Create Gen2 Account
            string accountName = "myMapsAccount";
            Maps.Tests.Mock.MapsAccountData mapsAccount = new Maps.Tests.Mock.MapsAccountData(location: "eastus", sku: new Maps.Tests.Mock.Models.Sku(name: new Maps.Tests.Mock.Models.Name("G2")))
            {
                Kind = new Maps.Tests.Mock.Models.Kind("Gen2"),
                Properties = new Maps.Tests.Mock.Models.MapsAccountProperties()
                {
                    DisableLocalAuth = true,
                    Cors = new Maps.Tests.Mock.Models.CorsRules(),
                },
            };
            mapsAccount.Tags.ReplaceWith(new Dictionary<string, string>()
            {
                ["test"] = "true",
            });

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetMapsAccounts();
            await collection.CreateOrUpdateAsync(true, accountName, mapsAccount);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: GetAccount
            string accountName = "myMapsAccount";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetMapsAccounts();
            await collection.GetAsync(accountName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List Accounts By Resource Group

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetMapsAccounts();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
