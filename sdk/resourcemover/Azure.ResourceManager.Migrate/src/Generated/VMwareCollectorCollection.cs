// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Migrate.Models;

namespace Azure.ResourceManager.Migrate
{
    /// <summary> A class representing collection of VMwareCollector and their operations over its parent. </summary>
    public partial class VMwareCollectorCollection : ArmCollection, IEnumerable<VMwareCollector>, IAsyncEnumerable<VMwareCollector>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly VMwareCollectorsRestOperations _vMwareCollectorsRestClient;

        /// <summary> Initializes a new instance of the <see cref="VMwareCollectorCollection"/> class for mocking. </summary>
        protected VMwareCollectorCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="VMwareCollectorCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal VMwareCollectorCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            ClientOptions.TryGetApiVersion(VMwareCollector.ResourceType, out string apiVersion);
            _vMwareCollectorsRestClient = new VMwareCollectorsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != Project.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, Project.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Create or Update VMware collector. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="vmWareCollectorName"> Unique name of a VMware collector within a project. </param>
        /// <param name="collectorBody"> New or Updated VMware collector. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="vmWareCollectorName"/> is null. </exception>
        public virtual VMwareCollectorCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string vmWareCollectorName, VMwareCollectorData collectorBody = null, CancellationToken cancellationToken = default)
        {
            if (vmWareCollectorName == null)
            {
                throw new ArgumentNullException(nameof(vmWareCollectorName));
            }

            using var scope = _clientDiagnostics.CreateScope("VMwareCollectorCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _vMwareCollectorsRestClient.Create(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, vmWareCollectorName, collectorBody, cancellationToken);
                var operation = new VMwareCollectorCreateOrUpdateOperation(this, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or Update VMware collector. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="vmWareCollectorName"> Unique name of a VMware collector within a project. </param>
        /// <param name="collectorBody"> New or Updated VMware collector. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="vmWareCollectorName"/> is null. </exception>
        public async virtual Task<VMwareCollectorCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string vmWareCollectorName, VMwareCollectorData collectorBody = null, CancellationToken cancellationToken = default)
        {
            if (vmWareCollectorName == null)
            {
                throw new ArgumentNullException(nameof(vmWareCollectorName));
            }

            using var scope = _clientDiagnostics.CreateScope("VMwareCollectorCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _vMwareCollectorsRestClient.CreateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, vmWareCollectorName, collectorBody, cancellationToken).ConfigureAwait(false);
                var operation = new VMwareCollectorCreateOrUpdateOperation(this, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a VMware collector. </summary>
        /// <param name="vmWareCollectorName"> Unique name of a VMware collector within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="vmWareCollectorName"/> is null. </exception>
        public virtual Response<VMwareCollector> Get(string vmWareCollectorName, CancellationToken cancellationToken = default)
        {
            if (vmWareCollectorName == null)
            {
                throw new ArgumentNullException(nameof(vmWareCollectorName));
            }

            using var scope = _clientDiagnostics.CreateScope("VMwareCollectorCollection.Get");
            scope.Start();
            try
            {
                var response = _vMwareCollectorsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, vmWareCollectorName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new VMwareCollector(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a VMware collector. </summary>
        /// <param name="vmWareCollectorName"> Unique name of a VMware collector within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="vmWareCollectorName"/> is null. </exception>
        public async virtual Task<Response<VMwareCollector>> GetAsync(string vmWareCollectorName, CancellationToken cancellationToken = default)
        {
            if (vmWareCollectorName == null)
            {
                throw new ArgumentNullException(nameof(vmWareCollectorName));
            }

            using var scope = _clientDiagnostics.CreateScope("VMwareCollectorCollection.Get");
            scope.Start();
            try
            {
                var response = await _vMwareCollectorsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, vmWareCollectorName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new VMwareCollector(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="vmWareCollectorName"> Unique name of a VMware collector within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="vmWareCollectorName"/> is null. </exception>
        public virtual Response<VMwareCollector> GetIfExists(string vmWareCollectorName, CancellationToken cancellationToken = default)
        {
            if (vmWareCollectorName == null)
            {
                throw new ArgumentNullException(nameof(vmWareCollectorName));
            }

            using var scope = _clientDiagnostics.CreateScope("VMwareCollectorCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _vMwareCollectorsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, vmWareCollectorName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<VMwareCollector>(null, response.GetRawResponse());
                return Response.FromValue(new VMwareCollector(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="vmWareCollectorName"> Unique name of a VMware collector within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="vmWareCollectorName"/> is null. </exception>
        public async virtual Task<Response<VMwareCollector>> GetIfExistsAsync(string vmWareCollectorName, CancellationToken cancellationToken = default)
        {
            if (vmWareCollectorName == null)
            {
                throw new ArgumentNullException(nameof(vmWareCollectorName));
            }

            using var scope = _clientDiagnostics.CreateScope("VMwareCollectorCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _vMwareCollectorsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, vmWareCollectorName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<VMwareCollector>(null, response.GetRawResponse());
                return Response.FromValue(new VMwareCollector(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="vmWareCollectorName"> Unique name of a VMware collector within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="vmWareCollectorName"/> is null. </exception>
        public virtual Response<bool> Exists(string vmWareCollectorName, CancellationToken cancellationToken = default)
        {
            if (vmWareCollectorName == null)
            {
                throw new ArgumentNullException(nameof(vmWareCollectorName));
            }

            using var scope = _clientDiagnostics.CreateScope("VMwareCollectorCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(vmWareCollectorName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="vmWareCollectorName"> Unique name of a VMware collector within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="vmWareCollectorName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string vmWareCollectorName, CancellationToken cancellationToken = default)
        {
            if (vmWareCollectorName == null)
            {
                throw new ArgumentNullException(nameof(vmWareCollectorName));
            }

            using var scope = _clientDiagnostics.CreateScope("VMwareCollectorCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(vmWareCollectorName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a list of VMware collector. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VMwareCollector" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<VMwareCollector> GetAll(CancellationToken cancellationToken = default)
        {
            Page<VMwareCollector> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("VMwareCollectorCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _vMwareCollectorsRestClient.ListByProject(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new VMwareCollector(this, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Get a list of VMware collector. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VMwareCollector" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<VMwareCollector> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<VMwareCollector>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("VMwareCollectorCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _vMwareCollectorsRestClient.ListByProjectAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new VMwareCollector(this, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        IEnumerator<VMwareCollector> IEnumerable<VMwareCollector>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<VMwareCollector> IAsyncEnumerable<VMwareCollector>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, VMwareCollector, VMwareCollectorData> Construct() { }
    }
}
