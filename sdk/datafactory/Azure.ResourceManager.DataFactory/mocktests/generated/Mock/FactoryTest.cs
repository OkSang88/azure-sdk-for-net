// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.DataFactory;
using Azure.ResourceManager.DataFactory.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.DataFactory.Tests.Mock
{
    /// <summary> Test for Factory. </summary>
    public partial class FactoryMockTests : MockTestBase
    {
        public FactoryMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Factories_Get
            var factoryId = DataFactory.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var factory = GetArmClient().GetFactory(factoryId);
            string ifNoneMatch = null;

            await factory.GetAsync(ifNoneMatch);
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Factories_Delete
            var factoryId = DataFactory.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var factory = GetArmClient().GetFactory(factoryId);

            await factory.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Factories_Update
            var factoryId = DataFactory.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var factory = GetArmClient().GetFactory(factoryId);
            DataFactory.Models.FactoryUpdateParameters factoryUpdateParameters = new DataFactory.Models.FactoryUpdateParameters();

            await factory.UpdateAsync(factoryUpdateParameters);
        }

        [RecordedTest]
        public async Task GetGitHubAccessToken()
        {
            // Example: Factories_GetGitHubAccessToken
            var factoryId = DataFactory.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var factory = GetArmClient().GetFactory(factoryId);
            DataFactory.Models.GitHubAccessTokenRequest gitHubAccessTokenRequest = new DataFactory.Models.GitHubAccessTokenRequest(gitHubAccessCode: "some", gitHubAccessTokenBaseUrl: "some")
            {
                GitHubClientId = "some",
            };

            await factory.GetGitHubAccessTokenAsync(gitHubAccessTokenRequest);
        }

        [RecordedTest]
        public async Task GetDataPlaneAccess()
        {
            // Example: Factories_GetDataPlaneAccess
            var factoryId = DataFactory.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var factory = GetArmClient().GetFactory(factoryId);
            DataFactory.Models.UserAccessPolicy policy = new DataFactory.Models.UserAccessPolicy()
            {
                Permissions = "r",
                AccessResourcePath = "",
                ProfileName = "DefaultProfile",
                StartTime = "2018-11-10T02:46:20.2659347Z",
                ExpireTime = "2018-11-10T09:46:20.2659347Z",
            };

            await factory.GetDataPlaneAccessAsync(policy);
        }

        [RecordedTest]
        public async Task GetFeatureValueByFactoryExposureControl()
        {
            // Example: ExposureControl_GetFeatureValueByFactory
            var factoryId = DataFactory.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var factory = GetArmClient().GetFactory(factoryId);
            DataFactory.Models.ExposureControlRequest exposureControlRequest = new DataFactory.Models.ExposureControlRequest()
            {
                FeatureName = "ADFIntegrationRuntimeSharingRbac",
                FeatureType = "Feature",
            };

            await factory.GetFeatureValueByFactoryExposureControlAsync(exposureControlRequest);
        }

        [RecordedTest]
        public async Task QueryFeatureValuesByFactoryExposureControl()
        {
            // Example: ExposureControl_QueryFeatureValuesByFactory
            var factoryId = DataFactory.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var factory = GetArmClient().GetFactory(factoryId);
            DataFactory.Models.ExposureControlBatchRequest exposureControlBatchRequest = new DataFactory.Models.ExposureControlBatchRequest(exposureControlRequests: new List<DataFactory.Models.ExposureControlRequest>()
{
new DataFactory.Models.ExposureControlRequest()
{
FeatureName = "ADFIntegrationRuntimeSharingRbac", FeatureType = "Feature", },new DataFactory.Models.ExposureControlRequest()
{
FeatureName = "ADFSampleFeature", FeatureType = "Feature", },});

            await factory.QueryFeatureValuesByFactoryExposureControlAsync(exposureControlBatchRequest);
        }

        [RecordedTest]
        public async Task QueryPipelineRuns()
        {
            // Example: PipelineRuns_QueryByFactory
            var factoryId = DataFactory.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var factory = GetArmClient().GetFactory(factoryId);
            DataFactory.Models.RunFilterParameters filterParameters = new DataFactory.Models.RunFilterParameters(lastUpdatedAfter: DateTimeOffset.Parse("2018-06-16T00:36:44.3345758Z"), lastUpdatedBefore: DateTimeOffset.Parse("2018-06-16T00:49:48.3686473Z"));

            await foreach (var _ in factory.QueryPipelineRunsAsync(filterParameters))
            {
            }
        }

        [RecordedTest]
        public async Task GetPipelineRun()
        {
            // Example: PipelineRuns_Get
            var factoryId = DataFactory.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var factory = GetArmClient().GetFactory(factoryId);
            string runId = "2f7fdb90-5df1-4b8e-ac2f-064cfa58202b";

            await factory.GetPipelineRunAsync(runId);
        }

        [RecordedTest]
        public async Task CancelPipelineRun()
        {
            // Example: PipelineRuns_Cancel
            var factoryId = DataFactory.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var factory = GetArmClient().GetFactory(factoryId);
            string runId = "16ac5348-ff82-4f95-a80d-638c1d47b721";
            bool? isRecursive = null;

            await factory.CancelPipelineRunAsync(runId, isRecursive);
        }

        [RecordedTest]
        public async Task QueryByPipelineRunActivityRuns()
        {
            // Example: ActivityRuns_QueryByPipelineRun
            var factoryId = DataFactory.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var factory = GetArmClient().GetFactory(factoryId);
            string runId = "2f7fdb90-5df1-4b8e-ac2f-064cfa58202b";
            DataFactory.Models.RunFilterParameters filterParameters = new DataFactory.Models.RunFilterParameters(lastUpdatedAfter: DateTimeOffset.Parse("2018-06-16T00:36:44.3345758Z"), lastUpdatedBefore: DateTimeOffset.Parse("2018-06-16T00:49:48.3686473Z"));

            await foreach (var _ in factory.QueryByPipelineRunActivityRunsAsync(runId, filterParameters))
            {
            }
        }

        [RecordedTest]
        public async Task QueryTriggers()
        {
            // Example: Triggers_QueryByFactory
            var factoryId = DataFactory.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var factory = GetArmClient().GetFactory(factoryId);
            DataFactory.Models.TriggerFilterParameters filterParameters = new DataFactory.Models.TriggerFilterParameters()
            {
                ParentTriggerName = "exampleTrigger",
            };

            await foreach (var _ in factory.QueryTriggersAsync(filterParameters))
            {
            }
        }

        [RecordedTest]
        public async Task QueryTriggerRuns()
        {
            // Example: TriggerRuns_QueryByFactory
            var factoryId = DataFactory.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var factory = GetArmClient().GetFactory(factoryId);
            DataFactory.Models.RunFilterParameters filterParameters = new DataFactory.Models.RunFilterParameters(lastUpdatedAfter: DateTimeOffset.Parse("2018-06-16T00:36:44.3345758Z"), lastUpdatedBefore: DateTimeOffset.Parse("2018-06-16T00:49:48.3686473Z"));

            await foreach (var _ in factory.QueryTriggerRunsAsync(filterParameters))
            {
            }
        }

        [RecordedTest]
        public async Task CreateDataFlowDebugSession()
        {
            // Example: DataFlowDebugSession_Create
            var factoryId = DataFactory.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var factory = GetArmClient().GetFactory(factoryId);
            DataFactory.Models.CreateDataFlowDebugSessionRequest request = new DataFactory.Models.CreateDataFlowDebugSessionRequest()
            {
                TimeToLive = 60,
                IntegrationRuntime = new DataFactory.Models.IntegrationRuntimeDebugResource(properties: new DataFactory.Models.ManagedIntegrationRuntime()
                {
                    ComputeProperties = new DataFactory.Models.IntegrationRuntimeComputeProperties()
                    {
                        Location = "AutoResolve",
                        DataFlowProperties = new DataFactory.Models.IntegrationRuntimeDataFlowProperties()
                        {
                            ComputeType = new DataFactory.Models.DataFlowComputeType("General"),
                            CoreCount = 48,
                            TimeToLive = 10,
                        },
                    },
                    Type = new DataFactory.Models.IntegrationRuntimeType("Managed"),
                })
                {
                    Name = "ir1",
                },
            };

            await factory.CreateDataFlowDebugSessionAsync(true, request);
        }

        [RecordedTest]
        public async Task QueryDataFlowDebugSessions()
        {
            // Example: DataFlowDebugSession_QueryByFactory
            var factoryId = DataFactory.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var factory = GetArmClient().GetFactory(factoryId);

            await foreach (var _ in factory.QueryDataFlowDebugSessionsAsync())
            {
            }
        }

        [RecordedTest]
        public async Task AddDataFlowDataFlowDebugSession()
        {
            // Example: DataFlowDebugSession_AddDataFlow
            var factoryId = DataFactory.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var factory = GetArmClient().GetFactory(factoryId);
            DataFactory.Models.DataFlowDebugPackage request = new DataFactory.Models.DataFlowDebugPackage()
            {
                SessionId = "f06ed247-9d07-49b2-b05e-2cb4a2fc871e",
                DataFlow = new DataFactory.Models.DataFlowDebugResource(properties: new DataFactory.Models.MappingDataFlow()
                {
                    Script = "\n\nsource(output(\n\t\tColumn_1 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> source1",
                    Type = "MappingDataFlow",
                })
                {
                    Name = "dataflow1",
                },
                DebugSettings = new DataFactory.Models.DataFlowDebugPackageDebugSettings()
                {
                    DatasetParameters = new Dictionary<string, object>()
                    {
                        ["Movies"] = new Dictionary<string, object>()
                        {
                            ["path"] = "abc",
                        }
            ,
                        ["Output"] = new Dictionary<string, object>()
                        {
                            ["time"] = "def",
                        }
            ,
                    }
            ,
                },
            };

            await factory.AddDataFlowDataFlowDebugSessionAsync(request);
        }

        [RecordedTest]
        public async Task DeleteDataFlowDebugSession()
        {
            // Example: DataFlowDebugSession_Delete
            var factoryId = DataFactory.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var factory = GetArmClient().GetFactory(factoryId);
            DataFactory.Models.DeleteDataFlowDebugSessionRequest request = new DataFactory.Models.DeleteDataFlowDebugSessionRequest()
            {
                SessionId = "91fb57e0-8292-47be-89ff-c8f2d2bb2a7e",
            };

            await factory.DeleteDataFlowDebugSessionAsync(request);
        }

        [RecordedTest]
        public async Task ExecuteCommandDataFlowDebugSession()
        {
            // Example: DataFlowDebugSession_ExecuteCommand
            var factoryId = DataFactory.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var factory = GetArmClient().GetFactory(factoryId);
            DataFactory.Models.DataFlowDebugCommandRequest request = new DataFactory.Models.DataFlowDebugCommandRequest()
            {
                SessionId = "f06ed247-9d07-49b2-b05e-2cb4a2fc871e",
                Command = new DataFactory.Models.DataFlowDebugCommandType("executePreviewQuery"),
                CommandPayload = new DataFactory.Models.DataFlowDebugCommandPayload(streamName: "source1")
                {
                    RowLimits = 100,
                },
            };

            await factory.ExecuteCommandDataFlowDebugSessionAsync(true, request);
        }

        [RecordedTest]
        public async Task GetprivateLinkResources()
        {
            // Example: Get private link resources of a site
            var factoryId = DataFactory.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var factory = GetArmClient().GetFactory(factoryId);

            await foreach (var _ in factory.GetprivateLinkResourcesAsync())
            {
            }
        }
    }
}
