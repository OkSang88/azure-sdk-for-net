// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using MarketplaceRPService;
using MarketplaceRPService.Models;

namespace MarketplaceRPService.Tests.Mock
{
    /// <summary> Test for RequestApprovalResource. </summary>
    public partial class RequestApprovalResourceMockTests : MockTestBase
    {
        public RequestApprovalResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: GetApprovalRequest
            var requestApprovalResourceId = MarketplaceRPService.RequestApprovalResource.CreateResourceIdentifier("a0e28e55-90c4-41d8-8e34-bb7ef7775406", "marketplacetestthirdparty.md-test-third-party-2");
            var requestApprovalResource = GetArmClient().GetRequestApprovalResource(requestApprovalResourceId);

            await requestApprovalResource.GetAsync();
        }

        [RecordedTest]
        public async Task QueryRequestApproval()
        {
            // Example: QueryRequestApproval
            var requestApprovalResourceId = MarketplaceRPService.RequestApprovalResource.CreateResourceIdentifier("a0e28e55-90c4-41d8-8e34-bb7ef7775406", "marketplacetestthirdparty.md-test-third-party-2");
            var requestApprovalResource = GetArmClient().GetRequestApprovalResource(requestApprovalResourceId);
            MarketplaceRPService.Models.QueryRequestApprovalProperties payload = new MarketplaceRPService.Models.QueryRequestApprovalProperties()
            {
                Properties = new MarketplaceRPService.Models.RequestDetails()
                {
                    PublisherId = "marketplacetestthirdparty",
                },
            };

            await requestApprovalResource.QueryRequestApprovalAsync(payload);
        }

        [RecordedTest]
        public async Task WithdrawPlan()
        {
            // Example: WithdrawPlan
            var requestApprovalResourceId = MarketplaceRPService.RequestApprovalResource.CreateResourceIdentifier("a0e28e55-90c4-41d8-8e34-bb7ef7775406", "marketplacetestthirdparty.md-test-third-party-2");
            var requestApprovalResource = GetArmClient().GetRequestApprovalResource(requestApprovalResourceId);
            MarketplaceRPService.Models.WithdrawProperties payload = new MarketplaceRPService.Models.WithdrawProperties()
            {
                PlanId = "*",
                PublisherId = "marketplacetestthirdparty",
            };

            await requestApprovalResource.WithdrawPlanAsync(payload);
        }
    }
}
