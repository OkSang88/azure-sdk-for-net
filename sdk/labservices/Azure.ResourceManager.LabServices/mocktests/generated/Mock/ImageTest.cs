// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using LabServicesClient;
using LabServicesClient.Models;

namespace LabServicesClient.Tests.Mock
{
    /// <summary> Test for Image. </summary>
    public partial class ImageMockTests : MockTestBase
    {
        public ImageMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: getImage
            var imageId = LabServicesClient.Image.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg123", "testlabplan", "image1");
            var image = GetArmClient().GetImage(imageId);

            await image.GetAsync();
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: patchImage
            var imageId = LabServicesClient.Image.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg123", "testlabplan", "image1");
            var image = GetArmClient().GetImage(imageId);
            LabServicesClient.Models.ImageUpdate body = new LabServicesClient.Models.ImageUpdate()
            {
                EnabledState = LabServicesClient.Models.EnableState.Enabled,
            };

            await image.UpdateAsync(body);
        }
    }
}
