// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace SecurityInsights.Models
{
    public partial class ThreatIntelligenceIndicatorModelForRequestBody : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Etag))
            {
                writer.WritePropertyName("etag");
                writer.WriteStringValue(Etag);
            }
            writer.WritePropertyName("kind");
            writer.WriteStringValue(Kind.ToString());
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(ThreatIntelligenceTags))
            {
                writer.WritePropertyName("threatIntelligenceTags");
                writer.WriteStartArray();
                foreach (var item in ThreatIntelligenceTags)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(LastUpdatedTimeUtc))
            {
                writer.WritePropertyName("lastUpdatedTimeUtc");
                writer.WriteStringValue(LastUpdatedTimeUtc);
            }
            if (Optional.IsDefined(Source))
            {
                writer.WritePropertyName("source");
                writer.WriteStringValue(Source);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName");
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(IndicatorTypes))
            {
                writer.WritePropertyName("indicatorTypes");
                writer.WriteStartArray();
                foreach (var item in IndicatorTypes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Pattern))
            {
                writer.WritePropertyName("pattern");
                writer.WriteStringValue(Pattern);
            }
            if (Optional.IsDefined(PatternType))
            {
                writer.WritePropertyName("patternType");
                writer.WriteStringValue(PatternType);
            }
            if (Optional.IsDefined(PatternVersion))
            {
                writer.WritePropertyName("patternVersion");
                writer.WriteStringValue(PatternVersion);
            }
            if (Optional.IsCollectionDefined(KillChainPhases))
            {
                writer.WritePropertyName("killChainPhases");
                writer.WriteStartArray();
                foreach (var item in KillChainPhases)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ParsedPattern))
            {
                writer.WritePropertyName("parsedPattern");
                writer.WriteStartArray();
                foreach (var item in ParsedPattern)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ExternalId))
            {
                writer.WritePropertyName("externalId");
                writer.WriteStringValue(ExternalId);
            }
            if (Optional.IsDefined(CreatedByRef))
            {
                writer.WritePropertyName("createdByRef");
                writer.WriteStringValue(CreatedByRef);
            }
            if (Optional.IsDefined(Defanged))
            {
                writer.WritePropertyName("defanged");
                writer.WriteBooleanValue(Defanged.Value);
            }
            if (Optional.IsDefined(ExternalLastUpdatedTimeUtc))
            {
                writer.WritePropertyName("externalLastUpdatedTimeUtc");
                writer.WriteStringValue(ExternalLastUpdatedTimeUtc);
            }
            if (Optional.IsCollectionDefined(ExternalReferences))
            {
                writer.WritePropertyName("externalReferences");
                writer.WriteStartArray();
                foreach (var item in ExternalReferences)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(GranularMarkings))
            {
                writer.WritePropertyName("granularMarkings");
                writer.WriteStartArray();
                foreach (var item in GranularMarkings)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Labels))
            {
                writer.WritePropertyName("labels");
                writer.WriteStartArray();
                foreach (var item in Labels)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Revoked))
            {
                writer.WritePropertyName("revoked");
                writer.WriteBooleanValue(Revoked.Value);
            }
            if (Optional.IsDefined(Confidence))
            {
                writer.WritePropertyName("confidence");
                writer.WriteNumberValue(Confidence.Value);
            }
            if (Optional.IsCollectionDefined(ObjectMarkingRefs))
            {
                writer.WritePropertyName("objectMarkingRefs");
                writer.WriteStartArray();
                foreach (var item in ObjectMarkingRefs)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Language))
            {
                writer.WritePropertyName("language");
                writer.WriteStringValue(Language);
            }
            if (Optional.IsCollectionDefined(ThreatTypes))
            {
                writer.WritePropertyName("threatTypes");
                writer.WriteStartArray();
                foreach (var item in ThreatTypes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ValidFrom))
            {
                writer.WritePropertyName("validFrom");
                writer.WriteStringValue(ValidFrom);
            }
            if (Optional.IsDefined(ValidUntil))
            {
                writer.WritePropertyName("validUntil");
                writer.WriteStringValue(ValidUntil);
            }
            if (Optional.IsDefined(Created))
            {
                writer.WritePropertyName("created");
                writer.WriteStringValue(Created);
            }
            if (Optional.IsDefined(Modified))
            {
                writer.WritePropertyName("modified");
                writer.WriteStringValue(Modified);
            }
            if (Optional.IsCollectionDefined(Extensions))
            {
                writer.WritePropertyName("extensions");
                writer.WriteStartObject();
                foreach (var item in Extensions)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static ThreatIntelligenceIndicatorModelForRequestBody DeserializeThreatIntelligenceIndicatorModelForRequestBody(JsonElement element)
        {
            Optional<string> etag = default;
            ThreatIntelligenceResourceKindEnum kind = default;
            Optional<IReadOnlyDictionary<string, object>> additionalData = default;
            Optional<string> friendlyName = default;
            Optional<IList<string>> threatIntelligenceTags = default;
            Optional<string> lastUpdatedTimeUtc = default;
            Optional<string> source = default;
            Optional<string> displayName = default;
            Optional<string> description = default;
            Optional<IList<string>> indicatorTypes = default;
            Optional<string> pattern = default;
            Optional<string> patternType = default;
            Optional<string> patternVersion = default;
            Optional<IList<ThreatIntelligenceKillChainPhase>> killChainPhases = default;
            Optional<IList<ThreatIntelligenceParsedPattern>> parsedPattern = default;
            Optional<string> externalId = default;
            Optional<string> createdByRef = default;
            Optional<bool> defanged = default;
            Optional<string> externalLastUpdatedTimeUtc = default;
            Optional<IList<ThreatIntelligenceExternalReference>> externalReferences = default;
            Optional<IList<ThreatIntelligenceGranularMarkingModel>> granularMarkings = default;
            Optional<IList<string>> labels = default;
            Optional<bool> revoked = default;
            Optional<int> confidence = default;
            Optional<IList<string>> objectMarkingRefs = default;
            Optional<string> language = default;
            Optional<IList<string>> threatTypes = default;
            Optional<string> validFrom = default;
            Optional<string> validUntil = default;
            Optional<string> created = default;
            Optional<string> modified = default;
            Optional<IDictionary<string, object>> extensions = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("etag"))
                {
                    etag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kind"))
                {
                    kind = new ThreatIntelligenceResourceKindEnum(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("additionalData"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            Dictionary<string, object> dictionary = new Dictionary<string, object>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetObject());
                            }
                            additionalData = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("friendlyName"))
                        {
                            friendlyName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("threatIntelligenceTags"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            threatIntelligenceTags = array;
                            continue;
                        }
                        if (property0.NameEquals("lastUpdatedTimeUtc"))
                        {
                            lastUpdatedTimeUtc = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("source"))
                        {
                            source = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("displayName"))
                        {
                            displayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("description"))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("indicatorTypes"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            indicatorTypes = array;
                            continue;
                        }
                        if (property0.NameEquals("pattern"))
                        {
                            pattern = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("patternType"))
                        {
                            patternType = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("patternVersion"))
                        {
                            patternVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("killChainPhases"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<ThreatIntelligenceKillChainPhase> array = new List<ThreatIntelligenceKillChainPhase>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ThreatIntelligenceKillChainPhase.DeserializeThreatIntelligenceKillChainPhase(item));
                            }
                            killChainPhases = array;
                            continue;
                        }
                        if (property0.NameEquals("parsedPattern"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<ThreatIntelligenceParsedPattern> array = new List<ThreatIntelligenceParsedPattern>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ThreatIntelligenceParsedPattern.DeserializeThreatIntelligenceParsedPattern(item));
                            }
                            parsedPattern = array;
                            continue;
                        }
                        if (property0.NameEquals("externalId"))
                        {
                            externalId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("createdByRef"))
                        {
                            createdByRef = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("defanged"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            defanged = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("externalLastUpdatedTimeUtc"))
                        {
                            externalLastUpdatedTimeUtc = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("externalReferences"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<ThreatIntelligenceExternalReference> array = new List<ThreatIntelligenceExternalReference>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ThreatIntelligenceExternalReference.DeserializeThreatIntelligenceExternalReference(item));
                            }
                            externalReferences = array;
                            continue;
                        }
                        if (property0.NameEquals("granularMarkings"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<ThreatIntelligenceGranularMarkingModel> array = new List<ThreatIntelligenceGranularMarkingModel>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ThreatIntelligenceGranularMarkingModel.DeserializeThreatIntelligenceGranularMarkingModel(item));
                            }
                            granularMarkings = array;
                            continue;
                        }
                        if (property0.NameEquals("labels"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            labels = array;
                            continue;
                        }
                        if (property0.NameEquals("revoked"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            revoked = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("confidence"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            confidence = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("objectMarkingRefs"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            objectMarkingRefs = array;
                            continue;
                        }
                        if (property0.NameEquals("language"))
                        {
                            language = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("threatTypes"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            threatTypes = array;
                            continue;
                        }
                        if (property0.NameEquals("validFrom"))
                        {
                            validFrom = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("validUntil"))
                        {
                            validUntil = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("created"))
                        {
                            created = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("modified"))
                        {
                            modified = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("extensions"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            Dictionary<string, object> dictionary = new Dictionary<string, object>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetObject());
                            }
                            extensions = dictionary;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ThreatIntelligenceIndicatorModelForRequestBody(kind, etag.Value, Optional.ToDictionary(additionalData), friendlyName.Value, Optional.ToList(threatIntelligenceTags), lastUpdatedTimeUtc.Value, source.Value, displayName.Value, description.Value, Optional.ToList(indicatorTypes), pattern.Value, patternType.Value, patternVersion.Value, Optional.ToList(killChainPhases), Optional.ToList(parsedPattern), externalId.Value, createdByRef.Value, Optional.ToNullable(defanged), externalLastUpdatedTimeUtc.Value, Optional.ToList(externalReferences), Optional.ToList(granularMarkings), Optional.ToList(labels), Optional.ToNullable(revoked), Optional.ToNullable(confidence), Optional.ToList(objectMarkingRefs), language.Value, Optional.ToList(threatTypes), validFrom.Value, validUntil.Value, created.Value, modified.Value, Optional.ToDictionary(extensions));
        }
    }
}
