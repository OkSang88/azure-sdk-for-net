// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for RestorePoint. </summary>
    public partial class RestorePointCollectionMockTests : MockTestBase
    {
        public RestorePointCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create a restore point
            string restorePointName = "rpName";
            Compute.RestorePointData parameters = new Compute.RestorePointData();

            var restorePointGroupId = Compute.RestorePointGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "rpcName");
            var collection = GetArmClient().GetRestorePointGroup(restorePointGroupId).GetRestorePoints();
            await collection.CreateOrUpdateAsync(true, restorePointName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get a restore point
            string restorePointName = "rpName";

            var restorePointGroupId = Compute.RestorePointGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "rpcName");
            var collection = GetArmClient().GetRestorePointGroup(restorePointGroupId).GetRestorePoints();
            await collection.GetAsync(restorePointName);
        }
    }
}
