// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.PostgreSQL.Tests.Mock;
using Azure.ResourceManager.PostgreSQL.Tests.Mock.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.PostgreSQL.Tests.Mock.Tests.Mock
{
    /// <summary> Test for Server. </summary>
    public partial class ServerMockTests : MockTestBase
    {
        public ServerMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: ServerGet
            var serverId = PostgreSQL.Tests.Mock.Server.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg", "pgtestsvc1");
            var server = GetArmClient().GetServer(serverId);

            await server.GetAsync();
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: ServerGetWithVnet
            var serverId = PostgreSQL.Tests.Mock.Server.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg", "pgtestsvc4");
            var server = GetArmClient().GetServer(serverId);

            await server.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: ServerDelete
            var serverId = PostgreSQL.Tests.Mock.Server.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg", "testserver");
            var server = GetArmClient().GetServer(serverId);

            await server.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: ServerUpdate
            var serverId = PostgreSQL.Tests.Mock.Server.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "TestGroup", "pgtestsvc4");
            var server = GetArmClient().GetServer(serverId);
            PostgreSQL.Tests.Mock.Models.ServerForUpdate parameters = new PostgreSQL.Tests.Mock.Models.ServerForUpdate()
            {
                Location = "westus",
                Sku = new PostgreSQL.Tests.Mock.Models.Sku(name: "Standard_D8s_v3", tier: new PostgreSQL.Tests.Mock.Models.SkuTier("GeneralPurpose")),
                AdministratorLoginPassword = "newpassword",
                Storage = new PostgreSQL.Tests.Mock.Models.Storage()
                {
                    StorageSizeGB = 1024,
                },
                Backup = new PostgreSQL.Tests.Mock.Models.Backup()
                {
                    BackupRetentionDays = 20,
                },
                CreateMode = new PostgreSQL.Tests.Mock.Models.CreateModeForUpdate("Update"),
            };

            await server.UpdateAsync(true, parameters);
        }

        [RecordedTest]
        public async Task Update2()
        {
            // Example: ServerUpdateWithCustomerMaintenanceWindow
            var serverId = PostgreSQL.Tests.Mock.Server.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg", "pgtestsvc4");
            var server = GetArmClient().GetServer(serverId);
            PostgreSQL.Tests.Mock.Models.ServerForUpdate parameters = new PostgreSQL.Tests.Mock.Models.ServerForUpdate()
            {
                Location = "westus",
                MaintenanceWindow = new PostgreSQL.Tests.Mock.Models.MaintenanceWindow()
                {
                    CustomWindow = "Enabled",
                    StartHour = 8,
                    StartMinute = 0,
                    DayOfWeek = 0,
                },
                CreateMode = new PostgreSQL.Tests.Mock.Models.CreateModeForUpdate("Update"),
            };

            await server.UpdateAsync(true, parameters);
        }

        [RecordedTest]
        public async Task Restart()
        {
            // Example: ServerRestart
            var serverId = PostgreSQL.Tests.Mock.Server.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg", "testserver");
            var server = GetArmClient().GetServer(serverId);
            PostgreSQL.Tests.Mock.Models.RestartParameter parameters = null;

            await server.RestartAsync(true, parameters);
        }

        [RecordedTest]
        public async Task Restart2()
        {
            // Example: ServerRestartWithFailover
            var serverId = PostgreSQL.Tests.Mock.Server.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg", "testserver");
            var server = GetArmClient().GetServer(serverId);
            PostgreSQL.Tests.Mock.Models.RestartParameter parameters = new PostgreSQL.Tests.Mock.Models.RestartParameter()
            {
                RestartWithFailover = true,
                FailoverMode = new PostgreSQL.Tests.Mock.Models.FailoverMode("ForcedFailover"),
            };

            await server.RestartAsync(true, parameters);
        }

        [RecordedTest]
        public async Task Start()
        {
            // Example: ServerStart
            var serverId = PostgreSQL.Tests.Mock.Server.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg", "testserver");
            var server = GetArmClient().GetServer(serverId);

            await server.StartAsync(true);
        }

        [RecordedTest]
        public async Task Stop()
        {
            // Example: ServerStop
            var serverId = PostgreSQL.Tests.Mock.Server.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg", "testserver");
            var server = GetArmClient().GetServer(serverId);

            await server.StopAsync(true);
        }
    }
}
