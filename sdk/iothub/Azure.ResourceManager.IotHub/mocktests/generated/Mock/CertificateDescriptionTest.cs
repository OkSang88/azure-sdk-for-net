// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.IotHub;
using Azure.ResourceManager.IotHub.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.IotHub.Tests.Mock
{
    /// <summary> Test for CertificateDescription. </summary>
    public partial class CertificateDescriptionMockTests : MockTestBase
    {
        public CertificateDescriptionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Certificates_Get
            var certificateDescriptionId = IotHub.CertificateDescription.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "testhub", "cert");
            var certificateDescription = GetArmClient().GetCertificateDescription(certificateDescriptionId);

            await certificateDescription.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Certificates_Delete
            var certificateDescriptionId = IotHub.CertificateDescription.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myhub", "cert");
            var certificateDescription = GetArmClient().GetCertificateDescription(certificateDescriptionId);
            string ifMatch = "AAAAAAAADGk=";

            await certificateDescription.DeleteAsync(true, ifMatch);
        }

        [RecordedTest]
        public async Task GenerateVerificationCode()
        {
            // Example: Certificates_GenerateVerificationCode
            var certificateDescriptionId = IotHub.CertificateDescription.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "testHub", "cert");
            var certificateDescription = GetArmClient().GetCertificateDescription(certificateDescriptionId);
            string ifMatch = "AAAAAAAADGk=";

            await certificateDescription.GenerateVerificationCodeAsync(ifMatch);
        }

        [RecordedTest]
        public async Task Verify()
        {
            // Example: Certificates_Verify
            var certificateDescriptionId = IotHub.CertificateDescription.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myFirstProvisioningService", "cert");
            var certificateDescription = GetArmClient().GetCertificateDescription(certificateDescriptionId);
            string ifMatch = "AAAAAAAADGk=";
            IotHub.Models.CertificateVerificationDescription certificateVerificationBody = new IotHub.Models.CertificateVerificationDescription()
            {
                Certificate = "#####################################",
            };

            await certificateDescription.VerifyAsync(ifMatch, certificateVerificationBody);
        }
    }
}
