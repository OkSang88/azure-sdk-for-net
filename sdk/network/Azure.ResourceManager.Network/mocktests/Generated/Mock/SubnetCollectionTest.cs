// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for Subnet. </summary>
    public partial class SubnetCollectionMockTests : MockTestBase
    {
        public SubnetCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create subnet
            string subnetName = "subnet1";
            Network.SubnetData subnetParameters = new Network.SubnetData()
            {
                AddressPrefix = "10.0.0.0/16",
            };

            var virtualNetworkId = Network.VirtualNetwork.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "subnet-test", "vnetname");
            var collection = GetArmClient().GetVirtualNetwork(virtualNetworkId).GetSubnets();
            await collection.CreateOrUpdateAsync(subnetName, subnetParameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Create subnet with a delegation
            string subnetName = "subnet1";
            Network.SubnetData subnetParameters = new Network.SubnetData()
            {
                AddressPrefix = "10.0.0.0/16",
            };

            var virtualNetworkId = Network.VirtualNetwork.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "subnet-test", "vnetname");
            var collection = GetArmClient().GetVirtualNetwork(virtualNetworkId).GetSubnets();
            await collection.CreateOrUpdateAsync(subnetName, subnetParameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate3()
        {
            // Example: Create subnet with service endpoints
            string subnetName = "subnet1";
            Network.SubnetData subnetParameters = new Network.SubnetData()
            {
                AddressPrefix = "10.0.0.0/16",
            };

            var virtualNetworkId = Network.VirtualNetwork.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "subnet-test", "vnetname");
            var collection = GetArmClient().GetVirtualNetwork(virtualNetworkId).GetSubnets();
            await collection.CreateOrUpdateAsync(subnetName, subnetParameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get subnet
            string subnetName = "subnet1";
            string expand = null;

            var virtualNetworkId = Network.VirtualNetwork.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "subnet-test", "vnetname");
            var collection = GetArmClient().GetVirtualNetwork(virtualNetworkId).GetSubnets();
            await collection.GetAsync(subnetName, expand);
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: Get subnet with a delegation
            string subnetName = "subnet1";
            string expand = null;

            var virtualNetworkId = Network.VirtualNetwork.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "subnet-test", "vnetname");
            var collection = GetArmClient().GetVirtualNetwork(virtualNetworkId).GetSubnets();
            await collection.GetAsync(subnetName, expand);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List subnets

            var virtualNetworkId = Network.VirtualNetwork.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "subnet-test", "vnetname");
            var collection = GetArmClient().GetVirtualNetwork(virtualNetworkId).GetSubnets();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
