// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for VirtualNetworkGateway. </summary>
    public partial class VirtualNetworkGatewayMockTests : MockTestBase
    {
        public VirtualNetworkGatewayMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: GetVirtualNetworkGateway
            var virtualNetworkGateway = GetArmClient().GetVirtualNetworkGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"));

            await virtualNetworkGateway.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: DeleteVirtualNetworkGateway
            var virtualNetworkGateway = GetArmClient().GetVirtualNetworkGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"));

            await virtualNetworkGateway.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: UpdateVirtualNetworkGatewayTags
            var virtualNetworkGateway = GetArmClient().GetVirtualNetworkGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"));
            Network.Models.TagsObject parameters = new Network.Models.TagsObject();

            await virtualNetworkGateway.UpdateAsync(parameters);
        }

        [RecordedTest]
        public void GetConnectionsAsync()
        {
            // Example: VirtualNetworkGatewaysListConnections
            var virtualNetworkGateway = GetArmClient().GetVirtualNetworkGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworkGateways/test-vpn-gateway-1"));

            virtualNetworkGateway.GetConnectionsAsync();
        }

        [RecordedTest]
        public async Task ResetAsync()
        {
            // Example: ResetVirtualNetworkGateway
            var virtualNetworkGateway = GetArmClient().GetVirtualNetworkGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"));
            string gatewayVip = null;

            await virtualNetworkGateway.ResetAsync(gatewayVip);
        }

        [RecordedTest]
        public async Task ResetVpnClientSharedKeyAsync()
        {
            // Example: ResetVpnClientSharedKey
            var virtualNetworkGateway = GetArmClient().GetVirtualNetworkGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"));

            await virtualNetworkGateway.ResetVpnClientSharedKeyAsync();
        }

        [RecordedTest]
        public async Task GeneratevpnclientpackageAsync()
        {
            // Example: GenerateVPNClientPackage
            var virtualNetworkGateway = GetArmClient().GetVirtualNetworkGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"));
            Network.Models.VpnClientParameters parameters = new Network.Models.VpnClientParameters();

            await virtualNetworkGateway.GeneratevpnclientpackageAsync(parameters);
        }

        [RecordedTest]
        public async Task GenerateVpnProfileAsync()
        {
            // Example: GenerateVirtualNetworkGatewayVPNProfile
            var virtualNetworkGateway = GetArmClient().GetVirtualNetworkGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"));
            Network.Models.VpnClientParameters parameters = new Network.Models.VpnClientParameters();

            await virtualNetworkGateway.GenerateVpnProfileAsync(parameters);
        }

        [RecordedTest]
        public async Task GetVpnProfilePackageUrlAsync()
        {
            // Example: GetVirtualNetworkGatewayVPNProfilePackageURL
            var virtualNetworkGateway = GetArmClient().GetVirtualNetworkGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"));

            await virtualNetworkGateway.GetVpnProfilePackageUrlAsync();
        }

        [RecordedTest]
        public async Task GetBgpPeerStatusAsync()
        {
            // Example: GetVirtualNetworkGatewayBGPPeerStatus
            var virtualNetworkGateway = GetArmClient().GetVirtualNetworkGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"));
            string peer = null;

            await virtualNetworkGateway.GetBgpPeerStatusAsync(peer);
        }

        [RecordedTest]
        public async Task SupportedVpnDevicesAsync()
        {
            // Example: ListVirtualNetworkGatewaySupportedVPNDevices
            var virtualNetworkGateway = GetArmClient().GetVirtualNetworkGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"));

            await virtualNetworkGateway.SupportedVpnDevicesAsync();
        }

        [RecordedTest]
        public async Task GetLearnedRoutesAsync()
        {
            // Example: GetVirtualNetworkGatewayLearnedRoutes
            var virtualNetworkGateway = GetArmClient().GetVirtualNetworkGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"));

            await virtualNetworkGateway.GetLearnedRoutesAsync();
        }

        [RecordedTest]
        public async Task GetAdvertisedRoutesAsync()
        {
            // Example: GetVirtualNetworkGatewayAdvertisedRoutes
            var virtualNetworkGateway = GetArmClient().GetVirtualNetworkGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"));
            string peer = "test";

            await virtualNetworkGateway.GetAdvertisedRoutesAsync(peer);
        }

        [RecordedTest]
        public async Task SetVpnclientIpsecParametersAsync()
        {
            // Example: Set VirtualNetworkGateway VpnClientIpsecParameters
            var virtualNetworkGateway = GetArmClient().GetVirtualNetworkGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"));
            Network.Models.VpnClientIPsecParameters vpnclientIpsecParams = new Network.Models.VpnClientIPsecParameters(saLifeTimeSeconds: 86473, saDataSizeKilobytes: 429497, ipsecEncryption: new Network.Models.IpsecEncryption("AES256"), ipsecIntegrity: new Network.Models.IpsecIntegrity("SHA256"), ikeEncryption: new Network.Models.IkeEncryption("AES256"), ikeIntegrity: new Network.Models.IkeIntegrity("SHA384"), dhGroup: new Network.Models.DhGroup("DHGroup2"), pfsGroup: new Network.Models.PfsGroup("PFS2"));

            await virtualNetworkGateway.SetVpnclientIpsecParametersAsync(vpnclientIpsecParams);
        }

        [RecordedTest]
        public async Task GetVpnclientIpsecParametersAsync()
        {
            // Example: Get VirtualNetworkGateway VpnClientIpsecParameters
            var virtualNetworkGateway = GetArmClient().GetVirtualNetworkGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"));

            await virtualNetworkGateway.GetVpnclientIpsecParametersAsync();
        }

        [RecordedTest]
        public async Task StartPacketCaptureAsync()
        {
            // Example: Start packet capture on virtual network gateway with filter
            var virtualNetworkGateway = GetArmClient().GetVirtualNetworkGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"));
            Network.Models.VpnPacketCaptureStartParameters parameters = new Network.Models.VpnPacketCaptureStartParameters()
            {
                FilterData = "{'TracingFlags': 11,'MaxPacketBufferSize': 120,'MaxFileSize': 200,'Filters': [{'SourceSubnets': ['20.1.1.0/24'],'DestinationSubnets': ['10.1.1.0/24'],'SourcePort': [500],'DestinationPort': [4500],'Protocol': 6,'TcpFlags': 16,'CaptureSingleDirectionTrafficOnly': true}]}",
            };

            await virtualNetworkGateway.StartPacketCaptureAsync(parameters);
        }

        [RecordedTest]
        public async Task StartPacketCaptureAsync2()
        {
            // Example: Start packet capture on virtual network gateway without filter
            var virtualNetworkGateway = GetArmClient().GetVirtualNetworkGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"));
            Network.Models.VpnPacketCaptureStartParameters parameters = null;

            await virtualNetworkGateway.StartPacketCaptureAsync(parameters);
        }

        [RecordedTest]
        public async Task StopPacketCaptureAsync()
        {
            // Example: Stop packet capture on virtual network gateway
            var virtualNetworkGateway = GetArmClient().GetVirtualNetworkGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vpngw"));
            Network.Models.VpnPacketCaptureStopParameters parameters = new Network.Models.VpnPacketCaptureStopParameters()
            {
                SasUrl = "https://teststorage.blob.core.windows.net/?sv=2018-03-28&ss=bfqt&srt=sco&sp=rwdlacup&se=2019-09-13T07:44:05Z&st=2019-09-06T23:44:05Z&spr=https&sig=V1h9D1riltvZMI69d6ihENnFo%2FrCvTqGgjO2lf%2FVBhE%3D",
            };

            await virtualNetworkGateway.StopPacketCaptureAsync(parameters);
        }

        [RecordedTest]
        public async Task GetVpnclientConnectionHealthAsync()
        {
            // Example: GetVirtualNetworkGatewayVpnclientConnectionHealth
            var virtualNetworkGateway = GetArmClient().GetVirtualNetworkGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/p2s-vnet-test/providers/Microsoft.Network/virtualNetworkGateways/vpnp2sgw"));

            await virtualNetworkGateway.GetVpnclientConnectionHealthAsync();
        }

        [RecordedTest]
        public async Task DisconnectVirtualNetworkGatewayVpnConnectionsAsync()
        {
            // Example: Disconnect VpnConnections from Virtual Network Gateway
            var virtualNetworkGateway = GetArmClient().GetVirtualNetworkGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/vpn-gateway-test/providers/Microsoft.Network/virtualNetworkGateways/vpngateway"));
            Network.Models.P2SVpnConnectionRequest request = new Network.Models.P2SVpnConnectionRequest();

            await virtualNetworkGateway.DisconnectVirtualNetworkGatewayVpnConnectionsAsync(request);
        }
    }
}
