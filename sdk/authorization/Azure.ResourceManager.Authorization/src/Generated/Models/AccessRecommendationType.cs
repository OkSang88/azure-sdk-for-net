// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Authorization.Models
{
    /// <summary> The feature- generated recommendation shown to the reviewer. </summary>
    public readonly partial struct AccessRecommendationType : IEquatable<AccessRecommendationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AccessRecommendationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AccessRecommendationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ApproveValue = "Approve";
        private const string DenyValue = "Deny";
        private const string NoInfoAvailableValue = "NoInfoAvailable";

        /// <summary> Approve. </summary>
        public static AccessRecommendationType Approve { get; } = new AccessRecommendationType(ApproveValue);
        /// <summary> Deny. </summary>
        public static AccessRecommendationType Deny { get; } = new AccessRecommendationType(DenyValue);
        /// <summary> NoInfoAvailable. </summary>
        public static AccessRecommendationType NoInfoAvailable { get; } = new AccessRecommendationType(NoInfoAvailableValue);
        /// <summary> Determines if two <see cref="AccessRecommendationType"/> values are the same. </summary>
        public static bool operator ==(AccessRecommendationType left, AccessRecommendationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AccessRecommendationType"/> values are not the same. </summary>
        public static bool operator !=(AccessRecommendationType left, AccessRecommendationType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AccessRecommendationType"/>. </summary>
        public static implicit operator AccessRecommendationType(string value) => new AccessRecommendationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AccessRecommendationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AccessRecommendationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
