// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace StorSimple8000SeriesManagementClient.Models
{
    /// <summary> The alert. </summary>
    public partial class Alert : BaseModel
    {
        /// <summary> Initializes a new instance of Alert. </summary>
        /// <param name="title"> The title of the alert. </param>
        /// <param name="scope"> The scope of the alert. </param>
        /// <param name="alertType"> The type of the alert. </param>
        /// <param name="appearedAtTime"> The UTC time at which the alert was raised. </param>
        /// <param name="appearedAtSourceTime"> The source time at which the alert was raised. </param>
        /// <param name="source"> The source at which the alert was raised. </param>
        /// <param name="severity"> The severity of the alert. </param>
        /// <param name="status"> The current status of the alert. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="title"/>, <paramref name="alertType"/>, or <paramref name="source"/> is null. </exception>
        public Alert(string title, AlertScope scope, string alertType, DateTimeOffset appearedAtTime, DateTimeOffset appearedAtSourceTime, AlertSource source, AlertSeverity severity, AlertStatus status)
        {
            if (title == null)
            {
                throw new ArgumentNullException(nameof(title));
            }
            if (alertType == null)
            {
                throw new ArgumentNullException(nameof(alertType));
            }
            if (source == null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            Title = title;
            Scope = scope;
            AlertType = alertType;
            AppearedAtTime = appearedAtTime;
            AppearedAtSourceTime = appearedAtSourceTime;
            Source = source;
            Severity = severity;
            Status = status;
            DetailedInformation = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of Alert. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="type"> The type. </param>
        /// <param name="kind"> The Kind of the object. Currently only Series8000 is supported. </param>
        /// <param name="title"> The title of the alert. </param>
        /// <param name="scope"> The scope of the alert. </param>
        /// <param name="alertType"> The type of the alert. </param>
        /// <param name="appearedAtTime"> The UTC time at which the alert was raised. </param>
        /// <param name="appearedAtSourceTime"> The source time at which the alert was raised. </param>
        /// <param name="clearedAtTime"> The UTC time at which the alert was cleared. </param>
        /// <param name="clearedAtSourceTime"> The source time at which the alert was cleared. </param>
        /// <param name="source"> The source at which the alert was raised. </param>
        /// <param name="recommendation"> The recommended action for the issue raised in the alert. </param>
        /// <param name="resolutionReason"> The reason for resolving the alert. </param>
        /// <param name="severity"> The severity of the alert. </param>
        /// <param name="status"> The current status of the alert. </param>
        /// <param name="errorDetails"> The details of the error for which the alert was raised. </param>
        /// <param name="detailedInformation"> More details about the alert. </param>
        internal Alert(ResourceIdentifier id, string name, ResourceType type, string kind, string title, AlertScope scope, string alertType, DateTimeOffset appearedAtTime, DateTimeOffset appearedAtSourceTime, DateTimeOffset? clearedAtTime, DateTimeOffset? clearedAtSourceTime, AlertSource source, string recommendation, string resolutionReason, AlertSeverity severity, AlertStatus status, AlertErrorDetails errorDetails, IDictionary<string, string> detailedInformation) : base(id, name, type, kind)
        {
            Title = title;
            Scope = scope;
            AlertType = alertType;
            AppearedAtTime = appearedAtTime;
            AppearedAtSourceTime = appearedAtSourceTime;
            ClearedAtTime = clearedAtTime;
            ClearedAtSourceTime = clearedAtSourceTime;
            Source = source;
            Recommendation = recommendation;
            ResolutionReason = resolutionReason;
            Severity = severity;
            Status = status;
            ErrorDetails = errorDetails;
            DetailedInformation = detailedInformation;
        }

        /// <summary> The title of the alert. </summary>
        public string Title { get; set; }
        /// <summary> The scope of the alert. </summary>
        public AlertScope Scope { get; set; }
        /// <summary> The type of the alert. </summary>
        public string AlertType { get; set; }
        /// <summary> The UTC time at which the alert was raised. </summary>
        public DateTimeOffset AppearedAtTime { get; set; }
        /// <summary> The source time at which the alert was raised. </summary>
        public DateTimeOffset AppearedAtSourceTime { get; set; }
        /// <summary> The UTC time at which the alert was cleared. </summary>
        public DateTimeOffset? ClearedAtTime { get; set; }
        /// <summary> The source time at which the alert was cleared. </summary>
        public DateTimeOffset? ClearedAtSourceTime { get; set; }
        /// <summary> The source at which the alert was raised. </summary>
        public AlertSource Source { get; set; }
        /// <summary> The recommended action for the issue raised in the alert. </summary>
        public string Recommendation { get; set; }
        /// <summary> The reason for resolving the alert. </summary>
        public string ResolutionReason { get; set; }
        /// <summary> The severity of the alert. </summary>
        public AlertSeverity Severity { get; set; }
        /// <summary> The current status of the alert. </summary>
        public AlertStatus Status { get; set; }
        /// <summary> The details of the error for which the alert was raised. </summary>
        public AlertErrorDetails ErrorDetails { get; set; }
        /// <summary> More details about the alert. </summary>
        public IDictionary<string, string> DetailedInformation { get; }
    }
}
