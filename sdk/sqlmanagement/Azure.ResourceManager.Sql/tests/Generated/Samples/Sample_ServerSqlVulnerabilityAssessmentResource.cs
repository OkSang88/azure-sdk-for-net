// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;

namespace Azure.ResourceManager.Sql.Samples
{
    public partial class Sample_ServerSqlVulnerabilityAssessmentResource
    {
        // Get SQL Vulnerability Assessment policy
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetSQLVulnerabilityAssessmentPolicy()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/preview/2022-02-01-preview/examples/SqlVulnerabilityAssessmentGet.json
            // this example is just showing the usage of "SqlVulnerabilityAssessmentsSettings_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServerSqlVulnerabilityAssessmentResource created on azure
            // for more information of creating ServerSqlVulnerabilityAssessmentResource, please refer to the document of ServerSqlVulnerabilityAssessmentResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "vulnerabilityaseessmenttest-4799";
            string serverName = "vulnerabilityaseessmenttest-6440";
            SqlVulnerabilityAssessmentName vulnerabilityAssessmentName = SqlVulnerabilityAssessmentName.Default;
            ResourceIdentifier serverSqlVulnerabilityAssessmentResourceId = ServerSqlVulnerabilityAssessmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName, vulnerabilityAssessmentName);
            ServerSqlVulnerabilityAssessmentResource serverSqlVulnerabilityAssessment = client.GetServerSqlVulnerabilityAssessmentResource(serverSqlVulnerabilityAssessmentResourceId);

            // invoke the operation
            ServerSqlVulnerabilityAssessmentResource result = await serverSqlVulnerabilityAssessment.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SqlVulnerabilityAssessmentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create a SQL Vulnerability Assessment policy
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateASQLVulnerabilityAssessmentPolicy()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/preview/2022-02-01-preview/examples/SqlVulnerabilityAssessmentCreate.json
            // this example is just showing the usage of "SqlVulnerabilityAssessmentsSettings_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServerSqlVulnerabilityAssessmentResource created on azure
            // for more information of creating ServerSqlVulnerabilityAssessmentResource, please refer to the document of ServerSqlVulnerabilityAssessmentResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "vulnerabilityaseessmenttest-4799";
            string serverName = "vulnerabilityaseessmenttest-6440";
            VulnerabilityAssessmentName vulnerabilityAssessmentName = VulnerabilityAssessmentName.Default;
            ResourceIdentifier serverSqlVulnerabilityAssessmentResourceId = ServerSqlVulnerabilityAssessmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName, vulnerabilityAssessmentName);
            ServerSqlVulnerabilityAssessmentResource serverSqlVulnerabilityAssessment = client.GetServerSqlVulnerabilityAssessmentResource(serverSqlVulnerabilityAssessmentResourceId);

            // invoke the operation
            SqlVulnerabilityAssessmentData data = new SqlVulnerabilityAssessmentData()
            {
                State = SqlVulnerabilityAssessmentState.Enabled,
            };
            ArmOperation<ServerSqlVulnerabilityAssessmentResource> lro = await serverSqlVulnerabilityAssessment.UpdateAsync(WaitUntil.Completed, data);
            ServerSqlVulnerabilityAssessmentResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SqlVulnerabilityAssessmentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Remove SQL Vulnerability Assessment
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_RemoveSQLVulnerabilityAssessment()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/preview/2022-02-01-preview/examples/SqlVulnerabilityAssessmentDelete.json
            // this example is just showing the usage of "SqlVulnerabilityAssessments_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ServerSqlVulnerabilityAssessmentResource created on azure
            // for more information of creating ServerSqlVulnerabilityAssessmentResource, please refer to the document of ServerSqlVulnerabilityAssessmentResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "vulnerabilityaseessmenttest-4799";
            string serverName = "vulnerabilityaseessmenttest-6440";
            VulnerabilityAssessmentName vulnerabilityAssessmentName = VulnerabilityAssessmentName.Default;
            ResourceIdentifier serverSqlVulnerabilityAssessmentResourceId = ServerSqlVulnerabilityAssessmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName, vulnerabilityAssessmentName);
            ServerSqlVulnerabilityAssessmentResource serverSqlVulnerabilityAssessment = client.GetServerSqlVulnerabilityAssessmentResource(serverSqlVulnerabilityAssessmentResourceId);

            // invoke the operation
            VulnerabilityAssessmentName vulnerabilityAssessmentName0 = VulnerabilityAssessmentName.Default;
            await serverSqlVulnerabilityAssessment.DeleteAsync(WaitUntil.Completed, vulnerabilityAssessmentName0);

            Console.WriteLine($"Succeeded");
        }
    }
}
