// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.EventHubs;
using Azure.ResourceManager.EventHubs.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.EventHubs.Tests.Mock
{
    /// <summary> Test for EventHubCluster. </summary>
    public partial class EventHubClusterMockTests : MockTestBase
    {
        public EventHubClusterMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: ClusterGet
            var eventHubCluster = GetArmClient().GetEventHubCluster(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.EventHub/clusters/testCluster"));

            await eventHubCluster.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: ClusterDelete
            var eventHubCluster = GetArmClient().GetEventHubCluster(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.EventHub/clusters/testCluster"));

            await eventHubCluster.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: ClusterPatch
            var eventHubCluster = GetArmClient().GetEventHubCluster(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.EventHub/clusters/testCluster"));
            EventHubs.EventHubClusterData parameters = new EventHubs.EventHubClusterData(location: "South Central US")
            {
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>() { ["tag3"] = "value3", ["tag4"] = "value4", });
            await eventHubCluster.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task GetNamespacesAsync()
        {
            // Example: ListNamespacesInCluster
            var eventHubCluster = GetArmClient().GetEventHubCluster(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.EventHub/clusters/testCluster"));

            await eventHubCluster.GetNamespacesAsync();
        }

        [RecordedTest]
        public async Task PatchConfigurationAsync()
        {
            // Example: ClustersQuotasConfigurationPatch
            var eventHubCluster = GetArmClient().GetEventHubCluster(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ArunMonocle/providers/Microsoft.EventHub/clusters/testCluster"));
            EventHubs.Models.ClusterQuotaConfigurationProperties parameters = new EventHubs.Models.ClusterQuotaConfigurationProperties();

            await eventHubCluster.PatchConfigurationAsync(parameters);
        }

        [RecordedTest]
        public async Task GetConfigurationAsync()
        {
            // Example: ClustersQuotasConfigurationGet
            var eventHubCluster = GetArmClient().GetEventHubCluster(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.EventHub/clusters/testCluster"));

            await eventHubCluster.GetConfigurationAsync();
        }
    }
}
