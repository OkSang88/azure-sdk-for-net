// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.LabServices.Tests.Mock;
using Azure.ResourceManager.LabServices.Tests.Mock.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.LabServices.Tests.Mock.Tests.Mock
{
    /// <summary> Test for Lab. </summary>
    public partial class LabCollectionMockTests : MockTestBase
    {
        public LabCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: putLab
            string labName = "testlab";
            LabServices.Tests.Mock.LabData body = new LabServices.Tests.Mock.LabData(location: "westus")
            {
                AutoShutdownProfile = new LabServices.Tests.Mock.Models.AutoShutdownProfile()
                {
                    ShutdownOnDisconnect = LabServices.Tests.Mock.Models.EnableState.Enabled,
                    ShutdownWhenNotConnected = LabServices.Tests.Mock.Models.EnableState.Enabled,
                    ShutdownOnIdle = LabServices.Tests.Mock.Models.ShutdownOnIdleMode.UserAbsence,
                    DisconnectDelay = TimeSpan.Parse("00:05"),
                    NoConnectDelay = TimeSpan.Parse("01:00"),
                    IdleDelay = TimeSpan.Parse("01:00"),
                },
                ConnectionProfile = new LabServices.Tests.Mock.Models.ConnectionProfile()
                {
                    WebSshAccess = LabServices.Tests.Mock.Models.ConnectionType.None,
                    WebRdpAccess = LabServices.Tests.Mock.Models.ConnectionType.None,
                    ClientSshAccess = LabServices.Tests.Mock.Models.ConnectionType.Public,
                    ClientRdpAccess = LabServices.Tests.Mock.Models.ConnectionType.Public,
                },
                VirtualMachineProfile = new LabServices.Tests.Mock.Models.VirtualMachineProfile(createOption: LabServices.Tests.Mock.Models.CreateOption.TemplateVM, imageReference: new LabServices.Tests.Mock.Models.ImageReference()
                {
                    Offer = "WindowsServer",
                    Publisher = "Microsoft",
                    Sku = "2019-Datacenter",
                    Version = "2019.0.20190410",
                }, sku: new LabServices.Tests.Mock.Models.Sku(name: "Medium"), usageQuota: TimeSpan.Parse("10:00"), adminUser: new LabServices.Tests.Mock.Models.Credentials(username: "test-user"))
                {
                    AdditionalCapabilities = new LabServices.Tests.Mock.Models.VirtualMachineAdditionalCapabilities()
                    {
                        InstallGpuDrivers = LabServices.Tests.Mock.Models.EnableState.Disabled,
                    },
                    UseSharedPassword = LabServices.Tests.Mock.Models.EnableState.Disabled,
                },
                SecurityProfile = new LabServices.Tests.Mock.Models.SecurityProfile()
                {
                    OpenAccess = LabServices.Tests.Mock.Models.EnableState.Disabled,
                },
                LabPlanId = "/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.LabServices/labPlans/testlabplan",
                Title = "Test Lab",
                Description = "This is a test lab.",
                NetworkProfile = new LabServices.Tests.Mock.Models.LabNetworkProfile()
                {
                    SubnetId = "/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/default",
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg123")).GetLabs();
            await collection.CreateOrUpdateAsync(true, labName, body);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: getLab
            string labName = "testlab";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg123")).GetLabs();
            await collection.GetAsync(labName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: listResourceGroupLabs

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg123")).GetLabs();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
