// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for ExpressRouteCircuit. </summary>
    public partial class ExpressRouteCircuitCollectionMockTests : MockTestBase
    {
        public ExpressRouteCircuitCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create ExpressRouteCircuit
            string circuitName = "circuitName";
            Network.ExpressRouteCircuitData parameters = new Network.ExpressRouteCircuitData()
            {
                Sku = new Network.Models.ExpressRouteCircuitSku()
                {
                    Name = "Standard_MeteredData",
                    Tier = new Network.Models.ExpressRouteCircuitSkuTier("Standard"),
                    Family = new Network.Models.ExpressRouteCircuitSkuFamily("MeteredData"),
                },
                AllowClassicOperations = false,
                ServiceProviderProperties = new Network.Models.ExpressRouteCircuitServiceProviderProperties()
                {
                    ServiceProviderName = "Equinix",
                    PeeringLocation = "Silicon Valley",
                    BandwidthInMbps = 200,
                },
                Location = "Brazil South",
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetExpressRouteCircuits();
            await collection.CreateOrUpdateAsync(circuitName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Create ExpressRouteCircuit on ExpressRoutePort
            string circuitName = "expressRouteCircuit1";
            Network.ExpressRouteCircuitData parameters = new Network.ExpressRouteCircuitData()
            {
                Sku = new Network.Models.ExpressRouteCircuitSku()
                {
                    Name = "Premium_MeteredData",
                    Tier = new Network.Models.ExpressRouteCircuitSkuTier("Premium"),
                    Family = new Network.Models.ExpressRouteCircuitSkuFamily("MeteredData"),
                },
                ExpressRoutePort = new WritableSubResource()
                {
                    Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName"),
                },
                BandwidthInGbps = 10,
                Location = "westus",
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetExpressRouteCircuits();
            await collection.CreateOrUpdateAsync(circuitName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get ExpressRouteCircuit
            string circuitName = "circuitName";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetExpressRouteCircuits();
            await collection.GetAsync(circuitName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List ExpressRouteCircuits in a resource group

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetExpressRouteCircuits();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
