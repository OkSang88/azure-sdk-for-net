// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    /// <summary> The kind of content the metadata is for. </summary>
    public readonly partial struct Kind : IEquatable<Kind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Kind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Kind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DataConnectorValue = "DataConnector";
        private const string DataTypeValue = "DataType";
        private const string WorkbookValue = "Workbook";
        private const string WorkbookTemplateValue = "WorkbookTemplate";
        private const string PlaybookValue = "Playbook";
        private const string PlaybookTemplateValue = "PlaybookTemplate";
        private const string AnalyticsRuleTemplateValue = "AnalyticsRuleTemplate";
        private const string AnalyticsRuleValue = "AnalyticsRule";
        private const string HuntingQueryValue = "HuntingQuery";
        private const string InvestigationQueryValue = "InvestigationQuery";
        private const string ParserValue = "Parser";
        private const string WatchlistValue = "Watchlist";
        private const string WatchlistTemplateValue = "WatchlistTemplate";
        private const string SolutionValue = "Solution";

        /// <summary> DataConnector. </summary>
        public static Kind DataConnector { get; } = new Kind(DataConnectorValue);
        /// <summary> DataType. </summary>
        public static Kind DataType { get; } = new Kind(DataTypeValue);
        /// <summary> Workbook. </summary>
        public static Kind Workbook { get; } = new Kind(WorkbookValue);
        /// <summary> WorkbookTemplate. </summary>
        public static Kind WorkbookTemplate { get; } = new Kind(WorkbookTemplateValue);
        /// <summary> Playbook. </summary>
        public static Kind Playbook { get; } = new Kind(PlaybookValue);
        /// <summary> PlaybookTemplate. </summary>
        public static Kind PlaybookTemplate { get; } = new Kind(PlaybookTemplateValue);
        /// <summary> AnalyticsRuleTemplate. </summary>
        public static Kind AnalyticsRuleTemplate { get; } = new Kind(AnalyticsRuleTemplateValue);
        /// <summary> AnalyticsRule. </summary>
        public static Kind AnalyticsRule { get; } = new Kind(AnalyticsRuleValue);
        /// <summary> HuntingQuery. </summary>
        public static Kind HuntingQuery { get; } = new Kind(HuntingQueryValue);
        /// <summary> InvestigationQuery. </summary>
        public static Kind InvestigationQuery { get; } = new Kind(InvestigationQueryValue);
        /// <summary> Parser. </summary>
        public static Kind Parser { get; } = new Kind(ParserValue);
        /// <summary> Watchlist. </summary>
        public static Kind Watchlist { get; } = new Kind(WatchlistValue);
        /// <summary> WatchlistTemplate. </summary>
        public static Kind WatchlistTemplate { get; } = new Kind(WatchlistTemplateValue);
        /// <summary> Solution. </summary>
        public static Kind Solution { get; } = new Kind(SolutionValue);
        /// <summary> Determines if two <see cref="Kind"/> values are the same. </summary>
        public static bool operator ==(Kind left, Kind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Kind"/> values are not the same. </summary>
        public static bool operator !=(Kind left, Kind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Kind"/>. </summary>
        public static implicit operator Kind(string value) => new Kind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Kind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Kind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
