// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using StorageCacheManagementClient.Models;

namespace StorageCacheManagementClient
{
    public partial class CacheData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Identity))
            {
                writer.WritePropertyName("identity");
                writer.WriteObjectValue(Identity);
            }
            if (Optional.IsDefined(Sku))
            {
                writer.WritePropertyName("sku");
                writer.WriteObjectValue(Sku);
            }
            writer.WritePropertyName("tags");
            writer.WriteStartObject();
            foreach (var item in Tags)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("location");
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(CacheSizeGB))
            {
                writer.WritePropertyName("cacheSizeGB");
                writer.WriteNumberValue(CacheSizeGB.Value);
            }
            if (Optional.IsDefined(Subnet))
            {
                writer.WritePropertyName("subnet");
                writer.WriteStringValue(Subnet);
            }
            if (Optional.IsDefined(NetworkSettings))
            {
                writer.WritePropertyName("networkSettings");
                writer.WriteObjectValue(NetworkSettings);
            }
            if (Optional.IsDefined(EncryptionSettings))
            {
                writer.WritePropertyName("encryptionSettings");
                writer.WriteObjectValue(EncryptionSettings);
            }
            if (Optional.IsDefined(SecuritySettings))
            {
                writer.WritePropertyName("securitySettings");
                writer.WriteObjectValue(SecuritySettings);
            }
            if (Optional.IsDefined(DirectoryServicesSettings))
            {
                writer.WritePropertyName("directoryServicesSettings");
                writer.WriteObjectValue(DirectoryServicesSettings);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static CacheData DeserializeCacheData(JsonElement element)
        {
            Optional<CacheIdentity> identity = default;
            Optional<SystemData> systemData = default;
            Optional<CacheSku> sku = default;
            IDictionary<string, string> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<int> cacheSizeGB = default;
            Optional<CacheHealth> health = default;
            Optional<IReadOnlyList<string>> mountAddresses = default;
            Optional<ProvisioningStateType> provisioningState = default;
            Optional<string> subnet = default;
            Optional<CacheUpgradeStatus> upgradeStatus = default;
            Optional<CacheNetworkSettings> networkSettings = default;
            Optional<CacheEncryptionSettings> encryptionSettings = default;
            Optional<CacheSecuritySettings> securitySettings = default;
            Optional<CacheDirectorySettings> directoryServicesSettings = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("identity"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    identity = CacheIdentity.DeserializeCacheIdentity(property.Value);
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("sku"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    sku = CacheSku.DeserializeCacheSku(property.Value);
                    continue;
                }
                if (property.NameEquals("tags"))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    location = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("cacheSizeGB"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            cacheSizeGB = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("health"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            health = CacheHealth.DeserializeCacheHealth(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("mountAddresses"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            mountAddresses = array;
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            provisioningState = new ProvisioningStateType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("subnet"))
                        {
                            subnet = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("upgradeStatus"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            upgradeStatus = CacheUpgradeStatus.DeserializeCacheUpgradeStatus(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("networkSettings"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            networkSettings = CacheNetworkSettings.DeserializeCacheNetworkSettings(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("encryptionSettings"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            encryptionSettings = CacheEncryptionSettings.DeserializeCacheEncryptionSettings(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("securitySettings"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            securitySettings = CacheSecuritySettings.DeserializeCacheSecuritySettings(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("directoryServicesSettings"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            directoryServicesSettings = CacheDirectorySettings.DeserializeCacheDirectorySettings(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new CacheData(id, name, type, tags, location, identity.Value, systemData, sku.Value, Optional.ToNullable(cacheSizeGB), health.Value, Optional.ToList(mountAddresses), Optional.ToNullable(provisioningState), subnet.Value, upgradeStatus.Value, networkSettings.Value, encryptionSettings.Value, securitySettings.Value, directoryServicesSettings.Value);
        }
    }
}
