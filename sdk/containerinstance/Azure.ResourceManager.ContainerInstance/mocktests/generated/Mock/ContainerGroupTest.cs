// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.ContainerInstance;
using Azure.ResourceManager.ContainerInstance.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.ContainerInstance.Tests.Mock
{
    /// <summary> Test for ContainerGroup. </summary>
    public partial class ContainerGroupMockTests : MockTestBase
    {
        public ContainerGroupMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: ContainerGroupsGet_Failed
            var containerGroupId = ContainerInstance.ContainerGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "demo", "demo1");
            var containerGroup = GetArmClient().GetContainerGroup(containerGroupId);

            await containerGroup.GetAsync();
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: ContainerGroupsGet_Succeeded
            var containerGroupId = ContainerInstance.ContainerGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "demo", "demo1");
            var containerGroup = GetArmClient().GetContainerGroup(containerGroupId);

            await containerGroup.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: ContainerGroupsDelete
            var containerGroupId = ContainerInstance.ContainerGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "demo", "demo1");
            var containerGroup = GetArmClient().GetContainerGroup(containerGroupId);

            await containerGroup.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: ContainerGroupsUpdate
            var containerGroupId = ContainerInstance.ContainerGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "demoResource", "demo1");
            var containerGroup = GetArmClient().GetContainerGroup(containerGroupId);
            ContainerInstance.Models.Resource resource = new ContainerInstance.Models.Resource(location: AzureLocation.WestUS)
            {
            };
            resource.Tags.ReplaceWith(new Dictionary<string, string>()
            {
                ["tag1key"] = "tag1Value",
                ["tag2key"] = "tag2Value",
            });

            await containerGroup.UpdateAsync(resource);
        }

        [RecordedTest]
        public async Task Restart()
        {
            // Example: ContainerRestart
            var containerGroupId = ContainerInstance.ContainerGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "demo", "demo1");
            var containerGroup = GetArmClient().GetContainerGroup(containerGroupId);

            await containerGroup.RestartAsync(true);
        }

        [RecordedTest]
        public async Task Stop()
        {
            // Example: ContainerStop
            var containerGroupId = ContainerInstance.ContainerGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "demo", "demo1");
            var containerGroup = GetArmClient().GetContainerGroup(containerGroupId);

            await containerGroup.StopAsync();
        }

        [RecordedTest]
        public async Task Start()
        {
            // Example: ContainerStart
            var containerGroupId = ContainerInstance.ContainerGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "demo", "demo1");
            var containerGroup = GetArmClient().GetContainerGroup(containerGroupId);

            await containerGroup.StartAsync(true);
        }

        [RecordedTest]
        public async Task GetLogsContainer()
        {
            // Example: ContainerListLogs
            var containerGroupId = ContainerInstance.ContainerGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "demo", "demo1");
            var containerGroup = GetArmClient().GetContainerGroup(containerGroupId);
            string containerName = "container1";
            int? tail = 10;
            bool? timestamps = null;

            await containerGroup.GetLogsContainerAsync(containerName, tail, timestamps);
        }

        [RecordedTest]
        public async Task ExecuteCommandContainer()
        {
            // Example: ContainerExec
            var containerGroupId = ContainerInstance.ContainerGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "demo", "demo1");
            var containerGroup = GetArmClient().GetContainerGroup(containerGroupId);
            string containerName = "container1";
            ContainerInstance.Models.ContainerExecRequest containerExecRequest = new ContainerInstance.Models.ContainerExecRequest()
            {
                Command = "/bin/bash",
                TerminalSize = new ContainerInstance.Models.ContainerExecRequestTerminalSize()
                {
                    Rows = 12,
                    Cols = 12,
                },
            };

            await containerGroup.ExecuteCommandContainerAsync(containerName, containerExecRequest);
        }

        [RecordedTest]
        public async Task AttachContainer()
        {
            // Example: ContainerAttach
            var containerGroupId = ContainerInstance.ContainerGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "demo", "demo1");
            var containerGroup = GetArmClient().GetContainerGroup(containerGroupId);
            string containerName = "container1";

            await containerGroup.AttachContainerAsync(containerName);
        }
    }
}
