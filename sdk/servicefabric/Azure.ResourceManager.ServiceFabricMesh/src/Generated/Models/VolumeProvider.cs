// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ServiceFabricMesh.Models
{
    /// <summary> Describes the provider of the volume resource. </summary>
    public readonly partial struct VolumeProvider : IEquatable<VolumeProvider>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VolumeProvider"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VolumeProvider(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SFAzureFileValue = "SFAzureFile";

        /// <summary> Provides volumes that are backed by Azure Files. </summary>
        public static VolumeProvider SFAzureFile { get; } = new VolumeProvider(SFAzureFileValue);
        /// <summary> Determines if two <see cref="VolumeProvider"/> values are the same. </summary>
        public static bool operator ==(VolumeProvider left, VolumeProvider right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VolumeProvider"/> values are not the same. </summary>
        public static bool operator !=(VolumeProvider left, VolumeProvider right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="VolumeProvider"/>. </summary>
        public static implicit operator VolumeProvider(string value) => new VolumeProvider(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VolumeProvider other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VolumeProvider other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
