// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.DeviceUpdate;
using Azure.ResourceManager.DeviceUpdate.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.DeviceUpdate.Tests.Mock
{
    /// <summary> Test for DeviceUpdateInstance. </summary>
    public partial class DeviceUpdateInstanceMockTests : MockTestBase
    {
        public DeviceUpdateInstanceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Gets list of Instances
            var deviceUpdateInstanceId = DeviceUpdate.DeviceUpdateInstance.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "test-rg", "contoso", "blue");
            var deviceUpdateInstance = GetArmClient().GetDeviceUpdateInstance(deviceUpdateInstanceId);

            await deviceUpdateInstance.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Deletes instance
            var deviceUpdateInstanceId = DeviceUpdate.DeviceUpdateInstance.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "test-rg", "contoso", "blue");
            var deviceUpdateInstance = GetArmClient().GetDeviceUpdateInstance(deviceUpdateInstanceId);

            await deviceUpdateInstance.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Updates Instance
            var deviceUpdateInstanceId = DeviceUpdate.DeviceUpdateInstance.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "test-rg", "contoso", "blue");
            var deviceUpdateInstance = GetArmClient().GetDeviceUpdateInstance(deviceUpdateInstanceId);
            DeviceUpdate.Models.TagUpdateOptions tagUpdatePayload = new DeviceUpdate.Models.TagUpdateOptions();

            await deviceUpdateInstance.UpdateAsync(tagUpdatePayload);
        }
    }
}
