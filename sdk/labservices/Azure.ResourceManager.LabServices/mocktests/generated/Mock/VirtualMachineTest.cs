// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using LabServicesClient;
using LabServicesClient.Models;

namespace LabServicesClient.Tests.Mock
{
    /// <summary> Test for VirtualMachine. </summary>
    public partial class VirtualMachineMockTests : MockTestBase
    {
        public VirtualMachineMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: getVirtualMachine
            var virtualMachineId = LabServicesClient.VirtualMachine.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg123", "testlab", "template");
            var virtualMachine = GetArmClient().GetVirtualMachine(virtualMachineId);

            await virtualMachine.GetAsync();
        }

        [RecordedTest]
        public async Task Start()
        {
            // Example: startVirtualMachine
            var virtualMachineId = LabServicesClient.VirtualMachine.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg123", "testlab", "template");
            var virtualMachine = GetArmClient().GetVirtualMachine(virtualMachineId);

            await virtualMachine.StartAsync(true);
        }

        [RecordedTest]
        public async Task Stop()
        {
            // Example: stopVirtualMachine
            var virtualMachineId = LabServicesClient.VirtualMachine.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg123", "testlab", "template");
            var virtualMachine = GetArmClient().GetVirtualMachine(virtualMachineId);

            await virtualMachine.StopAsync(true);
        }

        [RecordedTest]
        public async Task Reimage()
        {
            // Example: reimageVirtualMachine
            var virtualMachineId = LabServicesClient.VirtualMachine.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg123", "testlab", "template");
            var virtualMachine = GetArmClient().GetVirtualMachine(virtualMachineId);

            await virtualMachine.ReimageAsync(true);
        }

        [RecordedTest]
        public async Task Redeploy()
        {
            // Example: redeployVirtualMachine
            var virtualMachineId = LabServicesClient.VirtualMachine.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg123", "testlab", "template");
            var virtualMachine = GetArmClient().GetVirtualMachine(virtualMachineId);

            await virtualMachine.RedeployAsync(true);
        }

        [RecordedTest]
        public async Task ResetPassword()
        {
            // Example: resetPasswordVirtualMachine
            var virtualMachineId = LabServicesClient.VirtualMachine.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg123", "testlab", "template");
            var virtualMachine = GetArmClient().GetVirtualMachine(virtualMachineId);
            LabServicesClient.Models.ResetPasswordBody body = new LabServicesClient.Models.ResetPasswordBody(username: "example-username", password: "example-password");

            await virtualMachine.ResetPasswordAsync(true, body);
        }
    }
}
