// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Migrate;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary>
    /// Create a new assessment with the given name and the specified settings. Since name of an assessment in a project is a unique identifier, if an assessment with the name provided already exists, then the existing assessment is updated.
    /// 
    /// Any PUT operation, resulting in either create or update on an assessment, will cause the assessment to go in a &quot;InProgress&quot; state. This will be indicated by the field &apos;computationState&apos; on the Assessment object. During this time no other PUT operation will be allowed on that assessment object, nor will a Delete operation. Once the computation for the assessment is complete, the field &apos;computationState&apos; will be updated to &apos;Ready&apos;, and then other PUT or DELETE operations can happen on the assessment.
    /// 
    /// When assessment is under computation, any PUT will lead to a 400 - Bad Request error.
    /// 
    /// </summary>
    public partial class AssessmentCreateOperation : Operation<Assessment>
    {
        private readonly OperationOrResponseInternals<Assessment> _operation;

        /// <summary> Initializes a new instance of AssessmentCreateOperation for mocking. </summary>
        protected AssessmentCreateOperation()
        {
        }

        internal AssessmentCreateOperation(ArmResource operationsBase, Response<AssessmentData> response)
        {
            _operation = new OperationOrResponseInternals<Assessment>(Response.FromValue(new Assessment(operationsBase, response.Value), response.GetRawResponse()));
        }

        /// <inheritdoc />
        public override string Id => _operation.Id;

        /// <inheritdoc />
        public override Assessment Value => _operation.Value;

        /// <inheritdoc />
        public override bool HasCompleted => _operation.HasCompleted;

        /// <inheritdoc />
        public override bool HasValue => _operation.HasValue;

        /// <inheritdoc />
        public override Response GetRawResponse() => _operation.GetRawResponse();

        /// <inheritdoc />
        public override Response UpdateStatus(CancellationToken cancellationToken = default) => _operation.UpdateStatus(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response> UpdateStatusAsync(CancellationToken cancellationToken = default) => _operation.UpdateStatusAsync(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response<Assessment>> WaitForCompletionAsync(CancellationToken cancellationToken = default) => _operation.WaitForCompletionAsync(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response<Assessment>> WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken = default) => _operation.WaitForCompletionAsync(pollingInterval, cancellationToken);
    }
}
