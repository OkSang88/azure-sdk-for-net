// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using IotDpsClient.Models;

namespace IotDpsClient
{
    /// <summary> A class representing collection of CertificateResponse and their operations over its parent. </summary>
    public partial class CertificateResponseCollection : ArmCollection, IEnumerable<CertificateResponse>, IAsyncEnumerable<CertificateResponse>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly DpsCertificateRestOperations _dpsCertificateRestClient;

        /// <summary> Initializes a new instance of the <see cref="CertificateResponseCollection"/> class for mocking. </summary>
        protected CertificateResponseCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="CertificateResponseCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal CertificateResponseCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _dpsCertificateRestClient = new DpsCertificateRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ProvisioningServiceDescription.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ProvisioningServiceDescription.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Add new certificate or update an existing certificate. </summary>
        /// <param name="certificateName"> The name of the certificate create or update. </param>
        /// <param name="certificateDescription"> The certificate body. </param>
        /// <param name="ifMatch"> ETag of the certificate. This is required to update an existing certificate, and ignored while creating a brand new certificate. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="certificateName"/> or <paramref name="certificateDescription"/> is null. </exception>
        public virtual DpsCertificateCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string certificateName, CertificateBodyDescription certificateDescription, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (certificateName == null)
            {
                throw new ArgumentNullException(nameof(certificateName));
            }
            if (certificateDescription == null)
            {
                throw new ArgumentNullException(nameof(certificateDescription));
            }

            using var scope = _clientDiagnostics.CreateScope("CertificateResponseCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _dpsCertificateRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, certificateName, certificateDescription, ifMatch, cancellationToken);
                var operation = new DpsCertificateCreateOrUpdateOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add new certificate or update an existing certificate. </summary>
        /// <param name="certificateName"> The name of the certificate create or update. </param>
        /// <param name="certificateDescription"> The certificate body. </param>
        /// <param name="ifMatch"> ETag of the certificate. This is required to update an existing certificate, and ignored while creating a brand new certificate. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="certificateName"/> or <paramref name="certificateDescription"/> is null. </exception>
        public async virtual Task<DpsCertificateCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string certificateName, CertificateBodyDescription certificateDescription, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (certificateName == null)
            {
                throw new ArgumentNullException(nameof(certificateName));
            }
            if (certificateDescription == null)
            {
                throw new ArgumentNullException(nameof(certificateDescription));
            }

            using var scope = _clientDiagnostics.CreateScope("CertificateResponseCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _dpsCertificateRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, certificateName, certificateDescription, ifMatch, cancellationToken).ConfigureAwait(false);
                var operation = new DpsCertificateCreateOrUpdateOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the certificate from the provisioning service. </summary>
        /// <param name="certificateName"> Name of the certificate to retrieve. </param>
        /// <param name="ifMatch"> ETag of the certificate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="certificateName"/> is null. </exception>
        public virtual Response<CertificateResponse> Get(string certificateName, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (certificateName == null)
            {
                throw new ArgumentNullException(nameof(certificateName));
            }

            using var scope = _clientDiagnostics.CreateScope("CertificateResponseCollection.Get");
            scope.Start();
            try
            {
                var response = _dpsCertificateRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, certificateName, ifMatch, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new CertificateResponse(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the certificate from the provisioning service. </summary>
        /// <param name="certificateName"> Name of the certificate to retrieve. </param>
        /// <param name="ifMatch"> ETag of the certificate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="certificateName"/> is null. </exception>
        public async virtual Task<Response<CertificateResponse>> GetAsync(string certificateName, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (certificateName == null)
            {
                throw new ArgumentNullException(nameof(certificateName));
            }

            using var scope = _clientDiagnostics.CreateScope("CertificateResponseCollection.Get");
            scope.Start();
            try
            {
                var response = await _dpsCertificateRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, certificateName, ifMatch, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new CertificateResponse(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="certificateName"> Name of the certificate to retrieve. </param>
        /// <param name="ifMatch"> ETag of the certificate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="certificateName"/> is null. </exception>
        public virtual Response<CertificateResponse> GetIfExists(string certificateName, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (certificateName == null)
            {
                throw new ArgumentNullException(nameof(certificateName));
            }

            using var scope = _clientDiagnostics.CreateScope("CertificateResponseCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _dpsCertificateRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, certificateName, ifMatch, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<CertificateResponse>(null, response.GetRawResponse());
                return Response.FromValue(new CertificateResponse(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="certificateName"> Name of the certificate to retrieve. </param>
        /// <param name="ifMatch"> ETag of the certificate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="certificateName"/> is null. </exception>
        public async virtual Task<Response<CertificateResponse>> GetIfExistsAsync(string certificateName, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (certificateName == null)
            {
                throw new ArgumentNullException(nameof(certificateName));
            }

            using var scope = _clientDiagnostics.CreateScope("CertificateResponseCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _dpsCertificateRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, certificateName, ifMatch, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<CertificateResponse>(null, response.GetRawResponse());
                return Response.FromValue(new CertificateResponse(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="certificateName"> Name of the certificate to retrieve. </param>
        /// <param name="ifMatch"> ETag of the certificate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="certificateName"/> is null. </exception>
        public virtual Response<bool> Exists(string certificateName, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (certificateName == null)
            {
                throw new ArgumentNullException(nameof(certificateName));
            }

            using var scope = _clientDiagnostics.CreateScope("CertificateResponseCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(certificateName, ifMatch, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="certificateName"> Name of the certificate to retrieve. </param>
        /// <param name="ifMatch"> ETag of the certificate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="certificateName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string certificateName, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (certificateName == null)
            {
                throw new ArgumentNullException(nameof(certificateName));
            }

            using var scope = _clientDiagnostics.CreateScope("CertificateResponseCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(certificateName, ifMatch, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all the certificates tied to the provisioning service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CertificateResponse" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CertificateResponse> GetAll(CancellationToken cancellationToken = default)
        {
            Page<CertificateResponse> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("CertificateResponseCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _dpsCertificateRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new CertificateResponse(Parent, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Get all the certificates tied to the provisioning service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CertificateResponse" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CertificateResponse> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<CertificateResponse>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("CertificateResponseCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _dpsCertificateRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new CertificateResponse(Parent, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        IEnumerator<CertificateResponse> IEnumerable<CertificateResponse>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<CertificateResponse> IAsyncEnumerable<CertificateResponse>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, CertificateResponse, CertificateResponseData> Construct() { }
    }
}
