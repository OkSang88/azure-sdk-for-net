// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.DataFactory.Tests.Mock;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.DataFactory.Tests.Mock.Tests.Mock
{
    /// <summary> Test for PipelineResource. </summary>
    public partial class PipelineResourceMockTests : MockTestBase
    {
        public PipelineResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Pipelines_Get
            var pipelineResourceId = DataFactory.Tests.Mock.PipelineResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName", "examplePipeline");
            var pipelineResource = GetArmClient().GetPipelineResource(pipelineResourceId);
            string ifNoneMatch = null;

            await pipelineResource.GetAsync(ifNoneMatch);
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Pipelines_Delete
            var pipelineResourceId = DataFactory.Tests.Mock.PipelineResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName", "examplePipeline");
            var pipelineResource = GetArmClient().GetPipelineResource(pipelineResourceId);

            await pipelineResource.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task CreateRun()
        {
            // Example: Pipelines_CreateRun
            var pipelineResourceId = DataFactory.Tests.Mock.PipelineResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName", "examplePipeline");
            var pipelineResource = GetArmClient().GetPipelineResource(pipelineResourceId);
            string referencePipelineRunId = null;
            bool? isRecovery = null;
            string startActivityName = null;
            bool? startFromFailure = null;
            IDictionary<string, object> parameters = new Dictionary<string, object>()
            {
                ["OutputBlobNameList"] = new object[]
            {
"exampleoutput.csv",
            }
            ,
            };

            await pipelineResource.CreateRunAsync(referencePipelineRunId, isRecovery, startActivityName, startFromFailure, parameters);
        }
    }
}
