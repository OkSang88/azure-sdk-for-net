// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for ElasticPool. </summary>
    public partial class ElasticPoolMockTests : MockTestBase
    {
        public ElasticPoolMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get an elastic pool
            var elasticPoolId = Sql.ElasticPool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-2369", "sqlcrudtest-8069", "sqlcrudtest-8102");
            var elasticPool = GetArmClient().GetElasticPool(elasticPoolId);

            await elasticPool.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete an elastic pool
            var elasticPoolId = Sql.ElasticPool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-3129", "sqlcrudtest-228", "sqlcrudtest-3851");
            var elasticPool = GetArmClient().GetElasticPool(elasticPoolId);

            await elasticPool.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Assigns maintenance configuration to an elastic pool.
            var elasticPoolId = Sql.ElasticPool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-2369", "sqlcrudtest-8069", "sqlcrudtest-8102");
            var elasticPool = GetArmClient().GetElasticPool(elasticPoolId);
            Sql.Models.ElasticPoolUpdate parameters = new Sql.Models.ElasticPoolUpdate()
            {
                MaintenanceConfigurationId = "/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_1",
            };

            await elasticPool.UpdateAsync(true, parameters);
        }

        [RecordedTest]
        public async Task Update2()
        {
            // Example: Resets maintenance configuration of an elastic pool to default.
            var elasticPoolId = Sql.ElasticPool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-2369", "sqlcrudtest-8069", "sqlcrudtest-8102");
            var elasticPool = GetArmClient().GetElasticPool(elasticPoolId);
            Sql.Models.ElasticPoolUpdate parameters = new Sql.Models.ElasticPoolUpdate()
            {
                MaintenanceConfigurationId = "/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_Default",
            };

            await elasticPool.UpdateAsync(true, parameters);
        }

        [RecordedTest]
        public async Task Update3()
        {
            // Example: Update an elastic pool with all parameter
            var elasticPoolId = Sql.ElasticPool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-2369", "sqlcrudtest-8069", "sqlcrudtest-8102");
            var elasticPool = GetArmClient().GetElasticPool(elasticPoolId);
            Sql.Models.ElasticPoolUpdate parameters = new Sql.Models.ElasticPoolUpdate()
            {
                Sku = new Sql.Models.Sku(name: "BC_Gen4")
                {
                    Tier = "BusinessCritical",
                    Capacity = 2,
                },
                PerDatabaseSettings = new Sql.Models.ElasticPoolPerDatabaseSettings()
                {
                    MinCapacity = 0.25,
                    MaxCapacity = 1,
                },
                ZoneRedundant = true,
                LicenseType = new Sql.Models.ElasticPoolLicenseType("LicenseIncluded"),
            };

            await elasticPool.UpdateAsync(true, parameters);
        }

        [RecordedTest]
        public async Task Update4()
        {
            // Example: Update an elastic pool with minimum parameters
            var elasticPoolId = Sql.ElasticPool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-2369", "sqlcrudtest-8069", "sqlcrudtest-8102");
            var elasticPool = GetArmClient().GetElasticPool(elasticPoolId);
            Sql.Models.ElasticPoolUpdate parameters = new Sql.Models.ElasticPoolUpdate();

            await elasticPool.UpdateAsync(true, parameters);
        }

        [RecordedTest]
        public async Task GetDatabases()
        {
            // Example: Gets a list of databases in an elastic pool.
            var elasticPoolId = Sql.ElasticPool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "testsvr", "pool1");
            var elasticPool = GetArmClient().GetElasticPool(elasticPoolId);

            await foreach (var _ in elasticPool.GetDatabasesAsync())
            {
            }
        }

        [RecordedTest]
        public async Task GetMetrics()
        {
            // Example: List database usage metrics
            var elasticPoolId = Sql.ElasticPool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-6730", "sqlcrudtest-9007", "3481");
            var elasticPool = GetArmClient().GetElasticPool(elasticPoolId);
            string filter = "name/value eq 'cpu_percent' and timeGrain eq '00:10:00' and startTime eq '2017-06-02T18:35:00Z' and endTime eq '2017-06-02T18:55:00Z'";

            await foreach (var _ in elasticPool.GetMetricsAsync(filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetMetricDefinitions()
        {
            // Example: List database usage metrics
            var elasticPoolId = Sql.ElasticPool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-6730", "sqlcrudtest-9007", "3481");
            var elasticPool = GetArmClient().GetElasticPool(elasticPoolId);

            await foreach (var _ in elasticPool.GetMetricDefinitionsAsync())
            {
            }
        }

        [RecordedTest]
        public async Task Failover()
        {
            // Example: Failover an elastic pool
            var elasticPoolId = Sql.ElasticPool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "group1", "testServer", "testElasticPool");
            var elasticPool = GetArmClient().GetElasticPool(elasticPoolId);

            await elasticPool.FailoverAsync(true);
        }

        [RecordedTest]
        public async Task GetElasticPoolActivities()
        {
            // Example: List Elastic pool activity
            var elasticPoolId = Sql.ElasticPool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-4291", "sqlcrudtest-6574", "8749");
            var elasticPool = GetArmClient().GetElasticPool(elasticPoolId);

            await foreach (var _ in elasticPool.GetElasticPoolActivitiesAsync())
            {
            }
        }

        [RecordedTest]
        public async Task GetElasticPoolDatabaseActivities()
        {
            // Example: List elastic pool database activity
            var elasticPoolId = Sql.ElasticPool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-4673", "sqlcrudtest-603", "7537");
            var elasticPool = GetArmClient().GetElasticPool(elasticPoolId);

            await foreach (var _ in elasticPool.GetElasticPoolDatabaseActivitiesAsync())
            {
            }
        }

        [RecordedTest]
        public async Task CancelElasticPoolOperation()
        {
            // Example: Cancel the elastic pool management operation
            var elasticPoolId = Sql.ElasticPool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-7398", "sqlcrudtest-6661", "testpool");
            var elasticPool = GetArmClient().GetElasticPool(elasticPoolId);
            Guid operationId = Guid.Parse("f779414b-e748-4925-8cfe-c8598f7660ae");

            await elasticPool.CancelElasticPoolOperationAsync(operationId);
        }

        [RecordedTest]
        public async Task GetElasticPoolOperations()
        {
            // Example: List the elastic pool management operations
            var elasticPoolId = Sql.ElasticPool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtestgroup", "sqlcrudtestserver", "testpool");
            var elasticPool = GetArmClient().GetElasticPool(elasticPoolId);

            await foreach (var _ in elasticPool.GetElasticPoolOperationsAsync())
            {
            }
        }
    }
}
