// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.AppPlatform.Tests.Mock;
using Azure.ResourceManager.AppPlatform.Tests.Mock.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.AppPlatform.Tests.Mock.Tests.Mock
{
    /// <summary> Test for AppResource. </summary>
    public partial class AppResourceMockTests : MockTestBase
    {
        public AppResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Apps_Get
            var appResourceId = AppPlatform.Tests.Mock.AppResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice", "myapp");
            var appResource = GetArmClient().GetAppResource(appResourceId);
            string syncStatus = null;

            await appResource.GetAsync(syncStatus);
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Apps_Delete
            var appResourceId = AppPlatform.Tests.Mock.AppResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice", "myapp");
            var appResource = GetArmClient().GetAppResource(appResourceId);

            await appResource.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Apps_Update
            var appResourceId = AppPlatform.Tests.Mock.AppResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice", "myapp");
            var appResource = GetArmClient().GetAppResource(appResourceId);
            AppPlatform.Tests.Mock.AppResourceData appResource2 = new AppPlatform.Tests.Mock.AppResourceData()
            {
                Properties = new AppPlatform.Tests.Mock.Models.AppResourceProperties()
                {
                    Public = true,
                    Fqdn = "myapp.mydomain.com",
                    HttpsOnly = false,
                    TemporaryDisk = new AppPlatform.Tests.Mock.Models.TemporaryDisk()
                    {
                        SizeInGB = 2,
                        MountPath = "/mytemporarydisk",
                    },
                    PersistentDisk = new AppPlatform.Tests.Mock.Models.PersistentDisk()
                    {
                        SizeInGB = 2,
                        MountPath = "/mypersistentdisk",
                    },
                    EnableEndToEndTLS = false,
                },
                Identity = new AppPlatform.Tests.Mock.Models.ManagedIdentityProperties()
                {
                    Type = new AppPlatform.Tests.Mock.Models.ManagedIdentityType("SystemAssigned"),
                    PrincipalId = null,
                    TenantId = null,
                },
                Location = "eastus",
            };

            await appResource.UpdateAsync(true, appResource2);
        }

        [RecordedTest]
        public async Task GetResourceUploadUrl()
        {
            // Example: Apps_GetResourceUploadUrl
            var appResourceId = AppPlatform.Tests.Mock.AppResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice", "myapp");
            var appResource = GetArmClient().GetAppResource(appResourceId);

            await appResource.GetResourceUploadUrlAsync();
        }

        [RecordedTest]
        public async Task SetActiveDeployments()
        {
            // Example: Apps_SetActiveDeployments
            var appResourceId = AppPlatform.Tests.Mock.AppResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice", "myapp");
            var appResource = GetArmClient().GetAppResource(appResourceId);
            AppPlatform.Tests.Mock.Models.ActiveDeploymentCollection activeDeploymentCollection = new AppPlatform.Tests.Mock.Models.ActiveDeploymentCollection();

            await appResource.SetActiveDeploymentsAsync(true, activeDeploymentCollection);
        }

        [RecordedTest]
        public async Task ValidateDomain()
        {
            // Example: Apps_ValidateDomain
            var appResourceId = AppPlatform.Tests.Mock.AppResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice", "myapp");
            var appResource = GetArmClient().GetAppResource(appResourceId);
            AppPlatform.Tests.Mock.Models.CustomDomainValidatePayload validatePayload = new AppPlatform.Tests.Mock.Models.CustomDomainValidatePayload(name: "mydomain.io");

            await appResource.ValidateDomainAsync(validatePayload);
        }
    }
}
