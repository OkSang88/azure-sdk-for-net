// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Authorization.Models
{
    /// <summary> The outcome of applying the decision. </summary>
    public readonly partial struct AccessReviewApplyResult : IEquatable<AccessReviewApplyResult>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AccessReviewApplyResult"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AccessReviewApplyResult(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NewValue = "New";
        private const string ApplyingValue = "Applying";
        private const string AppliedSuccessfullyValue = "AppliedSuccessfully";
        private const string AppliedWithUnknownFailureValue = "AppliedWithUnknownFailure";
        private const string AppliedSuccessfullyButObjectNotFoundValue = "AppliedSuccessfullyButObjectNotFound";
        private const string ApplyNotSupportedValue = "ApplyNotSupported";

        /// <summary> New. </summary>
        public static AccessReviewApplyResult New { get; } = new AccessReviewApplyResult(NewValue);
        /// <summary> Applying. </summary>
        public static AccessReviewApplyResult Applying { get; } = new AccessReviewApplyResult(ApplyingValue);
        /// <summary> AppliedSuccessfully. </summary>
        public static AccessReviewApplyResult AppliedSuccessfully { get; } = new AccessReviewApplyResult(AppliedSuccessfullyValue);
        /// <summary> AppliedWithUnknownFailure. </summary>
        public static AccessReviewApplyResult AppliedWithUnknownFailure { get; } = new AccessReviewApplyResult(AppliedWithUnknownFailureValue);
        /// <summary> AppliedSuccessfullyButObjectNotFound. </summary>
        public static AccessReviewApplyResult AppliedSuccessfullyButObjectNotFound { get; } = new AccessReviewApplyResult(AppliedSuccessfullyButObjectNotFoundValue);
        /// <summary> ApplyNotSupported. </summary>
        public static AccessReviewApplyResult ApplyNotSupported { get; } = new AccessReviewApplyResult(ApplyNotSupportedValue);
        /// <summary> Determines if two <see cref="AccessReviewApplyResult"/> values are the same. </summary>
        public static bool operator ==(AccessReviewApplyResult left, AccessReviewApplyResult right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AccessReviewApplyResult"/> values are not the same. </summary>
        public static bool operator !=(AccessReviewApplyResult left, AccessReviewApplyResult right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AccessReviewApplyResult"/>. </summary>
        public static implicit operator AccessReviewApplyResult(string value) => new AccessReviewApplyResult(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AccessReviewApplyResult other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AccessReviewApplyResult other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
