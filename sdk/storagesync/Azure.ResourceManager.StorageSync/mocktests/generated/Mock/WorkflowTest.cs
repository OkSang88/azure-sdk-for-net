// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.StorageSync;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.StorageSync.Tests.Mock
{
    /// <summary> Test for Workflow. </summary>
    public partial class WorkflowMockTests : MockTestBase
    {
        public WorkflowMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Workflows_Get
            var workflowId = StorageSync.Workflow.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "SampleResourceGroup_1", "SampleStorageSyncService_1", "828219ea-083e-48b5-89ea-8fd9991b2e75");
            var workflow = GetArmClient().GetWorkflow(workflowId);

            await workflow.GetAsync();
        }

        [RecordedTest]
        public async Task Abort()
        {
            // Example: Workflows_Abort
            var workflowId = StorageSync.Workflow.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "SampleResourceGroup_1", "SampleStorageSyncService_1", "7ffd50b3-5574-478d-9ff2-9371bc42ce68");
            var workflow = GetArmClient().GetWorkflow(workflowId);

            await workflow.AbortAsync();
        }
    }
}
