// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.HybridDataManager.Tests.Mock;
using Azure.ResourceManager.HybridDataManager.Tests.Mock.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.HybridDataManager.Tests.Mock.Tests.Mock
{
    /// <summary> Test for DataManager. </summary>
    public partial class DataManagerMockTests : MockTestBase
    {
        public DataManagerMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: DataManagers_GetGET41
            var dataManagerId = HybridDataManager.Tests.Mock.DataManager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "TestAzureSDKOperations");
            var dataManager = GetArmClient().GetDataManager(dataManagerId);

            await dataManager.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: DataManagers_DeleteDELETE41
            var dataManagerId = HybridDataManager.Tests.Mock.DataManager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "TestAzureSDKOperations");
            var dataManager = GetArmClient().GetDataManager(dataManagerId);

            await dataManager.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: DataManagers_UpdatePATCH43
            var dataManagerId = HybridDataManager.Tests.Mock.DataManager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "TestAzureSDKOperations");
            var dataManager = GetArmClient().GetDataManager(dataManagerId);
            HybridDataManager.Tests.Mock.Models.DataManagerUpdateParameter dataManagerUpdateParameter = new HybridDataManager.Tests.Mock.Models.DataManagerUpdateParameter()
            {
                Sku = new HybridDataManager.Tests.Mock.Models.Sku()
                {
                    Name = "DS0",
                    Tier = "Standard",
                },
            };
            string ifMatch = null;

            await dataManager.UpdateAsync(true, dataManagerUpdateParameter, ifMatch);
        }

        [RecordedTest]
        public async Task GetJobDefinitions()
        {
            // Example: JobDefinitions_ListByDataManagerGET191
            var dataManagerId = HybridDataManager.Tests.Mock.DataManager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "TestAzureSDKOperations");
            var dataManager = GetArmClient().GetDataManager(dataManagerId);
            string filter = null;

            await foreach (var _ in dataManager.GetJobDefinitionsAsync(filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetJobs()
        {
            // Example: Jobs_ListByDataManagerGET201
            var dataManagerId = HybridDataManager.Tests.Mock.DataManager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "TestAzureSDKOperations");
            var dataManager = GetArmClient().GetDataManager(dataManagerId);
            string filter = null;

            await foreach (var _ in dataManager.GetJobsAsync(filter))
            {
            }
        }
    }
}
