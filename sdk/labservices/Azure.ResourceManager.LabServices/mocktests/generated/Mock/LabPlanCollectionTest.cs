// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.LabServices;
using Azure.ResourceManager.LabServices.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.LabServices.Tests.Mock
{
    /// <summary> Test for LabPlan. </summary>
    public partial class LabPlanCollectionMockTests : MockTestBase
    {
        public LabPlanCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: putLabPlan
            string labPlanName = "testlabplan";
            LabServices.LabPlanData body = new LabServices.LabPlanData(location: "westus")
            {
                DefaultConnectionProfile = new LabServices.Models.ConnectionProfile()
                {
                    WebSshAccess = LabServices.Models.ConnectionType.None,
                    WebRdpAccess = LabServices.Models.ConnectionType.None,
                    ClientSshAccess = LabServices.Models.ConnectionType.Public,
                    ClientRdpAccess = LabServices.Models.ConnectionType.Public,
                },
                DefaultAutoShutdownProfile = new LabServices.Models.AutoShutdownProfile()
                {
                    ShutdownOnDisconnect = LabServices.Models.EnableState.Enabled,
                    ShutdownWhenNotConnected = LabServices.Models.EnableState.Enabled,
                    ShutdownOnIdle = LabServices.Models.ShutdownOnIdleMode.UserAbsence,
                    DisconnectDelay = TimeSpan.Parse("00:05"),
                    NoConnectDelay = TimeSpan.Parse("01:00"),
                    IdleDelay = TimeSpan.Parse("01:00"),
                },
                DefaultNetworkProfile = new LabServices.Models.LabPlanNetworkProfile()
                {
                    SubnetId = "/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/default",
                },
                SharedGalleryId = "/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testrg123/providers/Microsoft.Compute/galleries/testsig",
                SupportInfo = new LabServices.Models.SupportInfo()
                {
                    Url = "help.contoso.com",
                    Email = "help@contoso.com",
                    Phone = "+1-202-555-0123",
                    Instructions = "Contact support for help.",
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg123")).GetLabPlans();
            await collection.CreateOrUpdateAsync(true, labPlanName, body);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: getLabPlan
            string labPlanName = "testlabplan";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg123")).GetLabPlans();
            await collection.GetAsync(labPlanName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: listResourceGroupLabPlans

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg123")).GetLabPlans();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
