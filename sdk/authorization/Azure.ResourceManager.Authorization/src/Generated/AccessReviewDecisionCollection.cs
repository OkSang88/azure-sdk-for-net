// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Authorization
{
    /// <summary>
    /// A class representing a collection of <see cref="AccessReviewDecisionResource" /> and their operations.
    /// Each <see cref="AccessReviewDecisionResource" /> in the collection will belong to the same instance of <see cref="TenantResource" />.
    /// To get an <see cref="AccessReviewDecisionCollection" /> instance call the GetAccessReviewDecisions method from an instance of <see cref="TenantResource" />.
    /// </summary>
    public partial class AccessReviewDecisionCollection : ArmCollection, IEnumerable<AccessReviewDecisionResource>, IAsyncEnumerable<AccessReviewDecisionResource>
    {
        private readonly ClientDiagnostics _accessReviewDecisionAccessReviewInstanceMyDecisionsClientDiagnostics;
        private readonly AccessReviewInstanceMyDecisionsRestOperations _accessReviewDecisionAccessReviewInstanceMyDecisionsRestClient;
        private readonly string _scheduleDefinitionId;
        private readonly string _id;

        /// <summary> Initializes a new instance of the <see cref="AccessReviewDecisionCollection"/> class for mocking. </summary>
        protected AccessReviewDecisionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="AccessReviewDecisionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        internal AccessReviewDecisionCollection(ArmClient client, ResourceIdentifier id, string scheduleDefinitionId, string id) : base(client, id)
        {
            _scheduleDefinitionId = scheduleDefinitionId;
            _id = id;
            _accessReviewDecisionAccessReviewInstanceMyDecisionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Authorization", AccessReviewDecisionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(AccessReviewDecisionResource.ResourceType, out string accessReviewDecisionAccessReviewInstanceMyDecisionsApiVersion);
            _accessReviewDecisionAccessReviewInstanceMyDecisionsRestClient = new AccessReviewInstanceMyDecisionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, accessReviewDecisionAccessReviewInstanceMyDecisionsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != TenantResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, TenantResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get my single access review instance decision.
        /// Request Path: /providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/decisions/{decisionId}
        /// Operation Id: AccessReviewInstanceMyDecisions_GetById
        /// </summary>
        /// <param name="decisionId"> The id of the decision record. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="decisionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="decisionId"/> is null. </exception>
        public virtual async Task<Response<AccessReviewDecisionResource>> GetAsync(string decisionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(decisionId, nameof(decisionId));

            using var scope = _accessReviewDecisionAccessReviewInstanceMyDecisionsClientDiagnostics.CreateScope("AccessReviewDecisionCollection.Get");
            scope.Start();
            try
            {
                var response = await _accessReviewDecisionAccessReviewInstanceMyDecisionsRestClient.GetByIdAsync(_scheduleDefinitionId, _id, decisionId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AccessReviewDecisionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get my single access review instance decision.
        /// Request Path: /providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/decisions/{decisionId}
        /// Operation Id: AccessReviewInstanceMyDecisions_GetById
        /// </summary>
        /// <param name="decisionId"> The id of the decision record. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="decisionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="decisionId"/> is null. </exception>
        public virtual Response<AccessReviewDecisionResource> Get(string decisionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(decisionId, nameof(decisionId));

            using var scope = _accessReviewDecisionAccessReviewInstanceMyDecisionsClientDiagnostics.CreateScope("AccessReviewDecisionCollection.Get");
            scope.Start();
            try
            {
                var response = _accessReviewDecisionAccessReviewInstanceMyDecisionsRestClient.GetById(_scheduleDefinitionId, _id, decisionId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AccessReviewDecisionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get my access review instance decisions.
        /// Request Path: /providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/decisions
        /// Operation Id: AccessReviewInstanceMyDecisions_List
        /// </summary>
        /// <param name="filter"> The filter to apply on the operation. Other than standard filters, one custom filter option is supported : &apos;assignedToMeToReview()&apos;. When one specified $filter=assignedToMeToReview(), only items that are assigned to the calling user to review are returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AccessReviewDecisionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AccessReviewDecisionResource> GetAllAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<AccessReviewDecisionResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _accessReviewDecisionAccessReviewInstanceMyDecisionsClientDiagnostics.CreateScope("AccessReviewDecisionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _accessReviewDecisionAccessReviewInstanceMyDecisionsRestClient.ListAsync(_scheduleDefinitionId, _id, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AccessReviewDecisionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AccessReviewDecisionResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _accessReviewDecisionAccessReviewInstanceMyDecisionsClientDiagnostics.CreateScope("AccessReviewDecisionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _accessReviewDecisionAccessReviewInstanceMyDecisionsRestClient.ListNextPageAsync(nextLink, _scheduleDefinitionId, _id, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AccessReviewDecisionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get my access review instance decisions.
        /// Request Path: /providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/decisions
        /// Operation Id: AccessReviewInstanceMyDecisions_List
        /// </summary>
        /// <param name="filter"> The filter to apply on the operation. Other than standard filters, one custom filter option is supported : &apos;assignedToMeToReview()&apos;. When one specified $filter=assignedToMeToReview(), only items that are assigned to the calling user to review are returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AccessReviewDecisionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AccessReviewDecisionResource> GetAll(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<AccessReviewDecisionResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _accessReviewDecisionAccessReviewInstanceMyDecisionsClientDiagnostics.CreateScope("AccessReviewDecisionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _accessReviewDecisionAccessReviewInstanceMyDecisionsRestClient.List(_scheduleDefinitionId, _id, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AccessReviewDecisionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AccessReviewDecisionResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _accessReviewDecisionAccessReviewInstanceMyDecisionsClientDiagnostics.CreateScope("AccessReviewDecisionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _accessReviewDecisionAccessReviewInstanceMyDecisionsRestClient.ListNextPage(nextLink, _scheduleDefinitionId, _id, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AccessReviewDecisionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/decisions/{decisionId}
        /// Operation Id: AccessReviewInstanceMyDecisions_GetById
        /// </summary>
        /// <param name="decisionId"> The id of the decision record. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="decisionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="decisionId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string decisionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(decisionId, nameof(decisionId));

            using var scope = _accessReviewDecisionAccessReviewInstanceMyDecisionsClientDiagnostics.CreateScope("AccessReviewDecisionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _accessReviewDecisionAccessReviewInstanceMyDecisionsRestClient.GetByIdAsync(_scheduleDefinitionId, _id, decisionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/decisions/{decisionId}
        /// Operation Id: AccessReviewInstanceMyDecisions_GetById
        /// </summary>
        /// <param name="decisionId"> The id of the decision record. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="decisionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="decisionId"/> is null. </exception>
        public virtual Response<bool> Exists(string decisionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(decisionId, nameof(decisionId));

            using var scope = _accessReviewDecisionAccessReviewInstanceMyDecisionsClientDiagnostics.CreateScope("AccessReviewDecisionCollection.Exists");
            scope.Start();
            try
            {
                var response = _accessReviewDecisionAccessReviewInstanceMyDecisionsRestClient.GetById(_scheduleDefinitionId, _id, decisionId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<AccessReviewDecisionResource> IEnumerable<AccessReviewDecisionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<AccessReviewDecisionResource> IAsyncEnumerable<AccessReviewDecisionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
