// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Migrate.Models;

namespace Azure.ResourceManager.Migrate
{
    /// <summary> A class representing collection of AssessedMachine and their operations over its parent. </summary>
    public partial class AssessedMachineCollection : ArmCollection, IEnumerable<AssessedMachine>, IAsyncEnumerable<AssessedMachine>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly AssessedMachinesRestOperations _assessedMachinesRestClient;

        /// <summary> Initializes a new instance of the <see cref="AssessedMachineCollection"/> class for mocking. </summary>
        protected AssessedMachineCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="AssessedMachineCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal AssessedMachineCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            ClientOptions.TryGetApiVersion(AssessedMachine.ResourceType, out string apiVersion);
            _assessedMachinesRestClient = new AssessedMachinesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != Assessment.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, Assessment.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Get an assessed machine with its size &amp; cost estimate that was evaluated in the specified assessment. </summary>
        /// <param name="assessedMachineName"> Unique name of an assessed machine evaluated as part of an assessment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedMachineName"/> is null. </exception>
        public virtual Response<AssessedMachine> Get(string assessedMachineName, CancellationToken cancellationToken = default)
        {
            if (assessedMachineName == null)
            {
                throw new ArgumentNullException(nameof(assessedMachineName));
            }

            using var scope = _clientDiagnostics.CreateScope("AssessedMachineCollection.Get");
            scope.Start();
            try
            {
                var response = _assessedMachinesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, assessedMachineName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AssessedMachine(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get an assessed machine with its size &amp; cost estimate that was evaluated in the specified assessment. </summary>
        /// <param name="assessedMachineName"> Unique name of an assessed machine evaluated as part of an assessment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedMachineName"/> is null. </exception>
        public async virtual Task<Response<AssessedMachine>> GetAsync(string assessedMachineName, CancellationToken cancellationToken = default)
        {
            if (assessedMachineName == null)
            {
                throw new ArgumentNullException(nameof(assessedMachineName));
            }

            using var scope = _clientDiagnostics.CreateScope("AssessedMachineCollection.Get");
            scope.Start();
            try
            {
                var response = await _assessedMachinesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, assessedMachineName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new AssessedMachine(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="assessedMachineName"> Unique name of an assessed machine evaluated as part of an assessment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedMachineName"/> is null. </exception>
        public virtual Response<AssessedMachine> GetIfExists(string assessedMachineName, CancellationToken cancellationToken = default)
        {
            if (assessedMachineName == null)
            {
                throw new ArgumentNullException(nameof(assessedMachineName));
            }

            using var scope = _clientDiagnostics.CreateScope("AssessedMachineCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _assessedMachinesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, assessedMachineName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<AssessedMachine>(null, response.GetRawResponse());
                return Response.FromValue(new AssessedMachine(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="assessedMachineName"> Unique name of an assessed machine evaluated as part of an assessment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedMachineName"/> is null. </exception>
        public async virtual Task<Response<AssessedMachine>> GetIfExistsAsync(string assessedMachineName, CancellationToken cancellationToken = default)
        {
            if (assessedMachineName == null)
            {
                throw new ArgumentNullException(nameof(assessedMachineName));
            }

            using var scope = _clientDiagnostics.CreateScope("AssessedMachineCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _assessedMachinesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, assessedMachineName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<AssessedMachine>(null, response.GetRawResponse());
                return Response.FromValue(new AssessedMachine(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="assessedMachineName"> Unique name of an assessed machine evaluated as part of an assessment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedMachineName"/> is null. </exception>
        public virtual Response<bool> Exists(string assessedMachineName, CancellationToken cancellationToken = default)
        {
            if (assessedMachineName == null)
            {
                throw new ArgumentNullException(nameof(assessedMachineName));
            }

            using var scope = _clientDiagnostics.CreateScope("AssessedMachineCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(assessedMachineName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="assessedMachineName"> Unique name of an assessed machine evaluated as part of an assessment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedMachineName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string assessedMachineName, CancellationToken cancellationToken = default)
        {
            if (assessedMachineName == null)
            {
                throw new ArgumentNullException(nameof(assessedMachineName));
            }

            using var scope = _clientDiagnostics.CreateScope("AssessedMachineCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(assessedMachineName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get list of machines that assessed as part of the specified assessment. Returns a json array of objects of type &apos;assessedMachine&apos; as specified in the Models section.
        /// 
        /// Whenever an assessment is created or updated, it goes under computation. During this phase, the &apos;status&apos; field of Assessment object reports &apos;Computing&apos;.
        /// During the period when the assessment is under computation, the list of assessed machines is empty and no assessed machines are returned by this call.
        /// 
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AssessedMachine" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AssessedMachine> GetAll(CancellationToken cancellationToken = default)
        {
            Page<AssessedMachine> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AssessedMachineCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _assessedMachinesRestClient.ListByAssessment(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AssessedMachine(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AssessedMachine> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AssessedMachineCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _assessedMachinesRestClient.ListByAssessmentNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AssessedMachine(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get list of machines that assessed as part of the specified assessment. Returns a json array of objects of type &apos;assessedMachine&apos; as specified in the Models section.
        /// 
        /// Whenever an assessment is created or updated, it goes under computation. During this phase, the &apos;status&apos; field of Assessment object reports &apos;Computing&apos;.
        /// During the period when the assessment is under computation, the list of assessed machines is empty and no assessed machines are returned by this call.
        /// 
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AssessedMachine" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AssessedMachine> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AssessedMachine>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AssessedMachineCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _assessedMachinesRestClient.ListByAssessmentAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AssessedMachine(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AssessedMachine>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AssessedMachineCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _assessedMachinesRestClient.ListByAssessmentNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AssessedMachine(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<AssessedMachine> IEnumerable<AssessedMachine>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<AssessedMachine> IAsyncEnumerable<AssessedMachine>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, AssessedMachine, AssessedMachineData> Construct() { }
    }
}
