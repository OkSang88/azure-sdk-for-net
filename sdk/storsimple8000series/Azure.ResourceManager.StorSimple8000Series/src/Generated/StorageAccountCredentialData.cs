// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;
using Azure.ResourceManager.StorSimple8000Series.Models;

namespace Azure.ResourceManager.StorSimple8000Series
{
    /// <summary> A class representing the StorageAccountCredential data model. </summary>
    public partial class StorageAccountCredentialData : BaseModel
    {
        /// <summary> Initializes a new instance of StorageAccountCredentialData. </summary>
        /// <param name="endPoint"> The storage endpoint. </param>
        /// <param name="sslStatus"> Signifies whether SSL needs to be enabled or not. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endPoint"/> is null. </exception>
        public StorageAccountCredentialData(string endPoint, SslStatus sslStatus)
        {
            if (endPoint == null)
            {
                throw new ArgumentNullException(nameof(endPoint));
            }

            EndPoint = endPoint;
            SslStatus = sslStatus;
        }

        /// <summary> Initializes a new instance of StorageAccountCredentialData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="type"> The type. </param>
        /// <param name="kind"> The Kind of the object. Currently only Series8000 is supported. </param>
        /// <param name="endPoint"> The storage endpoint. </param>
        /// <param name="sslStatus"> Signifies whether SSL needs to be enabled or not. </param>
        /// <param name="accessKey"> The details of the storage account password. </param>
        /// <param name="volumesCount"> The count of volumes using this storage account credential. </param>
        internal StorageAccountCredentialData(ResourceIdentifier id, string name, ResourceType type, string kind, string endPoint, SslStatus sslStatus, AsymmetricEncryptedSecret accessKey, int? volumesCount) : base(id, name, type, kind)
        {
            EndPoint = endPoint;
            SslStatus = sslStatus;
            AccessKey = accessKey;
            VolumesCount = volumesCount;
        }

        /// <summary> The storage endpoint. </summary>
        public string EndPoint { get; set; }
        /// <summary> Signifies whether SSL needs to be enabled or not. </summary>
        public SslStatus SslStatus { get; set; }
        /// <summary> The details of the storage account password. </summary>
        public AsymmetricEncryptedSecret AccessKey { get; set; }
        /// <summary> The count of volumes using this storage account credential. </summary>
        public int? VolumesCount { get; }
    }
}
