// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using Insights;
using Insights.Models;

namespace Insights.Tests.Mock
{
    /// <summary> Test for LogSearchRuleResource. </summary>
    public partial class LogSearchRuleResourceMockTests : MockTestBase
    {
        public LogSearchRuleResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get rule
            var logSearchRuleResourceId = Insights.LogSearchRuleResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Rac46PostSwapRG", "logalertfoo");
            var logSearchRuleResource = GetArmClient().GetLogSearchRuleResource(logSearchRuleResourceId);

            await logSearchRuleResource.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete rule
            var logSearchRuleResourceId = Insights.LogSearchRuleResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Rac46PostSwapRG", "logalertfoo");
            var logSearchRuleResource = GetArmClient().GetLogSearchRuleResource(logSearchRuleResourceId);

            await logSearchRuleResource.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Patch Log Search Rule
            var logSearchRuleResourceId = Insights.LogSearchRuleResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "my-resource-group", "logalertfoo");
            var logSearchRuleResource = GetArmClient().GetLogSearchRuleResource(logSearchRuleResourceId);
            Insights.Models.LogSearchRuleResourcePatch parameters = new Insights.Models.LogSearchRuleResourcePatch()
            {
                Enabled = new Insights.Models.Enabled("true"),
            };

            await logSearchRuleResource.UpdateAsync(parameters);
        }
    }
}
