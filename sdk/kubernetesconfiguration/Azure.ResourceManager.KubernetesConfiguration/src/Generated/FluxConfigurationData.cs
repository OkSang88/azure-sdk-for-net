// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.KubernetesConfiguration.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.KubernetesConfiguration
{
    /// <summary> A class representing the FluxConfiguration data model. </summary>
    public partial class FluxConfigurationData : Resource
    {
        /// <summary> Initializes a new instance of FluxConfigurationData. </summary>
        public FluxConfigurationData()
        {
            Kustomizations = new ChangeTrackingDictionary<string, KustomizationDefinition>();
            ConfigurationProtectedSettings = new ChangeTrackingDictionary<string, string>();
            Statuses = new ChangeTrackingList<ObjectStatusDefinition>();
        }

        /// <summary> Initializes a new instance of FluxConfigurationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="type"> The type. </param>
        /// <param name="systemData"> Top level metadata https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/common-api-contracts.md#system-metadata-for-all-azure-resources. </param>
        /// <param name="scope"> Scope at which the operator will be installed. </param>
        /// <param name="namespace"> The namespace to which this configuration is installed to. Maximum of 253 lower case alphanumeric characters, hyphen and period only. </param>
        /// <param name="sourceKind"> Source Kind to pull the configuration data from. </param>
        /// <param name="suspend"> Whether this configuration should suspend its reconciliation of its kustomizations and sources. </param>
        /// <param name="gitRepository"> Parameters to reconcile to the GitRepository source kind type. </param>
        /// <param name="bucket"> Parameters to reconcile to the Bucket source kind type. </param>
        /// <param name="kustomizations"> Array of kustomizations used to reconcile the artifact pulled by the source type on the cluster. </param>
        /// <param name="configurationProtectedSettings"> Key-value pairs of protected configuration settings for the configuration. </param>
        /// <param name="statuses"> Statuses of the Flux Kubernetes resources created by the fluxConfiguration or created by the managed objects provisioned by the fluxConfiguration. </param>
        /// <param name="repositoryPublicKey"> Public Key associated with this fluxConfiguration (either generated within the cluster or provided by the user). </param>
        /// <param name="lastSourceUpdatedCommitId"> Branch and SHA of the last source commit synced with the cluster. </param>
        /// <param name="lastSourceUpdatedAt"> Datetime the fluxConfiguration last synced its source on the cluster. </param>
        /// <param name="complianceState"> Combined status of the Flux Kubernetes resources created by the fluxConfiguration or created by the managed objects. </param>
        /// <param name="provisioningState"> Status of the creation of the fluxConfiguration. </param>
        /// <param name="errorMessage"> Error message returned to the user in the case of provisioning failure. </param>
        internal FluxConfigurationData(ResourceIdentifier id, string name, ResourceType type, SystemData systemData, ScopeType? scope, string @namespace, SourceKindType? sourceKind, bool? suspend, GitRepositoryDefinition gitRepository, BucketDefinition bucket, IDictionary<string, KustomizationDefinition> kustomizations, IDictionary<string, string> configurationProtectedSettings, IReadOnlyList<ObjectStatusDefinition> statuses, string repositoryPublicKey, string lastSourceUpdatedCommitId, DateTimeOffset? lastSourceUpdatedAt, FluxComplianceState? complianceState, ProvisioningState? provisioningState, string errorMessage) : base(id, name, type)
        {
            SystemData = systemData;
            Scope = scope;
            Namespace = @namespace;
            SourceKind = sourceKind;
            Suspend = suspend;
            GitRepository = gitRepository;
            Bucket = bucket;
            Kustomizations = kustomizations;
            ConfigurationProtectedSettings = configurationProtectedSettings;
            Statuses = statuses;
            RepositoryPublicKey = repositoryPublicKey;
            LastSourceUpdatedCommitId = lastSourceUpdatedCommitId;
            LastSourceUpdatedAt = lastSourceUpdatedAt;
            ComplianceState = complianceState;
            ProvisioningState = provisioningState;
            ErrorMessage = errorMessage;
        }

        /// <summary> Top level metadata https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/common-api-contracts.md#system-metadata-for-all-azure-resources. </summary>
        public SystemData SystemData { get; }
        /// <summary> Scope at which the operator will be installed. </summary>
        public ScopeType? Scope { get; set; }
        /// <summary> The namespace to which this configuration is installed to. Maximum of 253 lower case alphanumeric characters, hyphen and period only. </summary>
        public string Namespace { get; set; }
        /// <summary> Source Kind to pull the configuration data from. </summary>
        public SourceKindType? SourceKind { get; set; }
        /// <summary> Whether this configuration should suspend its reconciliation of its kustomizations and sources. </summary>
        public bool? Suspend { get; set; }
        /// <summary> Parameters to reconcile to the GitRepository source kind type. </summary>
        public GitRepositoryDefinition GitRepository { get; set; }
        /// <summary> Parameters to reconcile to the Bucket source kind type. </summary>
        public BucketDefinition Bucket { get; set; }
        /// <summary> Array of kustomizations used to reconcile the artifact pulled by the source type on the cluster. </summary>
        public IDictionary<string, KustomizationDefinition> Kustomizations { get; set; }
        /// <summary> Key-value pairs of protected configuration settings for the configuration. </summary>
        public IDictionary<string, string> ConfigurationProtectedSettings { get; set; }
        /// <summary> Statuses of the Flux Kubernetes resources created by the fluxConfiguration or created by the managed objects provisioned by the fluxConfiguration. </summary>
        public IReadOnlyList<ObjectStatusDefinition> Statuses { get; }
        /// <summary> Public Key associated with this fluxConfiguration (either generated within the cluster or provided by the user). </summary>
        public string RepositoryPublicKey { get; }
        /// <summary> Branch and SHA of the last source commit synced with the cluster. </summary>
        public string LastSourceUpdatedCommitId { get; }
        /// <summary> Datetime the fluxConfiguration last synced its source on the cluster. </summary>
        public DateTimeOffset? LastSourceUpdatedAt { get; }
        /// <summary> Combined status of the Flux Kubernetes resources created by the fluxConfiguration or created by the managed objects. </summary>
        public FluxComplianceState? ComplianceState { get; }
        /// <summary> Status of the creation of the fluxConfiguration. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> Error message returned to the user in the case of provisioning failure. </summary>
        public string ErrorMessage { get; }
    }
}
