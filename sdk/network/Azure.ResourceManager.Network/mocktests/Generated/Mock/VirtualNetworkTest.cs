// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for VirtualNetwork. </summary>
    public partial class VirtualNetworkMockTests : MockTestBase
    {
        public VirtualNetworkMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get virtual network
            var virtualNetworkId = Network.VirtualNetwork.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "test-vnet");
            var virtualNetwork = GetArmClient().GetVirtualNetwork(virtualNetworkId);
            string expand = null;

            await virtualNetwork.GetAsync(expand);
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: Get virtual network with a delegated subnet
            var virtualNetworkId = Network.VirtualNetwork.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "test-vnet");
            var virtualNetwork = GetArmClient().GetVirtualNetwork(virtualNetworkId);
            string expand = null;

            await virtualNetwork.GetAsync(expand);
        }

        [RecordedTest]
        public async Task Get3()
        {
            // Example: Get virtual network with service association links
            var virtualNetworkId = Network.VirtualNetwork.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "test-vnet");
            var virtualNetwork = GetArmClient().GetVirtualNetwork(virtualNetworkId);
            string expand = null;

            await virtualNetwork.GetAsync(expand);
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete virtual network
            var virtualNetworkId = Network.VirtualNetwork.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "test-vnet");
            var virtualNetwork = GetArmClient().GetVirtualNetwork(virtualNetworkId);

            await virtualNetwork.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Update virtual network tags
            var virtualNetworkId = Network.VirtualNetwork.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "test-vnet");
            var virtualNetwork = GetArmClient().GetVirtualNetwork(virtualNetworkId);
            Network.Models.TagsObject parameters = new Network.Models.TagsObject();

            await virtualNetwork.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task CheckIPAddressAvailability()
        {
            // Example: Check IP address availability
            var virtualNetworkId = Network.VirtualNetwork.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "test-vnet");
            var virtualNetwork = GetArmClient().GetVirtualNetwork(virtualNetworkId);
            string ipAddress = "10.0.1.4";

            await virtualNetwork.CheckIPAddressAvailabilityAsync(ipAddress);
        }

        [RecordedTest]
        public async Task GetUsage()
        {
            // Example: VnetGetUsage
            var virtualNetworkId = Network.VirtualNetwork.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "vnetName");
            var virtualNetwork = GetArmClient().GetVirtualNetwork(virtualNetworkId);

            await foreach (var _ in virtualNetwork.GetUsageAsync())
            {
            }
        }
    }
}
