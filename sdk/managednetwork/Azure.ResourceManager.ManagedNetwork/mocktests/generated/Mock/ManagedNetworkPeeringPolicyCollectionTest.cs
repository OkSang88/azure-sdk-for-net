// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.ManagedNetwork.Tests.Mock;
using Azure.ResourceManager.ManagedNetwork.Tests.Mock.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.ManagedNetwork.Tests.Mock.Tests.Mock
{
    /// <summary> Test for ManagedNetworkPeeringPolicy. </summary>
    public partial class ManagedNetworkPeeringPolicyCollectionMockTests : MockTestBase
    {
        public ManagedNetworkPeeringPolicyCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: ManagedNetworkPeeringPoliciesPut
            string managedNetworkPeeringPolicyName = "myHubAndSpoke";
            ManagedNetwork.Tests.Mock.ManagedNetworkPeeringPolicyData managedNetworkPolicy = new ManagedNetwork.Tests.Mock.ManagedNetworkPeeringPolicyData()
            {
                Properties = new ManagedNetwork.Tests.Mock.Models.ManagedNetworkPeeringPolicyProperties(type: new ManagedNetwork.Tests.Mock.Models.Type("HubAndSpokeTopology"))
                {
                    Hub = new WritableSubResource()
                    {
                        Id = new ResourceIdentifier($"/subscriptionB/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myHubVnet"),
                    },
                },
            };

            var managedNetworkId = ManagedNetwork.Tests.Mock.ManagedNetwork.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myManagedNetwork");
            var collection = GetArmClient().GetManagedNetwork(managedNetworkId).GetManagedNetworkPeeringPolicies();
            await collection.CreateOrUpdateAsync(true, managedNetworkPeeringPolicyName, managedNetworkPolicy);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: ManagedNetworkPeeringPoliciesGet
            string managedNetworkPeeringPolicyName = "myHubAndSpoke";

            var managedNetworkId = ManagedNetwork.Tests.Mock.ManagedNetwork.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myManagedNetwork");
            var collection = GetArmClient().GetManagedNetwork(managedNetworkId).GetManagedNetworkPeeringPolicies();
            await collection.GetAsync(managedNetworkPeeringPolicyName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: ManagedNetworkPeeringPoliciesListByManagedNetwork
            int? top = null;
            string skiptoken = null;

            var managedNetworkId = ManagedNetwork.Tests.Mock.ManagedNetwork.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myManagedNetwork");
            var collection = GetArmClient().GetManagedNetwork(managedNetworkId).GetManagedNetworkPeeringPolicies();
            await foreach (var _ in collection.GetAllAsync(top, skiptoken))
            {
            }
        }
    }
}
