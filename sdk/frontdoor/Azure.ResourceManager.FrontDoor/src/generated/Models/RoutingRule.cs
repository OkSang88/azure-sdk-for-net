// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Resources.Models;

namespace FrontDoorManagementClient.Models
{
    /// <summary> A routing rule represents a specification for traffic to treat and where to send it, along with health probe information. </summary>
    public partial class RoutingRule : SubResource
    {
        /// <summary> Initializes a new instance of RoutingRule. </summary>
        public RoutingRule()
        {
            FrontendEndpoints = new ChangeTrackingList<WritableSubResource>();
            AcceptedProtocols = new ChangeTrackingList<FrontDoorProtocol>();
            PatternsToMatch = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of RoutingRule. </summary>
        /// <param name="id"> Resource ID. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="frontendEndpoints"> Frontend endpoints associated with this rule. </param>
        /// <param name="acceptedProtocols"> Protocol schemes to match for this rule. </param>
        /// <param name="patternsToMatch"> The route patterns of the rule. </param>
        /// <param name="enabledState"> Whether to enable use of this rule. Permitted values are &apos;Enabled&apos; or &apos;Disabled&apos;. </param>
        /// <param name="routeConfiguration"> A reference to the routing configuration. </param>
        /// <param name="rulesEngine"> A reference to a specific Rules Engine Configuration to apply to this route. </param>
        /// <param name="webApplicationFirewallPolicyLink"> Defines the Web Application Firewall policy for each routing rule (if applicable). </param>
        /// <param name="resourceState"> Resource status. </param>
        internal RoutingRule(string id, string name, string type, IList<WritableSubResource> frontendEndpoints, IList<FrontDoorProtocol> acceptedProtocols, IList<string> patternsToMatch, RoutingRuleEnabledState? enabledState, RouteConfiguration routeConfiguration, WritableSubResource rulesEngine, WritableSubResource webApplicationFirewallPolicyLink, FrontDoorResourceState? resourceState) : base(id)
        {
            Name = name;
            Type = type;
            FrontendEndpoints = frontendEndpoints;
            AcceptedProtocols = acceptedProtocols;
            PatternsToMatch = patternsToMatch;
            EnabledState = enabledState;
            RouteConfiguration = routeConfiguration;
            RulesEngine = rulesEngine;
            WebApplicationFirewallPolicyLink = webApplicationFirewallPolicyLink;
            ResourceState = resourceState;
        }

        /// <summary> Resource name. </summary>
        public string Name { get; set; }
        /// <summary> Resource type. </summary>
        public string Type { get; }
        /// <summary> Frontend endpoints associated with this rule. </summary>
        public IList<WritableSubResource> FrontendEndpoints { get; }
        /// <summary> Protocol schemes to match for this rule. </summary>
        public IList<FrontDoorProtocol> AcceptedProtocols { get; }
        /// <summary> The route patterns of the rule. </summary>
        public IList<string> PatternsToMatch { get; }
        /// <summary> Whether to enable use of this rule. Permitted values are &apos;Enabled&apos; or &apos;Disabled&apos;. </summary>
        public RoutingRuleEnabledState? EnabledState { get; set; }
        /// <summary> A reference to the routing configuration. </summary>
        public RouteConfiguration RouteConfiguration { get; set; }
        /// <summary> A reference to a specific Rules Engine Configuration to apply to this route. </summary>
        public WritableSubResource RulesEngine { get; set; }
        /// <summary> Defines the Web Application Firewall policy for each routing rule (if applicable). </summary>
        public WritableSubResource WebApplicationFirewallPolicyLink { get; set; }
        /// <summary> Resource status. </summary>
        public FrontDoorResourceState? ResourceState { get; }
    }
}
