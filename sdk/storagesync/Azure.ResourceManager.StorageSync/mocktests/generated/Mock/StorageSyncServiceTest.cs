// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using MicrosoftStorageSync;
using MicrosoftStorageSync.Models;

namespace MicrosoftStorageSync.Tests.Mock
{
    /// <summary> Test for StorageSyncService. </summary>
    public partial class StorageSyncServiceMockTests : MockTestBase
    {
        public StorageSyncServiceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: StorageSyncServices_Get
            var storageSyncServiceId = MicrosoftStorageSync.StorageSyncService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "SampleResourceGroup_1", "SampleStorageSyncService_1");
            var storageSyncService = GetArmClient().GetStorageSyncService(storageSyncServiceId);

            await storageSyncService.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: StorageSyncServices_Delete
            var storageSyncServiceId = MicrosoftStorageSync.StorageSyncService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "SampleResourceGroup_1", "SampleStorageSyncService_1");
            var storageSyncService = GetArmClient().GetStorageSyncService(storageSyncServiceId);

            await storageSyncService.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: StorageSyncServices_Update
            var storageSyncServiceId = MicrosoftStorageSync.StorageSyncService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "SampleResourceGroup_1", "SampleStorageSyncService_1");
            var storageSyncService = GetArmClient().GetStorageSyncService(storageSyncServiceId);
            MicrosoftStorageSync.Models.StorageSyncServiceUpdateParameters parameters = new MicrosoftStorageSync.Models.StorageSyncServiceUpdateParameters()
            {
                IncomingTrafficPolicy = new MicrosoftStorageSync.Models.IncomingTrafficPolicy("AllowAllTraffic"),
            };

            await storageSyncService.UpdateAsync(true, parameters);
        }

        [RecordedTest]
        public async Task GetPrivateLinkResources()
        {
            // Example: PrivateLinkResources_List
            var storageSyncServiceId = MicrosoftStorageSync.StorageSyncService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res6977", "sss2527");
            var storageSyncService = GetArmClient().GetStorageSyncService(storageSyncServiceId);

            await foreach (var _ in storageSyncService.GetPrivateLinkResourcesAsync())
            {
            }
        }
    }
}
