// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace StorSimple8000SeriesManagementClient.Models
{
    public partial class ControllerPowerStateChangeRequest : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind");
                writer.WriteStringValue(Kind);
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            writer.WritePropertyName("action");
            writer.WriteStringValue(Action.ToSerialString());
            writer.WritePropertyName("activeController");
            writer.WriteStringValue(ActiveController.ToSerialString());
            writer.WritePropertyName("controller0State");
            writer.WriteStringValue(Controller0State.ToSerialString());
            writer.WritePropertyName("controller1State");
            writer.WriteStringValue(Controller1State.ToSerialString());
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static ControllerPowerStateChangeRequest DeserializeControllerPowerStateChangeRequest(JsonElement element)
        {
            Optional<string> kind = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            ControllerPowerStateAction action = default;
            ControllerId activeController = default;
            ControllerStatus controller0State = default;
            ControllerStatus controller1State = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("action"))
                        {
                            action = property0.Value.GetString().ToControllerPowerStateAction();
                            continue;
                        }
                        if (property0.NameEquals("activeController"))
                        {
                            activeController = property0.Value.GetString().ToControllerId();
                            continue;
                        }
                        if (property0.NameEquals("controller0State"))
                        {
                            controller0State = property0.Value.GetString().ToControllerStatus();
                            continue;
                        }
                        if (property0.NameEquals("controller1State"))
                        {
                            controller1State = property0.Value.GetString().ToControllerStatus();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ControllerPowerStateChangeRequest(id, name, type, kind.Value, action, activeController, controller0State, controller1State);
        }
    }
}
