// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.EdgeOrder;
using Azure.ResourceManager.EdgeOrder.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.EdgeOrder.Tests.Mock
{
    /// <summary> Test for OrderItemResource. </summary>
    public partial class OrderItemResourceCollectionMockTests : MockTestBase
    {
        public OrderItemResourceCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: CreateOrderItem
            string orderItemName = "TestOrderItemName01";
            EdgeOrder.OrderItemResourceData orderItemResource = new EdgeOrder.OrderItemResourceData(location: "westus", orderItemDetails: new EdgeOrder.Models.OrderItemDetails(productDetails: new EdgeOrder.Models.ProductDetails(hierarchyInformation: new EdgeOrder.Models.HierarchyInformation()
            {
                ProductFamilyName = "AzureStackEdge",
                ProductLineName = "AzureStackEdge",
                ProductName = "AzureStackEdgeGPU",
                ConfigurationName = "AzureStackEdgeGPU",
            }), orderItemType: new EdgeOrder.Models.OrderItemType("Purchase"))
            {
                Preferences = new EdgeOrder.Models.OrderItemPreferences()
                {
                    TransportPreferences = new EdgeOrder.Models.TransportPreferences(preferredShipmentType: new EdgeOrder.Models.TransportShipmentTypes("MicrosoftManaged")),
                },
            }, addressDetails: new EdgeOrder.Models.AddressDetails(forwardAddress: new EdgeOrder.Models.AddressProperties(contactDetails: new EdgeOrder.Models.ContactDetails(contactName: "164 TOWNSEND ST", phone: "3213131190", emailList: new List<string>()
{
"ssemmail@microsoft.com","vishwamdir@microsoft.com",}))
            {
                ShippingAddress = new EdgeOrder.Models.ShippingAddress(streetAddress1: "16 TOWNSEND ST", country: "US")
                {
                    StreetAddress2 = "UNIT 1",
                    City = "San Francisco",
                    StateOrProvince = "CA",
                    PostalCode = "94107",
                    ZipExtendedCode = "1",
                    CompanyName = "Microsoft",
                    AddressType = new EdgeOrder.Models.AddressType("Residential"),
                },
            }), orderId: "/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/locations/westus/orders/TestOrderItemName01")
            {
            };
            orderItemResource.Tags.ReplaceWith(new Dictionary<string, string>() { ["carrot"] = "vegetable", ["mango"] = "fruit", });
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/TestRG")).GetOrderItemResources();
            await collection.CreateOrUpdateAsync(true, orderItemName, orderItemResource);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: GetOrderItemByName
            string orderItemName = "TestOrderItemName01";
            string expand = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/TestRG")).GetOrderItemResources();
            await collection.GetAsync(orderItemName, expand);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: ListOrderItemsAtResourceGroupLevel
            string filter = null;
            string expand = null;
            string skipToken = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/TestRG")).GetOrderItemResources();
            await foreach (var _ in collection.GetAllAsync(filter, expand, skipToken))
            {
            }
        }
    }
}
