// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.PostgreSQL.Tests.Mock;
using Azure.ResourceManager.PostgreSQL.Tests.Mock.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.PostgreSQL.Tests.Mock.Tests.Mock
{
    /// <summary> Test for Server. </summary>
    public partial class ServerCollectionMockTests : MockTestBase
    {
        public ServerCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create a database as a point in time restore
            string serverName = "pgtestsvc5";
            PostgreSQL.Tests.Mock.ServerData parameters = new PostgreSQL.Tests.Mock.ServerData(location: "westus")
            {
                SourceServerResourceId = "/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.DBforPostgreSQL/flexibleServers/sourcepgservername",
                PointInTimeUTC = DateTimeOffset.Parse("2021-06-27T00:04:59.4078005+00:00"),
                CreateMode = new PostgreSQL.Tests.Mock.Models.CreateMode("PointInTimeRestore"),
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg")).GetServers();
            await collection.CreateOrUpdateAsync(true, serverName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Create a new server
            string serverName = "pgtestsvc4";
            PostgreSQL.Tests.Mock.ServerData parameters = new PostgreSQL.Tests.Mock.ServerData(location: "westus")
            {
                Sku = new PostgreSQL.Tests.Mock.Models.Sku(name: "Standard_D4s_v3", tier: new PostgreSQL.Tests.Mock.Models.SkuTier("GeneralPurpose")),
                AdministratorLogin = "cloudsa",
                AdministratorLoginPassword = "password",
                Version = new PostgreSQL.Tests.Mock.Models.ServerVersion("12"),
                Storage = new PostgreSQL.Tests.Mock.Models.Storage()
                {
                    StorageSizeGB = 512,
                },
                Backup = new PostgreSQL.Tests.Mock.Models.Backup()
                {
                    BackupRetentionDays = 7,
                    GeoRedundantBackup = new PostgreSQL.Tests.Mock.Models.GeoRedundantBackupEnum("Disabled"),
                },
                Network = new PostgreSQL.Tests.Mock.Models.Network()
                {
                    DelegatedSubnetResourceId = "/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/test-vnet-subnet",
                    PrivateDnsZoneArmResourceId = "/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourcegroups/testrg/providers/Microsoft.Network/privateDnsZones/test-private-dns-zone.postgres.database.azure.com",
                },
                HighAvailability = new PostgreSQL.Tests.Mock.Models.HighAvailability()
                {
                    Mode = new PostgreSQL.Tests.Mock.Models.HighAvailabilityMode("ZoneRedundant"),
                },
                AvailabilityZone = "1",
                CreateMode = new PostgreSQL.Tests.Mock.Models.CreateMode("Create"),
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>()
            {
                ["ElasticServer"] = "1",
            });

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg")).GetServers();
            await collection.CreateOrUpdateAsync(true, serverName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: ServerGet
            string serverName = "pgtestsvc1";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg")).GetServers();
            await collection.GetAsync(serverName);
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: ServerGetWithVnet
            string serverName = "pgtestsvc4";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg")).GetServers();
            await collection.GetAsync(serverName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: ServerListByResourceGroup

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg")).GetServers();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
