// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using NotificationHubsManagementClient;
using NotificationHubsManagementClient.Models;

namespace NotificationHubsManagementClient.Tests.Mock
{
    /// <summary> Test for SharedAccessAuthorizationRuleResource. </summary>
    public partial class NamespaceNotificationHubAuthorizationRuleMockTests : MockTestBase
    {
        public NamespaceNotificationHubAuthorizationRuleMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: NotificationHubAuthorizationRuleGet
            var namespaceNotificationHubAuthorizationRuleId = NotificationHubsManagementClient.NamespaceNotificationHubAuthorizationRule.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "5ktrial", "nh-sdk-ns", "nh-sdk-hub", "DefaultListenSharedAccessSignature");
            var namespaceNotificationHubAuthorizationRule = GetArmClient().GetNamespaceNotificationHubAuthorizationRule(namespaceNotificationHubAuthorizationRuleId);

            await namespaceNotificationHubAuthorizationRule.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: NotificationHubAuthorizationRuleDelete
            var namespaceNotificationHubAuthorizationRuleId = NotificationHubsManagementClient.NamespaceNotificationHubAuthorizationRule.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "5ktrial", "nh-sdk-ns", "nh-sdk-hub", "DefaultListenSharedAccessSignature");
            var namespaceNotificationHubAuthorizationRule = GetArmClient().GetNamespaceNotificationHubAuthorizationRule(namespaceNotificationHubAuthorizationRuleId);

            await namespaceNotificationHubAuthorizationRule.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task GetKeys()
        {
            // Example: NotificationHubAuthorizationRuleListKey
            var namespaceNotificationHubAuthorizationRuleId = NotificationHubsManagementClient.NamespaceNotificationHubAuthorizationRule.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "5ktrial", "nh-sdk-ns", "nh-sdk-hub", "sdk-AuthRules-5800");
            var namespaceNotificationHubAuthorizationRule = GetArmClient().GetNamespaceNotificationHubAuthorizationRule(namespaceNotificationHubAuthorizationRuleId);

            await namespaceNotificationHubAuthorizationRule.GetKeysAsync();
        }

        [RecordedTest]
        public async Task RegenerateKeys()
        {
            // Example: NotificationHubAuthorizationRuleRegenrateKey
            var namespaceNotificationHubAuthorizationRuleId = NotificationHubsManagementClient.NamespaceNotificationHubAuthorizationRule.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "5ktrial", "nh-sdk-ns", "nh-sdk-hub", "DefaultListenSharedAccessSignature");
            var namespaceNotificationHubAuthorizationRule = GetArmClient().GetNamespaceNotificationHubAuthorizationRule(namespaceNotificationHubAuthorizationRuleId);
            NotificationHubsManagementClient.Models.PolicykeyResource parameters = new NotificationHubsManagementClient.Models.PolicykeyResource()
            {
                PolicyKey = "PrimaryKey",
            };

            await namespaceNotificationHubAuthorizationRule.RegenerateKeysAsync(parameters);
        }
    }
}
