// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using ContainerRegistryManagementClient.Models;

namespace ContainerRegistryManagementClient
{
    /// <summary> A class representing collection of AgentPool and their operations over its parent. </summary>
    public partial class AgentPoolCollection : ArmCollection, IEnumerable<AgentPool>, IAsyncEnumerable<AgentPool>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly AgentPoolsRestOperations _agentPoolsRestClient;

        /// <summary> Initializes a new instance of the <see cref="AgentPoolCollection"/> class for mocking. </summary>
        protected AgentPoolCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="AgentPoolCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal AgentPoolCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _agentPoolsRestClient = new AgentPoolsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != Registry.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, Registry.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Creates an agent pool for a container registry with the specified parameters. </summary>
        /// <param name="agentPoolName"> The name of the agent pool. </param>
        /// <param name="agentPool"> The parameters of an agent pool that needs to scheduled. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentPoolName"/> or <paramref name="agentPool"/> is null. </exception>
        public virtual AgentPoolCreateOperation CreateOrUpdate(bool waitForCompletion, string agentPoolName, AgentPoolData agentPool, CancellationToken cancellationToken = default)
        {
            if (agentPoolName == null)
            {
                throw new ArgumentNullException(nameof(agentPoolName));
            }
            if (agentPool == null)
            {
                throw new ArgumentNullException(nameof(agentPool));
            }

            using var scope = _clientDiagnostics.CreateScope("AgentPoolCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _agentPoolsRestClient.Create(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, agentPoolName, agentPool, cancellationToken);
                var operation = new AgentPoolCreateOperation(Parent, _clientDiagnostics, Pipeline, _agentPoolsRestClient.CreateCreateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, agentPoolName, agentPool).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates an agent pool for a container registry with the specified parameters. </summary>
        /// <param name="agentPoolName"> The name of the agent pool. </param>
        /// <param name="agentPool"> The parameters of an agent pool that needs to scheduled. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentPoolName"/> or <paramref name="agentPool"/> is null. </exception>
        public async virtual Task<AgentPoolCreateOperation> CreateOrUpdateAsync(bool waitForCompletion, string agentPoolName, AgentPoolData agentPool, CancellationToken cancellationToken = default)
        {
            if (agentPoolName == null)
            {
                throw new ArgumentNullException(nameof(agentPoolName));
            }
            if (agentPool == null)
            {
                throw new ArgumentNullException(nameof(agentPool));
            }

            using var scope = _clientDiagnostics.CreateScope("AgentPoolCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _agentPoolsRestClient.CreateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, agentPoolName, agentPool, cancellationToken).ConfigureAwait(false);
                var operation = new AgentPoolCreateOperation(Parent, _clientDiagnostics, Pipeline, _agentPoolsRestClient.CreateCreateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, agentPoolName, agentPool).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the detailed information for a given agent pool. </summary>
        /// <param name="agentPoolName"> The name of the agent pool. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentPoolName"/> is null. </exception>
        public virtual Response<AgentPool> Get(string agentPoolName, CancellationToken cancellationToken = default)
        {
            if (agentPoolName == null)
            {
                throw new ArgumentNullException(nameof(agentPoolName));
            }

            using var scope = _clientDiagnostics.CreateScope("AgentPoolCollection.Get");
            scope.Start();
            try
            {
                var response = _agentPoolsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, agentPoolName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AgentPool(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the detailed information for a given agent pool. </summary>
        /// <param name="agentPoolName"> The name of the agent pool. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentPoolName"/> is null. </exception>
        public async virtual Task<Response<AgentPool>> GetAsync(string agentPoolName, CancellationToken cancellationToken = default)
        {
            if (agentPoolName == null)
            {
                throw new ArgumentNullException(nameof(agentPoolName));
            }

            using var scope = _clientDiagnostics.CreateScope("AgentPoolCollection.Get");
            scope.Start();
            try
            {
                var response = await _agentPoolsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, agentPoolName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new AgentPool(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="agentPoolName"> The name of the agent pool. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentPoolName"/> is null. </exception>
        public virtual Response<AgentPool> GetIfExists(string agentPoolName, CancellationToken cancellationToken = default)
        {
            if (agentPoolName == null)
            {
                throw new ArgumentNullException(nameof(agentPoolName));
            }

            using var scope = _clientDiagnostics.CreateScope("AgentPoolCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _agentPoolsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, agentPoolName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<AgentPool>(null, response.GetRawResponse());
                return Response.FromValue(new AgentPool(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="agentPoolName"> The name of the agent pool. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentPoolName"/> is null. </exception>
        public async virtual Task<Response<AgentPool>> GetIfExistsAsync(string agentPoolName, CancellationToken cancellationToken = default)
        {
            if (agentPoolName == null)
            {
                throw new ArgumentNullException(nameof(agentPoolName));
            }

            using var scope = _clientDiagnostics.CreateScope("AgentPoolCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _agentPoolsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, agentPoolName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<AgentPool>(null, response.GetRawResponse());
                return Response.FromValue(new AgentPool(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="agentPoolName"> The name of the agent pool. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentPoolName"/> is null. </exception>
        public virtual Response<bool> Exists(string agentPoolName, CancellationToken cancellationToken = default)
        {
            if (agentPoolName == null)
            {
                throw new ArgumentNullException(nameof(agentPoolName));
            }

            using var scope = _clientDiagnostics.CreateScope("AgentPoolCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(agentPoolName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="agentPoolName"> The name of the agent pool. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="agentPoolName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string agentPoolName, CancellationToken cancellationToken = default)
        {
            if (agentPoolName == null)
            {
                throw new ArgumentNullException(nameof(agentPoolName));
            }

            using var scope = _clientDiagnostics.CreateScope("AgentPoolCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(agentPoolName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all the agent pools for a specified container registry. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AgentPool" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AgentPool> GetAll(CancellationToken cancellationToken = default)
        {
            Page<AgentPool> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AgentPoolCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _agentPoolsRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AgentPool(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AgentPool> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AgentPoolCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _agentPoolsRestClient.ListNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AgentPool(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists all the agent pools for a specified container registry. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AgentPool" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AgentPool> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AgentPool>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AgentPoolCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _agentPoolsRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AgentPool(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AgentPool>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AgentPoolCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _agentPoolsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AgentPool(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<AgentPool> IEnumerable<AgentPool>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<AgentPool> IAsyncEnumerable<AgentPool>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, AgentPool, AgentPoolData> Construct() { }
    }
}
