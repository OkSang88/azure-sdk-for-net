// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for PacketCapture. </summary>
    public partial class PacketCaptureCollectionMockTests : MockTestBase
    {
        public PacketCaptureCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create packet capture
            var collection = GetArmClient().GetNetworkWatcher(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/nw1")).GetPacketCaptures();
            string packetCaptureName = "pc1";
            Network.Models.PacketCaptureInput parameters = new Network.Models.PacketCaptureInput(target: "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1", storageLocation: new Network.Models.PacketCaptureStorageLocation()
            {
                StorageId = "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Storage/storageAccounts/pcstore",
                StoragePath = "https://mytestaccountname.blob.core.windows.net/capture/pc1.cap",
                FilePath = "D:\\capture\\pc1.cap",
            })
            {
                BytesToCapturePerPacket = 10000,
                TotalBytesPerSession = 100000,
                TimeLimitInSeconds = 100,
            };

            await collection.CreateOrUpdateAsync(packetCaptureName, parameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get packet capture
            var collection = GetArmClient().GetNetworkWatcher(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/nw1")).GetPacketCaptures();
            string packetCaptureName = "pc1";

            await collection.GetAsync(packetCaptureName);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: List packet captures
            var collection = GetArmClient().GetNetworkWatcher(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/nw1")).GetPacketCaptures();

            collection.GetAllAsync();
        }
    }
}
