// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for DedicatedHost. </summary>
    public partial class DedicatedHostCollectionMockTests : MockTestBase
    {
        public DedicatedHostCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create or update a dedicated host .
            string hostName = "myDedicatedHost";
            Compute.DedicatedHostData parameters = new Compute.DedicatedHostData(location: "westus", sku: new Compute.Models.Sku()
            {
                Name = "DSv3-Type1",
            })
            {
                PlatformFaultDomain = 1,
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>()
            {
                ["department"] = "HR",
            });

            var dedicatedHostGroupId = Compute.DedicatedHostGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myDedicatedHostGroup");
            var collection = GetArmClient().GetDedicatedHostGroup(dedicatedHostGroupId).GetDedicatedHosts();
            await collection.CreateOrUpdateAsync(true, hostName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get a dedicated host.
            string hostName = "myHost";
            Compute.Models.InstanceViewTypes? expand = null;

            var dedicatedHostGroupId = Compute.DedicatedHostGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myDedicatedHostGroup");
            var collection = GetArmClient().GetDedicatedHostGroup(dedicatedHostGroupId).GetDedicatedHosts();
            await collection.GetAsync(hostName, expand);
        }
    }
}
