// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.RecoveryServicesSiteRecovery.Models;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery
{
    public partial class Sample_JobResource
    {
        // Gets the job details.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetsTheJobDetails()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationJobs_Get.json
            // this example is just showing the usage of "ReplicationJobs_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this JobResource created on azure
            // for more information of creating JobResource, please refer to the document of JobResource
            string subscriptionId = "c183865e-6077-46f2-a3b1-deb0f4f4650a";
            string resourceGroupName = "resourceGroupPS1";
            string resourceName = "vault1";
            string jobName = "58776d0b-3141-48b2-a377-9ad863eb160d";
            ResourceIdentifier jobResourceId = JobResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, jobName);
            JobResource job = client.GetJobResource(jobResourceId);

            // invoke the operation
            JobResource result = await job.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            JobData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Cancels the specified job.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Cancel_CancelsTheSpecifiedJob()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationJobs_Cancel.json
            // this example is just showing the usage of "ReplicationJobs_Cancel" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this JobResource created on azure
            // for more information of creating JobResource, please refer to the document of JobResource
            string subscriptionId = "c183865e-6077-46f2-a3b1-deb0f4f4650a";
            string resourceGroupName = "resourceGroupPS1";
            string resourceName = "vault1";
            string jobName = "2653c648-fc72-4316-86f3-fdf8eaa0066b";
            ResourceIdentifier jobResourceId = JobResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, jobName);
            JobResource job = client.GetJobResource(jobResourceId);

            // invoke the operation
            ArmOperation<JobResource> lro = await job.CancelAsync(WaitUntil.Completed);
            JobResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            JobData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Restarts the specified job.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Restart_RestartsTheSpecifiedJob()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationJobs_Restart.json
            // this example is just showing the usage of "ReplicationJobs_Restart" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this JobResource created on azure
            // for more information of creating JobResource, please refer to the document of JobResource
            string subscriptionId = "c183865e-6077-46f2-a3b1-deb0f4f4650a";
            string resourceGroupName = "resourceGroupPS1";
            string resourceName = "vault1";
            string jobName = "0664564c-353e-401a-ab0c-722257c10e25";
            ResourceIdentifier jobResourceId = JobResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, jobName);
            JobResource job = client.GetJobResource(jobResourceId);

            // invoke the operation
            ArmOperation<JobResource> lro = await job.RestartAsync(WaitUntil.Completed);
            JobResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            JobData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Resumes the specified job.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Resume_ResumesTheSpecifiedJob()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationJobs_Resume.json
            // this example is just showing the usage of "ReplicationJobs_Resume" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this JobResource created on azure
            // for more information of creating JobResource, please refer to the document of JobResource
            string subscriptionId = "c183865e-6077-46f2-a3b1-deb0f4f4650a";
            string resourceGroupName = "resourceGroupPS1";
            string resourceName = "vault1";
            string jobName = "58776d0b-3141-48b2-a377-9ad863eb160d";
            ResourceIdentifier jobResourceId = JobResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, jobName);
            JobResource job = client.GetJobResource(jobResourceId);

            // invoke the operation
            ResumeJobParams resumeJobParams = new ResumeJobParams()
            {
                ResumeJobParamsComments = " ",
            };
            ArmOperation<JobResource> lro = await job.ResumeAsync(WaitUntil.Completed, resumeJobParams);
            JobResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            JobData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Exports the details of the Azure Site Recovery jobs of the vault.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Export_ExportsTheDetailsOfTheAzureSiteRecoveryJobsOfTheVault()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationJobs_Export.json
            // this example is just showing the usage of "ReplicationJobs_Export" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this JobResource created on azure
            // for more information of creating JobResource, please refer to the document of JobResource
            string subscriptionId = "c183865e-6077-46f2-a3b1-deb0f4f4650a";
            string resourceGroupName = "resourceGroupPS1";
            string resourceName = "vault1";
            ResourceIdentifier jobResourceId = JobResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            JobResource job = client.GetJobResource(jobResourceId);

            // invoke the operation
            JobQueryParameter jobQueryParameter = new JobQueryParameter()
            {
                StartTime = "2017-04-27T14:26:51.9161395Z",
                EndTime = "2017-05-04T14:26:51.9161395Z",
                AffectedObjectTypes = "",
                JobStatus = "",
            };
            ArmOperation<JobResource> lro = await job.ExportAsync(WaitUntil.Completed, jobQueryParameter);
            JobResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            JobData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
