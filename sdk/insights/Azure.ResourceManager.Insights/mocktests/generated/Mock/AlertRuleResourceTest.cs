// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using Insights;
using Insights.Models;

namespace Insights.Tests.Mock
{
    /// <summary> Test for AlertRuleResource. </summary>
    public partial class AlertRuleResourceMockTests : MockTestBase
    {
        public AlertRuleResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get an alert rule
            var alertRuleResourceId = Insights.AlertRuleResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Rac46PostSwapRG", "chiricutin");
            var alertRuleResource = GetArmClient().GetAlertRuleResource(alertRuleResourceId);

            await alertRuleResource.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete an alert rule
            var alertRuleResourceId = Insights.AlertRuleResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Rac46PostSwapRG", "chiricutin");
            var alertRuleResource = GetArmClient().GetAlertRuleResource(alertRuleResourceId);

            await alertRuleResource.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Patch an alert rule
            var alertRuleResourceId = Insights.AlertRuleResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Rac46PostSwapRG", "chiricutin");
            var alertRuleResource = GetArmClient().GetAlertRuleResource(alertRuleResourceId);
            Insights.Models.AlertRuleResourcePatch alertRulesResource = new Insights.Models.AlertRuleResourcePatch()
            {
                Name = "chiricutin",
                Description = "Pura Vida",
                IsEnabled = true,
                Condition = new Insights.Models.ThresholdRuleCondition(operator: Insights.Models.ConditionOperator.GreaterThan,threshold: 3)
{
                WindowSize = TimeSpan.Parse("PT5M"), TimeAggregation = Insights.Models.TimeAggregationOperator.Total, OdataType = "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition", DataSource = new Insights.Models.RuleMetricDataSource()
                {
                    MetricName = "Requests",
                    OdataType = "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
                    ResourceUri = "/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest",
                }, }, };

        await alertRuleResource.UpdateAsync(alertRulesResource);
    }

    [RecordedTest]
    public async Task GetAlertRuleIncident()
    {
        // Example: Get a single alert rule incident
        var alertRuleResourceId = Insights.AlertRuleResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Rac46PostSwapRG", "myRuleName");
        var alertRuleResource = GetArmClient().GetAlertRuleResource(alertRuleResourceId);
        string incidentName = "Website_started";

        await alertRuleResource.GetAlertRuleIncidentAsync(incidentName);
    }

    [RecordedTest]
    public async Task GetAlertRuleIncidents()
    {
        // Example: List alert rule incidents
        var alertRuleResourceId = Insights.AlertRuleResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Rac46PostSwapRG", "myRuleName");
        var alertRuleResource = GetArmClient().GetAlertRuleResource(alertRuleResourceId);

        await foreach (var _ in alertRuleResource.GetAlertRuleIncidentsAsync())
        {
        }
    }
}
}
