// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using Insights;
using Insights.Models;

namespace Insights.Tests.Mock
{
    /// <summary> Test for ActionGroupResource. </summary>
    public partial class ActionGroupResourceMockTests : MockTestBase
    {
        public ActionGroupResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get an action group
            var actionGroupResourceId = Insights.ActionGroupResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-NotificationRules", "SampleActionGroup");
            var actionGroupResource = GetArmClient().GetActionGroupResource(actionGroupResourceId);

            await actionGroupResource.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete an action group
            var actionGroupResourceId = Insights.ActionGroupResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-NotificationRules", "SampleActionGroup");
            var actionGroupResource = GetArmClient().GetActionGroupResource(actionGroupResourceId);

            await actionGroupResource.DeleteAsync();
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Patch an action group
            var actionGroupResourceId = Insights.ActionGroupResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-NotificationRules", "SampleActionGroup");
            var actionGroupResource = GetArmClient().GetActionGroupResource(actionGroupResourceId);
            Insights.Models.ActionGroupPatchBody actionGroupPatch = new Insights.Models.ActionGroupPatchBody()
            {
                Enabled = false,
            };

            await actionGroupResource.UpdateAsync(actionGroupPatch);
        }

        [RecordedTest]
        public async Task EnableReceiver()
        {
            // Example: Enable the receiver
            var actionGroupResourceId = Insights.ActionGroupResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-NotificationRules", "SampleActionGroup");
            var actionGroupResource = GetArmClient().GetActionGroupResource(actionGroupResourceId);
            Insights.Models.EnableRequest enableRequest = new Insights.Models.EnableRequest(receiverName: "John Doe's mobile");

            await actionGroupResource.EnableReceiverAsync(enableRequest);
        }
    }
}
