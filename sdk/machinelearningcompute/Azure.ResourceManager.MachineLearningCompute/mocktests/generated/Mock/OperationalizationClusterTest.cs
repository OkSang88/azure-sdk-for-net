// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.MachineLearningCompute.Tests.Mock;
using Azure.ResourceManager.MachineLearningCompute.Tests.Mock.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.MachineLearningCompute.Tests.Mock.Tests.Mock
{
    /// <summary> Test for OperationalizationCluster. </summary>
    public partial class OperationalizationClusterMockTests : MockTestBase
    {
        public OperationalizationClusterMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: GET Operationalization Cluster
            var operationalizationClusterId = MachineLearningCompute.Tests.Mock.OperationalizationCluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myCluster");
            var operationalizationCluster = GetArmClient().GetOperationalizationCluster(operationalizationClusterId);

            await operationalizationCluster.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: DELETE Operationalization Cluster
            var operationalizationClusterId = MachineLearningCompute.Tests.Mock.OperationalizationCluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myCluster");
            var operationalizationCluster = GetArmClient().GetOperationalizationCluster(operationalizationClusterId);
            bool? deleteAll = null;

            await operationalizationCluster.DeleteAsync(true, deleteAll);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: PATCH Operationalization Cluster
            var operationalizationClusterId = MachineLearningCompute.Tests.Mock.OperationalizationCluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myCluster");
            var operationalizationCluster = GetArmClient().GetOperationalizationCluster(operationalizationClusterId);
            MachineLearningCompute.Tests.Mock.Models.OperationalizationClusterUpdateParameters parameters = new MachineLearningCompute.Tests.Mock.Models.OperationalizationClusterUpdateParameters();

            await operationalizationCluster.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task GetKeys()
        {
            // Example: List Keys of an Operationalization Cluster
            var operationalizationClusterId = MachineLearningCompute.Tests.Mock.OperationalizationCluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myCluster");
            var operationalizationCluster = GetArmClient().GetOperationalizationCluster(operationalizationClusterId);

            await operationalizationCluster.GetKeysAsync();
        }

        [RecordedTest]
        public async Task CheckSystemServicesUpdatesAvailable()
        {
            // Example: Check Update for an Operationalization Cluster
            var operationalizationClusterId = MachineLearningCompute.Tests.Mock.OperationalizationCluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myCluster");
            var operationalizationCluster = GetArmClient().GetOperationalizationCluster(operationalizationClusterId);

            await operationalizationCluster.CheckSystemServicesUpdatesAvailableAsync();
        }

        [RecordedTest]
        public async Task UpdateSystemServices()
        {
            // Example: Update System Services in an Operationalization Cluster
            var operationalizationClusterId = MachineLearningCompute.Tests.Mock.OperationalizationCluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myCluster");
            var operationalizationCluster = GetArmClient().GetOperationalizationCluster(operationalizationClusterId);

            await operationalizationCluster.UpdateSystemServicesAsync(true);
        }
    }
}
