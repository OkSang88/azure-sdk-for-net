// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for GalleryApplication. </summary>
    public partial class GalleryApplicationMockTests : MockTestBase
    {
        public GalleryApplicationMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get a gallery Application.
            var galleryApplicationId = Compute.GalleryApplication.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myGalleryName", "myGalleryApplicationName");
            var galleryApplication = GetArmClient().GetGalleryApplication(galleryApplicationId);

            await galleryApplication.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete a gallery Application.
            var galleryApplicationId = Compute.GalleryApplication.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myGalleryName", "myGalleryApplicationName");
            var galleryApplication = GetArmClient().GetGalleryApplication(galleryApplicationId);

            await galleryApplication.DeleteAsync();
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Update a simple gallery Application.
            var galleryApplicationId = Compute.GalleryApplication.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myGalleryName", "myGalleryApplicationName");
            var galleryApplication = GetArmClient().GetGalleryApplication(galleryApplicationId);
            Compute.Models.GalleryApplicationUpdate galleryApplication2 = new Compute.Models.GalleryApplicationUpdate()
            {
                Description = "This is the gallery application description.",
                Eula = "This is the gallery application EULA.",
                PrivacyStatementUri = "myPrivacyStatementUri}",
                ReleaseNoteUri = "myReleaseNoteUri",
                SupportedOSType = Compute.Models.OperatingSystemTypes.Windows,
            };

            await galleryApplication.UpdateAsync(galleryApplication2);
        }
    }
}
