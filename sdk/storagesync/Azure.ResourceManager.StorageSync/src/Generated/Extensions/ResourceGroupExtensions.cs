// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.StorageSync.Models;

namespace Azure.ResourceManager.StorageSync
{
    /// <summary> A class to add extension methods to ResourceGroup. </summary>
    public static partial class ResourceGroupExtensions
    {
        #region StorageSyncService
        /// <summary> Gets an object representing a StorageSyncServiceCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="StorageSyncServiceCollection" /> object. </returns>
        public static StorageSyncServiceCollection GetStorageSyncServices(this ResourceGroup resourceGroup)
        {
            return new StorageSyncServiceCollection(resourceGroup);
        }
        #endregion

        private static OperationStatusRestOperations GetOperationStatusRestOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, ArmClientOptions clientOptions, Uri endpoint = null, string apiVersion = default)
        {
            return new OperationStatusRestOperations(clientDiagnostics, pipeline, clientOptions, endpoint, apiVersion);
        }

        /// <summary> Get Operation status. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="locationName"> The desired region to obtain information from. </param>
        /// <param name="workflowId"> workflow Id. </param>
        /// <param name="operationId"> operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/>, <paramref name="workflowId"/>, or <paramref name="operationId"/> is null. </exception>
        public static async Task<Response<OperationStatus>> GetOperationStatuAsync(this ResourceGroup resourceGroup, string locationName, string workflowId, string operationId, CancellationToken cancellationToken = default)
        {
            if (locationName == null)
            {
                throw new ArgumentNullException(nameof(locationName));
            }
            if (workflowId == null)
            {
                throw new ArgumentNullException(nameof(workflowId));
            }
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }

            return await resourceGroup.UseClientContext(async (baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.GetOperationStatu");
                scope.Start();
                try
                {
                    OperationStatusRestOperations restOperations = GetOperationStatusRestOperations(clientDiagnostics, pipeline, options, baseUri);
                    var response = await restOperations.GetAsync(resourceGroup.Id.SubscriptionId, resourceGroup.Id.ResourceGroupName, locationName, workflowId, operationId, cancellationToken).ConfigureAwait(false);
                    return response;
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            ).ConfigureAwait(false);
        }

        /// <summary> Get Operation status. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="locationName"> The desired region to obtain information from. </param>
        /// <param name="workflowId"> workflow Id. </param>
        /// <param name="operationId"> operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/>, <paramref name="workflowId"/>, or <paramref name="operationId"/> is null. </exception>
        public static Response<OperationStatus> GetOperationStatu(this ResourceGroup resourceGroup, string locationName, string workflowId, string operationId, CancellationToken cancellationToken = default)
        {
            if (locationName == null)
            {
                throw new ArgumentNullException(nameof(locationName));
            }
            if (workflowId == null)
            {
                throw new ArgumentNullException(nameof(workflowId));
            }
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }

            return resourceGroup.UseClientContext((baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.GetOperationStatu");
                scope.Start();
                try
                {
                    OperationStatusRestOperations restOperations = GetOperationStatusRestOperations(clientDiagnostics, pipeline, options, baseUri);
                    var response = restOperations.Get(resourceGroup.Id.SubscriptionId, resourceGroup.Id.ResourceGroupName, locationName, workflowId, operationId, cancellationToken);
                    return response;
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            );
        }
    }
}
