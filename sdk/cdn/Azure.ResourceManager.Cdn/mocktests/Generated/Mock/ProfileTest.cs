// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Cdn.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Cdn.Tests.Mock
{
    /// <summary> Test for Profile. </summary>
    public partial class ProfileMockTests : MockTestBase
    {
        public ProfileMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Profiles_Get
            var profile = GetArmClient().GetProfile(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1"));

            await profile.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: Profiles_Delete
            var profile = GetArmClient().GetProfile(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1"));

            await profile.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: Profiles_Update
            var profile = GetArmClient().GetProfile(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1"));
            Cdn.Models.ProfileUpdateOptions profileUpdateParameters = new Cdn.Models.ProfileUpdateOptions();

            await profile.UpdateAsync(profileUpdateParameters);
        }

        [RecordedTest]
        public async Task GenerateSsoUriAsync()
        {
            // Example: Profiles_GenerateSsoUri
            var profile = GetArmClient().GetProfile(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1"));

            await profile.GenerateSsoUriAsync();
        }

        [RecordedTest]
        public async Task GetSupportedOptimizationTypesAsync()
        {
            // Example: Profiles_ListSupportedOptimizationTypes
            var profile = GetArmClient().GetProfile(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1"));

            await profile.GetSupportedOptimizationTypesAsync();
        }

        [RecordedTest]
        public void GetResourceUsageAsync()
        {
            // Example: Profiles_ListResourceUsage
            var profile = GetArmClient().GetProfile(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1"));

            profile.GetResourceUsageAsync();
        }

        [RecordedTest]
        public void GetResourceUsageAfdProfilesAsync()
        {
            // Example: AFDProfiles_ListResourceUsage
            var profile = GetArmClient().GetProfile(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1"));

            profile.GetResourceUsageAfdProfilesAsync();
        }

        [RecordedTest]
        public async Task GetLogAnalyticsMetricsAfdProfileAsync()
        {
            // Example: LogAnalytics_GetLogAnalyticsMetrics
            var profile = GetArmClient().GetProfile(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1"));
            IEnumerable<Cdn.Models.LogMetric> metrics = new List<Cdn.Models.LogMetric>()
            {
            };
            DateTimeOffset dateTimeBegin = DateTimeOffset.Parse("2020-11-04T04:30:00.000Z");
            DateTimeOffset dateTimeEnd = DateTimeOffset.Parse("2020-11-04T05:00:00.000Z");
            Cdn.Models.LogMetricsGranularity granularity = new Cdn.Models.LogMetricsGranularity("PT5M");
            IEnumerable<string> customDomains = new List<string>()
{
"customdomain1.azurecdn.net","customdomain2.azurecdn.net",};
            IEnumerable<string> protocols = new List<string>()
{
"https",};
            IEnumerable<Cdn.Models.LogMetricsGroupBy> groupBy = new List<Cdn.Models.LogMetricsGroupBy>()
            {
            };
            IEnumerable<string> continents = null;
            IEnumerable<string> countryOrRegions = null;

            await profile.GetLogAnalyticsMetricsAfdProfileAsync(metrics, dateTimeBegin, dateTimeEnd, granularity, customDomains, protocols, groupBy, continents, countryOrRegions);
        }

        [RecordedTest]
        public async Task GetLogAnalyticsRankingsAfdProfileAsync()
        {
            // Example: LogAnalytics_GetLogAnalyticsRankings
            var profile = GetArmClient().GetProfile(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1"));
            IEnumerable<Cdn.Models.LogRanking> rankings = new List<Cdn.Models.LogRanking>()
            {
            };
            IEnumerable<Cdn.Models.LogRankingMetric> metrics = new List<Cdn.Models.LogRankingMetric>()
            {
            };
            int maxRanking = 5;
            DateTimeOffset dateTimeBegin = DateTimeOffset.Parse("2020-11-04T06:49:27.554Z");
            DateTimeOffset dateTimeEnd = DateTimeOffset.Parse("2020-11-04T09:49:27.554Z");
            IEnumerable<string> customDomains = null;

            await profile.GetLogAnalyticsRankingsAfdProfileAsync(rankings, metrics, maxRanking, dateTimeBegin, dateTimeEnd, customDomains);
        }

        [RecordedTest]
        public async Task GetLogAnalyticsLocationsAfdProfileAsync()
        {
            // Example: LogAnalytics_GetLogAnalyticsLocations
            var profile = GetArmClient().GetProfile(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1"));

            await profile.GetLogAnalyticsLocationsAfdProfileAsync();
        }

        [RecordedTest]
        public async Task GetLogAnalyticsResourcesAfdProfileAsync()
        {
            // Example: LogAnalytics_GetLogAnalyticsResources
            var profile = GetArmClient().GetProfile(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1"));

            await profile.GetLogAnalyticsResourcesAfdProfileAsync();
        }

        [RecordedTest]
        public async Task GetWafLogAnalyticsMetricsAfdProfileAsync()
        {
            // Example: LogAnalytics_GetWafLogAnalyticsMetrics
            var profile = GetArmClient().GetProfile(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1"));
            IEnumerable<Cdn.Models.WafMetric> metrics = new List<Cdn.Models.WafMetric>()
            {
            };
            DateTimeOffset dateTimeBegin = DateTimeOffset.Parse("2020-11-04T06:49:27.554Z");
            DateTimeOffset dateTimeEnd = DateTimeOffset.Parse("2020-11-04T09:49:27.554Z");
            Cdn.Models.WafGranularity granularity = new Cdn.Models.WafGranularity("PT5M");
            IEnumerable<Cdn.Models.WafAction> actions = new List<Cdn.Models.WafAction>()
{
new Cdn.Models.WafAction("block"),new Cdn.Models.WafAction("log"),};
            IEnumerable<Cdn.Models.WafRankingGroupBy> groupBy = null;
            IEnumerable<Cdn.Models.WafRuleType> ruleTypes = null;

            await profile.GetWafLogAnalyticsMetricsAfdProfileAsync(metrics, dateTimeBegin, dateTimeEnd, granularity, actions, groupBy, ruleTypes);
        }

        [RecordedTest]
        public async Task GetWafLogAnalyticsRankingsAfdProfileAsync()
        {
            // Example: LogAnalytics_GetWafLogAnalyticsRankings
            var profile = GetArmClient().GetProfile(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1"));
            IEnumerable<Cdn.Models.WafMetric> metrics = new List<Cdn.Models.WafMetric>()
            {
            };
            DateTimeOffset dateTimeBegin = DateTimeOffset.Parse("2020-11-04T06:49:27.554Z");
            DateTimeOffset dateTimeEnd = DateTimeOffset.Parse("2020-11-04T09:49:27.554Z");
            int maxRanking = 5;
            IEnumerable<Cdn.Models.WafRankingType> rankings = new List<Cdn.Models.WafRankingType>()
            {
            };
            IEnumerable<Cdn.Models.WafAction> actions = null;
            IEnumerable<Cdn.Models.WafRuleType> ruleTypes = null;

            await profile.GetWafLogAnalyticsRankingsAfdProfileAsync(metrics, dateTimeBegin, dateTimeEnd, maxRanking, rankings, actions, ruleTypes);
        }
    }
}
