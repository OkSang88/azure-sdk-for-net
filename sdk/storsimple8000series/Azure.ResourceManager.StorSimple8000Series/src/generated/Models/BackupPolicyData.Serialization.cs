// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using StorSimple8000SeriesManagementClient.Models;

namespace StorSimple8000SeriesManagementClient
{
    public partial class BackupPolicyData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind");
                writer.WriteStringValue(Kind);
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            writer.WritePropertyName("volumeIds");
            writer.WriteStartArray();
            foreach (var item in VolumeIds)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static BackupPolicyData DeserializeBackupPolicyData(JsonElement element)
        {
            Optional<string> kind = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            IList<string> volumeIds = default;
            Optional<DateTimeOffset> nextBackupTime = default;
            Optional<DateTimeOffset> lastBackupTime = default;
            Optional<long> schedulesCount = default;
            Optional<ScheduledBackupStatus> scheduledBackupStatus = default;
            Optional<BackupPolicyCreationType> backupPolicyCreationType = default;
            Optional<string> ssmHostName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("volumeIds"))
                        {
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            volumeIds = array;
                            continue;
                        }
                        if (property0.NameEquals("nextBackupTime"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            nextBackupTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("lastBackupTime"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            lastBackupTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("schedulesCount"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            schedulesCount = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("scheduledBackupStatus"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            scheduledBackupStatus = property0.Value.GetString().ToScheduledBackupStatus();
                            continue;
                        }
                        if (property0.NameEquals("backupPolicyCreationType"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            backupPolicyCreationType = property0.Value.GetString().ToBackupPolicyCreationType();
                            continue;
                        }
                        if (property0.NameEquals("ssmHostName"))
                        {
                            ssmHostName = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new BackupPolicyData(id, name, type, kind.Value, volumeIds, Optional.ToNullable(nextBackupTime), Optional.ToNullable(lastBackupTime), Optional.ToNullable(schedulesCount), Optional.ToNullable(scheduledBackupStatus), Optional.ToNullable(backupPolicyCreationType), ssmHostName.Value);
        }
    }
}
