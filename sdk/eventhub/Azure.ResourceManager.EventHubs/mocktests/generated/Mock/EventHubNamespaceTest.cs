// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.EventHubs;
using Azure.ResourceManager.EventHubs.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.EventHubs.Tests.Mock
{
    /// <summary> Test for EventHubNamespace. </summary>
    public partial class EventHubNamespaceMockTests : MockTestBase
    {
        public EventHubNamespaceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: NameSpaceGet
            var eventHubNamespace = GetArmClient().GetEventHubNamespace(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ResurceGroupSample/providers/Microsoft.EventHub/namespaces/NamespaceSample"));

            await eventHubNamespace.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: NameSpaceDelete
            var eventHubNamespace = GetArmClient().GetEventHubNamespace(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ResurceGroupSample/providers/Microsoft.EventHub/namespaces/NamespaceSample"));

            await eventHubNamespace.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: NamespacesUpdate
            var eventHubNamespace = GetArmClient().GetEventHubNamespace(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ResurceGroupSample/providers/Microsoft.EventHub/namespaces/NamespaceSample"));
            EventHubs.EventHubNamespaceData parameters = new EventHubs.EventHubNamespaceData(location: "East US")
            {
                Identity = new ResourceIdentity(),
            };

            await eventHubNamespace.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task GetPrivateLinkResourcesAsync()
        {
            // Example: NameSpacePrivateLinkResourcesGet
            var eventHubNamespace = GetArmClient().GetEventHubNamespace(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ArunMonocle/providers/Microsoft.EventHub/namespaces/sdk-Namespace-2924"));

            await eventHubNamespace.GetPrivateLinkResourcesAsync();
        }

        [RecordedTest]
        public async Task CheckNameAvailabilityDisasterRecoveryConfigAsync()
        {
            // Example: NamespacesCheckNameAvailability
            var eventHubNamespace = GetArmClient().GetEventHubNamespace(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/exampleResourceGroup/providers/Microsoft.EventHub/namespaces/sdk-Namespace-9080"));
            EventHubs.Models.CheckNameAvailabilityOptions parameters = new EventHubs.Models.CheckNameAvailabilityOptions(name: "sdk-DisasterRecovery-9474");

            await eventHubNamespace.CheckNameAvailabilityDisasterRecoveryConfigAsync(parameters);
        }

        [RecordedTest]
        public async Task NetworkRuleSetGetAsync()
        {
            // Example: NameSpaceNetworkRuleSetGet
            var networkRuleSet = GetArmClient().GetNetworkRuleSet(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ResourceGroup/providers/Microsoft.EventHub/namespaces/sdk-Namespace-6019/networkRuleSets/default"));

            await networkRuleSet.GetAsync();
        }
    }
}
