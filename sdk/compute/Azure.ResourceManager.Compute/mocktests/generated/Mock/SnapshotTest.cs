// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for Snapshot. </summary>
    public partial class SnapshotMockTests : MockTestBase
    {
        public SnapshotMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get information about a snapshot.
            var snapshot = GetArmClient().GetSnapshot(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"));

            await snapshot.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: Delete a snapshot.
            var snapshot = GetArmClient().GetSnapshot(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"));

            await snapshot.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: Update a snapshot.
            var snapshot = GetArmClient().GetSnapshot(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"));
            Compute.Models.SnapshotUpdate snapshot2 = new Compute.Models.SnapshotUpdate()
            {
                DiskSizeGB = 20,
            };

            await snapshot.UpdateAsync(snapshot2);
        }

        [RecordedTest]
        public async Task GrantAccessAsync()
        {
            // Example: Get a sas on a snapshot.
            var snapshot = GetArmClient().GetSnapshot(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"));
            Compute.Models.GrantAccessData grantAccessData = new Compute.Models.GrantAccessData(access: new Compute.Models.AccessLevel("Read"), durationInSeconds: 300);

            await snapshot.GrantAccessAsync(grantAccessData);
        }

        [RecordedTest]
        public async Task RevokeAccessAsync()
        {
            // Example: Revoke access to a snapshot.
            var snapshot = GetArmClient().GetSnapshot(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"));

            await snapshot.RevokeAccessAsync();
        }
    }
}
