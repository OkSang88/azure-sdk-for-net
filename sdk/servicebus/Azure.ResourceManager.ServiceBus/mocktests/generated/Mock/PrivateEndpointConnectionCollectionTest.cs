// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.ServiceBus;
using Azure.ResourceManager.ServiceBus.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.ServiceBus.Tests.Mock
{
    /// <summary> Test for PrivateEndpointConnection. </summary>
    public partial class PrivateEndpointConnectionCollectionMockTests : MockTestBase
    {
        public PrivateEndpointConnectionCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: NameSpacePrivateEndPointConnectionCreate
            var collection = GetArmClient().GetServiceBusNamespace(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ArunMonocle/providers/Microsoft.ServiceBus/namespaces/sdk-Namespace-2924")).GetPrivateEndpointConnections();
            string privateEndpointConnectionName = "privateEndpointConnectionName";
            ServiceBus.PrivateEndpointConnectionData parameters = new ServiceBus.PrivateEndpointConnectionData()
            {
                PrivateEndpoint = new WritableSubResource()
                {
                    Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SDK-ServiceBus-8396/providers/Microsoft.Network/privateEndpoints/sdk-Namespace-2847"),
                },
                PrivateLinkServiceConnectionState = new ServiceBus.Models.ConnectionState()
                {
                    Status = new ServiceBus.Models.PrivateLinkConnectionStatus("Rejected"),
                    Description = "testing",
                },
                ProvisioningState = new ServiceBus.Models.EndpointProvisioningState("Succeeded"),
            };

            await collection.CreateOrUpdateAsync(privateEndpointConnectionName, parameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: NameSpacePrivateEndPointConnectionGet
            var collection = GetArmClient().GetServiceBusNamespace(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SDK-ServiceBus-4794/providers/Microsoft.ServiceBus/namespaces/sdk-Namespace-5828")).GetPrivateEndpointConnections();
            string privateEndpointConnectionName = "privateEndpointConnectionName";

            await collection.GetAsync(privateEndpointConnectionName);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: NameSpaceCreate
            var collection = GetArmClient().GetServiceBusNamespace(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SDK-ServiceBus-4794/providers/Microsoft.ServiceBus/namespaces/sdk-Namespace-5828")).GetPrivateEndpointConnections();

            collection.GetAllAsync();
        }
    }
}
