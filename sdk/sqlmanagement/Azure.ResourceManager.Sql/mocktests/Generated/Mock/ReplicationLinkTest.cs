// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for ReplicationLink. </summary>
    public partial class ReplicationLinkMockTests : MockTestBase
    {
        public ReplicationLinkMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Gets the replication link.
            var replicationLinkId = Sql.ReplicationLink.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default", "sourcesvr", "gamma-db", "4891ca10-ebd0-47d7-9182-c722651780fb");
            var replicationLink = GetArmClient().GetReplicationLink(replicationLinkId);

            await replicationLink.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete a replication link
            var replicationLinkId = Sql.ReplicationLink.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-4799", "sqlcrudtest-6440", "testdb", "5b301b68-03f6-4b26-b0f4-73ebb8634238");
            var replicationLink = GetArmClient().GetReplicationLink(replicationLinkId);

            await replicationLink.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Failover()
        {
            // Example: Failover a replication link
            var replicationLinkId = Sql.ReplicationLink.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-8931", "sqlcrudtest-2137", "testdb", "f0550bf5-07ce-4270-8e4b-71737975973a");
            var replicationLink = GetArmClient().GetReplicationLink(replicationLinkId);

            await replicationLink.FailoverAsync(true);
        }

        [RecordedTest]
        public async Task FailoverAllowDataLoss()
        {
            // Example: Failover a replication link
            var replicationLinkId = Sql.ReplicationLink.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-8931", "sqlcrudtest-2137", "testdb", "f0550bf5-07ce-4270-8e4b-71737975973a");
            var replicationLink = GetArmClient().GetReplicationLink(replicationLinkId);

            await replicationLink.FailoverAllowDataLossAsync(true);
        }

        [RecordedTest]
        public async Task Unlink()
        {
            // Example: Delete replication link
            var replicationLinkId = Sql.ReplicationLink.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-8931", "sqlcrudtest-2137", "testdb", "f0550bf5-07ce-4270-8e4b-71737975973a");
            var replicationLink = GetArmClient().GetReplicationLink(replicationLinkId);
            Sql.Models.UnlinkOptions parameters = new Sql.Models.UnlinkOptions()
            {
                ForcedTermination = true,
            };

            await replicationLink.UnlinkAsync(true, parameters);
        }
    }
}
