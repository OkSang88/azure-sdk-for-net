// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.EnergyServices;
using Azure.ResourceManager.EnergyServices.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.EnergyServices.Samples
{
    public partial class Sample_EnergyServiceResource
    {
        // OepResource_ListBySubscriptionId
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetEnergyServices_OepResourceListBySubscriptionId()
        {
            // Generated from example definition: specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2022-04-04-preview/examples/OepResource_ListBySubscriptionId.json
            // this example is just showing the usage of "EnergyServices_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "0000000-0000-0000-0000-000000000001";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (EnergyServiceResource item in subscriptionResource.GetEnergyServicesAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EnergyServiceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // OepResource_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_OepResourceGet()
        {
            // Generated from example definition: specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2022-04-04-preview/examples/OepResource_Get.json
            // this example is just showing the usage of "EnergyServices_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnergyServiceResource created on azure
            // for more information of creating EnergyServiceResource, please refer to the document of EnergyServiceResource
            string subscriptionId = "0000000-0000-0000-0000-000000000001";
            string resourceGroupName = "DummyResourceGroupName";
            string resourceName = "DummyResourceName";
            ResourceIdentifier energyServiceResourceId = EnergyServiceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            EnergyServiceResource energyService = client.GetEnergyServiceResource(energyServiceResourceId);

            // invoke the operation
            EnergyServiceResource result = await energyService.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EnergyServiceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // OepResource_Update
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_OepResourceUpdate()
        {
            // Generated from example definition: specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2022-04-04-preview/examples/OepResource_Update.json
            // this example is just showing the usage of "EnergyServices_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnergyServiceResource created on azure
            // for more information of creating EnergyServiceResource, please refer to the document of EnergyServiceResource
            string subscriptionId = "0000000-0000-0000-0000-000000000001";
            string resourceGroupName = "DummyResourceGroupName";
            string resourceName = "DummyResourceName";
            ResourceIdentifier energyServiceResourceId = EnergyServiceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            EnergyServiceResource energyService = client.GetEnergyServiceResource(energyServiceResourceId);

            // invoke the operation
            EnergyServicePatch patch = new EnergyServicePatch();
            EnergyServiceResource result = await energyService.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EnergyServiceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // OepResource_Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_OepResourceDelete()
        {
            // Generated from example definition: specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2022-04-04-preview/examples/OepResource_Delete.json
            // this example is just showing the usage of "EnergyServices_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnergyServiceResource created on azure
            // for more information of creating EnergyServiceResource, please refer to the document of EnergyServiceResource
            string subscriptionId = "0000000-0000-0000-0000-000000000001";
            string resourceGroupName = "DummyResourceGroupName";
            string resourceName = "DummyResourceName";
            ResourceIdentifier energyServiceResourceId = EnergyServiceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            EnergyServiceResource energyService = client.GetEnergyServiceResource(energyServiceResourceId);

            // invoke the operation
            await energyService.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // EnergyServices_AddPartition_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task AddPartition_EnergyServicesAddPartitionMaximumSetGen()
        {
            // Generated from example definition: specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2022-04-04-preview/examples/EnergyServices_AddPartition_MaximumSet_Gen.json
            // this example is just showing the usage of "EnergyServices_AddPartition" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnergyServiceResource created on azure
            // for more information of creating EnergyServiceResource, please refer to the document of EnergyServiceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgoep";
            string resourceName = "a";
            ResourceIdentifier energyServiceResourceId = EnergyServiceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            EnergyServiceResource energyService = client.GetEnergyServiceResource(energyServiceResourceId);

            // invoke the operation
            DataPartitionAddOrRemoveContent content = new DataPartitionAddOrRemoveContent()
            {
                Name = "aaaaaaaaaaaaaaaaaa",
            };
            ArmOperation<DataPartitionAddOrRemoveContent> lro = await energyService.AddPartitionAsync(WaitUntil.Completed, content: content);
            DataPartitionAddOrRemoveContent result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // EnergyServices_RemovePartition_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task RemovePartition_EnergyServicesRemovePartitionMaximumSetGen()
        {
            // Generated from example definition: specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2022-04-04-preview/examples/EnergyServices_RemovePartition_MaximumSet_Gen.json
            // this example is just showing the usage of "EnergyServices_RemovePartition" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnergyServiceResource created on azure
            // for more information of creating EnergyServiceResource, please refer to the document of EnergyServiceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgoep";
            string resourceName = "aaaaaaa";
            ResourceIdentifier energyServiceResourceId = EnergyServiceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            EnergyServiceResource energyService = client.GetEnergyServiceResource(energyServiceResourceId);

            // invoke the operation
            DataPartitionAddOrRemoveContent content = new DataPartitionAddOrRemoveContent()
            {
                Name = "aaaaaaaaaaaaaaaaaa",
            };
            ArmOperation<DataPartitionAddOrRemoveContent> lro = await energyService.RemovePartitionAsync(WaitUntil.Completed, content: content);
            DataPartitionAddOrRemoveContent result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // EnergyServices_ListPartitions_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetPartitions_EnergyServicesListPartitionsMaximumSetGen()
        {
            // Generated from example definition: specification/oep/resource-manager/Microsoft.OpenEnergyPlatform/preview/2022-04-04-preview/examples/EnergyServices_ListPartitions_MaximumSet_Gen.json
            // this example is just showing the usage of "EnergyServices_ListPartitions" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnergyServiceResource created on azure
            // for more information of creating EnergyServiceResource, please refer to the document of EnergyServiceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgoep";
            string resourceName = "aaaaaaaaaaaaaaaaaaa";
            ResourceIdentifier energyServiceResourceId = EnergyServiceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            EnergyServiceResource energyService = client.GetEnergyServiceResource(energyServiceResourceId);

            // invoke the operation
            DataPartitionsListResult result = await energyService.GetPartitionsAsync();

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
