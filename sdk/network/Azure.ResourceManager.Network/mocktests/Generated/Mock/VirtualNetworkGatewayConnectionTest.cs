// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for VirtualNetworkGatewayConnection. </summary>
    public partial class VirtualNetworkGatewayConnectionMockTests : MockTestBase
    {
        public VirtualNetworkGatewayConnectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: GetVirtualNetworkGatewayConnection
            var virtualNetworkGatewayConnectionId = Network.VirtualNetworkGatewayConnection.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "connS2S");
            var virtualNetworkGatewayConnection = GetArmClient().GetVirtualNetworkGatewayConnection(virtualNetworkGatewayConnectionId);

            await virtualNetworkGatewayConnection.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: DeleteVirtualNetworkGatewayConnection
            var virtualNetworkGatewayConnectionId = Network.VirtualNetworkGatewayConnection.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "conn1");
            var virtualNetworkGatewayConnection = GetArmClient().GetVirtualNetworkGatewayConnection(virtualNetworkGatewayConnectionId);

            await virtualNetworkGatewayConnection.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: UpdateVirtualNetworkGatewayConnectionTags
            var virtualNetworkGatewayConnectionId = Network.VirtualNetworkGatewayConnection.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "test");
            var virtualNetworkGatewayConnection = GetArmClient().GetVirtualNetworkGatewayConnection(virtualNetworkGatewayConnectionId);
            Network.Models.TagsObject parameters = new Network.Models.TagsObject();

            await virtualNetworkGatewayConnection.UpdateAsync(true, parameters);
        }

        [RecordedTest]
        public async Task VpnDeviceConfigurationScript()
        {
            // Example: GetVPNDeviceConfigurationScript
            var virtualNetworkGatewayConnectionId = Network.VirtualNetworkGatewayConnection.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "vpngw");
            var virtualNetworkGatewayConnection = GetArmClient().GetVirtualNetworkGatewayConnection(virtualNetworkGatewayConnectionId);
            Network.Models.VpnDeviceScriptParameters parameters = new Network.Models.VpnDeviceScriptParameters()
            {
                Vendor = "Cisco",
                DeviceFamily = "ISR",
                FirmwareVersion = "IOS 15.1 (Preview)",
            };

            await virtualNetworkGatewayConnection.VpnDeviceConfigurationScriptAsync(parameters);
        }

        [RecordedTest]
        public async Task SetSharedKey()
        {
            // Example: SetVirtualNetworkGatewayConnectionSharedKey
            var virtualNetworkGatewayConnectionId = Network.VirtualNetworkGatewayConnection.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "connS2S");
            var virtualNetworkGatewayConnection = GetArmClient().GetVirtualNetworkGatewayConnection(virtualNetworkGatewayConnectionId);
            Network.Models.ConnectionSharedKey parameters = new Network.Models.ConnectionSharedKey(value: "AzureAbc123");

            await virtualNetworkGatewayConnection.SetSharedKeyAsync(true, parameters);
        }

        [RecordedTest]
        public async Task GetSharedKey()
        {
            // Example: GetVirtualNetworkGatewayConnectionSharedKey
            var virtualNetworkGatewayConnectionId = Network.VirtualNetworkGatewayConnection.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "connS2S");
            var virtualNetworkGatewayConnection = GetArmClient().GetVirtualNetworkGatewayConnection(virtualNetworkGatewayConnectionId);

            await virtualNetworkGatewayConnection.GetSharedKeyAsync();
        }

        [RecordedTest]
        public async Task ResetSharedKey()
        {
            // Example: ResetVirtualNetworkGatewayConnectionSharedKey
            var virtualNetworkGatewayConnectionId = Network.VirtualNetworkGatewayConnection.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "conn1");
            var virtualNetworkGatewayConnection = GetArmClient().GetVirtualNetworkGatewayConnection(virtualNetworkGatewayConnectionId);
            Network.Models.ConnectionResetSharedKey parameters = new Network.Models.ConnectionResetSharedKey(keyLength: 128);

            await virtualNetworkGatewayConnection.ResetSharedKeyAsync(true, parameters);
        }

        [RecordedTest]
        public async Task StartPacketCapture()
        {
            // Example: Start packet capture on virtual network gateway connection with filter
            var virtualNetworkGatewayConnectionId = Network.VirtualNetworkGatewayConnection.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "vpngwcn1");
            var virtualNetworkGatewayConnection = GetArmClient().GetVirtualNetworkGatewayConnection(virtualNetworkGatewayConnectionId);
            Network.Models.VpnPacketCaptureStartParameters parameters = new Network.Models.VpnPacketCaptureStartParameters()
            {
                FilterData = "{'TracingFlags': 11,'MaxPacketBufferSize': 120,'MaxFileSize': 200,'Filters': [{'SourceSubnets': ['20.1.1.0/24'],'DestinationSubnets': ['10.1.1.0/24'],'SourcePort': [500],'DestinationPort': [4500],'Protocol': 6,'TcpFlags': 16,'CaptureSingleDirectionTrafficOnly': true}]}",
            };

            await virtualNetworkGatewayConnection.StartPacketCaptureAsync(true, parameters);
        }

        [RecordedTest]
        public async Task StartPacketCapture2()
        {
            // Example: Start packet capture on virtual network gateway connection without filter
            var virtualNetworkGatewayConnectionId = Network.VirtualNetworkGatewayConnection.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "vpngwcn1");
            var virtualNetworkGatewayConnection = GetArmClient().GetVirtualNetworkGatewayConnection(virtualNetworkGatewayConnectionId);
            Network.Models.VpnPacketCaptureStartParameters parameters = null;

            await virtualNetworkGatewayConnection.StartPacketCaptureAsync(true, parameters);
        }

        [RecordedTest]
        public async Task StopPacketCapture()
        {
            // Example: Stop packet capture on virtual network gateway connection
            var virtualNetworkGatewayConnectionId = Network.VirtualNetworkGatewayConnection.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "vpngwcn1");
            var virtualNetworkGatewayConnection = GetArmClient().GetVirtualNetworkGatewayConnection(virtualNetworkGatewayConnectionId);
            Network.Models.VpnPacketCaptureStopParameters parameters = new Network.Models.VpnPacketCaptureStopParameters()
            {
                SasUrl = "https://teststorage.blob.core.windows.net/?sv=2018-03-28&ss=bfqt&srt=sco&sp=rwdlacup&se=2019-09-13T07:44:05Z&st=2019-09-06T23:44:05Z&spr=https&sig=V1h9D1riltvZMI69d6ihENnFo%2FrCvTqGgjO2lf%2FVBhE%3D",
            };

            await virtualNetworkGatewayConnection.StopPacketCaptureAsync(true, parameters);
        }

        [RecordedTest]
        public async Task GetIkeSas()
        {
            // Example: GetVirtualNetworkGatewayConnectionIkeSa
            var virtualNetworkGatewayConnectionId = Network.VirtualNetworkGatewayConnection.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "vpngwcn1");
            var virtualNetworkGatewayConnection = GetArmClient().GetVirtualNetworkGatewayConnection(virtualNetworkGatewayConnectionId);

            await virtualNetworkGatewayConnection.GetIkeSasAsync(true);
        }

        [RecordedTest]
        public async Task ResetConnection()
        {
            // Example: ResetVirtualNetworkGatewayConnection
            var virtualNetworkGatewayConnectionId = Network.VirtualNetworkGatewayConnection.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "conn1");
            var virtualNetworkGatewayConnection = GetArmClient().GetVirtualNetworkGatewayConnection(virtualNetworkGatewayConnectionId);

            await virtualNetworkGatewayConnection.ResetConnectionAsync(true);
        }
    }
}
