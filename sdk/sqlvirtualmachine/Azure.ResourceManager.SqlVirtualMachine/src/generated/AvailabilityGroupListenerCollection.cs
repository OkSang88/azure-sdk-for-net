// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using SqlVirtualMachineManagementClient.Models;

namespace SqlVirtualMachineManagementClient
{
    /// <summary> A class representing collection of AvailabilityGroupListener and their operations over its parent. </summary>
    public partial class AvailabilityGroupListenerCollection : ArmCollection, IEnumerable<AvailabilityGroupListener>, IAsyncEnumerable<AvailabilityGroupListener>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly AvailabilityGroupListenersRestOperations _availabilityGroupListenersRestClient;

        /// <summary> Initializes a new instance of the <see cref="AvailabilityGroupListenerCollection"/> class for mocking. </summary>
        protected AvailabilityGroupListenerCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="AvailabilityGroupListenerCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal AvailabilityGroupListenerCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _availabilityGroupListenersRestClient = new AvailabilityGroupListenersRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SqlVirtualMachineGroup.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SqlVirtualMachineGroup.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Creates or updates an availability group listener. </summary>
        /// <param name="availabilityGroupListenerName"> Name of the availability group listener. </param>
        /// <param name="parameters"> The availability group listener. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="availabilityGroupListenerName"/> or <paramref name="parameters"/> is null. </exception>
        public virtual AvailabilityGroupListenerCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string availabilityGroupListenerName, AvailabilityGroupListenerData parameters, CancellationToken cancellationToken = default)
        {
            if (availabilityGroupListenerName == null)
            {
                throw new ArgumentNullException(nameof(availabilityGroupListenerName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("AvailabilityGroupListenerCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _availabilityGroupListenersRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, availabilityGroupListenerName, parameters, cancellationToken);
                var operation = new AvailabilityGroupListenerCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _availabilityGroupListenersRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, availabilityGroupListenerName, parameters).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates an availability group listener. </summary>
        /// <param name="availabilityGroupListenerName"> Name of the availability group listener. </param>
        /// <param name="parameters"> The availability group listener. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="availabilityGroupListenerName"/> or <paramref name="parameters"/> is null. </exception>
        public async virtual Task<AvailabilityGroupListenerCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string availabilityGroupListenerName, AvailabilityGroupListenerData parameters, CancellationToken cancellationToken = default)
        {
            if (availabilityGroupListenerName == null)
            {
                throw new ArgumentNullException(nameof(availabilityGroupListenerName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("AvailabilityGroupListenerCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _availabilityGroupListenersRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, availabilityGroupListenerName, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new AvailabilityGroupListenerCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _availabilityGroupListenersRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, availabilityGroupListenerName, parameters).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets an availability group listener. </summary>
        /// <param name="availabilityGroupListenerName"> Name of the availability group listener. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="availabilityGroupListenerName"/> is null. </exception>
        public virtual Response<AvailabilityGroupListener> Get(string availabilityGroupListenerName, CancellationToken cancellationToken = default)
        {
            if (availabilityGroupListenerName == null)
            {
                throw new ArgumentNullException(nameof(availabilityGroupListenerName));
            }

            using var scope = _clientDiagnostics.CreateScope("AvailabilityGroupListenerCollection.Get");
            scope.Start();
            try
            {
                var response = _availabilityGroupListenersRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, availabilityGroupListenerName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AvailabilityGroupListener(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets an availability group listener. </summary>
        /// <param name="availabilityGroupListenerName"> Name of the availability group listener. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="availabilityGroupListenerName"/> is null. </exception>
        public async virtual Task<Response<AvailabilityGroupListener>> GetAsync(string availabilityGroupListenerName, CancellationToken cancellationToken = default)
        {
            if (availabilityGroupListenerName == null)
            {
                throw new ArgumentNullException(nameof(availabilityGroupListenerName));
            }

            using var scope = _clientDiagnostics.CreateScope("AvailabilityGroupListenerCollection.Get");
            scope.Start();
            try
            {
                var response = await _availabilityGroupListenersRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, availabilityGroupListenerName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new AvailabilityGroupListener(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="availabilityGroupListenerName"> Name of the availability group listener. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="availabilityGroupListenerName"/> is null. </exception>
        public virtual Response<AvailabilityGroupListener> GetIfExists(string availabilityGroupListenerName, CancellationToken cancellationToken = default)
        {
            if (availabilityGroupListenerName == null)
            {
                throw new ArgumentNullException(nameof(availabilityGroupListenerName));
            }

            using var scope = _clientDiagnostics.CreateScope("AvailabilityGroupListenerCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _availabilityGroupListenersRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, availabilityGroupListenerName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<AvailabilityGroupListener>(null, response.GetRawResponse());
                return Response.FromValue(new AvailabilityGroupListener(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="availabilityGroupListenerName"> Name of the availability group listener. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="availabilityGroupListenerName"/> is null. </exception>
        public async virtual Task<Response<AvailabilityGroupListener>> GetIfExistsAsync(string availabilityGroupListenerName, CancellationToken cancellationToken = default)
        {
            if (availabilityGroupListenerName == null)
            {
                throw new ArgumentNullException(nameof(availabilityGroupListenerName));
            }

            using var scope = _clientDiagnostics.CreateScope("AvailabilityGroupListenerCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _availabilityGroupListenersRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, availabilityGroupListenerName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<AvailabilityGroupListener>(null, response.GetRawResponse());
                return Response.FromValue(new AvailabilityGroupListener(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="availabilityGroupListenerName"> Name of the availability group listener. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="availabilityGroupListenerName"/> is null. </exception>
        public virtual Response<bool> Exists(string availabilityGroupListenerName, CancellationToken cancellationToken = default)
        {
            if (availabilityGroupListenerName == null)
            {
                throw new ArgumentNullException(nameof(availabilityGroupListenerName));
            }

            using var scope = _clientDiagnostics.CreateScope("AvailabilityGroupListenerCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(availabilityGroupListenerName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="availabilityGroupListenerName"> Name of the availability group listener. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="availabilityGroupListenerName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string availabilityGroupListenerName, CancellationToken cancellationToken = default)
        {
            if (availabilityGroupListenerName == null)
            {
                throw new ArgumentNullException(nameof(availabilityGroupListenerName));
            }

            using var scope = _clientDiagnostics.CreateScope("AvailabilityGroupListenerCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(availabilityGroupListenerName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all availability group listeners in a SQL virtual machine group. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AvailabilityGroupListener" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AvailabilityGroupListener> GetAll(CancellationToken cancellationToken = default)
        {
            Page<AvailabilityGroupListener> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AvailabilityGroupListenerCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _availabilityGroupListenersRestClient.ListByGroup(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AvailabilityGroupListener(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AvailabilityGroupListener> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AvailabilityGroupListenerCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _availabilityGroupListenersRestClient.ListByGroupNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AvailabilityGroupListener(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists all availability group listeners in a SQL virtual machine group. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AvailabilityGroupListener" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AvailabilityGroupListener> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AvailabilityGroupListener>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AvailabilityGroupListenerCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _availabilityGroupListenersRestClient.ListByGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AvailabilityGroupListener(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AvailabilityGroupListener>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AvailabilityGroupListenerCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _availabilityGroupListenersRestClient.ListByGroupNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AvailabilityGroupListener(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<AvailabilityGroupListener> IEnumerable<AvailabilityGroupListener>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<AvailabilityGroupListener> IAsyncEnumerable<AvailabilityGroupListener>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, AvailabilityGroupListener, AvailabilityGroupListenerData> Construct() { }
    }
}
