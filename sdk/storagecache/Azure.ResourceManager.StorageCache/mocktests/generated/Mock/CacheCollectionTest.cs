// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;
using StorageCacheManagementClient;
using StorageCacheManagementClient.Models;

namespace StorageCacheManagementClient.Tests.Mock
{
    /// <summary> Test for Cache. </summary>
    public partial class CacheCollectionMockTests : MockTestBase
    {
        public CacheCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Caches_CreateOrUpdate
            string cacheName = "sc1";
            StorageCacheManagementClient.CacheData cache = new StorageCacheManagementClient.CacheData(location: "westus")
            {
                Identity = new StorageCacheManagementClient.Models.CacheIdentity()
                {
                    Type = StorageCacheManagementClient.Models.CacheIdentityType.UserAssigned,
                },
                Sku = new StorageCacheManagementClient.Models.CacheSku()
                {
                    Name = "Standard_2G",
                },
                CacheSizeGB = 3072,
                Subnet = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Network/virtualNetworks/scvnet/subnets/sub1",
                EncryptionSettings = new StorageCacheManagementClient.Models.CacheEncryptionSettings()
                {
                    KeyEncryptionKey = new StorageCacheManagementClient.Models.KeyVaultKeyReference(keyUrl: "https://keyvault-cmk.vault.azure.net/keys/key2047/test", sourceVault: new WritableSubResource()
                    {
                        Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.KeyVault/vaults/keyvault-cmk"),
                    }),
                },
                SecuritySettings = new StorageCacheManagementClient.Models.CacheSecuritySettings(),
                DirectoryServicesSettings = new StorageCacheManagementClient.Models.CacheDirectorySettings()
                {
                    ActiveDirectory = new StorageCacheManagementClient.Models.CacheActiveDirectorySettings(primaryDnsIpAddress: "192.0.2.10", domainName: "contosoAd.contoso.local", domainNetBiosName: "contosoAd", cacheNetBiosName: "contosoSmb")
                    {
                        SecondaryDnsIpAddress = "192.0.2.11",
                        Credentials = new StorageCacheManagementClient.Models.CacheActiveDirectorySettingsCredentials(username: "consotoAdmin", password: "<password>"),
                    },
                    UsernameDownload = new StorageCacheManagementClient.Models.CacheUsernameDownloadSettings()
                    {
                        ExtendedGroups = true,
                        UsernameSource = new StorageCacheManagementClient.Models.UsernameSource("LDAP"),
                        LdapServer = "192.0.2.12",
                        LdapBaseDN = "dc=contosoad,dc=contoso,dc=local",
                        Credentials = new StorageCacheManagementClient.Models.CacheUsernameDownloadSettingsCredentials()
                        {
                            BindDn = "cn=ldapadmin,dc=contosoad,dc=contoso,dc=local",
                            BindPassword = "<bindPassword>",
                        },
                    },
                },
            };
            cache.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>() { ["Dept"] = "Contoso", });
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/scgroup")).GetCaches();
            await collection.CreateOrUpdateAsync(true, cacheName, cache);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Caches_CreateOrUpdate_ldap_only
            string cacheName = "sc1";
            StorageCacheManagementClient.CacheData cache = new StorageCacheManagementClient.CacheData(location: "westus")
            {
                Sku = new StorageCacheManagementClient.Models.CacheSku()
                {
                    Name = "Standard_2G",
                },
                CacheSizeGB = 3072,
                Subnet = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Network/virtualNetworks/scvnet/subnets/sub1",
                EncryptionSettings = new StorageCacheManagementClient.Models.CacheEncryptionSettings()
                {
                    KeyEncryptionKey = new StorageCacheManagementClient.Models.KeyVaultKeyReference(keyUrl: "https://keyvault-cmk.vault.azure.net/keys/key2048/test", sourceVault: new WritableSubResource()
                    {
                        Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.KeyVault/vaults/keyvault-cmk"),
                    }),
                },
                SecuritySettings = new StorageCacheManagementClient.Models.CacheSecuritySettings(),
                DirectoryServicesSettings = new StorageCacheManagementClient.Models.CacheDirectorySettings()
                {
                    UsernameDownload = new StorageCacheManagementClient.Models.CacheUsernameDownloadSettings()
                    {
                        ExtendedGroups = true,
                        UsernameSource = new StorageCacheManagementClient.Models.UsernameSource("LDAP"),
                        LdapServer = "192.0.2.12",
                        LdapBaseDN = "dc=contosoad,dc=contoso,dc=local",
                        Credentials = new StorageCacheManagementClient.Models.CacheUsernameDownloadSettingsCredentials()
                        {
                            BindDn = "cn=ldapadmin,dc=contosoad,dc=contoso,dc=local",
                            BindPassword = "<bindPassword>",
                        },
                    },
                },
            };
            cache.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>() { ["Dept"] = "Contoso", });
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/scgroup")).GetCaches();
            await collection.CreateOrUpdateAsync(true, cacheName, cache);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Caches_Get
            string cacheName = "sc1";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/scgroup")).GetCaches();
            await collection.GetAsync(cacheName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: Caches_ListByResourceGroup

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/scgroup")).GetCaches();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
