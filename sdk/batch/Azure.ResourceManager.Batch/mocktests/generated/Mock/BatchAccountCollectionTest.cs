// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Batch.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Batch.Tests.Mock
{
    /// <summary> Test for BatchAccount. </summary>
    public partial class BatchAccountCollectionMockTests : MockTestBase
    {
        public BatchAccountCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: BatchAccountCreate_BYOS
            string accountName = "sampleacct";
            Batch.Models.BatchAccountCreateParameters parameters = new Batch.Models.BatchAccountCreateParameters(location: "japaneast")
            {
                AutoStorage = new Batch.Models.AutoStorageBaseProperties(storageAccountId: "/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
                PoolAllocationMode = Batch.Models.PoolAllocationMode.UserSubscription,
                KeyVaultReference = new Batch.Models.KeyVaultReference(id: "/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.KeyVault/vaults/sample", url: "http://sample.vault.azure.net/"),
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/default-azurebatch-japaneast")).GetBatchAccounts();
            await collection.CreateOrUpdateAsync(true, accountName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: BatchAccountCreate_Default
            string accountName = "sampleacct";
            Batch.Models.BatchAccountCreateParameters parameters = new Batch.Models.BatchAccountCreateParameters(location: "japaneast")
            {
                AutoStorage = new Batch.Models.AutoStorageBaseProperties(storageAccountId: "/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/default-azurebatch-japaneast")).GetBatchAccounts();
            await collection.CreateOrUpdateAsync(true, accountName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate3()
        {
            // Example: BatchAccountCreate_SystemAssignedIdentity
            string accountName = "sampleacct";
            Batch.Models.BatchAccountCreateParameters parameters = new Batch.Models.BatchAccountCreateParameters(location: "japaneast")
            {
                Identity = new ResourceIdentity(),
                AutoStorage = new Batch.Models.AutoStorageBaseProperties(storageAccountId: "/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/default-azurebatch-japaneast")).GetBatchAccounts();
            await collection.CreateOrUpdateAsync(true, accountName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate4()
        {
            // Example: BatchAccountCreate_UserAssignedIdentity
            string accountName = "sampleacct";
            Batch.Models.BatchAccountCreateParameters parameters = new Batch.Models.BatchAccountCreateParameters(location: "japaneast")
            {
                Identity = new ResourceIdentity(),
                AutoStorage = new Batch.Models.AutoStorageBaseProperties(storageAccountId: "/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/default-azurebatch-japaneast")).GetBatchAccounts();
            await collection.CreateOrUpdateAsync(true, accountName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate5()
        {
            // Example: PrivateBatchAccountCreate
            string accountName = "sampleacct";
            Batch.Models.BatchAccountCreateParameters parameters = new Batch.Models.BatchAccountCreateParameters(location: "japaneast")
            {
                AutoStorage = new Batch.Models.AutoStorageBaseProperties(storageAccountId: "/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"),
                KeyVaultReference = new Batch.Models.KeyVaultReference(id: "/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.KeyVault/vaults/sample", url: "http://sample.vault.azure.net/"),
                PublicNetworkAccess = Batch.Models.PublicNetworkAccessType.Disabled,
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/default-azurebatch-japaneast")).GetBatchAccounts();
            await collection.CreateOrUpdateAsync(true, accountName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: BatchAccountGet
            string accountName = "sampleacct";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/default-azurebatch-japaneast")).GetBatchAccounts();
            await collection.GetAsync(accountName);
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: PrivateBatchAccountGet
            string accountName = "sampleacct";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/default-azurebatch-japaneast")).GetBatchAccounts();
            await collection.GetAsync(accountName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: BatchAccountListByResourceGroup

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/default-azurebatch-japaneast")).GetBatchAccounts();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
