// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.AppConfiguration;
using Azure.ResourceManager.AppConfiguration.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.AppConfiguration.Tests.Mock
{
    /// <summary> Test for ConfigurationStore. </summary>
    public partial class ConfigurationStoreCollectionMockTests : MockTestBase
    {
        public ConfigurationStoreCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: ConfigurationStores_Create
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetConfigurationStores();
            string configStoreName = "contoso";
            AppConfiguration.ConfigurationStoreData configStoreCreationParameters = new AppConfiguration.ConfigurationStoreData(location: "westus", sku: new AppConfiguration.Models.Sku(name: "Standard"))
            {
            };
            configStoreCreationParameters.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>() { ["myTag"] = "myTagValue", });
            await collection.CreateOrUpdateAsync(configStoreName, configStoreCreationParameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync2()
        {
            // Example: ConfigurationStores_Create_WithIdentity
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetConfigurationStores();
            string configStoreName = "contoso";
            AppConfiguration.ConfigurationStoreData configStoreCreationParameters = new AppConfiguration.ConfigurationStoreData(location: "westus", sku: new AppConfiguration.Models.Sku(name: "Standard"))
            {
                Identity = new ResourceIdentity(),
            };
            configStoreCreationParameters.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>() { ["myTag"] = "myTagValue", });
            await collection.CreateOrUpdateAsync(configStoreName, configStoreCreationParameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: ConfigurationStores_Get
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetConfigurationStores();
            string configStoreName = "contoso";

            await collection.GetAsync(configStoreName);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: ConfigurationStores_ListByResourceGroup
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetConfigurationStores();
            string skipToken = null;

            collection.GetAllAsync(skipToken);
        }
    }
}
