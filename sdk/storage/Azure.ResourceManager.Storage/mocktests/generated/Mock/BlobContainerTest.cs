// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Storage;
using Azure.ResourceManager.Storage.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Storage.Tests.Mock
{
    /// <summary> Test for BlobContainer. </summary>
    public partial class BlobContainerMockTests : MockTestBase
    {
        public BlobContainerMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: GetContainers
            var blobContainer = GetArmClient().GetBlobContainer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res9871/providers/Microsoft.Storage/storageAccounts/sto6217/blobServices/default/containers/container1634"));

            await blobContainer.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: DeleteContainers
            var blobContainer = GetArmClient().GetBlobContainer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res4079/providers/Microsoft.Storage/storageAccounts/sto4506/blobServices/default/containers/container9689"));

            await blobContainer.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: UpdateContainers
            var blobContainer = GetArmClient().GetBlobContainer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/blobServices/default/containers/container6185"));
            Storage.BlobContainerData blobContainer2 = new Storage.BlobContainerData()
            {
                PublicAccess = Storage.Models.PublicAccess.Container,
            };

            await blobContainer.UpdateAsync(blobContainer2);
        }

        [RecordedTest]
        public async Task SetLegalHoldAsync()
        {
            // Example: SetLegalHoldContainers
            var blobContainer = GetArmClient().GetBlobContainer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res4303/providers/Microsoft.Storage/storageAccounts/sto7280/blobServices/default/containers/container8723"));
            Storage.Models.LegalHold legalHold = new Storage.Models.LegalHold(tags: new List<string>()
{
"tag1","tag2","tag3",});

            await blobContainer.SetLegalHoldAsync(legalHold);
        }

        [RecordedTest]
        public async Task ClearLegalHoldAsync()
        {
            // Example: ClearLegalHoldContainers
            var blobContainer = GetArmClient().GetBlobContainer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res4303/providers/Microsoft.Storage/storageAccounts/sto7280/blobServices/default/containers/container8723"));
            Storage.Models.LegalHold legalHold = new Storage.Models.LegalHold(tags: new List<string>()
{
"tag1","tag2","tag3",});

            await blobContainer.ClearLegalHoldAsync(legalHold);
        }

        [RecordedTest]
        public async Task LeaseAsync()
        {
            // Example: Acquire a lease on a container
            var blobContainer = GetArmClient().GetBlobContainer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/blobServices/default/containers/container6185"));
            Storage.Models.LeaseContainerRequest parameters = new Storage.Models.LeaseContainerRequest(action: new Storage.Models.LeaseContainerRequestAction("Acquire"))
            {
                LeaseId = null,
                BreakPeriod = null,
                LeaseDuration = -1,
                ProposedLeaseId = null,
            };

            await blobContainer.LeaseAsync(parameters);
        }

        [RecordedTest]
        public async Task LeaseAsync2()
        {
            // Example: Break a lease on a container
            var blobContainer = GetArmClient().GetBlobContainer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/blobServices/default/containers/container6185"));
            Storage.Models.LeaseContainerRequest parameters = new Storage.Models.LeaseContainerRequest(action: new Storage.Models.LeaseContainerRequestAction("Break"))
            {
                LeaseId = "8698f513-fa75-44a1-b8eb-30ba336af27d",
                BreakPeriod = null,
                LeaseDuration = null,
                ProposedLeaseId = null,
            };

            await blobContainer.LeaseAsync(parameters);
        }

        [RecordedTest]
        public async Task ObjectLevelWormAsync()
        {
            // Example: VersionLevelWormContainerMigration
            var blobContainer = GetArmClient().GetBlobContainer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res1782/providers/Microsoft.Storage/storageAccounts/sto7069/blobServices/default/containers/container6397"));

            await blobContainer.ObjectLevelWormAsync();
        }

        [RecordedTest]
        public async Task ImmutabilityPolicyGetAsync()
        {
            // Example: GetImmutabilityPolicy
            var immutabilityPolicy = GetArmClient().GetImmutabilityPolicy(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res5221/providers/Microsoft.Storage/storageAccounts/sto9177/blobServices/default/containers/container3489/immutabilityPolicies/default"));
            string ifMatch = null;

            await immutabilityPolicy.GetAsync(ifMatch);
        }

        [RecordedTest]
        public async Task ImmutabilityPolicyDeleteAsync()
        {
            // Example: DeleteImmutabilityPolicy
            var immutabilityPolicy = GetArmClient().GetImmutabilityPolicy(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res1581/providers/Microsoft.Storage/storageAccounts/sto9621/blobServices/default/containers/container4910/immutabilityPolicies/default"));
            string ifMatch = "\"8d59f81a7fa7be0\"";

            await immutabilityPolicy.DeleteAsync(ifMatch);
        }

        [RecordedTest]
        public async Task ImmutabilityPolicyLockImmutabilityPolicyAsync()
        {
            // Example: LockImmutabilityPolicy
            var immutabilityPolicy = GetArmClient().GetImmutabilityPolicy(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res2702/providers/Microsoft.Storage/storageAccounts/sto5009/blobServices/default/containers/container1631/immutabilityPolicies/default"));
            string ifMatch = "\"8d59f825b721dd3\"";

            await immutabilityPolicy.LockImmutabilityPolicyAsync(ifMatch);
        }

        [RecordedTest]
        public async Task ImmutabilityPolicyExtendImmutabilityPolicyAsync()
        {
            // Example: ExtendImmutabilityPolicy
            var immutabilityPolicy = GetArmClient().GetImmutabilityPolicy(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res6238/providers/Microsoft.Storage/storageAccounts/sto232/blobServices/default/containers/container5023/immutabilityPolicies/default"));
            string ifMatch = "\"8d59f830d0c3bf9\"";
            Storage.ImmutabilityPolicyData parameters = new Storage.ImmutabilityPolicyData()
            {
                ImmutabilityPeriodSinceCreationInDays = 100,
            };

            await immutabilityPolicy.ExtendImmutabilityPolicyAsync(ifMatch, parameters);
        }
    }
}
