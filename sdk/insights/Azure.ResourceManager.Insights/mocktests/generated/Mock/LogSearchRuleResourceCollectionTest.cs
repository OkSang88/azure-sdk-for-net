// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using Insights;
using Insights.Models;

namespace Insights.Tests.Mock
{
    /// <summary> Test for LogSearchRuleResource. </summary>
    public partial class LogSearchRuleResourceCollectionMockTests : MockTestBase
    {
        public LogSearchRuleResourceCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create or Update rule - AlertingAction
            string ruleName = "logalertfoo";
            Insights.LogSearchRuleResourceData parameters = new Insights.LogSearchRuleResourceData(location: "eastus", source: new Insights.Models.Source(dataSourceId: "/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.OperationalInsights/workspaces/sampleWorkspace")
            {
                Query = "Heartbeat | summarize AggregatedValue = count() by bin(TimeGenerated, 5m)",
                QueryType = new Insights.Models.QueryType("ResultCount"),
            }, action: new Insights.Models.AlertingAction(severity: new Insights.Models.AlertSeverity("1"), trigger: new Insights.Models.TriggerCondition(thresholdOperator: new Insights.Models.ConditionalOperator("GreaterThan"), threshold: 3)
            {
                MetricTrigger = new Insights.Models.LogMetricTrigger()
                {
                    ThresholdOperator = new Insights.Models.ConditionalOperator("GreaterThan"),
                    Threshold = 5,
                    MetricTriggerType = new Insights.Models.MetricTriggerType("Consecutive"),
                    MetricColumn = "Computer",
                },
            })
            {
                AznsAction = new Insights.Models.AzNsActionGroup()
                {
                    EmailSubject = "Email Header",
                    CustomWebhookPayload = "{}",
                },
                OdataType = "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
            })
            {
                Description = "log alert description",
                Enabled = new Insights.Models.Enabled("true"),
                Schedule = new Insights.Models.Schedule(frequencyInMinutes: 15, timeWindowInMinutes: 15),
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>()
            {
            });

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/Rac46PostSwapRG")).GetLogSearchRuleResources();
            await collection.CreateOrUpdateAsync(true, ruleName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Create or Update rule - AlertingAction with Cross-Resource
            string ruleName = "SampleCrossResourceAlert";
            Insights.LogSearchRuleResourceData parameters = new Insights.LogSearchRuleResourceData(location: "eastus", source: new Insights.Models.Source(dataSourceId: "/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/components/sampleAI")
            {
                Query = "union requests, workspace(\"sampleWorkspace\").Update",
                QueryType = new Insights.Models.QueryType("ResultCount"),
            }, action: new Insights.Models.AlertingAction(severity: new Insights.Models.AlertSeverity("3"), trigger: new Insights.Models.TriggerCondition(thresholdOperator: new Insights.Models.ConditionalOperator("GreaterThan"), threshold: 5000))
            {
                AznsAction = new Insights.Models.AzNsActionGroup()
                {
                    EmailSubject = "Cross Resource Mail!!",
                },
                OdataType = "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
            })
            {
                Description = "Sample Cross Resource alert",
                Enabled = new Insights.Models.Enabled("true"),
                Schedule = new Insights.Models.Schedule(frequencyInMinutes: 60, timeWindowInMinutes: 60),
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>()
            {
            });

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/Rac46PostSwapRG")).GetLogSearchRuleResources();
            await collection.CreateOrUpdateAsync(true, ruleName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate3()
        {
            // Example: Create or Update rule - LogToMetricAction
            string ruleName = "logtometricfoo";
            Insights.LogSearchRuleResourceData parameters = new Insights.LogSearchRuleResourceData(location: "West Europe", source: new Insights.Models.Source(dataSourceId: "/subscriptions/af52d502-a447-4bc6-8cb7-4780fbb00490/resourceGroups/alertsweu/providers/Microsoft.OperationalInsights/workspaces/alertsweu"), action: new Insights.Models.LogToMetricAction(criteria: new List<Insights.Models.Criteria>()
{
new Insights.Models.Criteria(metricName: "Average_% Idle Time"),})
            {
                OdataType = "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.LogToMetricAction",
            })
            {
                Description = "log to metric description",
                Enabled = new Insights.Models.Enabled("true"),
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>()
            {
            });

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/alertsweu")).GetLogSearchRuleResources();
            await collection.CreateOrUpdateAsync(true, ruleName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get rule
            string ruleName = "logalertfoo";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/Rac46PostSwapRG")).GetLogSearchRuleResources();
            await collection.GetAsync(ruleName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List rules
            string filter = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest")).GetLogSearchRuleResources();
            await foreach (var _ in collection.GetAllAsync(filter))
            {
            }
        }
    }
}
