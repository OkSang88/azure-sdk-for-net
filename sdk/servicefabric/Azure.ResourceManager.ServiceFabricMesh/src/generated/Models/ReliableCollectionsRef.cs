// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace ServiceFabricMeshManagementClient.Models
{
    /// <summary> Specifying this parameter adds support for reliable collections. </summary>
    public partial class ReliableCollectionsRef
    {
        /// <summary> Initializes a new instance of ReliableCollectionsRef. </summary>
        /// <param name="name"> Name of ReliableCollection resource. Right now it&apos;s not used and you can use any string. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public ReliableCollectionsRef(string name)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            Name = name;
        }

        /// <summary> Initializes a new instance of ReliableCollectionsRef. </summary>
        /// <param name="name"> Name of ReliableCollection resource. Right now it&apos;s not used and you can use any string. </param>
        /// <param name="doNotPersistState"> False (the default) if ReliableCollections state is persisted to disk as usual. True if you do not want to persist state, in which case replication is still enabled and you can use ReliableCollections as distributed cache. </param>
        internal ReliableCollectionsRef(string name, bool? doNotPersistState)
        {
            Name = name;
            DoNotPersistState = doNotPersistState;
        }

        /// <summary> Name of ReliableCollection resource. Right now it&apos;s not used and you can use any string. </summary>
        public string Name { get; set; }
        /// <summary> False (the default) if ReliableCollections state is persisted to disk as usual. True if you do not want to persist state, in which case replication is still enabled and you can use ReliableCollections as distributed cache. </summary>
        public bool? DoNotPersistState { get; set; }
    }
}
