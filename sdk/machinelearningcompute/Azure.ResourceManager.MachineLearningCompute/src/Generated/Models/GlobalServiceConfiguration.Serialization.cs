// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearningCompute.Models
{
    public partial class GlobalServiceConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Etag))
            {
                writer.WritePropertyName("etag");
                writer.WriteStringValue(Etag);
            }
            if (Optional.IsDefined(Ssl))
            {
                writer.WritePropertyName("ssl");
                writer.WriteObjectValue(Ssl);
            }
            if (Optional.IsDefined(ServiceAuth))
            {
                writer.WritePropertyName("serviceAuth");
                writer.WriteObjectValue(ServiceAuth);
            }
            if (Optional.IsDefined(AutoScale))
            {
                writer.WritePropertyName("autoScale");
                writer.WriteObjectValue(AutoScale);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteObjectValue(item.Value);
            }
            writer.WriteEndObject();
        }

        internal static GlobalServiceConfiguration DeserializeGlobalServiceConfiguration(JsonElement element)
        {
            Optional<string> etag = default;
            Optional<SslConfiguration> ssl = default;
            Optional<ServiceAuthConfiguration> serviceAuth = default;
            Optional<AutoScaleConfiguration> autoScale = default;
            IDictionary<string, object> additionalProperties = default;
            Dictionary<string, object> additionalPropertiesDictionary = new Dictionary<string, object>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("etag"))
                {
                    etag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ssl"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    ssl = SslConfiguration.DeserializeSslConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("serviceAuth"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    serviceAuth = ServiceAuthConfiguration.DeserializeServiceAuthConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("autoScale"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    autoScale = AutoScaleConfiguration.DeserializeAutoScaleConfiguration(property.Value);
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, property.Value.GetObject());
            }
            additionalProperties = additionalPropertiesDictionary;
            return new GlobalServiceConfiguration(etag.Value, ssl.Value, serviceAuth.Value, autoScale.Value, additionalProperties);
        }
    }
}
