// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.ServiceBus;
using Azure.ResourceManager.ServiceBus.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.ServiceBus.Tests.Mock
{
    /// <summary> Test for ServiceBusNamespace. </summary>
    public partial class ServiceBusNamespaceMockTests : MockTestBase
    {
        public ServiceBusNamespaceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: NameSpaceGet
            var serviceBusNamespaceId = ServiceBus.ServiceBusNamespace.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ArunMonocle", "sdk-Namespace-2924");
            var serviceBusNamespace = GetArmClient().GetServiceBusNamespace(serviceBusNamespaceId);

            await serviceBusNamespace.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: NameSpaceDelete
            var serviceBusNamespaceId = ServiceBus.ServiceBusNamespace.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ArunMonocle", "sdk-Namespace-3285");
            var serviceBusNamespace = GetArmClient().GetServiceBusNamespace(serviceBusNamespaceId);

            await serviceBusNamespace.DeleteAsync();
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: NameSpaceUpdate
            var serviceBusNamespaceId = ServiceBus.ServiceBusNamespace.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ArunMonocle", "sdk-Namespace-3285");
            var serviceBusNamespace = GetArmClient().GetServiceBusNamespace(serviceBusNamespaceId);
            ServiceBus.Models.ServiceBusNamespaceUpdateOptions parameters = new ServiceBus.Models.ServiceBusNamespaceUpdateOptions(location: "South Central US")
            {
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>() { ["tag3"] = "value3", ["tag4"] = "value4", });
            await serviceBusNamespace.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task GetPrivateLinkResources()
        {
            // Example: NameSpacePrivateLinkResourcesGet
            var serviceBusNamespaceId = ServiceBus.ServiceBusNamespace.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ArunMonocle", "sdk-Namespace-2924");
            var serviceBusNamespace = GetArmClient().GetServiceBusNamespace(serviceBusNamespaceId);

            await foreach (var _ in serviceBusNamespace.GetPrivateLinkResourcesAsync())
            {
            }
        }

        [RecordedTest]
        public async Task CheckNameAvailabilityDisasterRecoveryConfig()
        {
            // Example: AliasNameAvailability
            var serviceBusNamespaceId = ServiceBus.ServiceBusNamespace.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "sdk-Namespace-9080");
            var serviceBusNamespace = GetArmClient().GetServiceBusNamespace(serviceBusNamespaceId);
            ServiceBus.Models.CheckNameAvailability parameters = new ServiceBus.Models.CheckNameAvailability(name: "sdk-DisasterRecovery-9474");

            await serviceBusNamespace.CheckNameAvailabilityDisasterRecoveryConfigAsync(parameters);
        }

        [RecordedTest]
        public async Task NetworkRuleSetGet()
        {
            // Example: NameSpaceNetworkRuleSetGet
            var networkRuleSetId = ServiceBus.NetworkRuleSet.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroup", "sdk-Namespace-6019");
            var networkRuleSet = GetArmClient().GetNetworkRuleSet(networkRuleSetId);

            await networkRuleSet.GetAsync();
        }
    }
}
