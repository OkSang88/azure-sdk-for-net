// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for SqlServer. </summary>
    public partial class SqlServerCollectionMockTests : MockTestBase
    {
        public SqlServerCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create server
            string serverName = "sqlcrudtest-4645";
            Sql.SqlServerData parameters = new Sql.SqlServerData(location: "Japan East")
            {
                AdministratorLogin = "dummylogin",
                AdministratorLoginPassword = "PLACEHOLDER",
                PublicNetworkAccess = new Sql.Models.ServerNetworkAccessFlag("Enabled"),
                Administrators = new Sql.Models.ServerExternalAdministrator()
                {
                    PrincipalType = new Sql.Models.PrincipalType("User"),
                    Login = "bob@contoso.com",
                    Sid = Guid.Parse("00000011-1111-2222-2222-123456789111"),
                    TenantId = Guid.Parse("00000011-1111-2222-2222-123456789111"),
                    AzureADOnlyAuthentication = true,
                },
                RestrictOutboundNetworkAccess = new Sql.Models.ServerNetworkAccessFlag("Enabled"),
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-7398")).GetSqlServers();
            await collection.CreateOrUpdateAsync(true, serverName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get server
            string serverName = "sqlcrudtest-4645";
            string expand = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-7398")).GetSqlServers();
            await collection.GetAsync(serverName, expand);
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: Get server with $expand=administrators
            string serverName = "sqlcrudtest-4645";
            string expand = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-7398")).GetSqlServers();
            await collection.GetAsync(serverName, expand);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List servers by resource group
            string expand = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-7398")).GetSqlServers();
            await foreach (var _ in collection.GetAllAsync(expand))
            {
            }
        }

        [RecordedTest]
        public async Task GetAll2()
        {
            // Example: List servers by resource group with $expand=administrators
            string expand = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-7398")).GetSqlServers();
            await foreach (var _ in collection.GetAllAsync(expand))
            {
            }
        }
    }
}
