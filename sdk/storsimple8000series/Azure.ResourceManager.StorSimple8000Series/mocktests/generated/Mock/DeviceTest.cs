// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.StorSimple8000Series.Tests.Mock;
using Azure.ResourceManager.StorSimple8000Series.Tests.Mock.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.StorSimple8000Series.Tests.Mock.Tests.Mock
{
    /// <summary> Test for Device. </summary>
    public partial class DeviceMockTests : MockTestBase
    {
        public DeviceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: DevicesGet
            var deviceId = StorSimple8000Series.Tests.Mock.Device.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device001ForSDKTest");
            var device = GetArmClient().GetDevice(deviceId);
            string expand = "details";

            await device.GetAsync(expand);
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: DevicesDelete
            var deviceId = StorSimple8000Series.Tests.Mock.Device.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device001ForSDKTest");
            var device = GetArmClient().GetDevice(deviceId);

            await device.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: DevicesUpdate
            var deviceId = StorSimple8000Series.Tests.Mock.Device.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device001ForSDKTest");
            var device = GetArmClient().GetDevice(deviceId);
            StorSimple8000Series.Tests.Mock.Models.DevicePatch parameters = new StorSimple8000Series.Tests.Mock.Models.DevicePatch()
            {
                DeviceDescription = "updated device description",
            };

            await device.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task GetDevicePublicEncryptionKeyManager()
        {
            // Example: ManagersGetDevicePublicEncryptionKey
            var deviceId = StorSimple8000Series.Tests.Mock.Device.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "sca01forsdktest");
            var device = GetArmClient().GetDevice(deviceId);

            await device.GetDevicePublicEncryptionKeyManagerAsync();
        }

        [RecordedTest]
        public async Task SendTestEmailAlert()
        {
            // Example: AlertsSendTestEmail
            var deviceId = StorSimple8000Series.Tests.Mock.Device.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest");
            var device = GetArmClient().GetDevice(deviceId);
            StorSimple8000Series.Tests.Mock.Models.SendTestAlertEmailRequest parameters = new StorSimple8000Series.Tests.Mock.Models.SendTestAlertEmailRequest(emailList: new List<string>()
{
"testemailid@contoso.com",});

            await device.SendTestEmailAlertAsync(parameters);
        }

        [RecordedTest]
        public async Task AuthorizeForServiceEncryptionKeyRollover()
        {
            // Example: DevicesAuthorizeForServiceEncryptionKeyRollover
            var deviceId = StorSimple8000Series.Tests.Mock.Device.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest");
            var device = GetArmClient().GetDevice(deviceId);

            await device.AuthorizeForServiceEncryptionKeyRolloverAsync();
        }

        [RecordedTest]
        public async Task Deactivate()
        {
            // Example: DevicesDeactivate
            var deviceId = StorSimple8000Series.Tests.Mock.Device.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device001ForSDKTest");
            var device = GetArmClient().GetDevice(deviceId);

            await device.DeactivateAsync(true);
        }

        [RecordedTest]
        public async Task InstallUpdates()
        {
            // Example: DevicesInstallUpdates
            var deviceId = StorSimple8000Series.Tests.Mock.Device.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "sugattdeviceforSDK");
            var device = GetArmClient().GetDevice(deviceId);

            await device.InstallUpdatesAsync(true);
        }

        [RecordedTest]
        public async Task GetFailoverSets()
        {
            // Example: DevicesListFailoverSets
            var deviceId = StorSimple8000Series.Tests.Mock.Device.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest");
            var device = GetArmClient().GetDevice(deviceId);

            await foreach (var _ in device.GetFailoverSetsAsync())
            {
            }
        }

        [RecordedTest]
        public async Task GetMetrics()
        {
            // Example: DevicesListMetrics
            var deviceId = StorSimple8000Series.Tests.Mock.Device.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest");
            var device = GetArmClient().GetDevice(deviceId);
            string filter = "name/value eq 'PrimaryStorageTieredUsed' and timeGrain eq 'PT1H' and startTime ge '2017-06-17T18:30:00Z' and endTime le '2017-06-21T18:30:00Z' and category eq 'CapacityUtilization'";

            await foreach (var _ in device.GetMetricsAsync(filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetMetricDefinition()
        {
            // Example: DevicesListMetricDefinition
            var deviceId = StorSimple8000Series.Tests.Mock.Device.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest");
            var device = GetArmClient().GetDevice(deviceId);

            await foreach (var _ in device.GetMetricDefinitionAsync())
            {
            }
        }

        [RecordedTest]
        public async Task ScanForUpdates()
        {
            // Example: DevicesScanForUpdates
            var deviceId = StorSimple8000Series.Tests.Mock.Device.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "sugattdeviceforSDK");
            var device = GetArmClient().GetDevice(deviceId);

            await device.ScanForUpdatesAsync(true);
        }

        [RecordedTest]
        public async Task Failover()
        {
            // Example: DevicesFailover
            var deviceId = StorSimple8000Series.Tests.Mock.Device.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "default");
            var device = GetArmClient().GetDevice(deviceId);
            StorSimple8000Series.Tests.Mock.Models.FailoverRequest parameters = new StorSimple8000Series.Tests.Mock.Models.FailoverRequest()
            {
                TargetDeviceId = "/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.StorSimple/managers/ManagerForSDKTest1/devices/jemdeviceforsdk",
            };

            await device.FailoverAsync(true, parameters);
        }

        [RecordedTest]
        public async Task GetFailoverTargets()
        {
            // Example: DevicesListFailoverTargets
            var deviceId = StorSimple8000Series.Tests.Mock.Device.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "default");
            var device = GetArmClient().GetDevice(deviceId);
            StorSimple8000Series.Tests.Mock.Models.ListFailoverTargetsRequest parameters = new StorSimple8000Series.Tests.Mock.Models.ListFailoverTargetsRequest();

            await foreach (var _ in device.GetFailoverTargetsAsync(parameters))
            {
            }
        }

        [RecordedTest]
        public async Task GetBackups()
        {
            // Example: BackupsListByDevice
            var deviceId = StorSimple8000Series.Tests.Mock.Device.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest");
            var device = GetArmClient().GetDevice(deviceId);
            string filter = "createdTime ge '2017-06-22T18:30:00Z' and backupPolicyId eq '/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.StorSimple/managers/ManagerForSDKTest1/devices/Device05ForSDKTest/backupPolicies/BkUpPolicy01ForSDKTest'";

            await foreach (var _ in device.GetBackupsAsync(filter))
            {
            }
        }

        [RecordedTest]
        public async Task DeleteBackup()
        {
            // Example: BackupsDelete
            var deviceId = StorSimple8000Series.Tests.Mock.Device.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest");
            var device = GetArmClient().GetDevice(deviceId);
            string backupName = "880e1774-94a8-4f3e-85e6-a61e6b94a8b7";

            await device.DeleteBackupAsync(true, backupName);
        }

        [RecordedTest]
        public async Task CloneBackup()
        {
            // Example: BackupsClone
            var deviceId = StorSimple8000Series.Tests.Mock.Device.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest");
            var device = GetArmClient().GetDevice(deviceId);
            string backupName = "880e1774-94a8-4f3e-85e6-a61e6b94a8b7";
            string backupElementName = "7e115577-4a3b-4921-bfd4-ee5a1b9bcbb5_0000000000000000";
            StorSimple8000Series.Tests.Mock.Models.CloneRequest parameters = new StorSimple8000Series.Tests.Mock.Models.CloneRequest(targetDeviceId: "/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.StorSimple/managers/ManagerForSDKTest1/devices/Device05ForSDKTest", targetVolumeName: "ClonedClonedvolume1", targetAccessControlRecordIds: new List<string>()
{
"/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.StorSimple/managers/ManagerForSDKTest1/accessControlRecords/ACR2",}, backupElement: new StorSimple8000Series.Tests.Mock.Models.BackupElement(elementId: "/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.StorSimple/managers/ManagerForSDKTest1/devices/Device05ForSDKTest/backups/880e1774-94a8-4f3e-85e6-a61e6b94a8b7/elements/7e115577-4a3b-4921-bfd4-ee5a1b9bcbb5_0000000000000000", elementName: "7e115577-4a3b-4921-bfd4-ee5a1b9bcbb5_0000000000000000", elementType: "managers/devices/backups/elements", sizeInBytes: 10737418240, volumeName: "Clonedvolume1", volumeContainerId: "/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.StorSimple/managers/ManagerForSDKTest1/devices/Device05ForSDKTest/volumeContainers/volumeContainerForSDKTest")
{
    VolumeType = StorSimple8000Series.Tests.Mock.Models.VolumeType.Tiered,
});

            await device.CloneBackupAsync(true, backupName, backupElementName, parameters);
        }

        [RecordedTest]
        public async Task RestoreBackup()
        {
            // Example: BackupsRestore
            var deviceId = StorSimple8000Series.Tests.Mock.Device.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest");
            var device = GetArmClient().GetDevice(deviceId);
            string backupName = "880e1774-94a8-4f3e-85e6-a61e6b94a8b7";

            await device.RestoreBackupAsync(true, backupName);
        }

        [RecordedTest]
        public async Task GetHardwareComponentGroups()
        {
            // Example: HardwareComponentGroupsListByDevice
            var deviceId = StorSimple8000Series.Tests.Mock.Device.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest");
            var device = GetArmClient().GetDevice(deviceId);

            await foreach (var _ in device.GetHardwareComponentGroupsAsync())
            {
            }
        }

        [RecordedTest]
        public async Task ChangeControllerPowerStateHardwareComponentGroup()
        {
            // Example: HardwareComponentGroupsChangeControllerPowerState
            var deviceId = StorSimple8000Series.Tests.Mock.Device.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest");
            var device = GetArmClient().GetDevice(deviceId);
            string hardwareComponentGroupName = "Controller0Components";
            StorSimple8000Series.Tests.Mock.Models.ControllerPowerStateChangeRequest parameters = new StorSimple8000Series.Tests.Mock.Models.ControllerPowerStateChangeRequest(action: StorSimple8000Series.Tests.Mock.Models.ControllerPowerStateAction.Start, activeController: StorSimple8000Series.Tests.Mock.Models.ControllerId.Controller0, controller0State: StorSimple8000Series.Tests.Mock.Models.ControllerStatus.Ok, controller1State: StorSimple8000Series.Tests.Mock.Models.ControllerStatus.NotPresent);

            await device.ChangeControllerPowerStateHardwareComponentGroupAsync(true, hardwareComponentGroupName, parameters);
        }

        [RecordedTest]
        public async Task GetVolumes()
        {
            // Example: VolumesListByDevice
            var deviceId = StorSimple8000Series.Tests.Mock.Device.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest");
            var device = GetArmClient().GetDevice(deviceId);

            await foreach (var _ in device.GetVolumesAsync())
            {
            }
        }

        [RecordedTest]
        public async Task UpdatesGet()
        {
            // Example: DevicesGetUpdateSummary
            var updatesId = StorSimple8000Series.Tests.Mock.Updates.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "sugattdeviceforSDK");
            var updates = GetArmClient().GetUpdates(updatesId);

            await updates.GetAsync();
        }

        [RecordedTest]
        public async Task AlertSettingsGet()
        {
            // Example: DeviceSettingsGetAlertSettings
            var alertSettingsId = StorSimple8000Series.Tests.Mock.AlertSettings.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest");
            var alertSettings = GetArmClient().GetAlertSettings(alertSettingsId);

            await alertSettings.GetAsync();
        }

        [RecordedTest]
        public async Task NetworkSettingsGet()
        {
            // Example: DeviceSettingsGetNetworkSettings
            var networkSettingsId = StorSimple8000Series.Tests.Mock.NetworkSettings.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest");
            var networkSettings = GetArmClient().GetNetworkSettings(networkSettingsId);

            await networkSettings.GetAsync();
        }

        [RecordedTest]
        public async Task NetworkSettingsUpdate()
        {
            // Example: DeviceSettingsUpdateNetworkSettings
            var networkSettingsId = StorSimple8000Series.Tests.Mock.NetworkSettings.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest");
            var networkSettings = GetArmClient().GetNetworkSettings(networkSettingsId);
            StorSimple8000Series.Tests.Mock.Models.NetworkSettingsPatch parameters = new StorSimple8000Series.Tests.Mock.Models.NetworkSettingsPatch()
            {
                DnsSettings = new StorSimple8000Series.Tests.Mock.Models.DNSSettings()
                {
                    PrimaryDnsServer = "10.171.65.60",
                },
            };

            await networkSettings.UpdateAsync(true, parameters);
        }

        [RecordedTest]
        public async Task SecuritySettingsGet()
        {
            // Example: DeviceSettingsGetSecuritySettings
            var securitySettingsId = StorSimple8000Series.Tests.Mock.SecuritySettings.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest");
            var securitySettings = GetArmClient().GetSecuritySettings(securitySettingsId);

            await securitySettings.GetAsync();
        }

        [RecordedTest]
        public async Task SecuritySettingsUpdate()
        {
            // Example: DeviceSettingsUpdateSecuritySettings
            var securitySettingsId = StorSimple8000Series.Tests.Mock.SecuritySettings.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest");
            var securitySettings = GetArmClient().GetSecuritySettings(securitySettingsId);
            StorSimple8000Series.Tests.Mock.Models.SecuritySettingsPatch parameters = new StorSimple8000Series.Tests.Mock.Models.SecuritySettingsPatch()
            {
                RemoteManagementSettings = new StorSimple8000Series.Tests.Mock.Models.RemoteManagementSettingsPatch(remoteManagementMode: StorSimple8000Series.Tests.Mock.Models.RemoteManagementModeConfiguration.HttpsAndHttpEnabled),
                DeviceAdminPassword = new StorSimple8000Series.Tests.Mock.Models.AsymmetricEncryptedSecret(value: "<value>", encryptionAlgorithm: StorSimple8000Series.Tests.Mock.Models.EncryptionAlgorithm.RsaesPkcs1V15)
                {
                    EncryptionCertThumbprint = "A872A2DF196AC7682EE24791E7DE2E2A360F5926",
                },
                SnapshotPassword = new StorSimple8000Series.Tests.Mock.Models.AsymmetricEncryptedSecret(value: "<value>", encryptionAlgorithm: StorSimple8000Series.Tests.Mock.Models.EncryptionAlgorithm.RsaesPkcs1V15)
                {
                    EncryptionCertThumbprint = "A872A2DF196AC7682EE24791E7DE2E2A360F5926",
                },
                ChapSettings = new StorSimple8000Series.Tests.Mock.Models.ChapSettings()
                {
                    InitiatorUser = "test-initiator-user",
                    InitiatorSecret = new StorSimple8000Series.Tests.Mock.Models.AsymmetricEncryptedSecret(value: "V/uVfWk5OcXfMC0HvUV89o9+cmF636jBnqhFM1pD/zHhmh8Z1KB5/LhVV3T53uGjIlKL3wjhwg+9NIQrIbYuKhl/r8jSftSSH+WqUnQHTRDWazjPAeMu6ozrL5RYzP1h5mgw7XtidZPaaV9ae/uF1KQPkK6TIARaOTdr8I/BLWUg7WdDrfARNYHnW6ezXek1M9Qhv1sL9fZY+JrGB58LF6D2aC2Xjed4K4Jk6v2T1ieneNV27uIdnt21TajuM7w90UlRiVZJZtq/KdEUfqI28C7VoUdcXluAwzR95Ho8hmyIJDqeW3/Wxymdjv+Rctwqtmcka9i2G85Hj8SVV3g4kA==", encryptionAlgorithm: StorSimple8000Series.Tests.Mock.Models.EncryptionAlgorithm.RsaesPkcs1V15)
                    {
                        EncryptionCertThumbprint = "A872A2DF196AC7682EE24791E7DE2E2A360F5926",
                    },
                    TargetUser = "test-target-user",
                    TargetSecret = new StorSimple8000Series.Tests.Mock.Models.AsymmetricEncryptedSecret(value: "OTR4uwVpy+pf0zthnCIAUXurC8NdSh8RpRG5GWL9TSv4WtkVmpeU/U2A4vjkrchfQOzI1x+uooWikWW9txwwQOM+/N3NG44+/dlHoaEe7AxjmItCKhNj8K2RM6D1mb45wicbF/M4uanuXnGXuT+JmZ+1Lcy2k1GXsk67ejplz2K08h37B+oIW85qMUHLdKuuQlAA/fFS+q6qMti3j2Q8Fr+Sh4U76/2AZVkKRtFeqPB1QhC12dFx6TFoZJkMFzdQz4WNvWVelIK2McKNnOiH0/Z5lAXC7164uzReAoTEfqoNU7qqqRrHhsdwWPu6jbeUn8BQnr7A/X6NWvgeax+HGA==", encryptionAlgorithm: StorSimple8000Series.Tests.Mock.Models.EncryptionAlgorithm.RsaesPkcs1V15)
                    {
                        EncryptionCertThumbprint = "A872A2DF196AC7682EE24791E7DE2E2A360F5926",
                    },
                },
            };

            await securitySettings.UpdateAsync(true, parameters);
        }

        [RecordedTest]
        public async Task SecuritySettingsSyncRemotemanagementCertificate()
        {
            // Example: DeviceSettingsSyncRemotemanagementCertificate
            var securitySettingsId = StorSimple8000Series.Tests.Mock.SecuritySettings.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest");
            var securitySettings = GetArmClient().GetSecuritySettings(securitySettingsId);

            await securitySettings.SyncRemotemanagementCertificateAsync(true);
        }

        [RecordedTest]
        public async Task TimeSettingsGet()
        {
            // Example: DeviceSettingsGetTimeSettings
            var timeSettingsId = StorSimple8000Series.Tests.Mock.TimeSettings.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest");
            var timeSettings = GetArmClient().GetTimeSettings(timeSettingsId);

            await timeSettings.GetAsync();
        }
    }
}
