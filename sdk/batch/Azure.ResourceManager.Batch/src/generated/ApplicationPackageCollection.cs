// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using BatchManagementClient.Models;

namespace BatchManagementClient
{
    /// <summary> A class representing collection of ApplicationPackage and their operations over its parent. </summary>
    public partial class ApplicationPackageCollection : ArmCollection, IEnumerable<ApplicationPackage>, IAsyncEnumerable<ApplicationPackage>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly ApplicationPackageRestOperations _applicationPackageRestClient;

        /// <summary> Initializes a new instance of the <see cref="ApplicationPackageCollection"/> class for mocking. </summary>
        protected ApplicationPackageCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ApplicationPackageCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal ApplicationPackageCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _applicationPackageRestClient = new ApplicationPackageRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != Application.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, Application.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Creates an application package record. The record contains a storageUrl where the package should be uploaded to.  Once it is uploaded the `ApplicationPackage` needs to be activated using `ApplicationPackageActive` before it can be used. If the auto storage account was configured to use storage keys, the URL returned will contain a SAS. </summary>
        /// <param name="versionName"> The version of the application. </param>
        /// <param name="parameters"> The parameters for the request. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="versionName"/> is null. </exception>
        public virtual ApplicationPackageCreateOperation CreateOrUpdate(bool waitForCompletion, string versionName, ApplicationPackageData parameters = null, CancellationToken cancellationToken = default)
        {
            if (versionName == null)
            {
                throw new ArgumentNullException(nameof(versionName));
            }

            using var scope = _clientDiagnostics.CreateScope("ApplicationPackageCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _applicationPackageRestClient.Create(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, versionName, parameters, cancellationToken);
                var operation = new ApplicationPackageCreateOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates an application package record. The record contains a storageUrl where the package should be uploaded to.  Once it is uploaded the `ApplicationPackage` needs to be activated using `ApplicationPackageActive` before it can be used. If the auto storage account was configured to use storage keys, the URL returned will contain a SAS. </summary>
        /// <param name="versionName"> The version of the application. </param>
        /// <param name="parameters"> The parameters for the request. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="versionName"/> is null. </exception>
        public async virtual Task<ApplicationPackageCreateOperation> CreateOrUpdateAsync(bool waitForCompletion, string versionName, ApplicationPackageData parameters = null, CancellationToken cancellationToken = default)
        {
            if (versionName == null)
            {
                throw new ArgumentNullException(nameof(versionName));
            }

            using var scope = _clientDiagnostics.CreateScope("ApplicationPackageCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _applicationPackageRestClient.CreateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, versionName, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new ApplicationPackageCreateOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets information about the specified application package. </summary>
        /// <param name="versionName"> The version of the application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="versionName"/> is null. </exception>
        public virtual Response<ApplicationPackage> Get(string versionName, CancellationToken cancellationToken = default)
        {
            if (versionName == null)
            {
                throw new ArgumentNullException(nameof(versionName));
            }

            using var scope = _clientDiagnostics.CreateScope("ApplicationPackageCollection.Get");
            scope.Start();
            try
            {
                var response = _applicationPackageRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, versionName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ApplicationPackage(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets information about the specified application package. </summary>
        /// <param name="versionName"> The version of the application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="versionName"/> is null. </exception>
        public async virtual Task<Response<ApplicationPackage>> GetAsync(string versionName, CancellationToken cancellationToken = default)
        {
            if (versionName == null)
            {
                throw new ArgumentNullException(nameof(versionName));
            }

            using var scope = _clientDiagnostics.CreateScope("ApplicationPackageCollection.Get");
            scope.Start();
            try
            {
                var response = await _applicationPackageRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, versionName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new ApplicationPackage(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="versionName"> The version of the application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="versionName"/> is null. </exception>
        public virtual Response<ApplicationPackage> GetIfExists(string versionName, CancellationToken cancellationToken = default)
        {
            if (versionName == null)
            {
                throw new ArgumentNullException(nameof(versionName));
            }

            using var scope = _clientDiagnostics.CreateScope("ApplicationPackageCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _applicationPackageRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, versionName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<ApplicationPackage>(null, response.GetRawResponse());
                return Response.FromValue(new ApplicationPackage(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="versionName"> The version of the application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="versionName"/> is null. </exception>
        public async virtual Task<Response<ApplicationPackage>> GetIfExistsAsync(string versionName, CancellationToken cancellationToken = default)
        {
            if (versionName == null)
            {
                throw new ArgumentNullException(nameof(versionName));
            }

            using var scope = _clientDiagnostics.CreateScope("ApplicationPackageCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _applicationPackageRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, versionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<ApplicationPackage>(null, response.GetRawResponse());
                return Response.FromValue(new ApplicationPackage(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="versionName"> The version of the application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="versionName"/> is null. </exception>
        public virtual Response<bool> Exists(string versionName, CancellationToken cancellationToken = default)
        {
            if (versionName == null)
            {
                throw new ArgumentNullException(nameof(versionName));
            }

            using var scope = _clientDiagnostics.CreateScope("ApplicationPackageCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(versionName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="versionName"> The version of the application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="versionName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string versionName, CancellationToken cancellationToken = default)
        {
            if (versionName == null)
            {
                throw new ArgumentNullException(nameof(versionName));
            }

            using var scope = _clientDiagnostics.CreateScope("ApplicationPackageCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(versionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all of the application packages in the specified application. </summary>
        /// <param name="maxresults"> The maximum number of items to return in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ApplicationPackage" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ApplicationPackage> GetAll(int? maxresults = null, CancellationToken cancellationToken = default)
        {
            Page<ApplicationPackage> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApplicationPackageCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _applicationPackageRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, maxresults, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ApplicationPackage(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ApplicationPackage> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApplicationPackageCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _applicationPackageRestClient.ListNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, maxresults, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ApplicationPackage(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists all of the application packages in the specified application. </summary>
        /// <param name="maxresults"> The maximum number of items to return in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ApplicationPackage" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ApplicationPackage> GetAllAsync(int? maxresults = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<ApplicationPackage>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApplicationPackageCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _applicationPackageRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, maxresults, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ApplicationPackage(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ApplicationPackage>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApplicationPackageCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _applicationPackageRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, maxresults, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ApplicationPackage(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<ApplicationPackage> IEnumerable<ApplicationPackage>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ApplicationPackage> IAsyncEnumerable<ApplicationPackage>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, ApplicationPackage, ApplicationPackageData> Construct() { }
    }
}
