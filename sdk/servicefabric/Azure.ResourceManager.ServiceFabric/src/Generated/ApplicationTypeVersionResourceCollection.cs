// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.ServiceFabric.Models;

namespace Azure.ResourceManager.ServiceFabric
{
    /// <summary> A class representing collection of ApplicationTypeVersionResource and their operations over its parent. </summary>
    public partial class ApplicationTypeVersionResourceCollection : ArmCollection, IEnumerable<ApplicationTypeVersionResource>, IAsyncEnumerable<ApplicationTypeVersionResource>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly ApplicationTypeVersionsRestOperations _applicationTypeVersionsRestClient;

        /// <summary> Initializes a new instance of the <see cref="ApplicationTypeVersionResourceCollection"/> class for mocking. </summary>
        protected ApplicationTypeVersionResourceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ApplicationTypeVersionResourceCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal ApplicationTypeVersionResourceCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            ClientOptions.TryGetApiVersion(ApplicationTypeVersionResource.ResourceType, out string apiVersion);
            _applicationTypeVersionsRestClient = new ApplicationTypeVersionsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ApplicationTypeResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ApplicationTypeResource.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Create or update a Service Fabric application type version resource with the specified name. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="version"> The application type version. </param>
        /// <param name="parameters"> The application type version resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="parameters"/> is null. </exception>
        public virtual ApplicationTypeVersionResourceCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string version, ApplicationTypeVersionResourceData parameters, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("ApplicationTypeVersionResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _applicationTypeVersionsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, version, parameters, cancellationToken);
                var operation = new ApplicationTypeVersionResourceCreateOrUpdateOperation(this, _clientDiagnostics, Pipeline, _applicationTypeVersionsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, version, parameters).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a Service Fabric application type version resource with the specified name. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="version"> The application type version. </param>
        /// <param name="parameters"> The application type version resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="parameters"/> is null. </exception>
        public async virtual Task<ApplicationTypeVersionResourceCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string version, ApplicationTypeVersionResourceData parameters, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("ApplicationTypeVersionResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _applicationTypeVersionsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, version, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new ApplicationTypeVersionResourceCreateOrUpdateOperation(this, _clientDiagnostics, Pipeline, _applicationTypeVersionsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, version, parameters).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a Service Fabric application type version resource created or in the process of being created in the Service Fabric application type name resource. </summary>
        /// <param name="version"> The application type version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public virtual Response<ApplicationTypeVersionResource> Get(string version, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var scope = _clientDiagnostics.CreateScope("ApplicationTypeVersionResourceCollection.Get");
            scope.Start();
            try
            {
                var response = _applicationTypeVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, version, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ApplicationTypeVersionResource(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a Service Fabric application type version resource created or in the process of being created in the Service Fabric application type name resource. </summary>
        /// <param name="version"> The application type version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public async virtual Task<Response<ApplicationTypeVersionResource>> GetAsync(string version, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var scope = _clientDiagnostics.CreateScope("ApplicationTypeVersionResourceCollection.Get");
            scope.Start();
            try
            {
                var response = await _applicationTypeVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, version, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new ApplicationTypeVersionResource(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="version"> The application type version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public virtual Response<ApplicationTypeVersionResource> GetIfExists(string version, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var scope = _clientDiagnostics.CreateScope("ApplicationTypeVersionResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _applicationTypeVersionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, version, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<ApplicationTypeVersionResource>(null, response.GetRawResponse());
                return Response.FromValue(new ApplicationTypeVersionResource(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="version"> The application type version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public async virtual Task<Response<ApplicationTypeVersionResource>> GetIfExistsAsync(string version, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var scope = _clientDiagnostics.CreateScope("ApplicationTypeVersionResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _applicationTypeVersionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, version, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<ApplicationTypeVersionResource>(null, response.GetRawResponse());
                return Response.FromValue(new ApplicationTypeVersionResource(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="version"> The application type version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public virtual Response<bool> Exists(string version, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var scope = _clientDiagnostics.CreateScope("ApplicationTypeVersionResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(version, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="version"> The application type version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string version, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var scope = _clientDiagnostics.CreateScope("ApplicationTypeVersionResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(version, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets all application type version resources created or in the process of being created in the Service Fabric application type name resource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ApplicationTypeVersionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ApplicationTypeVersionResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<ApplicationTypeVersionResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApplicationTypeVersionResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _applicationTypeVersionsRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ApplicationTypeVersionResource(this, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Gets all application type version resources created or in the process of being created in the Service Fabric application type name resource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ApplicationTypeVersionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ApplicationTypeVersionResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ApplicationTypeVersionResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApplicationTypeVersionResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _applicationTypeVersionsRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ApplicationTypeVersionResource(this, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        IEnumerator<ApplicationTypeVersionResource> IEnumerable<ApplicationTypeVersionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ApplicationTypeVersionResource> IAsyncEnumerable<ApplicationTypeVersionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, ApplicationTypeVersionResource, ApplicationTypeVersionResourceData> Construct() { }
    }
}
