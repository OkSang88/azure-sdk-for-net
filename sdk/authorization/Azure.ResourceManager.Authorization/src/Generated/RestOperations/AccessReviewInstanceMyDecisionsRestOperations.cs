// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Authorization.Models;

namespace Azure.ResourceManager.Authorization
{
    internal partial class AccessReviewInstanceMyDecisionsRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of AccessReviewInstanceMyDecisionsRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public AccessReviewInstanceMyDecisionsRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2021-11-16-preview";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal HttpMessage CreateListRequest(string scheduleDefinitionId, string id, string filter)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/", false);
            uri.AppendPath(scheduleDefinitionId, true);
            uri.AppendPath("/instances/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/decisions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, false);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get my access review instance decisions. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="filter"> The filter to apply on the operation. Other than standard filters, one custom filter option is supported : &apos;assignedToMeToReview()&apos;. When one specified $filter=assignedToMeToReview(), only items that are assigned to the calling user to review are returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<AccessReviewDecisionListResult>> ListAsync(string scheduleDefinitionId, string id, string filter = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var message = CreateListRequest(scheduleDefinitionId, id, filter);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AccessReviewDecisionListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AccessReviewDecisionListResult.DeserializeAccessReviewDecisionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get my access review instance decisions. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="filter"> The filter to apply on the operation. Other than standard filters, one custom filter option is supported : &apos;assignedToMeToReview()&apos;. When one specified $filter=assignedToMeToReview(), only items that are assigned to the calling user to review are returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<AccessReviewDecisionListResult> List(string scheduleDefinitionId, string id, string filter = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var message = CreateListRequest(scheduleDefinitionId, id, filter);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AccessReviewDecisionListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AccessReviewDecisionListResult.DeserializeAccessReviewDecisionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetByIdRequest(string scheduleDefinitionId, string id, string decisionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/", false);
            uri.AppendPath(scheduleDefinitionId, true);
            uri.AppendPath("/instances/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/decisions/", false);
            uri.AppendPath(decisionId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get my single access review instance decision. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="decisionId"> The id of the decision record. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/>, <paramref name="id"/> or <paramref name="decisionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/>, <paramref name="id"/> or <paramref name="decisionId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<AccessReviewDecisionData>> GetByIdAsync(string scheduleDefinitionId, string id, string decisionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));
            Argument.AssertNotNullOrEmpty(decisionId, nameof(decisionId));

            using var message = CreateGetByIdRequest(scheduleDefinitionId, id, decisionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AccessReviewDecisionData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AccessReviewDecisionData.DeserializeAccessReviewDecisionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((AccessReviewDecisionData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get my single access review instance decision. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="decisionId"> The id of the decision record. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/>, <paramref name="id"/> or <paramref name="decisionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/>, <paramref name="id"/> or <paramref name="decisionId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<AccessReviewDecisionData> GetById(string scheduleDefinitionId, string id, string decisionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));
            Argument.AssertNotNullOrEmpty(decisionId, nameof(decisionId));

            using var message = CreateGetByIdRequest(scheduleDefinitionId, id, decisionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AccessReviewDecisionData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AccessReviewDecisionData.DeserializeAccessReviewDecisionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((AccessReviewDecisionData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePatchRequest(string scheduleDefinitionId, string id, string decisionId, AccessReviewDecisionPatch patch)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/", false);
            uri.AppendPath(scheduleDefinitionId, true);
            uri.AppendPath("/instances/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/decisions/", false);
            uri.AppendPath(decisionId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(patch);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Record a decision. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="decisionId"> The id of the decision record. </param>
        /// <param name="patch"> Access review decision properties to patch. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/>, <paramref name="id"/>, <paramref name="decisionId"/> or <paramref name="patch"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/>, <paramref name="id"/> or <paramref name="decisionId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<AccessReviewDecisionData>> PatchAsync(string scheduleDefinitionId, string id, string decisionId, AccessReviewDecisionPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));
            Argument.AssertNotNullOrEmpty(decisionId, nameof(decisionId));
            Argument.AssertNotNull(patch, nameof(patch));

            using var message = CreatePatchRequest(scheduleDefinitionId, id, decisionId, patch);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AccessReviewDecisionData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AccessReviewDecisionData.DeserializeAccessReviewDecisionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Record a decision. </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="decisionId"> The id of the decision record. </param>
        /// <param name="patch"> Access review decision properties to patch. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/>, <paramref name="id"/>, <paramref name="decisionId"/> or <paramref name="patch"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/>, <paramref name="id"/> or <paramref name="decisionId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<AccessReviewDecisionData> Patch(string scheduleDefinitionId, string id, string decisionId, AccessReviewDecisionPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));
            Argument.AssertNotNullOrEmpty(decisionId, nameof(decisionId));
            Argument.AssertNotNull(patch, nameof(patch));

            using var message = CreatePatchRequest(scheduleDefinitionId, id, decisionId, patch);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AccessReviewDecisionData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AccessReviewDecisionData.DeserializeAccessReviewDecisionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListNextPageRequest(string nextLink, string scheduleDefinitionId, string id, string filter)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get my access review instance decisions. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="filter"> The filter to apply on the operation. Other than standard filters, one custom filter option is supported : &apos;assignedToMeToReview()&apos;. When one specified $filter=assignedToMeToReview(), only items that are assigned to the calling user to review are returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<AccessReviewDecisionListResult>> ListNextPageAsync(string nextLink, string scheduleDefinitionId, string id, string filter = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var message = CreateListNextPageRequest(nextLink, scheduleDefinitionId, id, filter);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AccessReviewDecisionListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AccessReviewDecisionListResult.DeserializeAccessReviewDecisionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get my access review instance decisions. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="filter"> The filter to apply on the operation. Other than standard filters, one custom filter option is supported : &apos;assignedToMeToReview()&apos;. When one specified $filter=assignedToMeToReview(), only items that are assigned to the calling user to review are returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<AccessReviewDecisionListResult> ListNextPage(string nextLink, string scheduleDefinitionId, string id, string filter = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var message = CreateListNextPageRequest(nextLink, scheduleDefinitionId, id, filter);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AccessReviewDecisionListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AccessReviewDecisionListResult.DeserializeAccessReviewDecisionListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
