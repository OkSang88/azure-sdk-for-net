// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Marketplace.Models;

namespace Azure.ResourceManager.Marketplace
{
    /// <summary> A Class representing a PrivateStore along with the instance operations that can be performed on it. </summary>
    public partial class PrivateStore : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="PrivateStore"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string privateStoreId)
        {
            var resourceId = $"/providers/Microsoft.Marketplace/privateStores/{privateStoreId}";
            return new ResourceIdentifier(resourceId);
        }
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly PrivateStoreRestOperations _privateStoreRestClient;
        private readonly PrivateStoreData _data;

        /// <summary> Initializes a new instance of the <see cref="PrivateStore"/> class for mocking. </summary>
        protected PrivateStore()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "PrivateStore"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal PrivateStore(ArmResource options, PrivateStoreData data) : base(options, data.Id)
        {
            HasData = true;
            _data = data;
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _privateStoreRestClient = new PrivateStoreRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Initializes a new instance of the <see cref="PrivateStore"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal PrivateStore(ArmResource options, ResourceIdentifier id) : base(options, id)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _privateStoreRestClient = new PrivateStoreRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Initializes a new instance of the <see cref="PrivateStore"/> class. </summary>
        /// <param name="clientOptions"> The client options to build client context. </param>
        /// <param name="credential"> The credential to build client context. </param>
        /// <param name="uri"> The uri to build client context. </param>
        /// <param name="pipeline"> The pipeline to build client context. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal PrivateStore(ArmClientOptions clientOptions, TokenCredential credential, Uri uri, HttpPipeline pipeline, ResourceIdentifier id) : base(clientOptions, credential, uri, pipeline, id)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _privateStoreRestClient = new PrivateStoreRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Marketplace/privateStores";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual PrivateStoreData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Get information about the private store. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<PrivateStore>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.Get");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.GetAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new PrivateStore(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get information about the private store. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PrivateStore> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.Get");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.Get(Id.Name, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PrivateStore(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public async virtual Task<IEnumerable<AzureLocation>> GetAvailableLocationsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.GetAvailableLocations");
            scope.Start();
            try
            {
                return await ListAvailableLocationsAsync(ResourceType, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public virtual IEnumerable<AzureLocation> GetAvailableLocations(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.GetAvailableLocations");
            scope.Start();
            try
            {
                return ListAvailableLocations(ResourceType, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the private store. All that is not saved will be lost. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<PrivateStoreDeleteOperation> DeleteAsync(bool waitForCompletion, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.Delete");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.DeleteAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new PrivateStoreDeleteOperation(response);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the private store. All that is not saved will be lost. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual PrivateStoreDeleteOperation Delete(bool waitForCompletion, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.Delete");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.Delete(Id.Name, cancellationToken);
                var operation = new PrivateStoreDeleteOperation(response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List of offers, regardless the collections. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="OfferProperties" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<OfferProperties> QueryOffersAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<OfferProperties>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PrivateStore.QueryOffers");
                scope.Start();
                try
                {
                    var response = await _privateStoreRestClient.QueryOffersAsync(Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> List of offers, regardless the collections. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="OfferProperties" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<OfferProperties> QueryOffers(CancellationToken cancellationToken = default)
        {
            Page<OfferProperties> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PrivateStore.QueryOffers");
                scope.Start();
                try
                {
                    var response = _privateStoreRestClient.QueryOffers(Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Tenant billing accounts names. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<BillingAccountsResponse>> BillingAccountsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.BillingAccounts");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.BillingAccountsAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tenant billing accounts names. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<BillingAccountsResponse> BillingAccounts(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.BillingAccounts");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.BillingAccounts(Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> For a given subscriptions list, the API will return a map of collections and the related subscriptions from the supplied list. </summary>
        /// <param name="payload"> The CollectionsToSubscriptionsMappingPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<CollectionsToSubscriptionsMappingResponse>> CollectionsToSubscriptionsMappingAsync(CollectionsToSubscriptionsMappingPayload payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.CollectionsToSubscriptionsMapping");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.CollectionsToSubscriptionsMappingAsync(Id.Name, payload, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> For a given subscriptions list, the API will return a map of collections and the related subscriptions from the supplied list. </summary>
        /// <param name="payload"> The CollectionsToSubscriptionsMappingPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CollectionsToSubscriptionsMappingResponse> CollectionsToSubscriptionsMapping(CollectionsToSubscriptionsMappingPayload payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.CollectionsToSubscriptionsMapping");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.CollectionsToSubscriptionsMapping(Id.Name, payload, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get map of plans and related approved subscriptions. </summary>
        /// <param name="payload"> The QueryApprovedPlansPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<QueryApprovedPlansResponse>> QueryApprovedPlansAsync(QueryApprovedPlansPayload payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.QueryApprovedPlans");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.QueryApprovedPlansAsync(Id.Name, payload, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get map of plans and related approved subscriptions. </summary>
        /// <param name="payload"> The QueryApprovedPlansPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<QueryApprovedPlansResponse> QueryApprovedPlans(QueryApprovedPlansPayload payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.QueryApprovedPlans");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.QueryApprovedPlans(Id.Name, payload, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Perform an action on bulk collections. </summary>
        /// <param name="payload"> The BulkCollectionsPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<BulkCollectionsResponse>> BulkCollectionsActionAsync(BulkCollectionsPayload payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.BulkCollectionsAction");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.BulkCollectionsActionAsync(Id.Name, payload, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Perform an action on bulk collections. </summary>
        /// <param name="payload"> The BulkCollectionsPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<BulkCollectionsResponse> BulkCollectionsAction(BulkCollectionsPayload payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.BulkCollectionsAction");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.BulkCollectionsAction(Id.Name, payload, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get private store notifications state. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<PrivateStoreNotificationsState>> QueryNotificationsStateAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.QueryNotificationsState");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.QueryNotificationsStateAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get private store notifications state. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PrivateStoreNotificationsState> QueryNotificationsState(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.QueryNotificationsState");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.QueryNotificationsState(Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Acknowledge notification for offer. </summary>
        /// <param name="offerId"> The offer ID to update or delete. </param>
        /// <param name="payload"> The AcknowledgeOfferNotificationProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="offerId"/> is null. </exception>
        public async virtual Task<Response> AcknowledgeOfferNotificationAsync(string offerId, AcknowledgeOfferNotificationProperties payload = null, CancellationToken cancellationToken = default)
        {
            if (offerId == null)
            {
                throw new ArgumentNullException(nameof(offerId));
            }

            using var scope = _clientDiagnostics.CreateScope("PrivateStore.AcknowledgeOfferNotification");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.AcknowledgeOfferNotificationAsync(Id.Name, offerId, payload, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Acknowledge notification for offer. </summary>
        /// <param name="offerId"> The offer ID to update or delete. </param>
        /// <param name="payload"> The AcknowledgeOfferNotificationProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="offerId"/> is null. </exception>
        public virtual Response AcknowledgeOfferNotification(string offerId, AcknowledgeOfferNotificationProperties payload = null, CancellationToken cancellationToken = default)
        {
            if (offerId == null)
            {
                throw new ArgumentNullException(nameof(offerId));
            }

            using var scope = _clientDiagnostics.CreateScope("PrivateStore.AcknowledgeOfferNotification");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.AcknowledgeOfferNotification(Id.Name, offerId, payload, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        #region RequestApprovalResource

        /// <summary> Gets a collection of RequestApprovalResources in the PrivateStore. </summary>
        /// <returns> An object representing collection of RequestApprovalResources and their operations over a PrivateStore. </returns>
        public virtual RequestApprovalResourceCollection GetRequestApprovalResources()
        {
            return new RequestApprovalResourceCollection(this);
        }
        #endregion

        #region AdminRequestApprovalsResource

        /// <summary> Gets a collection of AdminRequestApprovalsResources in the PrivateStore. </summary>
        /// <returns> An object representing collection of AdminRequestApprovalsResources and their operations over a PrivateStore. </returns>
        public virtual AdminRequestApprovalsResourceCollection GetAdminRequestApprovalsResources()
        {
            return new AdminRequestApprovalsResourceCollection(this);
        }
        #endregion

        #region Collection

        /// <summary> Gets a collection of Collections in the PrivateStore. </summary>
        /// <returns> An object representing collection of Collections and their operations over a PrivateStore. </returns>
        public virtual CollectionCollection GetCollections()
        {
            return new CollectionCollection(this);
        }
        #endregion
    }
}
