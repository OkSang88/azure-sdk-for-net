// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using LabServicesClient;
using LabServicesClient.Models;

namespace LabServicesClient.Tests.Mock
{
    /// <summary> Test for Schedule. </summary>
    public partial class ScheduleMockTests : MockTestBase
    {
        public ScheduleMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: getSchedule
            var scheduleId = LabServicesClient.Schedule.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg123", "testlab", "schedule1");
            var schedule = GetArmClient().GetSchedule(scheduleId);

            await schedule.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: deleteSchedule
            var scheduleId = LabServicesClient.Schedule.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg123", "testlab", "schedule1");
            var schedule = GetArmClient().GetSchedule(scheduleId);

            await schedule.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: patchSchedule
            var scheduleId = LabServicesClient.Schedule.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg123", "testlab", "schedule1");
            var schedule = GetArmClient().GetSchedule(scheduleId);
            LabServicesClient.Models.ScheduleUpdate body = new LabServicesClient.Models.ScheduleUpdate()
            {
                RecurrencePattern = new LabServicesClient.Models.RecurrencePattern(frequency: LabServicesClient.Models.RecurrenceFrequency.Daily, expirationDate: DateTimeOffset.Parse("2020-08-14"))
                {
                    Interval = 2,
                },
            };

            await schedule.UpdateAsync(body);
        }
    }
}
