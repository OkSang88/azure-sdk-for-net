// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.StorSimple8000Series.Models
{
    /// <summary> Represents the secrets encrypted using Symmetric Encryption Key. </summary>
    public partial class SymmetricEncryptedSecret
    {
        /// <summary> Initializes a new instance of SymmetricEncryptedSecret. </summary>
        /// <param name="value"> The value of the secret itself. If the secret is in plaintext or null then EncryptionAlgorithm will be none. </param>
        /// <param name="encryptionAlgorithm"> The algorithm used to encrypt the &quot;Value&quot;. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        internal SymmetricEncryptedSecret(string value, EncryptionAlgorithm encryptionAlgorithm)
        {
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            Value = value;
            EncryptionAlgorithm = encryptionAlgorithm;
        }

        /// <summary> Initializes a new instance of SymmetricEncryptedSecret. </summary>
        /// <param name="value"> The value of the secret itself. If the secret is in plaintext or null then EncryptionAlgorithm will be none. </param>
        /// <param name="valueCertificateThumbprint"> The thumbprint of the cert that was used to encrypt &quot;Value&quot;. </param>
        /// <param name="encryptionAlgorithm"> The algorithm used to encrypt the &quot;Value&quot;. </param>
        internal SymmetricEncryptedSecret(string value, string valueCertificateThumbprint, EncryptionAlgorithm encryptionAlgorithm)
        {
            Value = value;
            ValueCertificateThumbprint = valueCertificateThumbprint;
            EncryptionAlgorithm = encryptionAlgorithm;
        }

        /// <summary> The value of the secret itself. If the secret is in plaintext or null then EncryptionAlgorithm will be none. </summary>
        public string Value { get; }
        /// <summary> The thumbprint of the cert that was used to encrypt &quot;Value&quot;. </summary>
        public string ValueCertificateThumbprint { get; }
        /// <summary> The algorithm used to encrypt the &quot;Value&quot;. </summary>
        public EncryptionAlgorithm EncryptionAlgorithm { get; }
    }
}
