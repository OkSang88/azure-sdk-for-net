// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.KubernetesConfiguration;
using Azure.ResourceManager.KubernetesConfiguration.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.KubernetesConfiguration.Tests.Mock
{
    /// <summary> Test for Extension. </summary>
    public partial class ExtensionCollectionMockTests : MockTestBase
    {
        public ExtensionCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create Extension
            KubernetesConfiguration.Models.Enum0 clusterRp = new KubernetesConfiguration.Models.Enum0("Microsoft.Kubernetes");
            KubernetesConfiguration.Models.Enum1 clusterResourceName = new KubernetesConfiguration.Models.Enum1("connectedClusters");
            string clusterName = "clusterName1";
            string extensionName = "ClusterMonitor";
            KubernetesConfiguration.ExtensionData extension = new KubernetesConfiguration.ExtensionData()
            {
                ExtensionType = "azuremonitor-containers",
                AutoUpgradeMinorVersion = true,
                ReleaseTrain = "Preview",
                Scope = new KubernetesConfiguration.Models.Scope()
                {
                    Cluster = new KubernetesConfiguration.Models.ScopeCluster()
                    {
                        ReleaseNamespace = "kube-system",
                    },
                },
                ConfigurationSettings = new Dictionary<string, string>()
                {
                    ["omsagent.env.clusterName"] = "clusterName1",
                    ["omsagent.secret.wsid"] = "a38cef99-5a89-52ed-b6db-22095c23664b",
                },
                ConfigurationProtectedSettings = new Dictionary<string, string>()
                {
                    ["omsagent.secret.key"] = "secretKeyValue01",
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetExtensions(clusterRp, clusterResourceName, clusterName);
            await collection.CreateOrUpdateAsync(true, extensionName, extension);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get Extension
            KubernetesConfiguration.Models.Enum0 clusterRp = new KubernetesConfiguration.Models.Enum0("Microsoft.Kubernetes");
            KubernetesConfiguration.Models.Enum1 clusterResourceName = new KubernetesConfiguration.Models.Enum1("connectedClusters");
            string clusterName = "clusterName1";
            string extensionName = "ClusterMonitor";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetExtensions(clusterRp, clusterResourceName, clusterName);
            await collection.GetAsync(extensionName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List Extensions
            KubernetesConfiguration.Models.Enum0 clusterRp = new KubernetesConfiguration.Models.Enum0("Microsoft.Kubernetes");
            KubernetesConfiguration.Models.Enum1 clusterResourceName = new KubernetesConfiguration.Models.Enum1("connectedClusters");
            string clusterName = "clusterName1";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetExtensions(clusterRp, clusterResourceName, clusterName);
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
