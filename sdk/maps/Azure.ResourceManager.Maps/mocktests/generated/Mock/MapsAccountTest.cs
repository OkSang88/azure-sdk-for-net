// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Maps;
using Azure.ResourceManager.Maps.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Maps.Tests.Mock
{
    /// <summary> Test for MapsAccount. </summary>
    public partial class MapsAccountMockTests : MockTestBase
    {
        public MapsAccountMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: GetAccount
            var mapsAccountId = Maps.MapsAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMapsAccount");
            var mapsAccount = GetArmClient().GetMapsAccount(mapsAccountId);

            await mapsAccount.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: DeleteAccount
            var mapsAccountId = Maps.MapsAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMapsAccount");
            var mapsAccount = GetArmClient().GetMapsAccount(mapsAccountId);

            await mapsAccount.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Update Account Managed Identities
            var mapsAccountId = Maps.MapsAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMapsAccount");
            var mapsAccount = GetArmClient().GetMapsAccount(mapsAccountId);
            Maps.Models.MapsAccountUpdateParameters mapsAccountUpdateParameters = new Maps.Models.MapsAccountUpdateParameters()
            {
                Kind = new Maps.Models.Kind("Gen2"),
                Sku = new Maps.Models.Sku(name: new Maps.Models.Name("G2")),
                Identity = new ResourceIdentity(),
            };

            await mapsAccount.UpdateAsync(mapsAccountUpdateParameters);
        }

        [RecordedTest]
        public async Task Update2()
        {
            // Example: Update Account Tags
            var mapsAccountId = Maps.MapsAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMapsAccount");
            var mapsAccount = GetArmClient().GetMapsAccount(mapsAccountId);
            Maps.Models.MapsAccountUpdateParameters mapsAccountUpdateParameters = new Maps.Models.MapsAccountUpdateParameters();

            await mapsAccount.UpdateAsync(mapsAccountUpdateParameters);
        }

        [RecordedTest]
        public async Task Update3()
        {
            // Example: Update to Gen1 Account
            var mapsAccountId = Maps.MapsAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMapsAccount");
            var mapsAccount = GetArmClient().GetMapsAccount(mapsAccountId);
            Maps.Models.MapsAccountUpdateParameters mapsAccountUpdateParameters = new Maps.Models.MapsAccountUpdateParameters()
            {
                Kind = new Maps.Models.Kind("Gen1"),
                Sku = new Maps.Models.Sku(name: new Maps.Models.Name("S1")),
            };

            await mapsAccount.UpdateAsync(mapsAccountUpdateParameters);
        }

        [RecordedTest]
        public async Task Update4()
        {
            // Example: Update to Gen2 Account
            var mapsAccountId = Maps.MapsAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMapsAccount");
            var mapsAccount = GetArmClient().GetMapsAccount(mapsAccountId);
            Maps.Models.MapsAccountUpdateParameters mapsAccountUpdateParameters = new Maps.Models.MapsAccountUpdateParameters()
            {
                Kind = new Maps.Models.Kind("Gen2"),
                Sku = new Maps.Models.Sku(name: new Maps.Models.Name("G2")),
            };

            await mapsAccount.UpdateAsync(mapsAccountUpdateParameters);
        }

        [RecordedTest]
        public async Task GetSas()
        {
            // Example: List Account Sas
            var mapsAccountId = Maps.MapsAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMapsAccount");
            var mapsAccount = GetArmClient().GetMapsAccount(mapsAccountId);
            Maps.Models.AccountSasParameters mapsAccountSasParameters = new Maps.Models.AccountSasParameters(signingKey: new Maps.Models.SigningKey("primaryKey"), principalId: "e917f87b-324d-4728-98ed-e31d311a7d65", maxRatePerSecond: 500, start: "2017-05-24T10:42:03.1567373Z", expiry: "2017-05-24T11:42:03.1567373Z");

            await mapsAccount.GetSasAsync(mapsAccountSasParameters);
        }

        [RecordedTest]
        public async Task GetKeys()
        {
            // Example: List Keys
            var mapsAccountId = Maps.MapsAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMapsAccount");
            var mapsAccount = GetArmClient().GetMapsAccount(mapsAccountId);

            await mapsAccount.GetKeysAsync();
        }

        [RecordedTest]
        public async Task RegenerateKeys()
        {
            // Example: Regenerate Key
            var mapsAccountId = Maps.MapsAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMapsAccount");
            var mapsAccount = GetArmClient().GetMapsAccount(mapsAccountId);
            Maps.Models.MapsKeySpecification keySpecification = new Maps.Models.MapsKeySpecification(keyType: new Maps.Models.KeyType("primary"));

            await mapsAccount.RegenerateKeysAsync(keySpecification);
        }
    }
}
