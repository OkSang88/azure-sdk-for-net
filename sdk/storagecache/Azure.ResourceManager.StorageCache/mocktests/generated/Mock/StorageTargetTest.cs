// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using StorageCacheManagementClient;

namespace StorageCacheManagementClient.Tests.Mock
{
    /// <summary> Test for StorageTarget. </summary>
    public partial class StorageTargetMockTests : MockTestBase
    {
        public StorageTargetMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: StorageTargets_Get
            var storageTargetId = StorageCacheManagementClient.StorageTarget.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "scgroup", "sc1", "st1");
            var storageTarget = GetArmClient().GetStorageTarget(storageTargetId);

            await storageTarget.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: StorageTargets_Delete
            var storageTargetId = StorageCacheManagementClient.StorageTarget.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "scgroup", "sc1", "st1");
            var storageTarget = GetArmClient().GetStorageTarget(storageTargetId);
            string force = null;

            await storageTarget.DeleteAsync(true, force);
        }

        [RecordedTest]
        public async Task DnsRefresh()
        {
            // Example: Caches_DnsRefresh
            var storageTargetId = StorageCacheManagementClient.StorageTarget.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "scgroup", "sc", "st1");
            var storageTarget = GetArmClient().GetStorageTarget(storageTargetId);

            await storageTarget.DnsRefreshAsync(true);
        }

        [RecordedTest]
        public async Task FlushStorageTarget()
        {
            // Example: StorageTargets_Flush
            var storageTargetId = StorageCacheManagementClient.StorageTarget.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "scgroup", "sc", "st1");
            var storageTarget = GetArmClient().GetStorageTarget(storageTargetId);

            await storageTarget.FlushStorageTargetAsync(true);
        }

        [RecordedTest]
        public async Task SuspendStorageTarget()
        {
            // Example: StorageTargets_Suspend
            var storageTargetId = StorageCacheManagementClient.StorageTarget.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "scgroup", "sc", "st1");
            var storageTarget = GetArmClient().GetStorageTarget(storageTargetId);

            await storageTarget.SuspendStorageTargetAsync(true);
        }

        [RecordedTest]
        public async Task ResumeStorageTarget()
        {
            // Example: StorageTargets_Resume
            var storageTargetId = StorageCacheManagementClient.StorageTarget.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "scgroup", "sc", "st1");
            var storageTarget = GetArmClient().GetStorageTarget(storageTargetId);

            await storageTarget.ResumeStorageTargetAsync(true);
        }
    }
}
