// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.SecurityInsights.Models;

namespace Azure.ResourceManager.SecurityInsights
{
    /// <summary> A class to add extension methods to ResourceGroup. </summary>
    public static partial class ResourceGroupExtensions
    {
        #region AlertRule
        /// <summary> Gets an object representing a AlertRuleCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> Returns a <see cref="AlertRuleCollection" /> object. </returns>
        public static AlertRuleCollection GetAlertRules(this ResourceGroup resourceGroup, string workspaceName)
        {
            return new AlertRuleCollection(resourceGroup, workspaceName);
        }
        #endregion

        #region AlertRuleTemplate
        /// <summary> Gets an object representing a AlertRuleTemplateCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> Returns a <see cref="AlertRuleTemplateCollection" /> object. </returns>
        public static AlertRuleTemplateCollection GetAlertRuleTemplates(this ResourceGroup resourceGroup, string workspaceName)
        {
            return new AlertRuleTemplateCollection(resourceGroup, workspaceName);
        }
        #endregion

        #region AutomationRule
        /// <summary> Gets an object representing a AutomationRuleCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> Returns a <see cref="AutomationRuleCollection" /> object. </returns>
        public static AutomationRuleCollection GetAutomationRules(this ResourceGroup resourceGroup, string workspaceName)
        {
            return new AutomationRuleCollection(resourceGroup, workspaceName);
        }
        #endregion

        #region Bookmark
        /// <summary> Gets an object representing a BookmarkCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> Returns a <see cref="BookmarkCollection" /> object. </returns>
        public static BookmarkCollection GetBookmarks(this ResourceGroup resourceGroup, string workspaceName)
        {
            return new BookmarkCollection(resourceGroup, workspaceName);
        }
        #endregion

        #region EntityQuery
        /// <summary> Gets an object representing a EntityQueryCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> Returns a <see cref="EntityQueryCollection" /> object. </returns>
        public static EntityQueryCollection GetEntityQueries(this ResourceGroup resourceGroup, string workspaceName)
        {
            return new EntityQueryCollection(resourceGroup, workspaceName);
        }
        #endregion

        #region Entity
        /// <summary> Gets an object representing a EntityCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> Returns a <see cref="EntityCollection" /> object. </returns>
        public static EntityCollection GetEntities(this ResourceGroup resourceGroup, string workspaceName)
        {
            return new EntityCollection(resourceGroup, workspaceName);
        }
        #endregion

        #region Incident
        /// <summary> Gets an object representing a IncidentCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> Returns a <see cref="IncidentCollection" /> object. </returns>
        public static IncidentCollection GetIncidents(this ResourceGroup resourceGroup, string workspaceName)
        {
            return new IncidentCollection(resourceGroup, workspaceName);
        }
        #endregion

        #region MetadataModel
        /// <summary> Gets an object representing a MetadataModelCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> Returns a <see cref="MetadataModelCollection" /> object. </returns>
        public static MetadataModelCollection GetMetadataModels(this ResourceGroup resourceGroup, string workspaceName)
        {
            return new MetadataModelCollection(resourceGroup, workspaceName);
        }
        #endregion

        #region SentinelOnboardingState
        /// <summary> Gets an object representing a SentinelOnboardingStateCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> Returns a <see cref="SentinelOnboardingStateCollection" /> object. </returns>
        public static SentinelOnboardingStateCollection GetSentinelOnboardingStates(this ResourceGroup resourceGroup, string workspaceName)
        {
            return new SentinelOnboardingStateCollection(resourceGroup, workspaceName);
        }
        #endregion

        #region Settings
        /// <summary> Gets an object representing a SettingsCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> Returns a <see cref="SettingsCollection" /> object. </returns>
        public static SettingsCollection GetSettings(this ResourceGroup resourceGroup, string workspaceName)
        {
            return new SettingsCollection(resourceGroup, workspaceName);
        }
        #endregion

        #region SourceControl
        /// <summary> Gets an object representing a SourceControlCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> Returns a <see cref="SourceControlCollection" /> object. </returns>
        public static SourceControlCollection GetSourceControls(this ResourceGroup resourceGroup, string workspaceName)
        {
            return new SourceControlCollection(resourceGroup, workspaceName);
        }
        #endregion

        #region Watchlist
        /// <summary> Gets an object representing a WatchlistCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> Returns a <see cref="WatchlistCollection" /> object. </returns>
        public static WatchlistCollection GetWatchlists(this ResourceGroup resourceGroup, string workspaceName)
        {
            return new WatchlistCollection(resourceGroup, workspaceName);
        }
        #endregion

        #region DataConnector
        /// <summary> Gets an object representing a DataConnectorCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> Returns a <see cref="DataConnectorCollection" /> object. </returns>
        public static DataConnectorCollection GetDataConnectors(this ResourceGroup resourceGroup, string workspaceName)
        {
            return new DataConnectorCollection(resourceGroup, workspaceName);
        }
        #endregion

        #region ThreatIntelligenceInformation
        /// <summary> Gets an object representing a ThreatIntelligenceInformationCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> Returns a <see cref="ThreatIntelligenceInformationCollection" /> object. </returns>
        public static ThreatIntelligenceInformationCollection GetAllThreatIntelligenceInformation(this ResourceGroup resourceGroup, string workspaceName)
        {
            return new ThreatIntelligenceInformationCollection(resourceGroup, workspaceName);
        }
        #endregion

        #region OfficeConsent
        /// <summary> Gets an object representing a OfficeConsentCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> Returns a <see cref="OfficeConsentCollection" /> object. </returns>
        public static OfficeConsentCollection GetOfficeConsents(this ResourceGroup resourceGroup, string workspaceName)
        {
            return new OfficeConsentCollection(resourceGroup, workspaceName);
        }
        #endregion

        #region EntityQueryTemplate
        /// <summary> Gets an object representing a EntityQueryTemplateCollection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <returns> Returns a <see cref="EntityQueryTemplateCollection" /> object. </returns>
        public static EntityQueryTemplateCollection GetEntityQueryTemplates(this ResourceGroup resourceGroup, string workspaceName)
        {
            return new EntityQueryTemplateCollection(resourceGroup, workspaceName);
        }
        #endregion

        private static IPGeodataRestOperations GetIPGeodataRestOperations(ClientDiagnostics clientDiagnostics, TokenCredential credential, ArmClientOptions clientOptions, HttpPipeline pipeline, Uri endpoint = null)
        {
            return new IPGeodataRestOperations(clientDiagnostics, pipeline, clientOptions, endpoint);
        }

        private static DomainWhoisRestOperations GetDomainWhoisRestOperations(ClientDiagnostics clientDiagnostics, TokenCredential credential, ArmClientOptions clientOptions, HttpPipeline pipeline, Uri endpoint = null)
        {
            return new DomainWhoisRestOperations(clientDiagnostics, pipeline, clientOptions, endpoint);
        }

        private static SourceControlRestOperations GetSourceControlRestOperations(ClientDiagnostics clientDiagnostics, TokenCredential credential, ArmClientOptions clientOptions, HttpPipeline pipeline, Uri endpoint = null)
        {
            return new SourceControlRestOperations(clientDiagnostics, pipeline, clientOptions, endpoint);
        }

        private static DataConnectorsCheckRequirementsRestOperations GetDataConnectorsCheckRequirementsRestOperations(ClientDiagnostics clientDiagnostics, TokenCredential credential, ArmClientOptions clientOptions, HttpPipeline pipeline, Uri endpoint = null)
        {
            return new DataConnectorsCheckRequirementsRestOperations(clientDiagnostics, pipeline, clientOptions, endpoint);
        }

        private static ThreatIntelligenceIndicatorRestOperations GetThreatIntelligenceIndicatorRestOperations(ClientDiagnostics clientDiagnostics, TokenCredential credential, ArmClientOptions clientOptions, HttpPipeline pipeline, Uri endpoint = null)
        {
            return new ThreatIntelligenceIndicatorRestOperations(clientDiagnostics, pipeline, clientOptions, endpoint);
        }

        private static ThreatIntelligenceIndicatorMetricsRestOperations GetThreatIntelligenceIndicatorMetricsRestOperations(ClientDiagnostics clientDiagnostics, TokenCredential credential, ArmClientOptions clientOptions, HttpPipeline pipeline, Uri endpoint = null)
        {
            return new ThreatIntelligenceIndicatorMetricsRestOperations(clientDiagnostics, pipeline, clientOptions, endpoint);
        }

        /// <summary> Get geodata for a single IP address. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="ipAddress"> IP address (v4 or v6) to be enriched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ipAddress"/> is null. </exception>
        public static async Task<Response<EnrichmentIpGeodata>> GetIPGeodatumAsync(this ResourceGroup resourceGroup, string ipAddress, CancellationToken cancellationToken = default)
        {
            if (ipAddress == null)
            {
                throw new ArgumentNullException(nameof(ipAddress));
            }

            return await resourceGroup.UseClientContext(async (baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.GetIPGeodatum");
                scope.Start();
                try
                {
                    var restOperations = GetIPGeodataRestOperations(clientDiagnostics, credential, options, pipeline, baseUri);
                    var response = await restOperations.GetAsync(resourceGroup.Id.SubscriptionId, resourceGroup.Id.ResourceGroupName, ipAddress, cancellationToken).ConfigureAwait(false);
                    return response;
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            ).ConfigureAwait(false);
        }

        /// <summary> Get geodata for a single IP address. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="ipAddress"> IP address (v4 or v6) to be enriched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ipAddress"/> is null. </exception>
        public static Response<EnrichmentIpGeodata> GetIPGeodatum(this ResourceGroup resourceGroup, string ipAddress, CancellationToken cancellationToken = default)
        {
            if (ipAddress == null)
            {
                throw new ArgumentNullException(nameof(ipAddress));
            }

            return resourceGroup.UseClientContext((baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.GetIPGeodatum");
                scope.Start();
                try
                {
                    var restOperations = GetIPGeodataRestOperations(clientDiagnostics, credential, options, pipeline, baseUri);
                    var response = restOperations.Get(resourceGroup.Id.SubscriptionId, resourceGroup.Id.ResourceGroupName, ipAddress, cancellationToken);
                    return response;
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            );
        }

        /// <summary> Get whois information for a single domain name. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="domain"> Domain name to be enriched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="domain"/> is null. </exception>
        public static async Task<Response<EnrichmentDomainWhois>> GetDomainWhoiAsync(this ResourceGroup resourceGroup, string domain, CancellationToken cancellationToken = default)
        {
            if (domain == null)
            {
                throw new ArgumentNullException(nameof(domain));
            }

            return await resourceGroup.UseClientContext(async (baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.GetDomainWhoi");
                scope.Start();
                try
                {
                    var restOperations = GetDomainWhoisRestOperations(clientDiagnostics, credential, options, pipeline, baseUri);
                    var response = await restOperations.GetAsync(resourceGroup.Id.SubscriptionId, resourceGroup.Id.ResourceGroupName, domain, cancellationToken).ConfigureAwait(false);
                    return response;
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            ).ConfigureAwait(false);
        }

        /// <summary> Get whois information for a single domain name. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="domain"> Domain name to be enriched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="domain"/> is null. </exception>
        public static Response<EnrichmentDomainWhois> GetDomainWhoi(this ResourceGroup resourceGroup, string domain, CancellationToken cancellationToken = default)
        {
            if (domain == null)
            {
                throw new ArgumentNullException(nameof(domain));
            }

            return resourceGroup.UseClientContext((baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.GetDomainWhoi");
                scope.Start();
                try
                {
                    var restOperations = GetDomainWhoisRestOperations(clientDiagnostics, credential, options, pipeline, baseUri);
                    var response = restOperations.Get(resourceGroup.Id.SubscriptionId, resourceGroup.Id.ResourceGroupName, domain, cancellationToken);
                    return response;
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            );
        }

        /// <summary> Lists the Repos for this <see cref="ResourceGroup" />. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="repoType"> The repo type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/> is null. </exception>
        /// <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<Repo> GetRepositoriesSourceControlsAsync(this ResourceGroup resourceGroup, string workspaceName, RepoType repoType, CancellationToken cancellationToken = default)
        {
            if (workspaceName == null)
            {
                throw new ArgumentNullException(nameof(workspaceName));
            }

            return resourceGroup.UseClientContext((baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                var restOperations = GetSourceControlRestOperations(clientDiagnostics, credential, options, pipeline, baseUri);
                async Task<Page<Repo>> FirstPageFunc(int? pageSizeHint)
                {
                    using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.GetRepositoriesSourceControls");
                    scope.Start();
                    try
                    {
                        var response = await restOperations.ListRepositoriesAsync(resourceGroup.Id.SubscriptionId, resourceGroup.Id.ResourceGroupName, workspaceName, repoType, cancellationToken: cancellationToken).ConfigureAwait(false);
                        return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                async Task<Page<Repo>> NextPageFunc(string nextLink, int? pageSizeHint)
                {
                    using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.GetRepositoriesSourceControls");
                    scope.Start();
                    try
                    {
                        var response = await restOperations.ListRepositoriesNextPageAsync(nextLink, resourceGroup.Id.SubscriptionId, resourceGroup.Id.ResourceGroupName, workspaceName, repoType, cancellationToken: cancellationToken).ConfigureAwait(false);
                        return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
            }
            );
        }

        /// <summary> Lists the Repos for this <see cref="ResourceGroup" />. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="repoType"> The repo type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/> is null. </exception>
        /// <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        public static Pageable<Repo> GetRepositoriesSourceControls(this ResourceGroup resourceGroup, string workspaceName, RepoType repoType, CancellationToken cancellationToken = default)
        {
            if (workspaceName == null)
            {
                throw new ArgumentNullException(nameof(workspaceName));
            }

            return resourceGroup.UseClientContext((baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                var restOperations = GetSourceControlRestOperations(clientDiagnostics, credential, options, pipeline, baseUri);
                Page<Repo> FirstPageFunc(int? pageSizeHint)
                {
                    using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.GetRepositoriesSourceControls");
                    scope.Start();
                    try
                    {
                        var response = restOperations.ListRepositories(resourceGroup.Id.SubscriptionId, resourceGroup.Id.ResourceGroupName, workspaceName, repoType, cancellationToken: cancellationToken);
                        return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                Page<Repo> NextPageFunc(string nextLink, int? pageSizeHint)
                {
                    using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.GetRepositoriesSourceControls");
                    scope.Start();
                    try
                    {
                        var response = restOperations.ListRepositoriesNextPage(nextLink, resourceGroup.Id.SubscriptionId, resourceGroup.Id.ResourceGroupName, workspaceName, repoType, cancellationToken: cancellationToken);
                        return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
            }
            );
        }

        /// <summary> Get requirements state for a data connector type. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="dataConnectorsCheckRequirements"> The parameters for requirements check message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/> or <paramref name="dataConnectorsCheckRequirements"/> is null. </exception>
        public static async Task<Response<DataConnectorRequirementsState>> PostDataConnectorsCheckRequirementAsync(this ResourceGroup resourceGroup, string workspaceName, DataConnectorsCheckRequirements dataConnectorsCheckRequirements, CancellationToken cancellationToken = default)
        {
            if (workspaceName == null)
            {
                throw new ArgumentNullException(nameof(workspaceName));
            }
            if (dataConnectorsCheckRequirements == null)
            {
                throw new ArgumentNullException(nameof(dataConnectorsCheckRequirements));
            }

            return await resourceGroup.UseClientContext(async (baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.PostDataConnectorsCheckRequirement");
                scope.Start();
                try
                {
                    var restOperations = GetDataConnectorsCheckRequirementsRestOperations(clientDiagnostics, credential, options, pipeline, baseUri);
                    var response = await restOperations.PostAsync(resourceGroup.Id.SubscriptionId, resourceGroup.Id.ResourceGroupName, workspaceName, dataConnectorsCheckRequirements, cancellationToken).ConfigureAwait(false);
                    return response;
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            ).ConfigureAwait(false);
        }

        /// <summary> Get requirements state for a data connector type. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="dataConnectorsCheckRequirements"> The parameters for requirements check message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/> or <paramref name="dataConnectorsCheckRequirements"/> is null. </exception>
        public static Response<DataConnectorRequirementsState> PostDataConnectorsCheckRequirement(this ResourceGroup resourceGroup, string workspaceName, DataConnectorsCheckRequirements dataConnectorsCheckRequirements, CancellationToken cancellationToken = default)
        {
            if (workspaceName == null)
            {
                throw new ArgumentNullException(nameof(workspaceName));
            }
            if (dataConnectorsCheckRequirements == null)
            {
                throw new ArgumentNullException(nameof(dataConnectorsCheckRequirements));
            }

            return resourceGroup.UseClientContext((baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.PostDataConnectorsCheckRequirement");
                scope.Start();
                try
                {
                    var restOperations = GetDataConnectorsCheckRequirementsRestOperations(clientDiagnostics, credential, options, pipeline, baseUri);
                    var response = restOperations.Post(resourceGroup.Id.SubscriptionId, resourceGroup.Id.ResourceGroupName, workspaceName, dataConnectorsCheckRequirements, cancellationToken);
                    return response;
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            );
        }

        /// <summary> Create a new threat intelligence indicator. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="threatIntelligenceProperties"> Properties of threat intelligence indicators to create and update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/> or <paramref name="threatIntelligenceProperties"/> is null. </exception>
        public static async Task<Response<ThreatIntelligenceInformation>> CreateIndicatorThreatIntelligenceIndicatorAsync(this ResourceGroup resourceGroup, string workspaceName, ThreatIntelligenceIndicatorModelForRequestBody threatIntelligenceProperties, CancellationToken cancellationToken = default)
        {
            if (workspaceName == null)
            {
                throw new ArgumentNullException(nameof(workspaceName));
            }
            if (threatIntelligenceProperties == null)
            {
                throw new ArgumentNullException(nameof(threatIntelligenceProperties));
            }

            return await resourceGroup.UseClientContext(async (baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.CreateIndicatorThreatIntelligenceIndicator");
                scope.Start();
                try
                {
                    var restOperations = GetThreatIntelligenceIndicatorRestOperations(clientDiagnostics, credential, options, pipeline, baseUri);
                    var response = await restOperations.CreateIndicatorAsync(resourceGroup.Id.SubscriptionId, resourceGroup.Id.ResourceGroupName, workspaceName, threatIntelligenceProperties, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new ThreatIntelligenceInformation(resourceGroup, response.Value), response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            ).ConfigureAwait(false);
        }

        /// <summary> Create a new threat intelligence indicator. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="threatIntelligenceProperties"> Properties of threat intelligence indicators to create and update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/> or <paramref name="threatIntelligenceProperties"/> is null. </exception>
        public static Response<ThreatIntelligenceInformation> CreateIndicatorThreatIntelligenceIndicator(this ResourceGroup resourceGroup, string workspaceName, ThreatIntelligenceIndicatorModelForRequestBody threatIntelligenceProperties, CancellationToken cancellationToken = default)
        {
            if (workspaceName == null)
            {
                throw new ArgumentNullException(nameof(workspaceName));
            }
            if (threatIntelligenceProperties == null)
            {
                throw new ArgumentNullException(nameof(threatIntelligenceProperties));
            }

            return resourceGroup.UseClientContext((baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.CreateIndicatorThreatIntelligenceIndicator");
                scope.Start();
                try
                {
                    var restOperations = GetThreatIntelligenceIndicatorRestOperations(clientDiagnostics, credential, options, pipeline, baseUri);
                    var response = restOperations.CreateIndicator(resourceGroup.Id.SubscriptionId, resourceGroup.Id.ResourceGroupName, workspaceName, threatIntelligenceProperties, cancellationToken);
                    return Response.FromValue(new ThreatIntelligenceInformation(resourceGroup, response.Value), response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            );
        }

        /// <summary> Lists the ThreatIntelligenceInformation for this <see cref="ResourceGroup" />. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="threatIntelligenceFilteringCriteria"> Filtering criteria for querying threat intelligence indicators. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/> or <paramref name="threatIntelligenceFilteringCriteria"/> is null. </exception>
        /// <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ThreatIntelligenceInformation> QueryIndicatorsThreatIntelligenceIndicatorsAsync(this ResourceGroup resourceGroup, string workspaceName, ThreatIntelligenceFilteringCriteria threatIntelligenceFilteringCriteria, CancellationToken cancellationToken = default)
        {
            if (workspaceName == null)
            {
                throw new ArgumentNullException(nameof(workspaceName));
            }
            if (threatIntelligenceFilteringCriteria == null)
            {
                throw new ArgumentNullException(nameof(threatIntelligenceFilteringCriteria));
            }

            return resourceGroup.UseClientContext((baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                var restOperations = GetThreatIntelligenceIndicatorRestOperations(clientDiagnostics, credential, options, pipeline, baseUri);
                async Task<Page<ThreatIntelligenceInformation>> FirstPageFunc(int? pageSizeHint)
                {
                    using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.QueryIndicatorsThreatIntelligenceIndicators");
                    scope.Start();
                    try
                    {
                        var response = await restOperations.QueryIndicatorsAsync(resourceGroup.Id.SubscriptionId, resourceGroup.Id.ResourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, cancellationToken: cancellationToken).ConfigureAwait(false);
                        return Page.FromValues(response.Value.Value.Select(value => new ThreatIntelligenceInformation(resourceGroup, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                async Task<Page<ThreatIntelligenceInformation>> NextPageFunc(string nextLink, int? pageSizeHint)
                {
                    using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.QueryIndicatorsThreatIntelligenceIndicators");
                    scope.Start();
                    try
                    {
                        var response = await restOperations.QueryIndicatorsNextPageAsync(nextLink, resourceGroup.Id.SubscriptionId, resourceGroup.Id.ResourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, cancellationToken: cancellationToken).ConfigureAwait(false);
                        return Page.FromValues(response.Value.Value.Select(value => new ThreatIntelligenceInformation(resourceGroup, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
            }
            );
        }

        /// <summary> Lists the ThreatIntelligenceInformation for this <see cref="ResourceGroup" />. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="threatIntelligenceFilteringCriteria"> Filtering criteria for querying threat intelligence indicators. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/> or <paramref name="threatIntelligenceFilteringCriteria"/> is null. </exception>
        /// <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        public static Pageable<ThreatIntelligenceInformation> QueryIndicatorsThreatIntelligenceIndicators(this ResourceGroup resourceGroup, string workspaceName, ThreatIntelligenceFilteringCriteria threatIntelligenceFilteringCriteria, CancellationToken cancellationToken = default)
        {
            if (workspaceName == null)
            {
                throw new ArgumentNullException(nameof(workspaceName));
            }
            if (threatIntelligenceFilteringCriteria == null)
            {
                throw new ArgumentNullException(nameof(threatIntelligenceFilteringCriteria));
            }

            return resourceGroup.UseClientContext((baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                var restOperations = GetThreatIntelligenceIndicatorRestOperations(clientDiagnostics, credential, options, pipeline, baseUri);
                Page<ThreatIntelligenceInformation> FirstPageFunc(int? pageSizeHint)
                {
                    using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.QueryIndicatorsThreatIntelligenceIndicators");
                    scope.Start();
                    try
                    {
                        var response = restOperations.QueryIndicators(resourceGroup.Id.SubscriptionId, resourceGroup.Id.ResourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, cancellationToken: cancellationToken);
                        return Page.FromValues(response.Value.Value.Select(value => new ThreatIntelligenceInformation(resourceGroup, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                Page<ThreatIntelligenceInformation> NextPageFunc(string nextLink, int? pageSizeHint)
                {
                    using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.QueryIndicatorsThreatIntelligenceIndicators");
                    scope.Start();
                    try
                    {
                        var response = restOperations.QueryIndicatorsNextPage(nextLink, resourceGroup.Id.SubscriptionId, resourceGroup.Id.ResourceGroupName, workspaceName, threatIntelligenceFilteringCriteria, cancellationToken: cancellationToken);
                        return Page.FromValues(response.Value.Value.Select(value => new ThreatIntelligenceInformation(resourceGroup, value)), response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
            }
            );
        }

        /// <summary> Lists the ThreatIntelligenceMetrics for this <see cref="ResourceGroup" />. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/> is null. </exception>
        /// <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ThreatIntelligenceMetrics> GetThreatIntelligenceIndicatorMetricsAsync(this ResourceGroup resourceGroup, string workspaceName, CancellationToken cancellationToken = default)
        {
            if (workspaceName == null)
            {
                throw new ArgumentNullException(nameof(workspaceName));
            }

            return resourceGroup.UseClientContext((baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                var restOperations = GetThreatIntelligenceIndicatorMetricsRestOperations(clientDiagnostics, credential, options, pipeline, baseUri);
                async Task<Page<ThreatIntelligenceMetrics>> FirstPageFunc(int? pageSizeHint)
                {
                    using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.GetThreatIntelligenceIndicatorMetrics");
                    scope.Start();
                    try
                    {
                        var response = await restOperations.ListAsync(resourceGroup.Id.SubscriptionId, resourceGroup.Id.ResourceGroupName, workspaceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                        return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
            }
            );
        }

        /// <summary> Lists the ThreatIntelligenceMetrics for this <see cref="ResourceGroup" />. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/> is null. </exception>
        /// <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        public static Pageable<ThreatIntelligenceMetrics> GetThreatIntelligenceIndicatorMetrics(this ResourceGroup resourceGroup, string workspaceName, CancellationToken cancellationToken = default)
        {
            if (workspaceName == null)
            {
                throw new ArgumentNullException(nameof(workspaceName));
            }

            return resourceGroup.UseClientContext((baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                var restOperations = GetThreatIntelligenceIndicatorMetricsRestOperations(clientDiagnostics, credential, options, pipeline, baseUri);
                Page<ThreatIntelligenceMetrics> FirstPageFunc(int? pageSizeHint)
                {
                    using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.GetThreatIntelligenceIndicatorMetrics");
                    scope.Start();
                    try
                    {
                        var response = restOperations.List(resourceGroup.Id.SubscriptionId, resourceGroup.Id.ResourceGroupName, workspaceName, cancellationToken: cancellationToken);
                        return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
            }
            );
        }
    }
}
