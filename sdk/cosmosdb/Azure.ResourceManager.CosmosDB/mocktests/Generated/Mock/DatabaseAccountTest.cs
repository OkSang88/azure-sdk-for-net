// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.CosmosDB.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.CosmosDB.Tests.Mock
{
    /// <summary> Test for DatabaseAccount. </summary>
    public partial class DatabaseAccountMockTests : MockTestBase
    {
        public DatabaseAccountMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: CosmosDBDatabaseAccountGet
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));

            await databaseAccount.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: CosmosDBDatabaseAccountDelete
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));

            await databaseAccount.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: CosmosDBDatabaseAccountPatch
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));
            CosmosDB.Models.DatabaseAccountUpdateOptions updateParameters = new CosmosDB.Models.DatabaseAccountUpdateOptions()
            {
                Location = "westus",
                Identity = new ResourceIdentity(),
                ConsistencyPolicy = new CosmosDB.Models.ConsistencyPolicy(defaultConsistencyLevel: CosmosDB.Models.DefaultConsistencyLevel.BoundedStaleness)
                {
                    MaxStalenessPrefix = 200,
                    MaxIntervalInSeconds = 10,
                },
                IsVirtualNetworkFilterEnabled = true,
                DefaultIdentity = "FirstPartyIdentity",
                EnableFreeTier = false,
                EnableAnalyticalStorage = true,
                AnalyticalStorageConfiguration = new CosmosDB.Models.AnalyticalStorageConfiguration()
                {
                    SchemaType = new CosmosDB.Models.AnalyticalStorageSchemaType("WellDefined"),
                },
                BackupPolicy = new CosmosDB.Models.PeriodicModeBackupPolicy()
                {
                    PeriodicModeProperties = new CosmosDB.Models.PeriodicModeProperties()
                    {
                        BackupIntervalInMinutes = 240,
                        BackupRetentionIntervalInHours = 720,
                    },
                    Type = new CosmosDB.Models.BackupPolicyType("Periodic"),
                },
                NetworkAclBypass = CosmosDB.Models.NetworkAclBypass.AzureServices,
            };

            await databaseAccount.UpdateAsync(updateParameters);
        }

        [RecordedTest]
        public async Task FailoverPriorityChangeAsync()
        {
            // Example: CosmosDBDatabaseAccountFailoverPriorityChange
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1-failover"));
            CosmosDB.Models.FailoverPolicies failoverParameters = new CosmosDB.Models.FailoverPolicies(failoverPoliciesValue: new List<CosmosDB.Models.FailoverPolicy>()
{
new CosmosDB.Models.FailoverPolicy()
{
LocationName = "eastus", FailoverPriority = 0, },new CosmosDB.Models.FailoverPolicy()
{
LocationName = "westus", FailoverPriority = 1, },});

            await databaseAccount.FailoverPriorityChangeAsync(failoverParameters);
        }

        [RecordedTest]
        public async Task GetKeysAsync()
        {
            // Example: CosmosDBDatabaseAccountListKeys
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));

            await databaseAccount.GetKeysAsync();
        }

        [RecordedTest]
        public async Task GetConnectionStringsAsync()
        {
            // Example: CosmosDBDatabaseAccountListConnectionStrings
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));

            await databaseAccount.GetConnectionStringsAsync();
        }

        [RecordedTest]
        public async Task GetConnectionStringsAsync2()
        {
            // Example: CosmosDBDatabaseAccountListConnectionStringsMongo
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/mongo-ddb1"));

            await databaseAccount.GetConnectionStringsAsync();
        }

        [RecordedTest]
        public async Task OfflineRegionAsync()
        {
            // Example: CosmosDBDatabaseAccountOfflineRegion
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));
            CosmosDB.Models.RegionForOnlineOffline regionParameterForOffline = new CosmosDB.Models.RegionForOnlineOffline(region: default /* don't find example value for this parameter!*/);

            await databaseAccount.OfflineRegionAsync(regionParameterForOffline);
        }

        [RecordedTest]
        public async Task OnlineRegionAsync()
        {
            // Example: CosmosDBDatabaseAccountOnlineRegion
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));
            CosmosDB.Models.RegionForOnlineOffline regionParameterForOnline = new CosmosDB.Models.RegionForOnlineOffline(region: default /* don't find example value for this parameter!*/);

            await databaseAccount.OnlineRegionAsync(regionParameterForOnline);
        }

        [RecordedTest]
        public async Task GetReadOnlyKeysAsync()
        {
            // Example: CosmosDBDatabaseAccountListReadOnlyKeys
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));

            await databaseAccount.GetReadOnlyKeysAsync();
        }

        [RecordedTest]
        public async Task RegenerateKeyAsync()
        {
            // Example: CosmosDBDatabaseAccountRegenerateKey
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));
            CosmosDB.Models.DatabaseAccountRegenerateKeyOptions keyToRegenerate = new CosmosDB.Models.DatabaseAccountRegenerateKeyOptions(keyKind: new CosmosDB.Models.KeyKind("primary"));

            await databaseAccount.RegenerateKeyAsync(keyToRegenerate);
        }

        [RecordedTest]
        public void GetMetricsAsync()
        {
            // Example: CosmosDBDatabaseAccountGetMetrics
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));
            string filter = "$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z";

            databaseAccount.GetMetricsAsync(filter);
        }

        [RecordedTest]
        public void GetUsagesAsync()
        {
            // Example: CosmosDBDatabaseAccountGetUsages
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));
            string filter = "$filter=name.value eq 'Storage'";

            databaseAccount.GetUsagesAsync(filter);
        }

        [RecordedTest]
        public void GetMetricDefinitionsAsync()
        {
            // Example: CosmosDBDatabaseAccountGetMetricDefinitions
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));

            databaseAccount.GetMetricDefinitionsAsync();
        }

        [RecordedTest]
        public void GetMetricsDatabasesAsync()
        {
            // Example: CosmosDBDatabaseGetMetrics
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));
            string databaseRid = "rid";
            string filter = "$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z";

            databaseAccount.GetMetricsDatabasesAsync(databaseRid, filter);
        }

        [RecordedTest]
        public void GetUsagesDatabasesAsync()
        {
            // Example: CosmosDBDatabaseGetUsages
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));
            string databaseRid = "databaseRid";
            string filter = "$filter=name.value eq 'Storage'";

            databaseAccount.GetUsagesDatabasesAsync(databaseRid, filter);
        }

        [RecordedTest]
        public void GetMetricDefinitionsDatabasesAsync()
        {
            // Example: CosmosDBDatabaseGetMetricDefinitions
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));
            string databaseRid = "databaseRid";

            databaseAccount.GetMetricDefinitionsDatabasesAsync(databaseRid);
        }

        [RecordedTest]
        public void GetMetricsCollectionsAsync()
        {
            // Example: CosmosDBCollectionGetMetrics
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));
            string databaseRid = "databaseRid";
            string collectionRid = "collectionRid";
            string filter = "$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z";

            databaseAccount.GetMetricsCollectionsAsync(databaseRid, collectionRid, filter);
        }

        [RecordedTest]
        public void GetUsagesCollectionsAsync()
        {
            // Example: CosmosDBCollectionGetUsages
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));
            string databaseRid = "databaseRid";
            string collectionRid = "collectionRid";
            string filter = "$filter=name.value eq 'Storage'";

            databaseAccount.GetUsagesCollectionsAsync(databaseRid, collectionRid, filter);
        }

        [RecordedTest]
        public void GetMetricDefinitionsCollectionsAsync()
        {
            // Example: CosmosDBCollectionGetMetricDefinitions
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));
            string databaseRid = "databaseRid";
            string collectionRid = "collectionRid";

            databaseAccount.GetMetricDefinitionsCollectionsAsync(databaseRid, collectionRid);
        }

        [RecordedTest]
        public void GetMetricsCollectionRegionsAsync()
        {
            // Example: CosmosDBRegionCollectionGetMetrics
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));
            string region = "North Europe";
            string databaseRid = "databaseRid";
            string collectionRid = "collectionRid";
            string filter = "$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z";

            databaseAccount.GetMetricsCollectionRegionsAsync(region, databaseRid, collectionRid, filter);
        }

        [RecordedTest]
        public void GetMetricsDatabaseAccountRegionsAsync()
        {
            // Example: CosmosDBDatabaseAccountRegionGetMetrics
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));
            string region = "North Europe";
            string filter = "$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z";

            databaseAccount.GetMetricsDatabaseAccountRegionsAsync(region, filter);
        }

        [RecordedTest]
        public void GetMetricsPercentileSourceTargetsAsync()
        {
            // Example: CosmosDBDatabaseAccountRegionGetMetrics
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));
            string sourceRegion = "West Central US";
            string targetRegion = "East US";
            string filter = "$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z";

            databaseAccount.GetMetricsPercentileSourceTargetsAsync(sourceRegion, targetRegion, filter);
        }

        [RecordedTest]
        public void GetMetricsPercentileTargetsAsync()
        {
            // Example: CosmosDBDatabaseAccountRegionGetMetrics
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));
            string targetRegion = "East US";
            string filter = "$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z";

            databaseAccount.GetMetricsPercentileTargetsAsync(targetRegion, filter);
        }

        [RecordedTest]
        public void GetMetricsPercentilesAsync()
        {
            // Example: CosmosDBDatabaseAccountRegionGetMetrics
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));
            string filter = "$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z";

            databaseAccount.GetMetricsPercentilesAsync(filter);
        }

        [RecordedTest]
        public void GetMetricsCollectionPartitionRegionsAsync()
        {
            // Example: CosmosDBDatabaseAccountRegionGetMetrics
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));
            string region = "North Europe";
            string databaseRid = "databaseRid";
            string collectionRid = "collectionRid";
            string filter = "$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z";

            databaseAccount.GetMetricsCollectionPartitionRegionsAsync(region, databaseRid, collectionRid, filter);
        }

        [RecordedTest]
        public void GetMetricsCollectionPartitionsAsync()
        {
            // Example: CosmosDBDatabaseAccountRegionGetMetrics
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));
            string databaseRid = "databaseRid";
            string collectionRid = "collectionRid";
            string filter = "$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z";

            databaseAccount.GetMetricsCollectionPartitionsAsync(databaseRid, collectionRid, filter);
        }

        [RecordedTest]
        public void GetUsagesCollectionPartitionsAsync()
        {
            // Example: CosmosDBCollectionGetUsages
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));
            string databaseRid = "databaseRid";
            string collectionRid = "collectionRid";
            string filter = "$filter=name.value eq 'Partition Storage'";

            databaseAccount.GetUsagesCollectionPartitionsAsync(databaseRid, collectionRid, filter);
        }

        [RecordedTest]
        public void GetMetricsPartitionKeyRangeIdsAsync()
        {
            // Example: CosmosDBDatabaseAccountRegionGetMetrics
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));
            string databaseRid = "databaseRid";
            string collectionRid = "collectionRid";
            string partitionKeyRangeId = "0";
            string filter = "$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z";

            databaseAccount.GetMetricsPartitionKeyRangeIdsAsync(databaseRid, collectionRid, partitionKeyRangeId, filter);
        }

        [RecordedTest]
        public void GetMetricsPartitionKeyRangeIdRegionsAsync()
        {
            // Example: CosmosDBDatabaseAccountRegionGetMetrics
            var databaseAccount = GetArmClient().GetDatabaseAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"));
            string region = "West US";
            string databaseRid = "databaseRid";
            string collectionRid = "collectionRid";
            string partitionKeyRangeId = "0";
            string filter = "$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z";

            databaseAccount.GetMetricsPartitionKeyRangeIdRegionsAsync(region, databaseRid, collectionRid, partitionKeyRangeId, filter);
        }
    }
}
