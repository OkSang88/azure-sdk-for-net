// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for WorkloadGroup. </summary>
    public partial class WorkloadGroupMockTests : MockTestBase
    {
        public WorkloadGroupMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Gets a workload group for a data warehouse
            var workloadGroupId = Sql.WorkloadGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "testsvr", "testdb", "smallrc");
            var workloadGroup = GetArmClient().GetWorkloadGroup(workloadGroupId);

            await workloadGroup.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete a workload group
            var workloadGroupId = Sql.WorkloadGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "testsvr", "testdb", "wlm_workloadgroup");
            var workloadGroup = GetArmClient().GetWorkloadGroup(workloadGroupId);

            await workloadGroup.DeleteAsync(true);
        }
    }
}
