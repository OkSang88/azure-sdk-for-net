// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Maps.Models;

namespace Azure.ResourceManager.Maps
{
    /// <summary> A class representing collection of Creator and their operations over its parent. </summary>
    public partial class CreatorCollection : ArmCollection, IEnumerable<Creator>, IAsyncEnumerable<Creator>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly CreatorsRestOperations _creatorsRestClient;

        /// <summary> Initializes a new instance of the <see cref="CreatorCollection"/> class for mocking. </summary>
        protected CreatorCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="CreatorCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal CreatorCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            ClientOptions.TryGetApiVersion(Creator.ResourceType, out string apiVersion);
            _creatorsRestClient = new CreatorsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != MapsAccount.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, MapsAccount.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Create or update a Maps Creator resource. Creator resource will manage Azure resources required to populate a custom set of mapping data. It requires an account to exist before it can be created. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="creatorName"> The name of the Maps Creator instance. </param>
        /// <param name="creatorResource"> The new or updated parameters for the Creator resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="creatorName"/> or <paramref name="creatorResource"/> is null. </exception>
        public virtual CreatorCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string creatorName, CreatorData creatorResource, CancellationToken cancellationToken = default)
        {
            if (creatorName == null)
            {
                throw new ArgumentNullException(nameof(creatorName));
            }
            if (creatorResource == null)
            {
                throw new ArgumentNullException(nameof(creatorResource));
            }

            using var scope = _clientDiagnostics.CreateScope("CreatorCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _creatorsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, creatorName, creatorResource, cancellationToken);
                var operation = new CreatorCreateOrUpdateOperation(this, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a Maps Creator resource. Creator resource will manage Azure resources required to populate a custom set of mapping data. It requires an account to exist before it can be created. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="creatorName"> The name of the Maps Creator instance. </param>
        /// <param name="creatorResource"> The new or updated parameters for the Creator resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="creatorName"/> or <paramref name="creatorResource"/> is null. </exception>
        public async virtual Task<CreatorCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string creatorName, CreatorData creatorResource, CancellationToken cancellationToken = default)
        {
            if (creatorName == null)
            {
                throw new ArgumentNullException(nameof(creatorName));
            }
            if (creatorResource == null)
            {
                throw new ArgumentNullException(nameof(creatorResource));
            }

            using var scope = _clientDiagnostics.CreateScope("CreatorCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _creatorsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, creatorName, creatorResource, cancellationToken).ConfigureAwait(false);
                var operation = new CreatorCreateOrUpdateOperation(this, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a Maps Creator resource. </summary>
        /// <param name="creatorName"> The name of the Maps Creator instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="creatorName"/> is null. </exception>
        public virtual Response<Creator> Get(string creatorName, CancellationToken cancellationToken = default)
        {
            if (creatorName == null)
            {
                throw new ArgumentNullException(nameof(creatorName));
            }

            using var scope = _clientDiagnostics.CreateScope("CreatorCollection.Get");
            scope.Start();
            try
            {
                var response = _creatorsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, creatorName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new Creator(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a Maps Creator resource. </summary>
        /// <param name="creatorName"> The name of the Maps Creator instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="creatorName"/> is null. </exception>
        public async virtual Task<Response<Creator>> GetAsync(string creatorName, CancellationToken cancellationToken = default)
        {
            if (creatorName == null)
            {
                throw new ArgumentNullException(nameof(creatorName));
            }

            using var scope = _clientDiagnostics.CreateScope("CreatorCollection.Get");
            scope.Start();
            try
            {
                var response = await _creatorsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, creatorName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new Creator(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="creatorName"> The name of the Maps Creator instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="creatorName"/> is null. </exception>
        public virtual Response<Creator> GetIfExists(string creatorName, CancellationToken cancellationToken = default)
        {
            if (creatorName == null)
            {
                throw new ArgumentNullException(nameof(creatorName));
            }

            using var scope = _clientDiagnostics.CreateScope("CreatorCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _creatorsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, creatorName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<Creator>(null, response.GetRawResponse());
                return Response.FromValue(new Creator(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="creatorName"> The name of the Maps Creator instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="creatorName"/> is null. </exception>
        public async virtual Task<Response<Creator>> GetIfExistsAsync(string creatorName, CancellationToken cancellationToken = default)
        {
            if (creatorName == null)
            {
                throw new ArgumentNullException(nameof(creatorName));
            }

            using var scope = _clientDiagnostics.CreateScope("CreatorCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _creatorsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, creatorName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<Creator>(null, response.GetRawResponse());
                return Response.FromValue(new Creator(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="creatorName"> The name of the Maps Creator instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="creatorName"/> is null. </exception>
        public virtual Response<bool> Exists(string creatorName, CancellationToken cancellationToken = default)
        {
            if (creatorName == null)
            {
                throw new ArgumentNullException(nameof(creatorName));
            }

            using var scope = _clientDiagnostics.CreateScope("CreatorCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(creatorName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="creatorName"> The name of the Maps Creator instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="creatorName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string creatorName, CancellationToken cancellationToken = default)
        {
            if (creatorName == null)
            {
                throw new ArgumentNullException(nameof(creatorName));
            }

            using var scope = _clientDiagnostics.CreateScope("CreatorCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(creatorName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all Creator instances for an Azure Maps Account. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Creator" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Creator> GetAll(CancellationToken cancellationToken = default)
        {
            Page<Creator> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("CreatorCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _creatorsRestClient.ListByAccount(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new Creator(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Creator> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("CreatorCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _creatorsRestClient.ListByAccountNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new Creator(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get all Creator instances for an Azure Maps Account. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Creator" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Creator> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<Creator>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("CreatorCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _creatorsRestClient.ListByAccountAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new Creator(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Creator>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("CreatorCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _creatorsRestClient.ListByAccountNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new Creator(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<Creator> IEnumerable<Creator>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<Creator> IAsyncEnumerable<Creator>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, Creator, CreatorData> Construct() { }
    }
}
