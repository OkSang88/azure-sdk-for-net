// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.AzureStackHCI.Tests.Mock;
using Azure.ResourceManager.AzureStackHCI.Tests.Mock.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.AzureStackHCI.Tests.Mock.Tests.Mock
{
    /// <summary> Test for Cluster. </summary>
    public partial class ClusterMockTests : MockTestBase
    {
        public ClusterMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get cluster
            var clusterId = AzureStackHCI.Tests.Mock.Cluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "test-rg", "myCluster");
            var cluster = GetArmClient().GetCluster(clusterId);

            await cluster.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete cluster
            var clusterId = AzureStackHCI.Tests.Mock.Cluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "test-rg", "myCluster");
            var cluster = GetArmClient().GetCluster(clusterId);

            await cluster.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Update cluster
            var clusterId = AzureStackHCI.Tests.Mock.Cluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "test-rg", "myCluster");
            var cluster = GetArmClient().GetCluster(clusterId);
            AzureStackHCI.Tests.Mock.Models.ClusterPatch cluster2 = new AzureStackHCI.Tests.Mock.Models.ClusterPatch()
            {
                CloudManagementEndpoint = "https://98294836-31be-4668-aeae-698667faf99b.waconazure.com",
                DesiredProperties = new AzureStackHCI.Tests.Mock.Models.ClusterDesiredProperties()
                {
                    WindowsServerSubscription = new AzureStackHCI.Tests.Mock.Models.WindowsServerSubscription("Enabled"),
                    DiagnosticLevel = new AzureStackHCI.Tests.Mock.Models.DiagnosticLevel("Basic"),
                },
            };

            await cluster.UpdateAsync(cluster2);
        }
    }
}
