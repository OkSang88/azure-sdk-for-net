// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for PublicIPAddress. </summary>
    public partial class PublicIPAddressCollectionMockTests : MockTestBase
    {
        public PublicIPAddressCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create public IP address DNS
            string publicIpAddressName = "test-ip";
            Network.PublicIPAddressData parameters = new Network.PublicIPAddressData()
            {
                DnsSettings = new Network.Models.PublicIPAddressDnsSettings()
                {
                    DomainNameLabel = "dnslbl",
                },
                Location = "eastus",
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetPublicIPAddresses();
            await collection.CreateOrUpdateAsync(true, publicIpAddressName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Create public IP address allocation method
            string publicIpAddressName = "test-ip";
            Network.PublicIPAddressData parameters = new Network.PublicIPAddressData()
            {
                Sku = new Network.Models.PublicIPAddressSku()
                {
                    Name = new Network.Models.PublicIPAddressSkuName("Standard"),
                    Tier = new Network.Models.PublicIPAddressSkuTier("Global"),
                },
                PublicIPAllocationMethod = new Network.Models.IPAllocationMethod("Static"),
                PublicIPAddressVersion = new Network.Models.IPVersion("IPv4"),
                IdleTimeoutInMinutes = 10,
                Location = "eastus",
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetPublicIPAddresses();
            await collection.CreateOrUpdateAsync(true, publicIpAddressName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate3()
        {
            // Example: Create public IP address defaults
            string publicIpAddressName = "test-ip";
            Network.PublicIPAddressData parameters = new Network.PublicIPAddressData()
            {
                Location = "eastus",
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetPublicIPAddresses();
            await collection.CreateOrUpdateAsync(true, publicIpAddressName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get public IP address
            string publicIpAddressName = "testDNS-ip";
            string expand = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetPublicIPAddresses();
            await collection.GetAsync(publicIpAddressName, expand);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List resource group public IP addresses

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetPublicIPAddresses();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
