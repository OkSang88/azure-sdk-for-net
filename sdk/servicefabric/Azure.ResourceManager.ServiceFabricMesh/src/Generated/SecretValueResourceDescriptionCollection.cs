// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.ServiceFabricMesh.Models;

namespace Azure.ResourceManager.ServiceFabricMesh
{
    /// <summary> A class representing collection of SecretValueResourceDescription and their operations over its parent. </summary>
    public partial class SecretValueResourceDescriptionCollection : ArmCollection, IEnumerable<SecretValueResourceDescription>, IAsyncEnumerable<SecretValueResourceDescription>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly SecretValueRestOperations _secretValueRestClient;

        /// <summary> Initializes a new instance of the <see cref="SecretValueResourceDescriptionCollection"/> class for mocking. </summary>
        protected SecretValueResourceDescriptionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SecretValueResourceDescriptionCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal SecretValueResourceDescriptionCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            ClientOptions.TryGetApiVersion(SecretValueResourceDescription.ResourceType, out string apiVersion);
            _secretValueRestClient = new SecretValueRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SecretResourceDescription.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SecretResourceDescription.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="secretValueResourceName"> The name of the secret resource value which is typically the version identifier for the value. </param>
        /// <param name="secretValueResourceDescription"> Description for creating a value of a secret resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretValueResourceName"/> or <paramref name="secretValueResourceDescription"/> is null. </exception>
        public virtual SecretValueResourceDescriptionCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string secretValueResourceName, SecretValueResourceDescriptionData secretValueResourceDescription, CancellationToken cancellationToken = default)
        {
            if (secretValueResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretValueResourceName));
            }
            if (secretValueResourceDescription == null)
            {
                throw new ArgumentNullException(nameof(secretValueResourceDescription));
            }

            using var scope = _clientDiagnostics.CreateScope("SecretValueResourceDescriptionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _secretValueRestClient.Create(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, secretValueResourceName, secretValueResourceDescription, cancellationToken);
                var operation = new SecretValueResourceDescriptionCreateOrUpdateOperation(this, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="secretValueResourceName"> The name of the secret resource value which is typically the version identifier for the value. </param>
        /// <param name="secretValueResourceDescription"> Description for creating a value of a secret resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretValueResourceName"/> or <paramref name="secretValueResourceDescription"/> is null. </exception>
        public async virtual Task<SecretValueResourceDescriptionCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string secretValueResourceName, SecretValueResourceDescriptionData secretValueResourceDescription, CancellationToken cancellationToken = default)
        {
            if (secretValueResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretValueResourceName));
            }
            if (secretValueResourceDescription == null)
            {
                throw new ArgumentNullException(nameof(secretValueResourceDescription));
            }

            using var scope = _clientDiagnostics.CreateScope("SecretValueResourceDescriptionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _secretValueRestClient.CreateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, secretValueResourceName, secretValueResourceDescription, cancellationToken).ConfigureAwait(false);
                var operation = new SecretValueResourceDescriptionCreateOrUpdateOperation(this, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the information about the specified named secret value resources. The information does not include the actual value of the secret. </summary>
        /// <param name="secretValueResourceName"> The name of the secret resource value which is typically the version identifier for the value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretValueResourceName"/> is null. </exception>
        public virtual Response<SecretValueResourceDescription> Get(string secretValueResourceName, CancellationToken cancellationToken = default)
        {
            if (secretValueResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretValueResourceName));
            }

            using var scope = _clientDiagnostics.CreateScope("SecretValueResourceDescriptionCollection.Get");
            scope.Start();
            try
            {
                var response = _secretValueRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, secretValueResourceName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SecretValueResourceDescription(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the information about the specified named secret value resources. The information does not include the actual value of the secret. </summary>
        /// <param name="secretValueResourceName"> The name of the secret resource value which is typically the version identifier for the value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretValueResourceName"/> is null. </exception>
        public async virtual Task<Response<SecretValueResourceDescription>> GetAsync(string secretValueResourceName, CancellationToken cancellationToken = default)
        {
            if (secretValueResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretValueResourceName));
            }

            using var scope = _clientDiagnostics.CreateScope("SecretValueResourceDescriptionCollection.Get");
            scope.Start();
            try
            {
                var response = await _secretValueRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, secretValueResourceName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new SecretValueResourceDescription(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="secretValueResourceName"> The name of the secret resource value which is typically the version identifier for the value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretValueResourceName"/> is null. </exception>
        public virtual Response<SecretValueResourceDescription> GetIfExists(string secretValueResourceName, CancellationToken cancellationToken = default)
        {
            if (secretValueResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretValueResourceName));
            }

            using var scope = _clientDiagnostics.CreateScope("SecretValueResourceDescriptionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _secretValueRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, secretValueResourceName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<SecretValueResourceDescription>(null, response.GetRawResponse());
                return Response.FromValue(new SecretValueResourceDescription(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="secretValueResourceName"> The name of the secret resource value which is typically the version identifier for the value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretValueResourceName"/> is null. </exception>
        public async virtual Task<Response<SecretValueResourceDescription>> GetIfExistsAsync(string secretValueResourceName, CancellationToken cancellationToken = default)
        {
            if (secretValueResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretValueResourceName));
            }

            using var scope = _clientDiagnostics.CreateScope("SecretValueResourceDescriptionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _secretValueRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, secretValueResourceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<SecretValueResourceDescription>(null, response.GetRawResponse());
                return Response.FromValue(new SecretValueResourceDescription(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="secretValueResourceName"> The name of the secret resource value which is typically the version identifier for the value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretValueResourceName"/> is null. </exception>
        public virtual Response<bool> Exists(string secretValueResourceName, CancellationToken cancellationToken = default)
        {
            if (secretValueResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretValueResourceName));
            }

            using var scope = _clientDiagnostics.CreateScope("SecretValueResourceDescriptionCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(secretValueResourceName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="secretValueResourceName"> The name of the secret resource value which is typically the version identifier for the value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretValueResourceName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string secretValueResourceName, CancellationToken cancellationToken = default)
        {
            if (secretValueResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretValueResourceName));
            }

            using var scope = _clientDiagnostics.CreateScope("SecretValueResourceDescriptionCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(secretValueResourceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecretValueResourceDescription" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SecretValueResourceDescription> GetAll(CancellationToken cancellationToken = default)
        {
            Page<SecretValueResourceDescription> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SecretValueResourceDescriptionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _secretValueRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SecretValueResourceDescription(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SecretValueResourceDescription> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SecretValueResourceDescriptionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _secretValueRestClient.ListNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SecretValueResourceDescription(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecretValueResourceDescription" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SecretValueResourceDescription> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SecretValueResourceDescription>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SecretValueResourceDescriptionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _secretValueRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SecretValueResourceDescription(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SecretValueResourceDescription>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SecretValueResourceDescriptionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _secretValueRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SecretValueResourceDescription(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<SecretValueResourceDescription> IEnumerable<SecretValueResourceDescription>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<SecretValueResourceDescription> IAsyncEnumerable<SecretValueResourceDescription>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, SecretValueResourceDescription, SecretValueResourceDescriptionData> Construct() { }
    }
}
