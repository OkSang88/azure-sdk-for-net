// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace StorSimple8000SeriesManagementClient.Models
{
    public partial class NicIPv6 : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Ipv6Address))
            {
                writer.WritePropertyName("ipv6Address");
                writer.WriteStringValue(Ipv6Address);
            }
            if (Optional.IsDefined(Ipv6Prefix))
            {
                writer.WritePropertyName("ipv6Prefix");
                writer.WriteStringValue(Ipv6Prefix);
            }
            if (Optional.IsDefined(Ipv6Gateway))
            {
                writer.WritePropertyName("ipv6Gateway");
                writer.WriteStringValue(Ipv6Gateway);
            }
            if (Optional.IsDefined(Controller0Ipv6Address))
            {
                writer.WritePropertyName("controller0Ipv6Address");
                writer.WriteStringValue(Controller0Ipv6Address);
            }
            if (Optional.IsDefined(Controller1Ipv6Address))
            {
                writer.WritePropertyName("controller1Ipv6Address");
                writer.WriteStringValue(Controller1Ipv6Address);
            }
            writer.WriteEndObject();
        }

        internal static NicIPv6 DeserializeNicIPv6(JsonElement element)
        {
            Optional<string> ipv6Address = default;
            Optional<string> ipv6Prefix = default;
            Optional<string> ipv6Gateway = default;
            Optional<string> controller0Ipv6Address = default;
            Optional<string> controller1Ipv6Address = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ipv6Address"))
                {
                    ipv6Address = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipv6Prefix"))
                {
                    ipv6Prefix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipv6Gateway"))
                {
                    ipv6Gateway = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("controller0Ipv6Address"))
                {
                    controller0Ipv6Address = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("controller1Ipv6Address"))
                {
                    controller1Ipv6Address = property.Value.GetString();
                    continue;
                }
            }
            return new NicIPv6(ipv6Address.Value, ipv6Prefix.Value, ipv6Gateway.Value, controller0Ipv6Address.Value, controller1Ipv6Address.Value);
        }
    }
}
