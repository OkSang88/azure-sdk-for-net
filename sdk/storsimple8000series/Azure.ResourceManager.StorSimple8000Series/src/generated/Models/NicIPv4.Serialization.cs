// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace StorSimple8000SeriesManagementClient.Models
{
    public partial class NicIPv4 : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Ipv4Address))
            {
                writer.WritePropertyName("ipv4Address");
                writer.WriteStringValue(Ipv4Address);
            }
            if (Optional.IsDefined(Ipv4Netmask))
            {
                writer.WritePropertyName("ipv4Netmask");
                writer.WriteStringValue(Ipv4Netmask);
            }
            if (Optional.IsDefined(Ipv4Gateway))
            {
                writer.WritePropertyName("ipv4Gateway");
                writer.WriteStringValue(Ipv4Gateway);
            }
            if (Optional.IsDefined(Controller0Ipv4Address))
            {
                writer.WritePropertyName("controller0Ipv4Address");
                writer.WriteStringValue(Controller0Ipv4Address);
            }
            if (Optional.IsDefined(Controller1Ipv4Address))
            {
                writer.WritePropertyName("controller1Ipv4Address");
                writer.WriteStringValue(Controller1Ipv4Address);
            }
            writer.WriteEndObject();
        }

        internal static NicIPv4 DeserializeNicIPv4(JsonElement element)
        {
            Optional<string> ipv4Address = default;
            Optional<string> ipv4Netmask = default;
            Optional<string> ipv4Gateway = default;
            Optional<string> controller0Ipv4Address = default;
            Optional<string> controller1Ipv4Address = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ipv4Address"))
                {
                    ipv4Address = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipv4Netmask"))
                {
                    ipv4Netmask = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipv4Gateway"))
                {
                    ipv4Gateway = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("controller0Ipv4Address"))
                {
                    controller0Ipv4Address = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("controller1Ipv4Address"))
                {
                    controller1Ipv4Address = property.Value.GetString();
                    continue;
                }
            }
            return new NicIPv4(ipv4Address.Value, ipv4Netmask.Value, ipv4Gateway.Value, controller0Ipv4Address.Value, controller1Ipv4Address.Value);
        }
    }
}
