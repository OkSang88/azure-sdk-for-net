// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.ConnectedVMwarevSphere;
using Azure.ResourceManager.ConnectedVMwarevSphere.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.ConnectedVMwarevSphere.Tests.Mock
{
    /// <summary> Test for VirtualMachine. </summary>
    public partial class VirtualMachineMockTests : MockTestBase
    {
        public VirtualMachineMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: GetVirtualMachine
            var virtualMachineId = ConnectedVMwarevSphere.VirtualMachine.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg", "DemoVM");
            var virtualMachine = GetArmClient().GetVirtualMachine(virtualMachineId);

            await virtualMachine.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: DeleteVirtualMachine
            var virtualMachineId = ConnectedVMwarevSphere.VirtualMachine.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg", "DemoVM");
            var virtualMachine = GetArmClient().GetVirtualMachine(virtualMachineId);
            bool? force = null;

            await virtualMachine.DeleteAsync(force);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: UpdateVirtualMachine
            var virtualMachineId = ConnectedVMwarevSphere.VirtualMachine.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg", "DemoVM");
            var virtualMachine = GetArmClient().GetVirtualMachine(virtualMachineId);
            ConnectedVMwarevSphere.Models.VirtualMachineUpdate body = new ConnectedVMwarevSphere.Models.VirtualMachineUpdate();

            await virtualMachine.UpdateAsync(body);
        }

        [RecordedTest]
        public async Task Stop()
        {
            // Example: StopVirtualMachine
            var virtualMachineId = ConnectedVMwarevSphere.VirtualMachine.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg", "DemoVM");
            var virtualMachine = GetArmClient().GetVirtualMachine(virtualMachineId);
            ConnectedVMwarevSphere.Models.StopVirtualMachineOptions body = new ConnectedVMwarevSphere.Models.StopVirtualMachineOptions()
            {
                SkipShutdown = true,
            };

            await virtualMachine.StopAsync(body);
        }

        [RecordedTest]
        public async Task Start()
        {
            // Example: StartVirtualMachine
            var virtualMachineId = ConnectedVMwarevSphere.VirtualMachine.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg", "DemoVM");
            var virtualMachine = GetArmClient().GetVirtualMachine(virtualMachineId);

            await virtualMachine.StartAsync();
        }

        [RecordedTest]
        public async Task Restart()
        {
            // Example: RestartVirtualMachine
            var virtualMachineId = ConnectedVMwarevSphere.VirtualMachine.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg", "DemoVM");
            var virtualMachine = GetArmClient().GetVirtualMachine(virtualMachineId);

            await virtualMachine.RestartAsync();
        }
    }
}
