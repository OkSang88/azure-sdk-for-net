// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for FirewallPolicy. </summary>
    public partial class FirewallPolicyCollectionMockTests : MockTestBase
    {
        public FirewallPolicyCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create FirewallPolicy
            string firewallPolicyName = "firewallPolicy";
            Network.FirewallPolicyData parameters = new Network.FirewallPolicyData()
            {
                ThreatIntelMode = new Network.Models.AzureFirewallThreatIntelMode("Alert"),
                ThreatIntelWhitelist = new Network.Models.FirewallPolicyThreatIntelWhitelist(),
                Insights = new Network.Models.FirewallPolicyInsights()
                {
                    IsEnabled = true,
                    RetentionDays = 100,
                    LogAnalyticsResources = new Network.Models.FirewallPolicyLogAnalyticsResources()
                    {
                        DefaultWorkspaceId = new WritableSubResource()
                        {
                            Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/defaultWorkspace"),
                        },
                    },
                },
                Snat = new Network.Models.FirewallPolicySnat(),
                DnsSettings = new Network.Models.DnsSettings()
                {
                    EnableProxy = true,
                    RequireProxyForNetworkRules = false,
                },
                IntrusionDetection = new Network.Models.FirewallPolicyIntrusionDetection()
                {
                    Mode = new Network.Models.FirewallPolicyIntrusionDetectionStateType("Alert"),
                    Configuration = new Network.Models.FirewallPolicyIntrusionDetectionConfiguration(),
                },
                TransportSecurity = new Network.Models.FirewallPolicyTransportSecurity()
                {
                    CertificateAuthority = new Network.Models.FirewallPolicyCertificateAuthority()
                    {
                        KeyVaultSecretId = "https://kv/secret",
                        Name = "clientcert",
                    },
                },
                Sku = new Network.Models.FirewallPolicySku()
                {
                    Tier = new Network.Models.FirewallPolicySkuTier("Premium"),
                },
                Location = "West US",
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetFirewallPolicies();
            await collection.CreateOrUpdateAsync(true, firewallPolicyName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get FirewallPolicy
            string firewallPolicyName = "firewallPolicy";
            string expand = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetFirewallPolicies();
            await collection.GetAsync(firewallPolicyName, expand);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List all Firewall Policies for a given resource group

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetFirewallPolicies();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
