// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for DiskAccess. </summary>
    public partial class DiskAccessMockTests : MockTestBase
    {
        public DiskAccessMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get information about a disk access resource with private endpoints.
            var diskAccessId = Compute.DiskAccess.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myDiskAccess");
            var diskAccess = GetArmClient().GetDiskAccess(diskAccessId);

            await diskAccess.GetAsync();
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: Get information about a disk access resource.
            var diskAccessId = Compute.DiskAccess.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myDiskAccess");
            var diskAccess = GetArmClient().GetDiskAccess(diskAccessId);

            await diskAccess.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete a disk access resource.
            var diskAccessId = Compute.DiskAccess.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myDiskAccess");
            var diskAccess = GetArmClient().GetDiskAccess(diskAccessId);

            await diskAccess.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Update a disk access resource.
            var diskAccessId = Compute.DiskAccess.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myDiskAccess");
            var diskAccess = GetArmClient().GetDiskAccess(diskAccessId);
            Compute.Models.DiskAccessUpdate diskAccess2 = new Compute.Models.DiskAccessUpdate();

            await diskAccess.UpdateAsync(true, diskAccess2);
        }

        [RecordedTest]
        public async Task GetPrivateLinkResources()
        {
            // Example: List all possible private link resources under disk access resource.
            var diskAccessId = Compute.DiskAccess.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myDiskAccess");
            var diskAccess = GetArmClient().GetDiskAccess(diskAccessId);

            await foreach (var _ in diskAccess.GetPrivateLinkResourcesAsync())
            {
            }
        }
    }
}
