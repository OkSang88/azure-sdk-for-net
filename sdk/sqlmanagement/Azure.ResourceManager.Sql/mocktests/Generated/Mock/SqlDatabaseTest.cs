// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for SqlDatabase. </summary>
    public partial class SqlDatabaseMockTests : MockTestBase
    {
        public SqlDatabaseMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Gets a database.
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "testsvr", "testdb");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);

            await sqlDatabase.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Deletes a database.
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "testsvr", "testdb");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);

            await sqlDatabase.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Assigns maintenance window to a database.
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "testsvr", "testdb");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);
            Sql.Models.DatabaseUpdate parameters = new Sql.Models.DatabaseUpdate()
            {
                Sku = new Sql.Models.Sku(name: "BC_Gen5_4"),
                MaintenanceConfigurationId = "/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_SouthEastAsia_1",
            };

            await sqlDatabase.UpdateAsync(true, parameters);
        }

        [RecordedTest]
        public async Task Update2()
        {
            // Example: Resets maintenance window of a database to default.
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "testsvr", "testdb");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);
            Sql.Models.DatabaseUpdate parameters = new Sql.Models.DatabaseUpdate()
            {
                Sku = new Sql.Models.Sku(name: "BC_Gen5_4"),
                MaintenanceConfigurationId = "/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_Default",
            };

            await sqlDatabase.UpdateAsync(true, parameters);
        }

        [RecordedTest]
        public async Task Update3()
        {
            // Example: Updates a database.
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "testsvr", "testdb");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);
            Sql.Models.DatabaseUpdate parameters = new Sql.Models.DatabaseUpdate()
            {
                Sku = new Sql.Models.Sku(name: "BC_Gen4_4"),
                MaxSizeBytes = 1073741824,
                LicenseType = new Sql.Models.DatabaseLicenseType("LicenseIncluded"),
            };

            await sqlDatabase.UpdateAsync(true, parameters);
        }

        [RecordedTest]
        public async Task GetMetrics()
        {
            // Example: List database usage metrics
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-6730", "sqlcrudtest-9007", "3481");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);
            string filter = "name/value eq 'cpu_percent' and timeGrain eq '00:10:00' and startTime eq '2017-06-02T18:35:00Z' and endTime eq '2017-06-02T18:55:00Z'";

            await foreach (var _ in sqlDatabase.GetMetricsAsync(filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetMetricDefinitions()
        {
            // Example: List database usage metrics
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-6730", "sqlcrudtest-9007", "3481");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);

            await foreach (var _ in sqlDatabase.GetMetricDefinitionsAsync())
            {
            }
        }

        [RecordedTest]
        public async Task Failover()
        {
            // Example: Failover an database
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "group1", "testServer", "testDatabase");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);
            Sql.Models.ReplicaType? replicaType = new Sql.Models.ReplicaType("Primary");

            await sqlDatabase.FailoverAsync(true, replicaType);
        }

        [RecordedTest]
        public async Task Pause()
        {
            // Example: Pauses a database.
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "testsvr", "testdwdb");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);

            await sqlDatabase.PauseAsync(true);
        }

        [RecordedTest]
        public async Task Resume()
        {
            // Example: Resumes a database.
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "testsvr", "testdwdb");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);

            await sqlDatabase.ResumeAsync(true);
        }

        [RecordedTest]
        public async Task UpgradeDataWarehouse()
        {
            // Example: Upgrades a data warehouse.
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "testsvr", "testdwdb");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);

            await sqlDatabase.UpgradeDataWarehouseAsync(true);
        }

        [RecordedTest]
        public async Task Rename()
        {
            // Example: Renames a database.
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "testsvr", "testdb");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);
            Sql.Models.ResourceMoveDefinition parameters = new Sql.Models.ResourceMoveDefinition(id: "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/newtestdb");

            await sqlDatabase.RenameAsync(parameters);
        }

        [RecordedTest]
        public async Task Import()
        {
            // Example: Imports to an existing empty database, using private link to communicate with SQL server and storage account.
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "testsvr", "testdb");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);
            Sql.Models.ImportExistingDatabaseDefinition parameters = new Sql.Models.ImportExistingDatabaseDefinition(storageKeyType: new Sql.Models.StorageKeyType("StorageAccessKey"), storageKey: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx==", storageUri: "https://test.blob.core.windows.net/test.bacpac", administratorLogin: "login", administratorLoginPassword: "password")
            {
                AuthenticationType = "Sql",
                NetworkIsolation = new Sql.Models.NetworkIsolationSettings()
                {
                    StorageAccountResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Storage/storageAccounts/test-privatelink",
                    SqlServerResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr",
                },
            };

            await sqlDatabase.ImportAsync(true, parameters);
        }

        [RecordedTest]
        public async Task Import2()
        {
            // Example: Imports to an existing empty database.
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "testsvr", "testdb");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);
            Sql.Models.ImportExistingDatabaseDefinition parameters = new Sql.Models.ImportExistingDatabaseDefinition(storageKeyType: new Sql.Models.StorageKeyType("StorageAccessKey"), storageKey: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx==", storageUri: "https://test.blob.core.windows.net/test.bacpac", administratorLogin: "login", administratorLoginPassword: "password")
            {
                AuthenticationType = "Sql",
            };

            await sqlDatabase.ImportAsync(true, parameters);
        }

        [RecordedTest]
        public async Task Export()
        {
            // Example: Exports a database, using private link to communicate with SQL server and storage account.
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "testsvr", "testdb");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);
            Sql.Models.ExportDatabaseDefinition parameters = new Sql.Models.ExportDatabaseDefinition(storageKeyType: new Sql.Models.StorageKeyType("StorageAccessKey"), storageKey: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx==", storageUri: "https://test.blob.core.windows.net/test.bacpac", administratorLogin: "login", administratorLoginPassword: "password")
            {
                AuthenticationType = "Sql",
                NetworkIsolation = new Sql.Models.NetworkIsolationSettings()
                {
                    StorageAccountResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Storage/storageAccounts/test-privatelink",
                    SqlServerResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr",
                },
            };

            await sqlDatabase.ExportAsync(true, parameters);
        }

        [RecordedTest]
        public async Task Export2()
        {
            // Example: Exports a database.
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "testsvr", "testdb");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);
            Sql.Models.ExportDatabaseDefinition parameters = new Sql.Models.ExportDatabaseDefinition(storageKeyType: new Sql.Models.StorageKeyType("StorageAccessKey"), storageKey: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx==", storageUri: "https://test.blob.core.windows.net/test.bacpac", administratorLogin: "login", administratorLoginPassword: "password")
            {
                AuthenticationType = "Sql",
            };

            await sqlDatabase.ExportAsync(true, parameters);
        }

        [RecordedTest]
        public async Task GetDatabaseColumns()
        {
            // Example: Filter database columns
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myRG", "serverName", "myDatabase");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);
            IEnumerable<string> schema = new List<string>()
{
"dbo",};
            IEnumerable<string> table = new List<string>()
{
"customer","address",};
            IEnumerable<string> column = new List<string>()
{
"username",};
            IEnumerable<string> orderBy = new List<string>()
{
"schema asc","table","column desc",};
            string skiptoken = null;

            await foreach (var _ in sqlDatabase.GetDatabaseColumnsAsync(schema, table, column, orderBy, skiptoken))
            {
            }
        }

        [RecordedTest]
        public async Task GetDatabaseColumns2()
        {
            // Example: List database columns
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myRG", "serverName", "myDatabase");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);
            IEnumerable<string> schema = null;
            IEnumerable<string> table = null;
            IEnumerable<string> column = null;
            IEnumerable<string> orderBy = null;
            string skiptoken = null;

            await foreach (var _ in sqlDatabase.GetDatabaseColumnsAsync(schema, table, column, orderBy, skiptoken))
            {
            }
        }

        [RecordedTest]
        public async Task CreateRestorePoint()
        {
            // Example: Creates datawarehouse database restore point.
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "testserver", "testDatabase");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);
            Sql.Models.CreateDatabaseRestorePointDefinition parameters = new Sql.Models.CreateDatabaseRestorePointDefinition(restorePointLabel: "mylabel");

            await sqlDatabase.CreateRestorePointAsync(true, parameters);
        }

        [RecordedTest]
        public async Task GetCurrentSensitivityLabels()
        {
            // Example: Gets the current sensitivity labels of a given database
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myRG", "myServer", "myDatabase");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);
            string skipToken = null;
            bool? count = null;
            string filter = null;

            await foreach (var _ in sqlDatabase.GetCurrentSensitivityLabelsAsync(skipToken, count, filter))
            {
            }
        }

        [RecordedTest]
        public async Task UpdateSensitivityLabel()
        {
            // Example: Update sensitivity labels of a given database using an operations batch.
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myRG", "myServer", "myDatabase");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);
            Sql.Models.SensitivityLabelUpdateList parameters = new Sql.Models.SensitivityLabelUpdateList();

            await sqlDatabase.UpdateSensitivityLabelAsync(parameters);
        }

        [RecordedTest]
        public async Task GetRecommendedSensitivityLabels()
        {
            // Example: Gets the recommended sensitivity labels of a given database
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myRG", "myServer", "myDatabase");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);
            string skipToken = null;
            bool? includeDisabledRecommendations = null;
            string filter = null;

            await foreach (var _ in sqlDatabase.GetRecommendedSensitivityLabelsAsync(skipToken, includeDisabledRecommendations, filter))
            {
            }
        }

        [RecordedTest]
        public async Task UpdateRecommendedSensitivityLabel()
        {
            // Example: Update recommended sensitivity labels of a given database using an operations batch.
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myRG", "myServer", "myDatabase");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);
            Sql.Models.RecommendedSensitivityLabelUpdateList parameters = new Sql.Models.RecommendedSensitivityLabelUpdateList();

            await sqlDatabase.UpdateRecommendedSensitivityLabelAsync(parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateDatabaseExtension()
        {
            // Example: Create or Update database extensions.
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg_20cbe0f0-c2d9-4522-9177-5469aad53029", "srv_1ffd1cf8-9951-47fb-807d-a9c384763849", "878e303f-1ea0-4f17-aa3d-a22ac5e9da08");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);
            string extensionName = "polybaseimport";
            Sql.Models.DatabaseExtensions parameters = new Sql.Models.DatabaseExtensions()
            {
                OperationMode = new Sql.Models.OperationMode("PolybaseImport"),
                StorageKeyType = new Sql.Models.StorageKeyType("StorageAccessKey"),
                StorageKey = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                StorageUri = "https://teststorage.blob.core.windows.net/testcontainer/Manifest.xml",
            };

            await sqlDatabase.CreateOrUpdateDatabaseExtensionAsync(true, extensionName, parameters);
        }

        [RecordedTest]
        public async Task GetDatabaseExtensions()
        {
            // Example: List database extensions.
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg_4007c5a9-b3b0-41e1-bd46-9eef38768a4a", "srv_3b67ec2a-519b-43a7-8533-fb62dce3431e", "719d8fa4-bf0f-48fc-8cd3-ef40fe6ba1fe");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);

            await foreach (var _ in sqlDatabase.GetDatabaseExtensionsAsync())
            {
            }
        }

        [RecordedTest]
        public async Task CancelDatabaseOperation()
        {
            // Example: Cancel the database management operation
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-7398", "sqlcrudtest-6661", "testdb");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);
            Guid operationId = Guid.Parse("f779414b-e748-4925-8cfe-c8598f7660ae");

            await sqlDatabase.CancelDatabaseOperationAsync(operationId);
        }

        [RecordedTest]
        public async Task GetDatabaseOperations()
        {
            // Example: List the database management operations
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-7398", "sqlcrudtest-4645", "testdb");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);

            await foreach (var _ in sqlDatabase.GetDatabaseOperationsAsync())
            {
            }
        }

        [RecordedTest]
        public async Task GetDatabaseUsages()
        {
            // Example: Gets database usages.
            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "testsvr", "testdb");
            var sqlDatabase = GetArmClient().GetSqlDatabase(sqlDatabaseId);

            await foreach (var _ in sqlDatabase.GetDatabaseUsagesAsync())
            {
            }
        }

        [RecordedTest]
        public async Task DataMaskingPolicyGet()
        {
            // Example: Get data masking policy
            var dataMaskingPolicyId = Sql.DataMaskingPolicy.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-6852", "sqlcrudtest-2080", "sqlcrudtest-331");
            var dataMaskingPolicy = GetArmClient().GetDataMaskingPolicy(dataMaskingPolicyId);

            await dataMaskingPolicy.GetAsync();
        }

        [RecordedTest]
        public async Task DataMaskingPolicyCreateOrUpdateDataMaskingRule()
        {
            // Example: Create/Update data masking rule for default max
            var dataMaskingPolicyId = Sql.DataMaskingPolicy.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-6852", "sqlcrudtest-2080", "sqlcrudtest-331");
            var dataMaskingPolicy = GetArmClient().GetDataMaskingPolicy(dataMaskingPolicyId);
            string dataMaskingRuleName = "rule1";
            Sql.Models.DataMaskingRule parameters = new Sql.Models.DataMaskingRule()
            {
                AliasName = "nickname",
                RuleState = Sql.Models.DataMaskingRuleState.Enabled,
                SchemaName = "dbo",
                TableName = "Table_1",
                ColumnName = "test1",
                MaskingFunction = Sql.Models.DataMaskingFunction.Default,
            };

            await dataMaskingPolicy.CreateOrUpdateDataMaskingRuleAsync(dataMaskingRuleName, parameters);
        }

        [RecordedTest]
        public async Task DataMaskingPolicyCreateOrUpdateDataMaskingRule2()
        {
            // Example: Create/Update data masking rule for default min
            var dataMaskingPolicyId = Sql.DataMaskingPolicy.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-6852", "sqlcrudtest-2080", "sqlcrudtest-331");
            var dataMaskingPolicy = GetArmClient().GetDataMaskingPolicy(dataMaskingPolicyId);
            string dataMaskingRuleName = "rule1";
            Sql.Models.DataMaskingRule parameters = new Sql.Models.DataMaskingRule()
            {
                SchemaName = "dbo",
                TableName = "Table_1",
                ColumnName = "test1",
                MaskingFunction = Sql.Models.DataMaskingFunction.Default,
            };

            await dataMaskingPolicy.CreateOrUpdateDataMaskingRuleAsync(dataMaskingRuleName, parameters);
        }

        [RecordedTest]
        public async Task DataMaskingPolicyCreateOrUpdateDataMaskingRule3()
        {
            // Example: Create/Update data masking rule for numbers
            var dataMaskingPolicyId = Sql.DataMaskingPolicy.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-6852", "sqlcrudtest-2080", "sqlcrudtest-331");
            var dataMaskingPolicy = GetArmClient().GetDataMaskingPolicy(dataMaskingPolicyId);
            string dataMaskingRuleName = "rule1";
            Sql.Models.DataMaskingRule parameters = new Sql.Models.DataMaskingRule()
            {
                SchemaName = "dbo",
                TableName = "Table_1",
                ColumnName = "test1",
                MaskingFunction = Sql.Models.DataMaskingFunction.Number,
                NumberFrom = "0",
                NumberTo = "2",
            };

            await dataMaskingPolicy.CreateOrUpdateDataMaskingRuleAsync(dataMaskingRuleName, parameters);
        }

        [RecordedTest]
        public async Task DataMaskingPolicyCreateOrUpdateDataMaskingRule4()
        {
            // Example: Create/Update data masking rule for text
            var dataMaskingPolicyId = Sql.DataMaskingPolicy.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-6852", "sqlcrudtest-2080", "sqlcrudtest-331");
            var dataMaskingPolicy = GetArmClient().GetDataMaskingPolicy(dataMaskingPolicyId);
            string dataMaskingRuleName = "rule1";
            Sql.Models.DataMaskingRule parameters = new Sql.Models.DataMaskingRule()
            {
                SchemaName = "dbo",
                TableName = "Table_1",
                ColumnName = "test1",
                MaskingFunction = Sql.Models.DataMaskingFunction.Text,
                PrefixSize = "1",
                SuffixSize = "0",
                ReplacementString = "asdf",
            };

            await dataMaskingPolicy.CreateOrUpdateDataMaskingRuleAsync(dataMaskingRuleName, parameters);
        }

        [RecordedTest]
        public async Task DataMaskingPolicyGetDataMaskingRules()
        {
            // Example: List data masking rules
            var dataMaskingPolicyId = Sql.DataMaskingPolicy.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-6852", "sqlcrudtest-2080", "sqlcrudtest-331");
            var dataMaskingPolicy = GetArmClient().GetDataMaskingPolicy(dataMaskingPolicyId);

            await foreach (var _ in dataMaskingPolicy.GetDataMaskingRulesAsync())
            {
            }
        }

        [RecordedTest]
        public async Task DatabaseAutomaticTuningGet()
        {
            // Example: Get a database's automatic tuning settings
            var databaseAutomaticTuningId = Sql.DatabaseAutomaticTuning.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-sql-onebox", "testsvr11", "db1");
            var databaseAutomaticTuning = GetArmClient().GetDatabaseAutomaticTuning(databaseAutomaticTuningId);

            await databaseAutomaticTuning.GetAsync();
        }

        [RecordedTest]
        public async Task DatabaseAutomaticTuningUpdate()
        {
            // Example: Updates database automatic tuning settings with all properties
            var databaseAutomaticTuningId = Sql.DatabaseAutomaticTuning.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-sql-onebox", "testsvr11", "db1");
            var databaseAutomaticTuning = GetArmClient().GetDatabaseAutomaticTuning(databaseAutomaticTuningId);
            Sql.DatabaseAutomaticTuningData parameters = new Sql.DatabaseAutomaticTuningData()
            {
                DesiredState = Sql.Models.AutomaticTuningMode.Auto,
            };

            await databaseAutomaticTuning.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task DatabaseAutomaticTuningUpdate2()
        {
            // Example: Updates database automatic tuning settings with minimal properties
            var databaseAutomaticTuningId = Sql.DatabaseAutomaticTuning.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-sql-onebox", "testsvr11", "db1");
            var databaseAutomaticTuning = GetArmClient().GetDatabaseAutomaticTuning(databaseAutomaticTuningId);
            Sql.DatabaseAutomaticTuningData parameters = new Sql.DatabaseAutomaticTuningData()
            {
                DesiredState = Sql.Models.AutomaticTuningMode.Auto,
            };

            await databaseAutomaticTuning.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task MaintenanceWindowOptionsGet()
        {
            // Example: Gets a list of available maintenance windows for a selected database.
            var maintenanceWindowOptionsId = Sql.MaintenanceWindowOptions.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "testsvr", "testdb");
            var maintenanceWindowOptions = GetArmClient().GetMaintenanceWindowOptions(maintenanceWindowOptionsId);
            string maintenanceWindowOptionsName = "current";

            await maintenanceWindowOptions.GetAsync(maintenanceWindowOptionsName);
        }

        [RecordedTest]
        public async Task MaintenanceWindowsGet()
        {
            // Example: Gets maintenance window settings for a selected database.
            var maintenanceWindowsId = Sql.MaintenanceWindows.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "testsvr", "testdb");
            var maintenanceWindows = GetArmClient().GetMaintenanceWindows(maintenanceWindowsId);
            string maintenanceWindowName = "current";

            await maintenanceWindows.GetAsync(maintenanceWindowName);
        }
    }
}
