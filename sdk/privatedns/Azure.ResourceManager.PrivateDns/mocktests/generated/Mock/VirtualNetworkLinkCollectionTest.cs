// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.PrivateDns.Tests.Mock;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.PrivateDns.Tests.Mock.Tests.Mock
{
    /// <summary> Test for VirtualNetworkLink. </summary>
    public partial class VirtualNetworkLinkCollectionMockTests : MockTestBase
    {
        public VirtualNetworkLinkCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: PUT Private DNS Zone Virtual Network Link
            string virtualNetworkLinkName = "virtualNetworkLink1";
            PrivateDns.Tests.Mock.VirtualNetworkLinkData parameters = new PrivateDns.Tests.Mock.VirtualNetworkLinkData(location: "Global")
            {
                VirtualNetwork = new WritableSubResource()
                {
                    Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/virtualNetworkResourceGroup/providers/Microsoft.Network/virtualNetworks/virtualNetworkName"),
                },
                RegistrationEnabled = false,
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>()
            {
                ["key1"] = "value1",
            });
            string ifMatch = null;
            string ifNoneMatch = null;

            var privateZoneId = PrivateDns.Tests.Mock.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "privatezone1.com");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetVirtualNetworkLinks();
            await collection.CreateOrUpdateAsync(true, virtualNetworkLinkName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: GET Private DNS Zone Virtual Network Link
            string virtualNetworkLinkName = "virtualNetworkLink1";

            var privateZoneId = PrivateDns.Tests.Mock.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "privatezone1.com");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetVirtualNetworkLinks();
            await collection.GetAsync(virtualNetworkLinkName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: Get Private DNS Zone Virtual Network Links
            int? top = null;

            var privateZoneId = PrivateDns.Tests.Mock.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "privatezone1.com");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetVirtualNetworkLinks();
            await foreach (var _ in collection.GetAllAsync(top))
            {
            }
        }
    }
}
