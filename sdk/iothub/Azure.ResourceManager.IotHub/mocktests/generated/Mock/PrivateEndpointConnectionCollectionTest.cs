// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.IotHub;
using Azure.ResourceManager.IotHub.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.IotHub.Tests.Mock
{
    /// <summary> Test for PrivateEndpointConnection. </summary>
    public partial class PrivateEndpointConnectionCollectionMockTests : MockTestBase
    {
        public PrivateEndpointConnectionCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: PrivateEndpointConnection_Update
            string privateEndpointConnectionName = "myPrivateEndpointConnection";
            IotHub.PrivateEndpointConnectionData privateEndpointConnection = new IotHub.PrivateEndpointConnectionData(properties: new IotHub.Models.PrivateEndpointConnectionProperties(privateLinkServiceConnectionState: new IotHub.Models.PrivateLinkServiceConnectionState(status: new IotHub.Models.PrivateLinkServiceConnectionStatus("Approved"), description: "Approved by johndoe@contoso.com")));

            var iotHubDescriptionId = IotHub.IotHubDescription.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "testHub");
            var collection = GetArmClient().GetIotHubDescription(iotHubDescriptionId).GetPrivateEndpointConnections();
            await collection.CreateOrUpdateAsync(true, privateEndpointConnectionName, privateEndpointConnection);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: PrivateEndpointConnection_Get
            string privateEndpointConnectionName = "myPrivateEndpointConnection";

            var iotHubDescriptionId = IotHub.IotHubDescription.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "testHub");
            var collection = GetArmClient().GetIotHubDescription(iotHubDescriptionId).GetPrivateEndpointConnections();
            await collection.GetAsync(privateEndpointConnectionName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: PrivateEndpointConnections_List

            var iotHubDescriptionId = IotHub.IotHubDescription.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "testHub");
            var collection = GetArmClient().GetIotHubDescription(iotHubDescriptionId).GetPrivateEndpointConnections();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
