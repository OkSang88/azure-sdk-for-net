// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for WorkloadGroup. </summary>
    public partial class WorkloadGroupCollectionMockTests : MockTestBase
    {
        public WorkloadGroupCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create a workload group with all properties specified.
            var collection = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb")).GetWorkloadGroups();
            string workloadGroupName = "smallrc";
            Sql.WorkloadGroupData parameters = new Sql.WorkloadGroupData()
            {
                MinResourcePercent = 0,
                MaxResourcePercent = 100,
                MinResourcePercentPerRequest = 3,
                MaxResourcePercentPerRequest = 3,
                Importance = "normal",
                QueryExecutionTimeout = 0,
            };

            await collection.CreateOrUpdateAsync(workloadGroupName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync2()
        {
            // Example: Create a workload group with the required properties specified.
            var collection = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb")).GetWorkloadGroups();
            string workloadGroupName = "smallrc";
            Sql.WorkloadGroupData parameters = new Sql.WorkloadGroupData()
            {
                MinResourcePercent = 0,
                MaxResourcePercent = 100,
                MinResourcePercentPerRequest = 3,
            };

            await collection.CreateOrUpdateAsync(workloadGroupName, parameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Gets a workload group for a data warehouse
            var collection = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb")).GetWorkloadGroups();
            string workloadGroupName = "smallrc";

            await collection.GetAsync(workloadGroupName);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: Get the list of workload groups for a data warehouse
            var collection = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb")).GetWorkloadGroups();

            collection.GetAllAsync();
        }
    }
}
