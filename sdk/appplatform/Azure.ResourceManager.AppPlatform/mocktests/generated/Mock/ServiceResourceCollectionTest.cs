// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.AppPlatform.Tests.Mock;
using Azure.ResourceManager.AppPlatform.Tests.Mock.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.AppPlatform.Tests.Mock.Tests.Mock
{
    /// <summary> Test for ServiceResource. </summary>
    public partial class ServiceResourceCollectionMockTests : MockTestBase
    {
        public ServiceResourceCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Services_CreateOrUpdate
            string serviceName = "myservice";
            AppPlatform.Tests.Mock.ServiceResourceData resource = new AppPlatform.Tests.Mock.ServiceResourceData()
            {
                Properties = new AppPlatform.Tests.Mock.Models.ClusterResourceProperties(),
                Sku = new AppPlatform.Tests.Mock.Models.Sku()
                {
                    Name = "S0",
                    Tier = "Standard",
                },
                Location = "eastus",
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetServiceResources();
            await collection.CreateOrUpdateAsync(true, serviceName, resource);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Services_CreateOrUpdate_VNetInjection
            string serviceName = "myservice";
            AppPlatform.Tests.Mock.ServiceResourceData resource = new AppPlatform.Tests.Mock.ServiceResourceData()
            {
                Properties = new AppPlatform.Tests.Mock.Models.ClusterResourceProperties()
                {
                    NetworkProfile = new AppPlatform.Tests.Mock.Models.NetworkProfile()
                    {
                        ServiceRuntimeSubnetId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/serviceRuntime",
                        AppSubnetId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/apps",
                        ServiceCidr = "10.8.0.0/16,10.244.0.0/16,10.245.0.1/16",
                        ServiceRuntimeNetworkResourceGroup = "my-service-runtime-network-rg",
                        AppNetworkResourceGroup = "my-app-network-rg",
                    },
                },
                Sku = new AppPlatform.Tests.Mock.Models.Sku()
                {
                    Name = "S0",
                    Tier = "Standard",
                },
                Location = "eastus",
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetServiceResources();
            await collection.CreateOrUpdateAsync(true, serviceName, resource);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Services_Get
            string serviceName = "myservice";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetServiceResources();
            await collection.GetAsync(serviceName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: Services_List

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetServiceResources();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
