// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.CosmosDB.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.CosmosDB.Tests.Mock
{
    /// <summary> Test for MongoDBCollection. </summary>
    public partial class MongoDBCollectionMockTests : MockTestBase
    {
        public MongoDBCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: CosmosDBMongoDBCollectionGet
            var mongoDBCollection = GetArmClient().GetMongoDBCollection(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rgName/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName/collections/collectionName"));

            await mongoDBCollection.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: CosmosDBMongoDBCollectionDelete
            var mongoDBCollection = GetArmClient().GetMongoDBCollection(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName/collections/collectionName"));

            await mongoDBCollection.DeleteAsync();
        }

        [RecordedTest]
        public async Task DatabaseAccountMongodbDatabaseCollectionThroughputSettingGetAsync()
        {
            // Example: CosmosDBMongoDBCollectionThroughputGet
            var databaseAccountMongodbDatabaseCollectionThroughputSetting = GetArmClient().GetDatabaseAccountMongodbDatabaseCollectionThroughputSetting(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName/collections/collectionName/throughputSettings/default"));

            await databaseAccountMongodbDatabaseCollectionThroughputSetting.GetAsync();
        }

        [RecordedTest]
        public async Task DatabaseAccountMongodbDatabaseCollectionThroughputSettingMigrateMongoDBCollectionToAutoscaleAsync()
        {
            // Example: CosmosDBMongoDBCollectionMigrateToAutoscale
            var databaseAccountMongodbDatabaseCollectionThroughputSetting = GetArmClient().GetDatabaseAccountMongodbDatabaseCollectionThroughputSetting(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName/collections/collectionName/throughputSettings/default"));

            await databaseAccountMongodbDatabaseCollectionThroughputSetting.MigrateMongoDBCollectionToAutoscaleAsync();
        }

        [RecordedTest]
        public async Task DatabaseAccountMongodbDatabaseCollectionThroughputSettingMigrateMongoDBCollectionToManualThroughputAsync()
        {
            // Example: CosmosDBMongoDBCollectionMigrateToManualThroughput
            var databaseAccountMongodbDatabaseCollectionThroughputSetting = GetArmClient().GetDatabaseAccountMongodbDatabaseCollectionThroughputSetting(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName/collections/collectionName/throughputSettings/default"));

            await databaseAccountMongodbDatabaseCollectionThroughputSetting.MigrateMongoDBCollectionToManualThroughputAsync();
        }
    }
}
