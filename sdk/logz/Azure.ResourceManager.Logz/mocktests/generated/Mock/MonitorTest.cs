// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Logz;
using Azure.ResourceManager.Logz.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Logz.Tests.Mock
{
    /// <summary> Test for LogzMonitorResource. </summary>
    public partial class MonitorMockTests : MockTestBase
    {
        public MonitorMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Monitors_Get
            var monitorId = Logz.Monitor.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor");
            var monitor = GetArmClient().GetMonitor(monitorId);

            await monitor.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Monitors_Delete
            var monitorId = Logz.Monitor.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor");
            var monitor = GetArmClient().GetMonitor(monitorId);

            await monitor.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Monitors_Update
            var monitorId = Logz.Monitor.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor");
            var monitor = GetArmClient().GetMonitor(monitorId);
            Logz.Models.LogzMonitorResourceUpdateParameters body = null;

            await monitor.UpdateAsync(body);
        }

        [RecordedTest]
        public async Task GetMonitoredResources()
        {
            // Example: MonitoredResources_List
            var monitorId = Logz.Monitor.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor");
            var monitor = GetArmClient().GetMonitor(monitorId);

            await foreach (var _ in monitor.GetMonitoredResourcesAsync())
            {
            }
        }

        [RecordedTest]
        public async Task GetUserRoles()
        {
            // Example: MainAccount_VMHosts_Update
            var monitorId = Logz.Monitor.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor");
            var monitor = GetArmClient().GetMonitor(monitorId);
            Logz.Models.UserRoleRequest body = null;

            await foreach (var _ in monitor.GetUserRolesAsync(body))
            {
            }
        }

        [RecordedTest]
        public async Task VMHostPayloadMonitor()
        {
            // Example: MainAccount_VMHosts_Payload
            var monitorId = Logz.Monitor.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor");
            var monitor = GetArmClient().GetMonitor(monitorId);

            await monitor.VMHostPayloadMonitorAsync();
        }

        [RecordedTest]
        public async Task GetVmHostUpdateMonitors()
        {
            // Example: MainAccount_VMHosts_Update
            var monitorId = Logz.Monitor.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor");
            var monitor = GetArmClient().GetMonitor(monitorId);
            Logz.Models.VMHostUpdateRequest body = null;

            await foreach (var _ in monitor.GetVmHostUpdateMonitorsAsync(body))
            {
            }
        }

        [RecordedTest]
        public async Task GetVMHostsMonitors()
        {
            // Example: MainAccount_VMHosts_List
            var monitorId = Logz.Monitor.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor");
            var monitor = GetArmClient().GetMonitor(monitorId);

            await foreach (var _ in monitor.GetVMHostsMonitorsAsync())
            {
            }
        }
    }
}
