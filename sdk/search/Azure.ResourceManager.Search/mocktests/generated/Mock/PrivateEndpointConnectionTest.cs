// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using SearchManagementClient;
using SearchManagementClient.Models;

namespace SearchManagementClient.Tests.Mock
{
    /// <summary> Test for PrivateEndpointConnection. </summary>
    public partial class PrivateEndpointConnectionMockTests : MockTestBase
    {
        public PrivateEndpointConnectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: PrivateEndpointConnectionGet
            var privateEndpointConnectionId = SearchManagementClient.PrivateEndpointConnection.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "mysearchservice", "testEndpoint.50bf4fbe-d7c1-4b48-a642-4f5892642546");
            var privateEndpointConnection = GetArmClient().GetPrivateEndpointConnection(privateEndpointConnectionId);
            SearchManagementClient.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            await privateEndpointConnection.GetAsync(searchManagementRequestOptions);
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: PrivateEndpointConnectionDelete
            var privateEndpointConnectionId = SearchManagementClient.PrivateEndpointConnection.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "mysearchservice", "testEndpoint.50bf4fbe-d7c1-4b48-a642-4f5892642546");
            var privateEndpointConnection = GetArmClient().GetPrivateEndpointConnection(privateEndpointConnectionId);
            SearchManagementClient.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            await privateEndpointConnection.DeleteAsync(true, searchManagementRequestOptions);
        }
    }
}
