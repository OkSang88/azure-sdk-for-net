// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Resources.Tests.Mock
{
    /// <summary> Test for DeploymentScript. </summary>
    public partial class DeploymentScriptCollectionMockTests : MockTestBase
    {
        public DeploymentScriptCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: DeploymentScriptsCreate
            string scriptName = "MyDeploymentScript";
            Resources.DeploymentScriptData deploymentScript = new Models.AzurePowerShellScript(location: "westus", retentionInterval: TimeSpan.Parse("PT7D"), azPowerShellVersion: "1.7.0")
            {
                CleanupPreference = new Models.CleanupOptions("Always"),
                ScriptContent = "Param([string]$Location,[string]$Name) $deploymentScriptOutputs['test'] = 'value' Get-AzResourceGroup -Location $Location -Name $Name",
                Arguments = "-Location 'westus' -Name \"*rg2\"",
                Timeout = TimeSpan.Parse("PT1H"),
                Identity = new Models.ManagedServiceIdentity()
                {
                    Type = new Models.ManagedServiceIdentityType("UserAssigned"),
                },
                Kind = new Models.ScriptType("AzurePowerShell"),
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/script-rg")).GetDeploymentScripts();
            await collection.CreateOrUpdateAsync(scriptName, deploymentScript);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: DeploymentScriptsCreateNoUserManagedIdentity
            string scriptName = "MyDeploymentScript";
            Resources.DeploymentScriptData deploymentScript = new Models.AzurePowerShellScript(location: "westus", retentionInterval: TimeSpan.Parse("PT7D"), azPowerShellVersion: "1.7.0")
            {
                CleanupPreference = new Models.CleanupOptions("Always"),
                ScriptContent = "Param([string]$Location,[string]$Name) $deploymentScriptOutputs['test'] = 'value' Get-AzResourceGroup -Location $Location -Name $Name",
                Arguments = "-Location 'westus' -Name \"*rg2\"",
                Timeout = TimeSpan.Parse("PT1H"),
                Kind = new Models.ScriptType("AzurePowerShell"),
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/script-rg")).GetDeploymentScripts();
            await collection.CreateOrUpdateAsync(scriptName, deploymentScript);
        }

        [RecordedTest]
        public async Task CreateOrUpdate3()
        {
            // Example: DeploymentScriptsCreate_MinCreate
            string scriptName = "MyDeploymentScript";
            Resources.DeploymentScriptData deploymentScript = new Models.AzurePowerShellScript(location: "westus", retentionInterval: TimeSpan.Parse("P7D"), azPowerShellVersion: "1.7.0")
            {
                ScriptContent = "Param([string]$Location,[string]$Name) $deploymentScriptOutputs['test'] = 'value' Get-AzResourceGroup -Location $Location -Name $Name",
                Arguments = "-Location 'westus' -Name \"*rg2\"",
                Identity = new Models.ManagedServiceIdentity()
                {
                    Type = new Models.ManagedServiceIdentityType("UserAssigned"),
                },
                Kind = new Models.ScriptType("AzurePowerShell"),
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/script-rg")).GetDeploymentScripts();
            await collection.CreateOrUpdateAsync(scriptName, deploymentScript);
        }

        [RecordedTest]
        public async Task CreateOrUpdate4()
        {
            // Example: DeploymentScriptsCreate_UsingCustomACIName
            string scriptName = "MyDeploymentScript";
            Resources.DeploymentScriptData deploymentScript = new Models.AzurePowerShellScript(location: "westus", retentionInterval: TimeSpan.Parse("PT7D"), azPowerShellVersion: "1.7.0")
            {
                ContainerSettings = new Models.ContainerConfiguration()
                {
                    ContainerGroupName = "contoso-aci",
                },
                CleanupPreference = new Models.CleanupOptions("Always"),
                ScriptContent = "Param([string]$Location,[string]$Name) $deploymentScriptOutputs['test'] = 'value' Get-AzResourceGroup -Location $Location -Name $Name",
                Arguments = "-Location 'westus' -Name \"*rg2\"",
                Timeout = TimeSpan.Parse("PT1H"),
                Identity = new Models.ManagedServiceIdentity()
                {
                    Type = new Models.ManagedServiceIdentityType("UserAssigned"),
                },
                Kind = new Models.ScriptType("AzurePowerShell"),
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/script-rg")).GetDeploymentScripts();
            await collection.CreateOrUpdateAsync(scriptName, deploymentScript);
        }

        [RecordedTest]
        public async Task CreateOrUpdate5()
        {
            // Example: DeploymentScriptsCreate_UsingExistingStorageAccount
            string scriptName = "MyDeploymentScript";
            Resources.DeploymentScriptData deploymentScript = new Models.AzurePowerShellScript(location: "westus", retentionInterval: TimeSpan.Parse("PT7D"), azPowerShellVersion: "1.7.0")
            {
                StorageAccountSettings = new Models.StorageAccountConfiguration()
                {
                    StorageAccountName = "contosostorage",
                    StorageAccountKey = "contosostoragekey",
                },
                CleanupPreference = new Models.CleanupOptions("Always"),
                ScriptContent = "Param([string]$Location,[string]$Name) $deploymentScriptOutputs['test'] = 'value' Get-AzResourceGroup -Location $Location -Name $Name",
                Arguments = "-Location 'westus' -Name \"*rg2\"",
                Timeout = TimeSpan.Parse("PT1H"),
                Identity = new Models.ManagedServiceIdentity()
                {
                    Type = new Models.ManagedServiceIdentityType("UserAssigned"),
                },
                Kind = new Models.ScriptType("AzurePowerShell"),
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/script-rg")).GetDeploymentScripts();
            await collection.CreateOrUpdateAsync(scriptName, deploymentScript);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: DeploymentScriptsGet
            string scriptName = "MyDeploymentScript";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/script-rg")).GetDeploymentScripts();
            await collection.GetAsync(scriptName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: DeploymentScriptsList

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/script-rg")).GetDeploymentScripts();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
