// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for GalleryApplicationVersion. </summary>
    public partial class GalleryApplicationVersionCollectionMockTests : MockTestBase
    {
        public GalleryApplicationVersionCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create or update a simple gallery Application Version.
            string galleryApplicationVersionName = "1.0.0";
            Compute.GalleryApplicationVersionData galleryApplicationVersion = new Compute.GalleryApplicationVersionData(location: "West US")
            {
                PublishingProfile = new Compute.Models.GalleryApplicationVersionPublishingProfile(source: new Compute.Models.UserArtifactSource(mediaLink: "https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"))
                {
                    ManageActions = new Compute.Models.UserArtifactManage(install: "powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\"", remove: "del C:\\package "),
                    ReplicaCount = 1,
                    EndOfLifeDate = DateTimeOffset.Parse("2019-07-01T07:00:00Z"),
                    StorageAccountType = new Compute.Models.StorageAccountType("Standard_LRS"),
                },
            };

            var galleryApplicationId = Compute.GalleryApplication.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myGalleryName", "myGalleryApplicationName");
            var collection = GetArmClient().GetGalleryApplication(galleryApplicationId).GetGalleryApplicationVersions();
            await collection.CreateOrUpdateAsync(true, galleryApplicationVersionName, galleryApplicationVersion);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get a gallery Application Version with replication status.
            string galleryApplicationVersionName = "1.0.0";
            Compute.Models.ReplicationStatusTypes? expand = new Compute.Models.ReplicationStatusTypes("ReplicationStatus");

            var galleryApplicationId = Compute.GalleryApplication.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myGalleryName", "myGalleryApplicationName");
            var collection = GetArmClient().GetGalleryApplication(galleryApplicationId).GetGalleryApplicationVersions();
            await collection.GetAsync(galleryApplicationVersionName, expand);
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: Get a gallery Application Version.
            string galleryApplicationVersionName = "1.0.0";
            Compute.Models.ReplicationStatusTypes? expand = null;

            var galleryApplicationId = Compute.GalleryApplication.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myGalleryName", "myGalleryApplicationName");
            var collection = GetArmClient().GetGalleryApplication(galleryApplicationId).GetGalleryApplicationVersions();
            await collection.GetAsync(galleryApplicationVersionName, expand);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List gallery Application Versions in a gallery Application Definition.

            var galleryApplicationId = Compute.GalleryApplication.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myGalleryName", "myGalleryApplicationName");
            var collection = GetArmClient().GetGalleryApplication(galleryApplicationId).GetGalleryApplicationVersions();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
