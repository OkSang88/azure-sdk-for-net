// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Search;
using Azure.ResourceManager.Search.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Search.Tests.Mock
{
    /// <summary> Test for SearchService. </summary>
    public partial class SearchServiceMockTests : MockTestBase
    {
        public SearchServiceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: SearchGetService
            var searchServiceId = Search.SearchService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "mysearchservice");
            var searchService = GetArmClient().GetSearchService(searchServiceId);
            Search.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            await searchService.GetAsync(searchManagementRequestOptions);
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: SearchDeleteService
            var searchServiceId = Search.SearchService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "mysearchservice");
            var searchService = GetArmClient().GetSearchService(searchServiceId);
            Search.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            await searchService.DeleteAsync(true, searchManagementRequestOptions);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: SearchUpdateService
            var searchServiceId = Search.SearchService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "mysearchservice");
            var searchService = GetArmClient().GetSearchService(searchServiceId);
            Search.Models.SearchServiceUpdate service = new Search.Models.SearchServiceUpdate()
            {
                ReplicaCount = 2,
            };
            Search.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            await searchService.UpdateAsync(service, searchManagementRequestOptions);
        }

        [RecordedTest]
        public async Task Update2()
        {
            // Example: SearchUpdateServiceToRemoveIdentity
            var searchServiceId = Search.SearchService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "mysearchservice");
            var searchService = GetArmClient().GetSearchService(searchServiceId);
            Search.Models.SearchServiceUpdate service = new Search.Models.SearchServiceUpdate()
            {
                Sku = new Search.Models.Sku()
                {
                    Name = Search.Models.SkuName.Standard,
                },
                Identity = new Search.Models.Identity(type: Search.Models.IdentityType.None),
            };
            Search.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            await searchService.UpdateAsync(service, searchManagementRequestOptions);
        }

        [RecordedTest]
        public async Task Update3()
        {
            // Example: searchUpdateServiceToAllowAccessFromPrivateEndpoints
            var searchServiceId = Search.SearchService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "mysearchservice");
            var searchService = GetArmClient().GetSearchService(searchServiceId);
            Search.Models.SearchServiceUpdate service = new Search.Models.SearchServiceUpdate()
            {
                ReplicaCount = 1,
                PartitionCount = 1,
                PublicNetworkAccess = Search.Models.PublicNetworkAccess.Disabled,
            };
            Search.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            await searchService.UpdateAsync(service, searchManagementRequestOptions);
        }

        [RecordedTest]
        public async Task Update4()
        {
            // Example: searchUpdateServiceToAllowAccessFromPublicCustomIPs
            var searchServiceId = Search.SearchService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "mysearchservice");
            var searchService = GetArmClient().GetSearchService(searchServiceId);
            Search.Models.SearchServiceUpdate service = new Search.Models.SearchServiceUpdate()
            {
                ReplicaCount = 3,
                PartitionCount = 1,
                PublicNetworkAccess = Search.Models.PublicNetworkAccess.Enabled,
                NetworkRuleSet = new Search.Models.NetworkRuleSet(),
            };
            Search.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            await searchService.UpdateAsync(service, searchManagementRequestOptions);
        }

        [RecordedTest]
        public async Task GetAdminKey()
        {
            // Example: SearchGetAdminKeys
            var searchServiceId = Search.SearchService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "mysearchservice");
            var searchService = GetArmClient().GetSearchService(searchServiceId);
            Search.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            await searchService.GetAdminKeyAsync(searchManagementRequestOptions);
        }

        [RecordedTest]
        public async Task RegenerateAdminKey()
        {
            // Example: SearchRegenerateAdminKey
            var searchServiceId = Search.SearchService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "mysearchservice");
            var searchService = GetArmClient().GetSearchService(searchServiceId);
            Search.Models.AdminKeyKind keyKind = Search.Models.AdminKeyKind.Primary;
            Search.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            await searchService.RegenerateAdminKeyAsync(keyKind, searchManagementRequestOptions);
        }

        [RecordedTest]
        public async Task CreateQueryKey()
        {
            // Example: SearchCreateQueryKey
            var searchServiceId = Search.SearchService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "mysearchservice");
            var searchService = GetArmClient().GetSearchService(searchServiceId);
            string name = "Query key for browser-based clients";
            Search.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            await searchService.CreateQueryKeyAsync(name, searchManagementRequestOptions);
        }

        [RecordedTest]
        public async Task GetQueryKeysBySearchService()
        {
            // Example: SearchListQueryKeysBySearchService
            var searchServiceId = Search.SearchService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "mysearchservice");
            var searchService = GetArmClient().GetSearchService(searchServiceId);
            Search.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            await foreach (var _ in searchService.GetQueryKeysBySearchServiceAsync(searchManagementRequestOptions))
            {
            }
        }

        [RecordedTest]
        public async Task DeleteQueryKey()
        {
            // Example: SearchDeleteQueryKey
            var searchServiceId = Search.SearchService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "mysearchservice");
            var searchService = GetArmClient().GetSearchService(searchServiceId);
            string key = "<a query API key>";
            Search.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            await searchService.DeleteQueryKeyAsync(key, searchManagementRequestOptions);
        }

        [RecordedTest]
        public async Task GetSupportedPrivateLinkResources()
        {
            // Example: ListSupportedPrivateLinkResources
            var searchServiceId = Search.SearchService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "mysearchservice");
            var searchService = GetArmClient().GetSearchService(searchServiceId);
            Search.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            await foreach (var _ in searchService.GetSupportedPrivateLinkResourcesAsync(searchManagementRequestOptions))
            {
            }
        }
    }
}
