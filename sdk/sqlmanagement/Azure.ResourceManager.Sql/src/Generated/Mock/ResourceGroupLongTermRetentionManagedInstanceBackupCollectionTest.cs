// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for ManagedInstanceLongTermRetentionBackup. </summary>
    public partial class ResourceGroupLongTermRetentionManagedInstanceBackupCollectionMockTests : MockTestBase
    {
        public ResourceGroupLongTermRetentionManagedInstanceBackupCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get the long term retention backup.
            string locationName = "japaneast";
            string managedInstanceName = "testInstance";
            string databaseName = "testDatabase";
            string backupName = "55555555-6666-7777-8888-999999999999;131637960820000000";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testResourceGroup")).GetResourceGroupLongTermRetentionManagedInstanceBackups(locationName, managedInstanceName, databaseName);
            await collection.GetAsync(backupName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: Get all long term retention backups under the database.
            string locationName = "japaneast";
            string managedInstanceName = "testInstance";
            string databaseName = "testDatabase";
            bool? onlyLatestPerDatabase = null;
            Sql.Models.DatabaseState? databaseState = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testResourceGroup")).GetResourceGroupLongTermRetentionManagedInstanceBackups(locationName, managedInstanceName, databaseName);
            await foreach (var _ in collection.GetAllAsync(onlyLatestPerDatabase, databaseState))
            {
            }
        }
    }
}
