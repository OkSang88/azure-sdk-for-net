// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for JobExecution. </summary>
    public partial class ServerJobAgentJobExecutionStepTargetCollectionMockTests : MockTestBase
    {
        public ServerJobAgentJobExecutionStepTargetCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get a job step target execution
            var collection = GetArmClient().GetServerJobAgentJobExecutionStep(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/executions/5555-6666-7777-8888-999999999999/steps/step1")).GetServerJobAgentJobExecutionStepTargets();
            Guid targetId = Guid.Parse("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee");

            await collection.GetAsync(targetId);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: List job step target executions
            var collection = GetArmClient().GetServerJobAgentJobExecutionStep(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/jobs/job1/executions/5555-6666-7777-8888-999999999999/steps/step1")).GetServerJobAgentJobExecutionStepTargets();
            DateTimeOffset? createTimeMin = null;
            DateTimeOffset? createTimeMax = null;
            DateTimeOffset? endTimeMin = null;
            DateTimeOffset? endTimeMax = null;
            bool? isActive = null;
            int? skip = null;
            int? top = null;

            collection.GetAllAsync(createTimeMin, createTimeMax, endTimeMin, endTimeMax, isActive, skip, top);
        }
    }
}
