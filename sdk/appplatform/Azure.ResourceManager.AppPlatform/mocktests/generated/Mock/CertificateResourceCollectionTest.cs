// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.AppPlatform;
using Azure.ResourceManager.AppPlatform.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.AppPlatform.Tests.Mock
{
    /// <summary> Test for CertificateResource. </summary>
    public partial class CertificateResourceCollectionMockTests : MockTestBase
    {
        public CertificateResourceCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Certificates_CreateOrUpdate
            string certificateName = "mycertificate";
            AppPlatform.CertificateResourceData certificateResource = new AppPlatform.CertificateResourceData()
            {
                Properties = new AppPlatform.Models.KeyVaultCertificateProperties(vaultUri: "https://myvault.vault.azure.net", keyVaultCertName: "mycert")
                {
                    CertVersion = "08a219d06d874795a96db47e06fbb01e",
                    Type = "KeyVaultCertificate",
                },
            };

            var serviceResourceId = AppPlatform.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var collection = GetArmClient().GetServiceResource(serviceResourceId).GetCertificateResources();
            await collection.CreateOrUpdateAsync(true, certificateName, certificateResource);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Certificates_Get
            string certificateName = "mycertificate";

            var serviceResourceId = AppPlatform.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var collection = GetArmClient().GetServiceResource(serviceResourceId).GetCertificateResources();
            await collection.GetAsync(certificateName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: Certificates_List

            var serviceResourceId = AppPlatform.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myService");
            var collection = GetArmClient().GetServiceResource(serviceResourceId).GetCertificateResources();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
