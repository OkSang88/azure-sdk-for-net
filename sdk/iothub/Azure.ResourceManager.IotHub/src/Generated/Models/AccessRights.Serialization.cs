// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.IotHub.Models
{
    internal static partial class AccessRightsExtensions
    {
        public static string ToSerialString(this AccessRights value) => value switch
        {
            AccessRights.RegistryRead => "RegistryRead",
            AccessRights.RegistryWrite => "RegistryWrite",
            AccessRights.ServiceConnect => "ServiceConnect",
            AccessRights.DeviceConnect => "DeviceConnect",
            AccessRights.RegistryReadRegistryWrite => "RegistryRead, RegistryWrite",
            AccessRights.RegistryReadServiceConnect => "RegistryRead, ServiceConnect",
            AccessRights.RegistryReadDeviceConnect => "RegistryRead, DeviceConnect",
            AccessRights.RegistryWriteServiceConnect => "RegistryWrite, ServiceConnect",
            AccessRights.RegistryWriteDeviceConnect => "RegistryWrite, DeviceConnect",
            AccessRights.ServiceConnectDeviceConnect => "ServiceConnect, DeviceConnect",
            AccessRights.RegistryReadRegistryWriteServiceConnect => "RegistryRead, RegistryWrite, ServiceConnect",
            AccessRights.RegistryReadRegistryWriteDeviceConnect => "RegistryRead, RegistryWrite, DeviceConnect",
            AccessRights.RegistryReadServiceConnectDeviceConnect => "RegistryRead, ServiceConnect, DeviceConnect",
            AccessRights.RegistryWriteServiceConnectDeviceConnect => "RegistryWrite, ServiceConnect, DeviceConnect",
            AccessRights.RegistryReadRegistryWriteServiceConnectDeviceConnect => "RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown AccessRights value.")
        };

        public static AccessRights ToAccessRights(this string value)
        {
            if (string.Equals(value, "RegistryRead", StringComparison.InvariantCultureIgnoreCase)) return AccessRights.RegistryRead;
            if (string.Equals(value, "RegistryWrite", StringComparison.InvariantCultureIgnoreCase)) return AccessRights.RegistryWrite;
            if (string.Equals(value, "ServiceConnect", StringComparison.InvariantCultureIgnoreCase)) return AccessRights.ServiceConnect;
            if (string.Equals(value, "DeviceConnect", StringComparison.InvariantCultureIgnoreCase)) return AccessRights.DeviceConnect;
            if (string.Equals(value, "RegistryRead, RegistryWrite", StringComparison.InvariantCultureIgnoreCase)) return AccessRights.RegistryReadRegistryWrite;
            if (string.Equals(value, "RegistryRead, ServiceConnect", StringComparison.InvariantCultureIgnoreCase)) return AccessRights.RegistryReadServiceConnect;
            if (string.Equals(value, "RegistryRead, DeviceConnect", StringComparison.InvariantCultureIgnoreCase)) return AccessRights.RegistryReadDeviceConnect;
            if (string.Equals(value, "RegistryWrite, ServiceConnect", StringComparison.InvariantCultureIgnoreCase)) return AccessRights.RegistryWriteServiceConnect;
            if (string.Equals(value, "RegistryWrite, DeviceConnect", StringComparison.InvariantCultureIgnoreCase)) return AccessRights.RegistryWriteDeviceConnect;
            if (string.Equals(value, "ServiceConnect, DeviceConnect", StringComparison.InvariantCultureIgnoreCase)) return AccessRights.ServiceConnectDeviceConnect;
            if (string.Equals(value, "RegistryRead, RegistryWrite, ServiceConnect", StringComparison.InvariantCultureIgnoreCase)) return AccessRights.RegistryReadRegistryWriteServiceConnect;
            if (string.Equals(value, "RegistryRead, RegistryWrite, DeviceConnect", StringComparison.InvariantCultureIgnoreCase)) return AccessRights.RegistryReadRegistryWriteDeviceConnect;
            if (string.Equals(value, "RegistryRead, ServiceConnect, DeviceConnect", StringComparison.InvariantCultureIgnoreCase)) return AccessRights.RegistryReadServiceConnectDeviceConnect;
            if (string.Equals(value, "RegistryWrite, ServiceConnect, DeviceConnect", StringComparison.InvariantCultureIgnoreCase)) return AccessRights.RegistryWriteServiceConnectDeviceConnect;
            if (string.Equals(value, "RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect", StringComparison.InvariantCultureIgnoreCase)) return AccessRights.RegistryReadRegistryWriteServiceConnectDeviceConnect;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown AccessRights value.");
        }
    }
}
