// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using PrivateDnsManagementClient;
using PrivateDnsManagementClient.Models;

namespace PrivateDnsManagementClient.Tests.Mock
{
    /// <summary> Test for RecordSet. </summary>
    public partial class PrivateDnsZoneSRVCollectionMockTests : MockTestBase
    {
        public PrivateDnsZoneSRVCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: PUT Private DNS Zone A Record Set
            PrivateDnsManagementClient.Models.RecordType recordType = PrivateDnsManagementClient.Models.RecordType.A;
            string relativeRecordSetName = "recordA";
            PrivateDnsManagementClient.RecordSetData parameters = new PrivateDnsManagementClient.RecordSetData()
            {
                Ttl = 3600,
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var privateZoneId = PrivateDnsManagementClient.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "privatezone1.com");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetPrivateDnsZoneSRVs();
            await collection.CreateOrUpdateAsync(true, recordType, relativeRecordSetName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: PUT Private DNS Zone AAAA Record Set
            PrivateDnsManagementClient.Models.RecordType recordType = PrivateDnsManagementClient.Models.RecordType.Aaaa;
            string relativeRecordSetName = "recordAAAA";
            PrivateDnsManagementClient.RecordSetData parameters = new PrivateDnsManagementClient.RecordSetData()
            {
                Ttl = 3600,
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var privateZoneId = PrivateDnsManagementClient.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "privatezone1.com");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetPrivateDnsZoneSRVs();
            await collection.CreateOrUpdateAsync(true, recordType, relativeRecordSetName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate3()
        {
            // Example: PUT Private DNS Zone CNAME Record Set
            PrivateDnsManagementClient.Models.RecordType recordType = PrivateDnsManagementClient.Models.RecordType.Cname;
            string relativeRecordSetName = "recordCNAME";
            PrivateDnsManagementClient.RecordSetData parameters = new PrivateDnsManagementClient.RecordSetData()
            {
                Ttl = 3600,
                CnameRecord = new PrivateDnsManagementClient.Models.CnameRecord()
                {
                    Cname = "contoso.com",
                },
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var privateZoneId = PrivateDnsManagementClient.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "privatezone1.com");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetPrivateDnsZoneSRVs();
            await collection.CreateOrUpdateAsync(true, recordType, relativeRecordSetName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate4()
        {
            // Example: PUT Private DNS Zone MX Record Set
            PrivateDnsManagementClient.Models.RecordType recordType = PrivateDnsManagementClient.Models.RecordType.MX;
            string relativeRecordSetName = "recordMX";
            PrivateDnsManagementClient.RecordSetData parameters = new PrivateDnsManagementClient.RecordSetData()
            {
                Ttl = 3600,
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var privateZoneId = PrivateDnsManagementClient.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "privatezone1.com");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetPrivateDnsZoneSRVs();
            await collection.CreateOrUpdateAsync(true, recordType, relativeRecordSetName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate5()
        {
            // Example: PUT Private DNS Zone PTR Record Set
            PrivateDnsManagementClient.Models.RecordType recordType = PrivateDnsManagementClient.Models.RecordType.PTR;
            string relativeRecordSetName = "1";
            PrivateDnsManagementClient.RecordSetData parameters = new PrivateDnsManagementClient.RecordSetData()
            {
                Ttl = 3600,
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var privateZoneId = PrivateDnsManagementClient.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "0.0.127.in-addr.arpa");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetPrivateDnsZoneSRVs();
            await collection.CreateOrUpdateAsync(true, recordType, relativeRecordSetName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate6()
        {
            // Example: PUT Private DNS Zone SOA Record Set
            PrivateDnsManagementClient.Models.RecordType recordType = PrivateDnsManagementClient.Models.RecordType.SOA;
            string relativeRecordSetName = "@";
            PrivateDnsManagementClient.RecordSetData parameters = new PrivateDnsManagementClient.RecordSetData()
            {
                Ttl = 3600,
                SoaRecord = new PrivateDnsManagementClient.Models.SoaRecord()
                {
                    Host = "azureprivatedns.net",
                    Email = "azureprivatedns-hostmaster.microsoft.com",
                    SerialNumber = 1,
                    RefreshTime = 3600,
                    RetryTime = 300,
                    ExpireTime = 2419200,
                },
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var privateZoneId = PrivateDnsManagementClient.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "privatezone1.com");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetPrivateDnsZoneSRVs();
            await collection.CreateOrUpdateAsync(true, recordType, relativeRecordSetName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate7()
        {
            // Example: PUT Private DNS Zone SRV Record Set
            PrivateDnsManagementClient.Models.RecordType recordType = PrivateDnsManagementClient.Models.RecordType.SRV;
            string relativeRecordSetName = "recordSRV";
            PrivateDnsManagementClient.RecordSetData parameters = new PrivateDnsManagementClient.RecordSetData()
            {
                Ttl = 3600,
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var privateZoneId = PrivateDnsManagementClient.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "privatezone1.com");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetPrivateDnsZoneSRVs();
            await collection.CreateOrUpdateAsync(true, recordType, relativeRecordSetName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate8()
        {
            // Example: PUT Private DNS Zone TXT Record Set
            PrivateDnsManagementClient.Models.RecordType recordType = PrivateDnsManagementClient.Models.RecordType.TXT;
            string relativeRecordSetName = "recordTXT";
            PrivateDnsManagementClient.RecordSetData parameters = new PrivateDnsManagementClient.RecordSetData()
            {
                Ttl = 3600,
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var privateZoneId = PrivateDnsManagementClient.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "privatezone1.com");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetPrivateDnsZoneSRVs();
            await collection.CreateOrUpdateAsync(true, recordType, relativeRecordSetName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: GET Private DNS Zone A Record Set
            PrivateDnsManagementClient.Models.RecordType recordType = PrivateDnsManagementClient.Models.RecordType.A;
            string relativeRecordSetName = "recordA";

            var privateZoneId = PrivateDnsManagementClient.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "privatezone1.com");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetPrivateDnsZoneSRVs();
            await collection.GetAsync(recordType, relativeRecordSetName);
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: GET Private DNS Zone AAAA Record Set
            PrivateDnsManagementClient.Models.RecordType recordType = PrivateDnsManagementClient.Models.RecordType.Aaaa;
            string relativeRecordSetName = "recordAAAA";

            var privateZoneId = PrivateDnsManagementClient.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "privatezone1.com");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetPrivateDnsZoneSRVs();
            await collection.GetAsync(recordType, relativeRecordSetName);
        }

        [RecordedTest]
        public async Task Get3()
        {
            // Example: GET Private DNS Zone CNAME Record Set
            PrivateDnsManagementClient.Models.RecordType recordType = PrivateDnsManagementClient.Models.RecordType.Cname;
            string relativeRecordSetName = "recordCNAME";

            var privateZoneId = PrivateDnsManagementClient.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "privatezone1.com");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetPrivateDnsZoneSRVs();
            await collection.GetAsync(recordType, relativeRecordSetName);
        }

        [RecordedTest]
        public async Task Get4()
        {
            // Example: GET Private DNS Zone MX Record Set
            PrivateDnsManagementClient.Models.RecordType recordType = PrivateDnsManagementClient.Models.RecordType.MX;
            string relativeRecordSetName = "recordMX";

            var privateZoneId = PrivateDnsManagementClient.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "privatezone1.com");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetPrivateDnsZoneSRVs();
            await collection.GetAsync(recordType, relativeRecordSetName);
        }

        [RecordedTest]
        public async Task Get5()
        {
            // Example: GET Private DNS Zone PTR Record Set
            PrivateDnsManagementClient.Models.RecordType recordType = PrivateDnsManagementClient.Models.RecordType.PTR;
            string relativeRecordSetName = "1";

            var privateZoneId = PrivateDnsManagementClient.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "0.0.127.in-addr.arpa");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetPrivateDnsZoneSRVs();
            await collection.GetAsync(recordType, relativeRecordSetName);
        }

        [RecordedTest]
        public async Task Get6()
        {
            // Example: GET Private DNS Zone SOA Record Set
            PrivateDnsManagementClient.Models.RecordType recordType = PrivateDnsManagementClient.Models.RecordType.SOA;
            string relativeRecordSetName = "@";

            var privateZoneId = PrivateDnsManagementClient.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "privatezone1.com");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetPrivateDnsZoneSRVs();
            await collection.GetAsync(recordType, relativeRecordSetName);
        }

        [RecordedTest]
        public async Task Get7()
        {
            // Example: GET Private DNS Zone SRV Record Set
            PrivateDnsManagementClient.Models.RecordType recordType = PrivateDnsManagementClient.Models.RecordType.SRV;
            string relativeRecordSetName = "recordSRV";

            var privateZoneId = PrivateDnsManagementClient.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "privatezone1.com");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetPrivateDnsZoneSRVs();
            await collection.GetAsync(recordType, relativeRecordSetName);
        }

        [RecordedTest]
        public async Task Get8()
        {
            // Example: GET Private DNS Zone TXT Record Set
            PrivateDnsManagementClient.Models.RecordType recordType = PrivateDnsManagementClient.Models.RecordType.TXT;
            string relativeRecordSetName = "recordTXT";

            var privateZoneId = PrivateDnsManagementClient.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "privatezone1.com");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetPrivateDnsZoneSRVs();
            await collection.GetAsync(recordType, relativeRecordSetName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: GET Private DNS Zone A Record Sets
            PrivateDnsManagementClient.Models.RecordType recordType = PrivateDnsManagementClient.Models.RecordType.A;
            int? top = null;
            string recordsetnamesuffix = null;

            var privateZoneId = PrivateDnsManagementClient.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "privatezone1.com");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetPrivateDnsZoneSRVs();
            await foreach (var _ in collection.GetAllAsync(recordType, top, recordsetnamesuffix))
            {
            }
        }

        [RecordedTest]
        public async Task GetAll2()
        {
            // Example: GET Private DNS Zone AAAA Record Sets
            PrivateDnsManagementClient.Models.RecordType recordType = PrivateDnsManagementClient.Models.RecordType.Aaaa;
            int? top = null;
            string recordsetnamesuffix = null;

            var privateZoneId = PrivateDnsManagementClient.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "privatezone1.com");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetPrivateDnsZoneSRVs();
            await foreach (var _ in collection.GetAllAsync(recordType, top, recordsetnamesuffix))
            {
            }
        }

        [RecordedTest]
        public async Task GetAll3()
        {
            // Example: GET Private DNS Zone CNAME Record Sets
            PrivateDnsManagementClient.Models.RecordType recordType = PrivateDnsManagementClient.Models.RecordType.Cname;
            int? top = null;
            string recordsetnamesuffix = null;

            var privateZoneId = PrivateDnsManagementClient.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "privatezone1.com");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetPrivateDnsZoneSRVs();
            await foreach (var _ in collection.GetAllAsync(recordType, top, recordsetnamesuffix))
            {
            }
        }

        [RecordedTest]
        public async Task GetAll4()
        {
            // Example: GET Private DNS Zone MX Record Sets
            PrivateDnsManagementClient.Models.RecordType recordType = PrivateDnsManagementClient.Models.RecordType.MX;
            int? top = null;
            string recordsetnamesuffix = null;

            var privateZoneId = PrivateDnsManagementClient.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "privatezone1.com");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetPrivateDnsZoneSRVs();
            await foreach (var _ in collection.GetAllAsync(recordType, top, recordsetnamesuffix))
            {
            }
        }

        [RecordedTest]
        public async Task GetAll5()
        {
            // Example: GET Private DNS Zone PTR Record Sets
            PrivateDnsManagementClient.Models.RecordType recordType = PrivateDnsManagementClient.Models.RecordType.PTR;
            int? top = null;
            string recordsetnamesuffix = null;

            var privateZoneId = PrivateDnsManagementClient.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "0.0.127.in-addr.arpa");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetPrivateDnsZoneSRVs();
            await foreach (var _ in collection.GetAllAsync(recordType, top, recordsetnamesuffix))
            {
            }
        }

        [RecordedTest]
        public async Task GetAll6()
        {
            // Example: GET Private DNS Zone SOA Record Sets
            PrivateDnsManagementClient.Models.RecordType recordType = PrivateDnsManagementClient.Models.RecordType.SOA;
            int? top = null;
            string recordsetnamesuffix = null;

            var privateZoneId = PrivateDnsManagementClient.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "privatezone1.com");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetPrivateDnsZoneSRVs();
            await foreach (var _ in collection.GetAllAsync(recordType, top, recordsetnamesuffix))
            {
            }
        }

        [RecordedTest]
        public async Task GetAll7()
        {
            // Example: GET Private DNS Zone SRV Record Sets
            PrivateDnsManagementClient.Models.RecordType recordType = PrivateDnsManagementClient.Models.RecordType.SRV;
            int? top = null;
            string recordsetnamesuffix = null;

            var privateZoneId = PrivateDnsManagementClient.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "privatezone1.com");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetPrivateDnsZoneSRVs();
            await foreach (var _ in collection.GetAllAsync(recordType, top, recordsetnamesuffix))
            {
            }
        }

        [RecordedTest]
        public async Task GetAll8()
        {
            // Example: GET Private DNS Zone TXT Record Sets
            PrivateDnsManagementClient.Models.RecordType recordType = PrivateDnsManagementClient.Models.RecordType.TXT;
            int? top = null;
            string recordsetnamesuffix = null;

            var privateZoneId = PrivateDnsManagementClient.PrivateZone.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourceGroup1", "privatezone1.com");
            var collection = GetArmClient().GetPrivateZone(privateZoneId).GetPrivateDnsZoneSRVs();
            await foreach (var _ in collection.GetAllAsync(recordType, top, recordsetnamesuffix))
            {
            }
        }
    }
}
