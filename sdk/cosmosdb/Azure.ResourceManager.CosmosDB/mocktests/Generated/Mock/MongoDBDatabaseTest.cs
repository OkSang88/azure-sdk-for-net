// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.CosmosDB;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.CosmosDB.Tests.Mock
{
    /// <summary> Test for MongoDBDatabase. </summary>
    public partial class MongoDBDatabaseMockTests : MockTestBase
    {
        public MongoDBDatabaseMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: CosmosDBMongoDBDatabaseGet
            var mongoDBDatabaseId = CosmosDB.MongoDBDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1", "databaseName");
            var mongoDBDatabase = GetArmClient().GetMongoDBDatabase(mongoDBDatabaseId);

            await mongoDBDatabase.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: CosmosDBMongoDBDatabaseDelete
            var mongoDBDatabaseId = CosmosDB.MongoDBDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1", "databaseName");
            var mongoDBDatabase = GetArmClient().GetMongoDBDatabase(mongoDBDatabaseId);

            await mongoDBDatabase.DeleteAsync();
        }

        [RecordedTest]
        public async Task DatabaseAccountMongodbDatabaseThroughputSettingGet()
        {
            // Example: CosmosDBMongoDBDatabaseThroughputGet
            var databaseAccountMongodbDatabaseThroughputSettingId = CosmosDB.DatabaseAccountMongodbDatabaseThroughputSetting.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1", "databaseName");
            var databaseAccountMongodbDatabaseThroughputSetting = GetArmClient().GetDatabaseAccountMongodbDatabaseThroughputSetting(databaseAccountMongodbDatabaseThroughputSettingId);

            await databaseAccountMongodbDatabaseThroughputSetting.GetAsync();
        }

        [RecordedTest]
        public async Task DatabaseAccountMongodbDatabaseThroughputSettingMigrateMongoDBDatabaseToAutoscale()
        {
            // Example: CosmosDBMongoDBDatabaseMigrateToAutoscale
            var databaseAccountMongodbDatabaseThroughputSettingId = CosmosDB.DatabaseAccountMongodbDatabaseThroughputSetting.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1", "databaseName");
            var databaseAccountMongodbDatabaseThroughputSetting = GetArmClient().GetDatabaseAccountMongodbDatabaseThroughputSetting(databaseAccountMongodbDatabaseThroughputSettingId);

            await databaseAccountMongodbDatabaseThroughputSetting.MigrateMongoDBDatabaseToAutoscaleAsync();
        }

        [RecordedTest]
        public async Task DatabaseAccountMongodbDatabaseThroughputSettingMigrateMongoDBDatabaseToManualThroughput()
        {
            // Example: CosmosDBMongoDBDatabaseMigrateToManualThroughput
            var databaseAccountMongodbDatabaseThroughputSettingId = CosmosDB.DatabaseAccountMongodbDatabaseThroughputSetting.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1", "databaseName");
            var databaseAccountMongodbDatabaseThroughputSetting = GetArmClient().GetDatabaseAccountMongodbDatabaseThroughputSetting(databaseAccountMongodbDatabaseThroughputSettingId);

            await databaseAccountMongodbDatabaseThroughputSetting.MigrateMongoDBDatabaseToManualThroughputAsync();
        }
    }
}
