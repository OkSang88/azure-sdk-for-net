// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.StorSimple8000Series.Models
{
    public partial class CloudApplianceConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind");
                writer.WriteStringValue(Kind);
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            writer.WritePropertyName("modelNumber");
            writer.WriteStringValue(ModelNumber);
            writer.WritePropertyName("cloudPlatform");
            writer.WriteStringValue(CloudPlatform);
            writer.WritePropertyName("acsConfiguration");
            writer.WriteObjectValue(AcsConfiguration);
            writer.WritePropertyName("supportedStorageAccountTypes");
            writer.WriteStartArray();
            foreach (var item in SupportedStorageAccountTypes)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("supportedRegions");
            writer.WriteStartArray();
            foreach (var item in SupportedRegions)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("supportedVmTypes");
            writer.WriteStartArray();
            foreach (var item in SupportedVmTypes)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("supportedVmImages");
            writer.WriteStartArray();
            foreach (var item in SupportedVmImages)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static CloudApplianceConfiguration DeserializeCloudApplianceConfiguration(JsonElement element)
        {
            Optional<string> kind = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            string modelNumber = default;
            string cloudPlatform = default;
            AcsConfiguration acsConfiguration = default;
            IList<string> supportedStorageAccountTypes = default;
            IList<string> supportedRegions = default;
            IList<string> supportedVmTypes = default;
            IList<VmImage> supportedVmImages = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("modelNumber"))
                        {
                            modelNumber = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("cloudPlatform"))
                        {
                            cloudPlatform = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("acsConfiguration"))
                        {
                            acsConfiguration = AcsConfiguration.DeserializeAcsConfiguration(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("supportedStorageAccountTypes"))
                        {
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            supportedStorageAccountTypes = array;
                            continue;
                        }
                        if (property0.NameEquals("supportedRegions"))
                        {
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            supportedRegions = array;
                            continue;
                        }
                        if (property0.NameEquals("supportedVmTypes"))
                        {
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            supportedVmTypes = array;
                            continue;
                        }
                        if (property0.NameEquals("supportedVmImages"))
                        {
                            List<VmImage> array = new List<VmImage>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(VmImage.DeserializeVmImage(item));
                            }
                            supportedVmImages = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new CloudApplianceConfiguration(id, name, type, kind.Value, modelNumber, cloudPlatform, acsConfiguration, supportedStorageAccountTypes, supportedRegions, supportedVmTypes, supportedVmImages);
        }
    }
}
