// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.SignalR.Tests.Mock;
using Azure.ResourceManager.SignalR.Tests.Mock.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.SignalR.Tests.Mock.Tests.Mock
{
    /// <summary> Test for SignalRResource. </summary>
    public partial class SignalRResourceCollectionMockTests : MockTestBase
    {
        public SignalRResourceCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: SignalR_CreateOrUpdate
            string resourceName = "mySignalRService";
            SignalR.Tests.Mock.SignalRResourceData parameters = new SignalR.Tests.Mock.SignalRResourceData(location: "eastus")
            {
                Sku = new SignalR.Tests.Mock.Models.ResourceSku(name: "Standard_S1")
                {
                    Tier = new SignalR.Tests.Mock.Models.SignalRSkuTier("Standard"),
                    Capacity = 1,
                },
                Kind = new SignalR.Tests.Mock.Models.ServiceKind("SignalR"),
                Identity = new SignalR.Tests.Mock.Models.ManagedIdentity()
                {
                    Type = new SignalR.Tests.Mock.Models.ManagedIdentityType("SystemAssigned"),
                },
                Tls = new SignalR.Tests.Mock.Models.SignalRTlsSettings()
                {
                    ClientCertEnabled = false,
                },
                Cors = new SignalR.Tests.Mock.Models.SignalRCorsSettings(),
                Upstream = new SignalR.Tests.Mock.Models.ServerlessUpstreamSettings(),
                NetworkACLs = new SignalR.Tests.Mock.Models.SignalRNetworkACLs()
                {
                    DefaultAction = new SignalR.Tests.Mock.Models.ACLAction("Deny"),
                    PublicNetwork = new SignalR.Tests.Mock.Models.NetworkACL(),
                },
                PublicNetworkAccess = "Enabled",
                DisableLocalAuth = false,
                DisableAadAuth = false,
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>()
            {
                ["key1"] = "value1",
            });

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetSignalRResources();
            await collection.CreateOrUpdateAsync(true, resourceName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: SignalR_Get
            string resourceName = "mySignalRService";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetSignalRResources();
            await collection.GetAsync(resourceName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: SignalR_ListByResourceGroup

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetSignalRResources();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
