// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Storage;
using Azure.ResourceManager.Storage.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Storage.Tests.Mock
{
    /// <summary> Test for BlobInventoryPolicy. </summary>
    public partial class BlobInventoryPolicyCollectionMockTests : MockTestBase
    {
        public BlobInventoryPolicyCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: StorageAccountSetBlobInventoryPolicy
            var collection = GetArmClient().GetStorageAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res7687/providers/Microsoft.Storage/storageAccounts/sto9699")).GetBlobInventoryPolicies();
            Storage.Models.BlobInventoryPolicyName blobInventoryPolicyName = new Storage.Models.BlobInventoryPolicyName("default");
            Storage.BlobInventoryPolicyData properties = new Storage.BlobInventoryPolicyData()
            {
                Policy = new Storage.Models.BlobInventoryPolicySchema(enabled: true, type: new Storage.Models.InventoryRuleType("Inventory"), rules: new List<Storage.Models.BlobInventoryPolicyRule>()
{
new Storage.Models.BlobInventoryPolicyRule(enabled: true,name: "inventoryPolicyRule1",destination: "container1",definition: new Storage.Models.BlobInventoryPolicyDefinition(format: new Storage.Models.Format("Csv"),schedule: new Storage.Models.Schedule("Daily"),objectType: new Storage.Models.ObjectType("Blob"),schemaFields: new List<string>()
{
"Name","Creation-Time","Last-Modified","Content-Length","Content-MD5","BlobType","AccessTier","AccessTierChangeTime","Snapshot","VersionId","IsCurrentVersion","Metadata",})
{
Filters = new Storage.Models.BlobInventoryPolicyFilter()
{
IncludeBlobVersions = true, IncludeSnapshots = true, }, }),new Storage.Models.BlobInventoryPolicyRule(enabled: true,name: "inventoryPolicyRule2",destination: "container2",definition: new Storage.Models.BlobInventoryPolicyDefinition(format: new Storage.Models.Format("Parquet"),schedule: new Storage.Models.Schedule("Weekly"),objectType: new Storage.Models.ObjectType("Container"),schemaFields: new List<string>()
{
"Name","Last-Modified","Metadata","LeaseStatus","LeaseState","LeaseDuration","PublicAccess","HasImmutabilityPolicy","HasLegalHold",})),}),
            };

            await collection.CreateOrUpdateAsync(blobInventoryPolicyName, properties);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: StorageAccountGetBlobInventoryPolicy
            var collection = GetArmClient().GetStorageAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res7687/providers/Microsoft.Storage/storageAccounts/sto9699")).GetBlobInventoryPolicies();
            Storage.Models.BlobInventoryPolicyName blobInventoryPolicyName = new Storage.Models.BlobInventoryPolicyName("default");

            await collection.GetAsync(blobInventoryPolicyName);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: StorageAccountGetBlobInventoryPolicy
            var collection = GetArmClient().GetStorageAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res7687/providers/Microsoft.Storage/storageAccounts/sto9699")).GetBlobInventoryPolicies();

            collection.GetAllAsync();
        }
    }
}
