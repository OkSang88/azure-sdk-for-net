// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.AppService;
using Azure.ResourceManager.AppService.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.AppService.Tests.Mock
{
    /// <summary> Test for StaticSiteARMResource. </summary>
    public partial class StaticSiteARMResourceMockTests : MockTestBase
    {
        public StaticSiteARMResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get details for a static site
            var staticSiteARMResourceId = AppService.StaticSiteARMResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg", "testStaticSite0");
            var staticSiteARMResource = GetArmClient().GetStaticSiteARMResource(staticSiteARMResourceId);

            await staticSiteARMResource.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete a static site
            var staticSiteARMResourceId = AppService.StaticSiteARMResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg", "testStaticSite0");
            var staticSiteARMResource = GetArmClient().GetStaticSiteARMResource(staticSiteARMResourceId);

            await staticSiteARMResource.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Patch a static site
            var staticSiteARMResourceId = AppService.StaticSiteARMResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg", "testStaticSite0");
            var staticSiteARMResource = GetArmClient().GetStaticSiteARMResource(staticSiteARMResourceId);
            AppService.Models.StaticSitePatchResource staticSiteEnvelope = new AppService.Models.StaticSitePatchResource();

            await staticSiteARMResource.UpdateAsync(staticSiteEnvelope);
        }

        [RecordedTest]
        public async Task GetUsers()
        {
            // Example: List users for a static site
            var staticSiteARMResourceId = AppService.StaticSiteARMResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg", "testStaticSite0");
            var staticSiteARMResource = GetArmClient().GetStaticSiteARMResource(staticSiteARMResourceId);
            string authprovider = "all";

            await foreach (var _ in staticSiteARMResource.GetUsersAsync(authprovider))
            {
            }
        }

        [RecordedTest]
        public async Task DeleteUser()
        {
            // Example: Delete a user for a static site
            var staticSiteARMResourceId = AppService.StaticSiteARMResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg", "testStaticSite0");
            var staticSiteARMResource = GetArmClient().GetStaticSiteARMResource(staticSiteARMResourceId);
            string authprovider = "aad";
            string userid = "1234";

            await staticSiteARMResource.DeleteUserAsync(authprovider, userid);
        }

        [RecordedTest]
        public async Task UpdateUser()
        {
            // Example: Create or update a user for a static site
            var staticSiteARMResourceId = AppService.StaticSiteARMResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg", "testStaticSite0");
            var staticSiteARMResource = GetArmClient().GetStaticSiteARMResource(staticSiteARMResourceId);
            string authprovider = "aad";
            string userid = "1234";
            AppService.Models.StaticSiteUserARMResource staticSiteUserEnvelope = new AppService.Models.StaticSiteUserARMResource()
            {
                Roles = "contributor",
            };

            await staticSiteARMResource.UpdateUserAsync(authprovider, userid, staticSiteUserEnvelope);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAppSettings()
        {
            // Example: Creates or updates the app settings of a static site.
            var staticSiteARMResourceId = AppService.StaticSiteARMResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg", "testStaticSite0");
            var staticSiteARMResource = GetArmClient().GetStaticSiteARMResource(staticSiteARMResourceId);
            AppService.Models.StringDictionary appSettings = new AppService.Models.StringDictionary();

            await staticSiteARMResource.CreateOrUpdateAppSettingsAsync(appSettings);
        }

        [RecordedTest]
        public async Task CreateOrUpdateFunctionAppSettings()
        {
            // Example: Creates or updates the function app settings of a static site.
            var staticSiteARMResourceId = AppService.StaticSiteARMResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg", "testStaticSite0");
            var staticSiteARMResource = GetArmClient().GetStaticSiteARMResource(staticSiteARMResourceId);
            AppService.Models.StringDictionary appSettings = new AppService.Models.StringDictionary();

            await staticSiteARMResource.CreateOrUpdateFunctionAppSettingsAsync(appSettings);
        }

        [RecordedTest]
        public async Task CreateUserRolesInvitationLink()
        {
            // Example: Create an invitation link for a user for a static site
            var staticSiteARMResourceId = AppService.StaticSiteARMResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg", "testStaticSite0");
            var staticSiteARMResource = GetArmClient().GetStaticSiteARMResource(staticSiteARMResourceId);
            AppService.Models.StaticSiteUserInvitationRequestResource staticSiteUserRolesInvitationEnvelope = new AppService.Models.StaticSiteUserInvitationRequestResource()
            {
                Domain = "happy-sea-15afae3e.azurestaticwebsites.net",
                Provider = "aad",
                UserDetails = "username",
                Roles = "admin,contributor",
                NumHoursToExpiration = 1,
            };

            await staticSiteARMResource.CreateUserRolesInvitationLinkAsync(staticSiteUserRolesInvitationEnvelope);
        }

        [RecordedTest]
        public async Task Detach()
        {
            // Example: Detach a static site
            var staticSiteARMResourceId = AppService.StaticSiteARMResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg", "testStaticSite0");
            var staticSiteARMResource = GetArmClient().GetStaticSiteARMResource(staticSiteARMResourceId);

            await staticSiteARMResource.DetachAsync(true);
        }

        [RecordedTest]
        public async Task GetStaticSiteFunctions()
        {
            // Example: Gets the functions of a static site
            var staticSiteARMResourceId = AppService.StaticSiteARMResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg", "testStaticSite0");
            var staticSiteARMResource = GetArmClient().GetStaticSiteARMResource(staticSiteARMResourceId);

            await foreach (var _ in staticSiteARMResource.GetStaticSiteFunctionsAsync())
            {
            }
        }

        [RecordedTest]
        public async Task GetAppSettings()
        {
            // Example: Get app settings of a static site
            var staticSiteARMResourceId = AppService.StaticSiteARMResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg", "testStaticSite0");
            var staticSiteARMResource = GetArmClient().GetStaticSiteARMResource(staticSiteARMResourceId);

            await staticSiteARMResource.GetAppSettingsAsync();
        }

        [RecordedTest]
        public async Task GetConfiguredRoles()
        {
            // Example: Lists the configured roles for a static site
            var staticSiteARMResourceId = AppService.StaticSiteARMResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg", "testStaticSite0");
            var staticSiteARMResource = GetArmClient().GetStaticSiteARMResource(staticSiteARMResourceId);

            await staticSiteARMResource.GetConfiguredRolesAsync();
        }

        [RecordedTest]
        public async Task GetFunctionAppSettings()
        {
            // Example: Get function app settings of a static site
            var staticSiteARMResourceId = AppService.StaticSiteARMResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg", "testStaticSite0");
            var staticSiteARMResource = GetArmClient().GetStaticSiteARMResource(staticSiteARMResourceId);

            await staticSiteARMResource.GetFunctionAppSettingsAsync();
        }

        [RecordedTest]
        public async Task GetStaticSiteSecrets()
        {
            // Example: List secrets for a static site
            var staticSiteARMResourceId = AppService.StaticSiteARMResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg", "testStaticSite0");
            var staticSiteARMResource = GetArmClient().GetStaticSiteARMResource(staticSiteARMResourceId);

            await staticSiteARMResource.GetStaticSiteSecretsAsync();
        }

        [RecordedTest]
        public async Task GetPrivateLinkResources()
        {
            // Example: Get private link resources of a site
            var staticSiteARMResourceId = AppService.StaticSiteARMResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg", "testSite");
            var staticSiteARMResource = GetArmClient().GetStaticSiteARMResource(staticSiteARMResourceId);

            await foreach (var _ in staticSiteARMResource.GetPrivateLinkResourcesAsync())
            {
            }
        }

        [RecordedTest]
        public async Task ResetApiKey()
        {
            // Example: Reset the api key for a static site
            var staticSiteARMResourceId = AppService.StaticSiteARMResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg", "testStaticSite0");
            var staticSiteARMResource = GetArmClient().GetStaticSiteARMResource(staticSiteARMResourceId);
            AppService.Models.StaticSiteResetPropertiesARMResource resetPropertiesEnvelope = new AppService.Models.StaticSiteResetPropertiesARMResource()
            {
                RepositoryToken = "repoToken123",
                ShouldUpdateRepository = true,
            };

            await staticSiteARMResource.ResetApiKeyAsync(resetPropertiesEnvelope);
        }

        [RecordedTest]
        public async Task CreateZipDeploymentForStaticSite()
        {
            // Example: Deploy a site from a zipped package
            var staticSiteARMResourceId = AppService.StaticSiteARMResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg", "testStaticSite0");
            var staticSiteARMResource = GetArmClient().GetStaticSiteARMResource(staticSiteARMResourceId);
            AppService.Models.StaticSiteZipDeploymentARMResource staticSiteZipDeploymentEnvelope = new AppService.Models.StaticSiteZipDeploymentARMResource()
            {
                AppZipUrl = "https://teststorageaccount.net/happy-sea-15afae3e-master-81828877/app-zipdeploy.zip",
                ApiZipUrl = "https://teststorageaccount.net/happy-sea-15afae3e-master-81828877/api-zipdeploy.zip",
                DeploymentTitle = "Update index.html",
                Provider = "testProvider",
                FunctionLanguage = "testFunctionLanguage",
            };

            await staticSiteARMResource.CreateZipDeploymentForStaticSiteAsync(true, staticSiteZipDeploymentEnvelope);
        }
    }
}
