// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Storage;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Storage.Tests.Mock
{
    /// <summary> Test for StorageQueue. </summary>
    public partial class StorageQueueMockTests : MockTestBase
    {
        public StorageQueueMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: QueueOperationGet
            var storageQueueId = Storage.StorageQueue.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res3376", "sto328", "queue6185");
            var storageQueue = GetArmClient().GetStorageQueue(storageQueueId);

            await storageQueue.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: QueueOperationDelete
            var storageQueueId = Storage.StorageQueue.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res3376", "sto328", "queue6185");
            var storageQueue = GetArmClient().GetStorageQueue(storageQueueId);

            await storageQueue.DeleteAsync();
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: QueueOperationPatch
            var storageQueueId = Storage.StorageQueue.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res3376", "sto328", "queue6185");
            var storageQueue = GetArmClient().GetStorageQueue(storageQueueId);
            Storage.StorageQueueData queue = new Storage.StorageQueueData();

            await storageQueue.UpdateAsync(queue);
        }
    }
}
