// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Storage;
using Azure.ResourceManager.Storage.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Storage.Tests.Mock
{
    /// <summary> Test for EncryptionScope. </summary>
    public partial class EncryptionScopeCollectionMockTests : MockTestBase
    {
        public EncryptionScopeCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: StorageAccountPutEncryptionScope
            var collection = GetArmClient().GetStorageAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.Storage/storageAccounts/{{storage-account-name}}")).GetEncryptionScopes();
            string encryptionScopeName = "{encryption-scope-name}";
            Storage.EncryptionScopeData encryptionScope = new Storage.EncryptionScopeData();

            await collection.CreateOrUpdateAsync(encryptionScopeName, encryptionScope);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync2()
        {
            // Example: StorageAccountPutEncryptionScopeWithInfrastructureEncryption
            var collection = GetArmClient().GetStorageAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.Storage/storageAccounts/{{storage-account-name}}")).GetEncryptionScopes();
            string encryptionScopeName = "{encryption-scope-name}";
            Storage.EncryptionScopeData encryptionScope = new Storage.EncryptionScopeData()
            {
                RequireInfrastructureEncryption = true,
            };

            await collection.CreateOrUpdateAsync(encryptionScopeName, encryptionScope);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: StorageAccountGetEncryptionScope
            var collection = GetArmClient().GetStorageAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.Storage/storageAccounts/{{storage-account-name}}")).GetEncryptionScopes();
            string encryptionScopeName = "{encryption-scope-name}";

            await collection.GetAsync(encryptionScopeName);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: StorageAccountEncryptionScopeList
            var collection = GetArmClient().GetStorageAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.Storage/storageAccounts/{{storage-account-name}}")).GetEncryptionScopes();

            collection.GetAllAsync();
        }
    }
}
