// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Cdn;
using Azure.ResourceManager.Cdn.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Cdn.Tests.Mock
{
    /// <summary> Test for CdnOriginGroup. </summary>
    public partial class CdnOriginGroupCollectionMockTests : MockTestBase
    {
        public CdnOriginGroupCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: OriginGroups_Create
            var collection = GetArmClient().GetCdnEndpoint(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1")).GetCdnOriginGroups();
            string originGroupName = "origingroup1";
            Cdn.CdnOriginGroupData originGroup = new Cdn.CdnOriginGroupData()
            {
                HealthProbeSettings = new Cdn.Models.HealthProbeParameters()
                {
                    ProbePath = "/health.aspx",
                    ProbeRequestType = Cdn.Models.HealthProbeRequestType.GET,
                    ProbeProtocol = Cdn.Models.ProbeProtocol.Http,
                    ProbeIntervalInSeconds = 120,
                },
                ResponseBasedOriginErrorDetectionSettings = new Cdn.Models.ResponseBasedOriginErrorDetectionParameters()
                {
                    ResponseBasedDetectedErrorTypes = Cdn.Models.ResponseBasedDetectedErrorTypes.TcpErrorsOnly,
                    ResponseBasedFailoverThresholdPercentage = 10,
                },
            };

            await collection.CreateOrUpdateAsync(originGroupName, originGroup);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: OriginGroups_Get
            var collection = GetArmClient().GetCdnEndpoint(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1")).GetCdnOriginGroups();
            string originGroupName = "originGroup1";

            await collection.GetAsync(originGroupName);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: OriginsGroups_ListByEndpoint
            var collection = GetArmClient().GetCdnEndpoint(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/endpoints/endpoint1")).GetCdnOriginGroups();

            collection.GetAllAsync();
        }
    }
}
