// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure.Core;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Redis
{
    /// <summary> A class to add extension methods to ArmClient. </summary>
    public static partial class ArmClientExtensions
    {
        #region RedisResource
        /// <summary> Gets an object representing a RedisResource along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="armClient"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="RedisResource" /> object. </returns>
        public static RedisResource GetRedisResource(this ArmClient armClient, ResourceIdentifier id)
        {
            RedisResource.ValidateResourceId(id);
            return armClient.UseClientContext((uri, credential, clientOptions, pipeline) => new RedisResource(clientOptions, credential, uri, pipeline, id));
        }
        #endregion

        #region RedisFirewallRule
        /// <summary> Gets an object representing a RedisFirewallRule along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="armClient"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="RedisFirewallRule" /> object. </returns>
        public static RedisFirewallRule GetRedisFirewallRule(this ArmClient armClient, ResourceIdentifier id)
        {
            RedisFirewallRule.ValidateResourceId(id);
            return armClient.UseClientContext((uri, credential, clientOptions, pipeline) => new RedisFirewallRule(clientOptions, credential, uri, pipeline, id));
        }
        #endregion

        #region RedisPatchSchedule
        /// <summary> Gets an object representing a RedisPatchSchedule along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="armClient"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="RedisPatchSchedule" /> object. </returns>
        public static RedisPatchSchedule GetRedisPatchSchedule(this ArmClient armClient, ResourceIdentifier id)
        {
            RedisPatchSchedule.ValidateResourceId(id);
            return armClient.UseClientContext((uri, credential, clientOptions, pipeline) => new RedisPatchSchedule(clientOptions, credential, uri, pipeline, id));
        }
        #endregion

        #region RedisLinkedServerWithProperties
        /// <summary> Gets an object representing a RedisLinkedServerWithProperties along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="armClient"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="RedisLinkedServerWithProperties" /> object. </returns>
        public static RedisLinkedServerWithProperties GetRedisLinkedServerWithProperties(this ArmClient armClient, ResourceIdentifier id)
        {
            RedisLinkedServerWithProperties.ValidateResourceId(id);
            return armClient.UseClientContext((uri, credential, clientOptions, pipeline) => new RedisLinkedServerWithProperties(clientOptions, credential, uri, pipeline, id));
        }
        #endregion

        #region PrivateEndpointConnection
        /// <summary> Gets an object representing a PrivateEndpointConnection along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="armClient"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PrivateEndpointConnection" /> object. </returns>
        public static PrivateEndpointConnection GetPrivateEndpointConnection(this ArmClient armClient, ResourceIdentifier id)
        {
            PrivateEndpointConnection.ValidateResourceId(id);
            return armClient.UseClientContext((uri, credential, clientOptions, pipeline) => new PrivateEndpointConnection(clientOptions, credential, uri, pipeline, id));
        }
        #endregion
    }
}
