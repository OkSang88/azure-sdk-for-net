// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using SecurityInsights.Models;

namespace SecurityInsights
{
    public partial class MetadataModelData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Etag))
            {
                writer.WritePropertyName("etag");
                writer.WriteStringValue(Etag);
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(ContentId))
            {
                writer.WritePropertyName("contentId");
                writer.WriteStringValue(ContentId);
            }
            if (Optional.IsDefined(ParentId))
            {
                writer.WritePropertyName("parentId");
                writer.WriteStringValue(ParentId);
            }
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version");
                writer.WriteStringValue(Version);
            }
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind");
                writer.WriteStringValue(Kind.Value.ToString());
            }
            if (Optional.IsDefined(Source))
            {
                writer.WritePropertyName("source");
                writer.WriteObjectValue(Source);
            }
            if (Optional.IsDefined(Author))
            {
                writer.WritePropertyName("author");
                writer.WriteObjectValue(Author);
            }
            if (Optional.IsDefined(Support))
            {
                writer.WritePropertyName("support");
                writer.WriteObjectValue(Support);
            }
            if (Optional.IsDefined(Dependencies))
            {
                writer.WritePropertyName("dependencies");
                writer.WriteObjectValue(Dependencies);
            }
            if (Optional.IsDefined(Categories))
            {
                writer.WritePropertyName("categories");
                writer.WriteObjectValue(Categories);
            }
            if (Optional.IsCollectionDefined(Providers))
            {
                writer.WritePropertyName("providers");
                writer.WriteStartArray();
                foreach (var item in Providers)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(FirstPublishDate))
            {
                writer.WritePropertyName("firstPublishDate");
                writer.WriteStringValue(FirstPublishDate.Value, "D");
            }
            if (Optional.IsDefined(LastPublishDate))
            {
                writer.WritePropertyName("lastPublishDate");
                writer.WriteStringValue(LastPublishDate.Value, "D");
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static MetadataModelData DeserializeMetadataModelData(JsonElement element)
        {
            Optional<string> etag = default;
            Optional<SystemData> systemData = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<string> contentId = default;
            Optional<string> parentId = default;
            Optional<string> version = default;
            Optional<Kind> kind = default;
            Optional<MetadataSource> source = default;
            Optional<MetadataAuthor> author = default;
            Optional<MetadataSupport> support = default;
            Optional<MetadataDependencies> dependencies = default;
            Optional<MetadataCategories> categories = default;
            Optional<IList<string>> providers = default;
            Optional<DateTimeOffset> firstPublishDate = default;
            Optional<DateTimeOffset> lastPublishDate = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("etag"))
                {
                    etag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("contentId"))
                        {
                            contentId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("parentId"))
                        {
                            parentId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("version"))
                        {
                            version = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("kind"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            kind = new Kind(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("source"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            source = MetadataSource.DeserializeMetadataSource(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("author"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            author = MetadataAuthor.DeserializeMetadataAuthor(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("support"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            support = MetadataSupport.DeserializeMetadataSupport(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("dependencies"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            dependencies = MetadataDependencies.DeserializeMetadataDependencies(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("categories"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            categories = MetadataCategories.DeserializeMetadataCategories(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("providers"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            providers = array;
                            continue;
                        }
                        if (property0.NameEquals("firstPublishDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            firstPublishDate = property0.Value.GetDateTimeOffset("D");
                            continue;
                        }
                        if (property0.NameEquals("lastPublishDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            lastPublishDate = property0.Value.GetDateTimeOffset("D");
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new MetadataModelData(id, name, type, systemData, etag.Value, contentId.Value, parentId.Value, version.Value, Optional.ToNullable(kind), source.Value, author.Value, support.Value, dependencies.Value, categories.Value, Optional.ToList(providers), Optional.ToNullable(firstPublishDate), Optional.ToNullable(lastPublishDate));
        }
    }
}
