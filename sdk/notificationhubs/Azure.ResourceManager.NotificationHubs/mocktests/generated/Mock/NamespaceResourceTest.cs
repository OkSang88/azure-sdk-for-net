// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.NotificationHubs;
using Azure.ResourceManager.NotificationHubs.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.NotificationHubs.Tests.Mock
{
    /// <summary> Test for NamespaceResource. </summary>
    public partial class NamespaceResourceMockTests : MockTestBase
    {
        public NamespaceResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: NameSpaceGet
            var namespaceResourceId = NotificationHubs.NamespaceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "5ktrial", "nh-sdk-ns");
            var namespaceResource = GetArmClient().GetNamespaceResource(namespaceResourceId);

            await namespaceResource.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: NameSpaceDelete
            var namespaceResourceId = NotificationHubs.NamespaceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "5ktrial", "nh-sdk-ns");
            var namespaceResource = GetArmClient().GetNamespaceResource(namespaceResourceId);

            await namespaceResource.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: NameSpaceUpdate
            var namespaceResourceId = NotificationHubs.NamespaceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "5ktrial", "nh-sdk-ns");
            var namespaceResource = GetArmClient().GetNamespaceResource(namespaceResourceId);
            NotificationHubs.Models.NamespacePatchParameters parameters = new NotificationHubs.Models.NamespacePatchParameters()
            {
                Sku = new NotificationHubs.Models.Sku(name: new NotificationHubs.Models.SkuName("Standard"))
                {
                    Tier = "Standard",
                },
            };

            await namespaceResource.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task CheckNotificationHubAvailabilityNotificationHub()
        {
            // Example: notificationHubCheckNameAvailability
            var namespaceResourceId = NotificationHubs.NamespaceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "5ktrial", "locp-newns");
            var namespaceResource = GetArmClient().GetNamespaceResource(namespaceResourceId);
            NotificationHubs.Models.CheckAvailabilityParameters parameters = new NotificationHubs.Models.CheckAvailabilityParameters(location: "West Europe");

            await namespaceResource.CheckNotificationHubAvailabilityNotificationHubAsync(parameters);
        }
    }
}
