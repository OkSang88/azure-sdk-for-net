// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.IotHub;
using Azure.ResourceManager.IotHub.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.IotHub.Tests.Mock
{
    /// <summary> Test for IotHubDescription. </summary>
    public partial class IotHubDescriptionCollectionMockTests : MockTestBase
    {
        public IotHubDescriptionCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: IotHubResource_CreateOrUpdate
            string resourceName = "testHub";
            IotHub.IotHubDescriptionData iotHubDescription = new IotHub.IotHubDescriptionData(location: "centraluseuap", sku: new IotHub.Models.IotHubSkuInfo(name: new IotHub.Models.IotHubSku("S1"))
            {
                Capacity = 1,
            })
            {
                Etag = "AAAAAAFD6M4=",
                Properties = new IotHub.Models.IotHubProperties()
                {
                    NetworkRuleSets = new IotHub.Models.NetworkRuleSetProperties(applyToBuiltInEventHubEndpoint: true, ipRules: new List<IotHub.Models.NetworkRuleSetIpRule>()
{
new IotHub.Models.NetworkRuleSetIpRule(filterName: "rule1",ipMask: "131.117.159.53")
{
Action = new IotHub.Models.NetworkRuleIPAction("Allow"), },new IotHub.Models.NetworkRuleSetIpRule(filterName: "rule2",ipMask: "157.55.59.128/25")
{
Action = new IotHub.Models.NetworkRuleIPAction("Allow"), },})
                    {
                        DefaultAction = new IotHub.Models.DefaultAction("Deny"),
                    },
                    MinTlsVersion = "1.2",
                    Routing = new IotHub.Models.RoutingProperties()
                    {
                        Endpoints = new IotHub.Models.RoutingEndpoints(),
                        FallbackRoute = new IotHub.Models.FallbackRouteProperties(source: new IotHub.Models.RoutingSource("DeviceMessages"), endpointNames: new List<string>()
{
"events",}, isEnabled: true)
                        {
                            Name = "$fallback",
                            Condition = "true",
                        },
                    },
                    EnableFileUploadNotifications = false,
                    CloudToDevice = new IotHub.Models.CloudToDeviceProperties()
                    {
                        MaxDeliveryCount = 10,
                        DefaultTtlAsIso8601 = TimeSpan.Parse("PT1H"),
                        Feedback = new IotHub.Models.FeedbackProperties()
                        {
                            LockDurationAsIso8601 = TimeSpan.Parse("PT1M"),
                            TtlAsIso8601 = TimeSpan.Parse("PT1H"),
                            MaxDeliveryCount = 10,
                        },
                    },
                    Features = new IotHub.Models.Capabilities("None"),
                },
            };
            iotHubDescription.Tags.ReplaceWith(new Dictionary<string, string>()
            {
            });
            string ifMatch = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetIotHubDescriptions();
            await collection.CreateOrUpdateAsync(true, resourceName, iotHubDescription, ifMatch);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: IotHubResource_Get
            string resourceName = "testHub";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetIotHubDescriptions();
            await collection.GetAsync(resourceName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: IotHubResource_ListByResourceGroup

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetIotHubDescriptions();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
