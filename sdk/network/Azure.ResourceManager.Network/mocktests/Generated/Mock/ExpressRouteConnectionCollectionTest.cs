// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for ExpressRouteConnection. </summary>
    public partial class ExpressRouteConnectionCollectionMockTests : MockTestBase
    {
        public ExpressRouteConnectionCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: ExpressRouteConnectionCreate
            var collection = GetArmClient().GetExpressRouteGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteGateways/gateway-2")).GetExpressRouteConnections();
            string connectionName = "connectionName";
            Network.ExpressRouteConnectionData putExpressRouteConnectionParameters = new Network.ExpressRouteConnectionData(name: "connectionName")
            {
                ExpressRouteCircuitPeering = new WritableSubResource()
                {
                    Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteCircuits/circuitName/peerings/AzurePrivatePeering"),
                },
                AuthorizationKey = "authorizationKey",
                RoutingWeight = 2,
                Id = "/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteGateways/gateway-2/expressRouteConnections/connectionName",
            };

            await collection.CreateOrUpdateAsync(connectionName, putExpressRouteConnectionParameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: ExpressRouteConnectionGet
            var collection = GetArmClient().GetExpressRouteGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteGateways/expressRouteGatewayName")).GetExpressRouteConnections();
            string connectionName = "connectionName";

            await collection.GetAsync(connectionName);
        }

        [RecordedTest]
        public async Task GetAllAsync()
        {
            // Example: ExpressRouteConnectionList
            var collection = GetArmClient().GetExpressRouteGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteGateways/expressRouteGatewayName")).GetExpressRouteConnections();

            await collection.GetAllAsync();
        }
    }
}
