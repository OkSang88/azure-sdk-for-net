// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.ConfidentialLedger.Models;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.ConfidentialLedger
{
    /// <summary> A class representing collection of ConfidentialLedger and their operations over its parent. </summary>
    public partial class ConfidentialLedgerCollection : ArmCollection, IEnumerable<ConfidentialLedger>, IAsyncEnumerable<ConfidentialLedger>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly LedgerRestOperations _ledgerRestClient;

        /// <summary> Initializes a new instance of the <see cref="ConfidentialLedgerCollection"/> class for mocking. </summary>
        protected ConfidentialLedgerCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ConfidentialLedgerCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal ConfidentialLedgerCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _ledgerRestClient = new LedgerRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroup.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroup.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Creates a  Confidential Ledger with the specified ledger parameters. </summary>
        /// <param name="ledgerName"> Name of the Confidential Ledger. </param>
        /// <param name="confidentialLedger"> Confidential Ledger Create Request Body. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerName"/> or <paramref name="confidentialLedger"/> is null. </exception>
        public virtual LedgerCreateOperation CreateOrUpdate(bool waitForCompletion, string ledgerName, ConfidentialLedgerData confidentialLedger, CancellationToken cancellationToken = default)
        {
            if (ledgerName == null)
            {
                throw new ArgumentNullException(nameof(ledgerName));
            }
            if (confidentialLedger == null)
            {
                throw new ArgumentNullException(nameof(confidentialLedger));
            }

            using var scope = _clientDiagnostics.CreateScope("ConfidentialLedgerCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _ledgerRestClient.Create(Id.SubscriptionId, Id.ResourceGroupName, ledgerName, confidentialLedger, cancellationToken);
                var operation = new LedgerCreateOperation(Parent, _clientDiagnostics, Pipeline, _ledgerRestClient.CreateCreateRequest(Id.SubscriptionId, Id.ResourceGroupName, ledgerName, confidentialLedger).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a  Confidential Ledger with the specified ledger parameters. </summary>
        /// <param name="ledgerName"> Name of the Confidential Ledger. </param>
        /// <param name="confidentialLedger"> Confidential Ledger Create Request Body. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerName"/> or <paramref name="confidentialLedger"/> is null. </exception>
        public async virtual Task<LedgerCreateOperation> CreateOrUpdateAsync(bool waitForCompletion, string ledgerName, ConfidentialLedgerData confidentialLedger, CancellationToken cancellationToken = default)
        {
            if (ledgerName == null)
            {
                throw new ArgumentNullException(nameof(ledgerName));
            }
            if (confidentialLedger == null)
            {
                throw new ArgumentNullException(nameof(confidentialLedger));
            }

            using var scope = _clientDiagnostics.CreateScope("ConfidentialLedgerCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _ledgerRestClient.CreateAsync(Id.SubscriptionId, Id.ResourceGroupName, ledgerName, confidentialLedger, cancellationToken).ConfigureAwait(false);
                var operation = new LedgerCreateOperation(Parent, _clientDiagnostics, Pipeline, _ledgerRestClient.CreateCreateRequest(Id.SubscriptionId, Id.ResourceGroupName, ledgerName, confidentialLedger).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves the properties of a Confidential Ledger. </summary>
        /// <param name="ledgerName"> Name of the Confidential Ledger. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerName"/> is null. </exception>
        public virtual Response<ConfidentialLedger> Get(string ledgerName, CancellationToken cancellationToken = default)
        {
            if (ledgerName == null)
            {
                throw new ArgumentNullException(nameof(ledgerName));
            }

            using var scope = _clientDiagnostics.CreateScope("ConfidentialLedgerCollection.Get");
            scope.Start();
            try
            {
                var response = _ledgerRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, ledgerName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ConfidentialLedger(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves the properties of a Confidential Ledger. </summary>
        /// <param name="ledgerName"> Name of the Confidential Ledger. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerName"/> is null. </exception>
        public async virtual Task<Response<ConfidentialLedger>> GetAsync(string ledgerName, CancellationToken cancellationToken = default)
        {
            if (ledgerName == null)
            {
                throw new ArgumentNullException(nameof(ledgerName));
            }

            using var scope = _clientDiagnostics.CreateScope("ConfidentialLedgerCollection.Get");
            scope.Start();
            try
            {
                var response = await _ledgerRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, ledgerName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new ConfidentialLedger(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="ledgerName"> Name of the Confidential Ledger. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerName"/> is null. </exception>
        public virtual Response<ConfidentialLedger> GetIfExists(string ledgerName, CancellationToken cancellationToken = default)
        {
            if (ledgerName == null)
            {
                throw new ArgumentNullException(nameof(ledgerName));
            }

            using var scope = _clientDiagnostics.CreateScope("ConfidentialLedgerCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _ledgerRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, ledgerName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<ConfidentialLedger>(null, response.GetRawResponse());
                return Response.FromValue(new ConfidentialLedger(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="ledgerName"> Name of the Confidential Ledger. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerName"/> is null. </exception>
        public async virtual Task<Response<ConfidentialLedger>> GetIfExistsAsync(string ledgerName, CancellationToken cancellationToken = default)
        {
            if (ledgerName == null)
            {
                throw new ArgumentNullException(nameof(ledgerName));
            }

            using var scope = _clientDiagnostics.CreateScope("ConfidentialLedgerCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _ledgerRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, ledgerName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<ConfidentialLedger>(null, response.GetRawResponse());
                return Response.FromValue(new ConfidentialLedger(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="ledgerName"> Name of the Confidential Ledger. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerName"/> is null. </exception>
        public virtual Response<bool> Exists(string ledgerName, CancellationToken cancellationToken = default)
        {
            if (ledgerName == null)
            {
                throw new ArgumentNullException(nameof(ledgerName));
            }

            using var scope = _clientDiagnostics.CreateScope("ConfidentialLedgerCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(ledgerName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="ledgerName"> Name of the Confidential Ledger. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string ledgerName, CancellationToken cancellationToken = default)
        {
            if (ledgerName == null)
            {
                throw new ArgumentNullException(nameof(ledgerName));
            }

            using var scope = _clientDiagnostics.CreateScope("ConfidentialLedgerCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(ledgerName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves the properties of all Confidential Ledgers. </summary>
        /// <param name="filter"> The filter to apply on the list operation. eg. $filter=ledgerType eq &apos;Public&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ConfidentialLedger" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ConfidentialLedger> GetAll(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<ConfidentialLedger> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ConfidentialLedgerCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _ledgerRestClient.ListByResourceGroup(Id.SubscriptionId, Id.ResourceGroupName, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ConfidentialLedger(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ConfidentialLedger> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ConfidentialLedgerCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _ledgerRestClient.ListByResourceGroupNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ConfidentialLedger(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Retrieves the properties of all Confidential Ledgers. </summary>
        /// <param name="filter"> The filter to apply on the list operation. eg. $filter=ledgerType eq &apos;Public&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ConfidentialLedger" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ConfidentialLedger> GetAllAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<ConfidentialLedger>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ConfidentialLedgerCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _ledgerRestClient.ListByResourceGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ConfidentialLedger(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ConfidentialLedger>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ConfidentialLedgerCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _ledgerRestClient.ListByResourceGroupNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ConfidentialLedger(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Filters the list of <see cref="ConfidentialLedger" /> for this resource group represented as generic resources. </summary>
        /// <param name="nameFilter"> The filter used in this operation. </param>
        /// <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. </param>
        /// <param name="top"> The number of results to return. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of resource that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<GenericResource> GetAllAsGenericResources(string nameFilter, string expand = null, int? top = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ConfidentialLedgerCollection.GetAllAsGenericResources");
            scope.Start();
            try
            {
                var filters = new ResourceFilterCollection(ConfidentialLedger.ResourceType);
                filters.SubstringFilter = nameFilter;
                return ResourceListOperations.GetAtContext(Parent as ResourceGroup, filters, expand, top, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Filters the list of <see cref="ConfidentialLedger" /> for this resource group represented as generic resources. </summary>
        /// <param name="nameFilter"> The filter used in this operation. </param>
        /// <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. </param>
        /// <param name="top"> The number of results to return. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> An async collection of resource that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<GenericResource> GetAllAsGenericResourcesAsync(string nameFilter, string expand = null, int? top = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ConfidentialLedgerCollection.GetAllAsGenericResources");
            scope.Start();
            try
            {
                var filters = new ResourceFilterCollection(ConfidentialLedger.ResourceType);
                filters.SubstringFilter = nameFilter;
                return ResourceListOperations.GetAtContextAsync(Parent as ResourceGroup, filters, expand, top, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ConfidentialLedger> IEnumerable<ConfidentialLedger>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ConfidentialLedger> IAsyncEnumerable<ConfidentialLedger>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, ConfidentialLedger, ConfidentialLedgerData> Construct() { }
    }
}
