// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.ServiceFabricManagedClusters;
using Azure.ResourceManager.ServiceFabricManagedClusters.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.ServiceFabricManagedClusters.Tests.Mock
{
    /// <summary> Test for ServiceResource. </summary>
    public partial class ServiceResourceMockTests : MockTestBase
    {
        public ServiceResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get a service
            var serviceResourceId = ServiceFabricManagedClusters.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster", "myApp", "myService");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);

            await serviceResource.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete a service
            var serviceResourceId = ServiceFabricManagedClusters.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster", "myApp", "myService");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);

            await serviceResource.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Patch a service
            var serviceResourceId = ServiceFabricManagedClusters.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster", "myApp", "myService");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);
            ServiceFabricManagedClusters.Models.ServiceUpdateParameters parameters = new ServiceFabricManagedClusters.Models.ServiceUpdateParameters();

            await serviceResource.UpdateAsync(parameters);
        }
    }
}
