// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.CosmosDB;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.CosmosDB.Tests.Mock
{
    /// <summary> Test for GremlinDatabase. </summary>
    public partial class GremlinDatabaseMockTests : MockTestBase
    {
        public GremlinDatabaseMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: CosmosDBGremlinDatabaseGet
            var gremlinDatabaseId = CosmosDB.GremlinDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1", "databaseName");
            var gremlinDatabase = GetArmClient().GetGremlinDatabase(gremlinDatabaseId);

            await gremlinDatabase.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: CosmosDBGremlinDatabaseDelete
            var gremlinDatabaseId = CosmosDB.GremlinDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1", "databaseName");
            var gremlinDatabase = GetArmClient().GetGremlinDatabase(gremlinDatabaseId);

            await gremlinDatabase.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task DatabaseAccountGremlinDatabaseThroughputSettingGet()
        {
            // Example: CosmosDBGremlinDatabaseThroughputGet
            var databaseAccountGremlinDatabaseThroughputSettingId = CosmosDB.DatabaseAccountGremlinDatabaseThroughputSetting.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1", "databaseName");
            var databaseAccountGremlinDatabaseThroughputSetting = GetArmClient().GetDatabaseAccountGremlinDatabaseThroughputSetting(databaseAccountGremlinDatabaseThroughputSettingId);

            await databaseAccountGremlinDatabaseThroughputSetting.GetAsync();
        }

        [RecordedTest]
        public async Task DatabaseAccountGremlinDatabaseThroughputSettingMigrateGremlinDatabaseToAutoscale()
        {
            // Example: CosmosDBGremlinDatabaseMigrateToAutoscale
            var databaseAccountGremlinDatabaseThroughputSettingId = CosmosDB.DatabaseAccountGremlinDatabaseThroughputSetting.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1", "databaseName");
            var databaseAccountGremlinDatabaseThroughputSetting = GetArmClient().GetDatabaseAccountGremlinDatabaseThroughputSetting(databaseAccountGremlinDatabaseThroughputSettingId);

            await databaseAccountGremlinDatabaseThroughputSetting.MigrateGremlinDatabaseToAutoscaleAsync(true);
        }

        [RecordedTest]
        public async Task DatabaseAccountGremlinDatabaseThroughputSettingMigrateGremlinDatabaseToManualThroughput()
        {
            // Example: CosmosDBGremlinDatabaseMigrateToManualThroughput
            var databaseAccountGremlinDatabaseThroughputSettingId = CosmosDB.DatabaseAccountGremlinDatabaseThroughputSetting.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1", "databaseName");
            var databaseAccountGremlinDatabaseThroughputSetting = GetArmClient().GetDatabaseAccountGremlinDatabaseThroughputSetting(databaseAccountGremlinDatabaseThroughputSettingId);

            await databaseAccountGremlinDatabaseThroughputSetting.MigrateGremlinDatabaseToManualThroughputAsync(true);
        }
    }
}
