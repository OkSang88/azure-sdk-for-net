// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.DataFactory.Models;

namespace Azure.ResourceManager.DataFactory
{
    /// <summary> A Class representing a Factory along with the instance operations that can be performed on it. </summary>
    public partial class Factory : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="Factory"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string factoryName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}";
            return new ResourceIdentifier(resourceId);
        }
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly FactoriesRestOperations _factoriesRestClient;
        private readonly ExposureControlRestOperations _exposureControlRestClient;
        private readonly PipelineRunsRestOperations _pipelineRunsRestClient;
        private readonly ActivityRunsRestOperations _activityRunsRestClient;
        private readonly TriggersRestOperations _triggersRestClient;
        private readonly TriggerRunsRestOperations _triggerRunsRestClient;
        private readonly DataFlowDebugSessionRestOperations _dataFlowDebugSessionRestClient;
        private readonly PrivateLinkResourcesRestOperations _privateLinkResourcesRestClient;
        private readonly FactoryData _data;

        /// <summary> Initializes a new instance of the <see cref="Factory"/> class for mocking. </summary>
        protected Factory()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "Factory"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal Factory(ArmResource options, FactoryData data) : base(options, data.Id)
        {
            HasData = true;
            _data = data;
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            ClientOptions.TryGetApiVersion(ResourceType, out string apiVersion);
            _factoriesRestClient = new FactoriesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _exposureControlRestClient = new ExposureControlRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _pipelineRunsRestClient = new PipelineRunsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _activityRunsRestClient = new ActivityRunsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _triggersRestClient = new TriggersRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _triggerRunsRestClient = new TriggerRunsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _dataFlowDebugSessionRestClient = new DataFlowDebugSessionRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _privateLinkResourcesRestClient = new PrivateLinkResourcesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Initializes a new instance of the <see cref="Factory"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal Factory(ArmResource options, ResourceIdentifier id) : base(options, id)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            ClientOptions.TryGetApiVersion(ResourceType, out string apiVersion);
            _factoriesRestClient = new FactoriesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _exposureControlRestClient = new ExposureControlRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _pipelineRunsRestClient = new PipelineRunsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _activityRunsRestClient = new ActivityRunsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _triggersRestClient = new TriggersRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _triggerRunsRestClient = new TriggerRunsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _dataFlowDebugSessionRestClient = new DataFlowDebugSessionRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _privateLinkResourcesRestClient = new PrivateLinkResourcesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Initializes a new instance of the <see cref="Factory"/> class. </summary>
        /// <param name="clientOptions"> The client options to build client context. </param>
        /// <param name="credential"> The credential to build client context. </param>
        /// <param name="uri"> The uri to build client context. </param>
        /// <param name="pipeline"> The pipeline to build client context. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal Factory(ArmClientOptions clientOptions, TokenCredential credential, Uri uri, HttpPipeline pipeline, ResourceIdentifier id) : base(clientOptions, credential, uri, pipeline, id)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            ClientOptions.TryGetApiVersion(ResourceType, out string apiVersion);
            _factoriesRestClient = new FactoriesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _exposureControlRestClient = new ExposureControlRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _pipelineRunsRestClient = new PipelineRunsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _activityRunsRestClient = new ActivityRunsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _triggersRestClient = new TriggersRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _triggerRunsRestClient = new TriggerRunsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _dataFlowDebugSessionRestClient = new DataFlowDebugSessionRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _privateLinkResourcesRestClient = new PrivateLinkResourcesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.DataFactory/factories";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual FactoryData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a factory. </summary>
        /// <param name="ifNoneMatch"> ETag of the factory entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<Factory>> GetAsync(string ifNoneMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Factory.Get");
            scope.Start();
            try
            {
                var response = await _factoriesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, ifNoneMatch, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new Factory(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a factory. </summary>
        /// <param name="ifNoneMatch"> ETag of the factory entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Factory> Get(string ifNoneMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Factory.Get");
            scope.Start();
            try
            {
                var response = _factoriesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, ifNoneMatch, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new Factory(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public async virtual Task<IEnumerable<AzureLocation>> GetAvailableLocationsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Factory.GetAvailableLocations");
            scope.Start();
            try
            {
                return await ListAvailableLocationsAsync(ResourceType, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public virtual IEnumerable<AzureLocation> GetAvailableLocations(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Factory.GetAvailableLocations");
            scope.Start();
            try
            {
                return ListAvailableLocations(ResourceType, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a factory. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<FactoryDeleteOperation> DeleteAsync(bool waitForCompletion, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Factory.Delete");
            scope.Start();
            try
            {
                var response = await _factoriesRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new FactoryDeleteOperation(response);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a factory. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual FactoryDeleteOperation Delete(bool waitForCompletion, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Factory.Delete");
            scope.Start();
            try
            {
                var response = _factoriesRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                var operation = new FactoryDeleteOperation(response);
                if (waitForCompletion)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates a factory. </summary>
        /// <param name="factoryUpdateParameters"> The parameters for updating a factory. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="factoryUpdateParameters"/> is null. </exception>
        public async virtual Task<Response<Factory>> UpdateAsync(FactoryUpdateParameters factoryUpdateParameters, CancellationToken cancellationToken = default)
        {
            if (factoryUpdateParameters == null)
            {
                throw new ArgumentNullException(nameof(factoryUpdateParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("Factory.Update");
            scope.Start();
            try
            {
                var response = await _factoriesRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, factoryUpdateParameters, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new Factory(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates a factory. </summary>
        /// <param name="factoryUpdateParameters"> The parameters for updating a factory. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="factoryUpdateParameters"/> is null. </exception>
        public virtual Response<Factory> Update(FactoryUpdateParameters factoryUpdateParameters, CancellationToken cancellationToken = default)
        {
            if (factoryUpdateParameters == null)
            {
                throw new ArgumentNullException(nameof(factoryUpdateParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("Factory.Update");
            scope.Start();
            try
            {
                var response = _factoriesRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, factoryUpdateParameters, cancellationToken);
                return Response.FromValue(new Factory(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get GitHub Access Token. </summary>
        /// <param name="gitHubAccessTokenRequest"> Get GitHub access token request definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="gitHubAccessTokenRequest"/> is null. </exception>
        public async virtual Task<Response<GitHubAccessTokenResponse>> GetGitHubAccessTokenAsync(GitHubAccessTokenRequest gitHubAccessTokenRequest, CancellationToken cancellationToken = default)
        {
            if (gitHubAccessTokenRequest == null)
            {
                throw new ArgumentNullException(nameof(gitHubAccessTokenRequest));
            }

            using var scope = _clientDiagnostics.CreateScope("Factory.GetGitHubAccessToken");
            scope.Start();
            try
            {
                var response = await _factoriesRestClient.GetGitHubAccessTokenAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, gitHubAccessTokenRequest, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get GitHub Access Token. </summary>
        /// <param name="gitHubAccessTokenRequest"> Get GitHub access token request definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="gitHubAccessTokenRequest"/> is null. </exception>
        public virtual Response<GitHubAccessTokenResponse> GetGitHubAccessToken(GitHubAccessTokenRequest gitHubAccessTokenRequest, CancellationToken cancellationToken = default)
        {
            if (gitHubAccessTokenRequest == null)
            {
                throw new ArgumentNullException(nameof(gitHubAccessTokenRequest));
            }

            using var scope = _clientDiagnostics.CreateScope("Factory.GetGitHubAccessToken");
            scope.Start();
            try
            {
                var response = _factoriesRestClient.GetGitHubAccessToken(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, gitHubAccessTokenRequest, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Data Plane access. </summary>
        /// <param name="policy"> Data Plane user access policy definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="policy"/> is null. </exception>
        public async virtual Task<Response<AccessPolicyResponse>> GetDataPlaneAccessAsync(UserAccessPolicy policy, CancellationToken cancellationToken = default)
        {
            if (policy == null)
            {
                throw new ArgumentNullException(nameof(policy));
            }

            using var scope = _clientDiagnostics.CreateScope("Factory.GetDataPlaneAccess");
            scope.Start();
            try
            {
                var response = await _factoriesRestClient.GetDataPlaneAccessAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, policy, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Data Plane access. </summary>
        /// <param name="policy"> Data Plane user access policy definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="policy"/> is null. </exception>
        public virtual Response<AccessPolicyResponse> GetDataPlaneAccess(UserAccessPolicy policy, CancellationToken cancellationToken = default)
        {
            if (policy == null)
            {
                throw new ArgumentNullException(nameof(policy));
            }

            using var scope = _clientDiagnostics.CreateScope("Factory.GetDataPlaneAccess");
            scope.Start();
            try
            {
                var response = _factoriesRestClient.GetDataPlaneAccess(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, policy, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get exposure control feature for specific factory. </summary>
        /// <param name="exposureControlRequest"> The exposure control request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="exposureControlRequest"/> is null. </exception>
        public async virtual Task<Response<ExposureControlResponse>> GetFeatureValueByFactoryExposureControlAsync(ExposureControlRequest exposureControlRequest, CancellationToken cancellationToken = default)
        {
            if (exposureControlRequest == null)
            {
                throw new ArgumentNullException(nameof(exposureControlRequest));
            }

            using var scope = _clientDiagnostics.CreateScope("Factory.GetFeatureValueByFactoryExposureControl");
            scope.Start();
            try
            {
                var response = await _exposureControlRestClient.GetFeatureValueByFactoryAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, exposureControlRequest, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get exposure control feature for specific factory. </summary>
        /// <param name="exposureControlRequest"> The exposure control request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="exposureControlRequest"/> is null. </exception>
        public virtual Response<ExposureControlResponse> GetFeatureValueByFactoryExposureControl(ExposureControlRequest exposureControlRequest, CancellationToken cancellationToken = default)
        {
            if (exposureControlRequest == null)
            {
                throw new ArgumentNullException(nameof(exposureControlRequest));
            }

            using var scope = _clientDiagnostics.CreateScope("Factory.GetFeatureValueByFactoryExposureControl");
            scope.Start();
            try
            {
                var response = _exposureControlRestClient.GetFeatureValueByFactory(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, exposureControlRequest, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of exposure control features for specific factory. </summary>
        /// <param name="exposureControlBatchRequest"> The exposure control request for list of features. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="exposureControlBatchRequest"/> is null. </exception>
        public async virtual Task<Response<ExposureControlBatchResponse>> QueryFeatureValuesByFactoryExposureControlAsync(ExposureControlBatchRequest exposureControlBatchRequest, CancellationToken cancellationToken = default)
        {
            if (exposureControlBatchRequest == null)
            {
                throw new ArgumentNullException(nameof(exposureControlBatchRequest));
            }

            using var scope = _clientDiagnostics.CreateScope("Factory.QueryFeatureValuesByFactoryExposureControl");
            scope.Start();
            try
            {
                var response = await _exposureControlRestClient.QueryFeatureValuesByFactoryAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, exposureControlBatchRequest, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of exposure control features for specific factory. </summary>
        /// <param name="exposureControlBatchRequest"> The exposure control request for list of features. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="exposureControlBatchRequest"/> is null. </exception>
        public virtual Response<ExposureControlBatchResponse> QueryFeatureValuesByFactoryExposureControl(ExposureControlBatchRequest exposureControlBatchRequest, CancellationToken cancellationToken = default)
        {
            if (exposureControlBatchRequest == null)
            {
                throw new ArgumentNullException(nameof(exposureControlBatchRequest));
            }

            using var scope = _clientDiagnostics.CreateScope("Factory.QueryFeatureValuesByFactoryExposureControl");
            scope.Start();
            try
            {
                var response = _exposureControlRestClient.QueryFeatureValuesByFactory(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, exposureControlBatchRequest, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Query pipeline runs in the factory based on input filter conditions. </summary>
        /// <param name="filterParameters"> Parameters to filter the pipeline run. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="filterParameters"/> is null. </exception>
        /// <returns> An async collection of <see cref="PipelineRun" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PipelineRun> QueryPipelineRunsAsync(RunFilterParameters filterParameters, CancellationToken cancellationToken = default)
        {
            if (filterParameters == null)
            {
                throw new ArgumentNullException(nameof(filterParameters));
            }

            async Task<Page<PipelineRun>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Factory.QueryPipelineRuns");
                scope.Start();
                try
                {
                    var response = await _pipelineRunsRestClient.QueryByFactoryAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filterParameters, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Query pipeline runs in the factory based on input filter conditions. </summary>
        /// <param name="filterParameters"> Parameters to filter the pipeline run. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="filterParameters"/> is null. </exception>
        /// <returns> A collection of <see cref="PipelineRun" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PipelineRun> QueryPipelineRuns(RunFilterParameters filterParameters, CancellationToken cancellationToken = default)
        {
            if (filterParameters == null)
            {
                throw new ArgumentNullException(nameof(filterParameters));
            }

            Page<PipelineRun> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Factory.QueryPipelineRuns");
                scope.Start();
                try
                {
                    var response = _pipelineRunsRestClient.QueryByFactory(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filterParameters, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Get a pipeline run by its run ID. </summary>
        /// <param name="runId"> The pipeline run identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="runId"/> is null. </exception>
        public async virtual Task<Response<PipelineRun>> GetPipelineRunAsync(string runId, CancellationToken cancellationToken = default)
        {
            if (runId == null)
            {
                throw new ArgumentNullException(nameof(runId));
            }

            using var scope = _clientDiagnostics.CreateScope("Factory.GetPipelineRun");
            scope.Start();
            try
            {
                var response = await _pipelineRunsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, runId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a pipeline run by its run ID. </summary>
        /// <param name="runId"> The pipeline run identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="runId"/> is null. </exception>
        public virtual Response<PipelineRun> GetPipelineRun(string runId, CancellationToken cancellationToken = default)
        {
            if (runId == null)
            {
                throw new ArgumentNullException(nameof(runId));
            }

            using var scope = _clientDiagnostics.CreateScope("Factory.GetPipelineRun");
            scope.Start();
            try
            {
                var response = _pipelineRunsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, runId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancel a pipeline run by its run ID. </summary>
        /// <param name="runId"> The pipeline run identifier. </param>
        /// <param name="isRecursive"> If true, cancel all the Child pipelines that are triggered by the current pipeline. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="runId"/> is null. </exception>
        public async virtual Task<Response> CancelPipelineRunAsync(string runId, bool? isRecursive = null, CancellationToken cancellationToken = default)
        {
            if (runId == null)
            {
                throw new ArgumentNullException(nameof(runId));
            }

            using var scope = _clientDiagnostics.CreateScope("Factory.CancelPipelineRun");
            scope.Start();
            try
            {
                var response = await _pipelineRunsRestClient.CancelAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, runId, isRecursive, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancel a pipeline run by its run ID. </summary>
        /// <param name="runId"> The pipeline run identifier. </param>
        /// <param name="isRecursive"> If true, cancel all the Child pipelines that are triggered by the current pipeline. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="runId"/> is null. </exception>
        public virtual Response CancelPipelineRun(string runId, bool? isRecursive = null, CancellationToken cancellationToken = default)
        {
            if (runId == null)
            {
                throw new ArgumentNullException(nameof(runId));
            }

            using var scope = _clientDiagnostics.CreateScope("Factory.CancelPipelineRun");
            scope.Start();
            try
            {
                var response = _pipelineRunsRestClient.Cancel(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, runId, isRecursive, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Query activity runs based on input filter conditions. </summary>
        /// <param name="runId"> The pipeline run identifier. </param>
        /// <param name="filterParameters"> Parameters to filter the activity runs. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="runId"/> or <paramref name="filterParameters"/> is null. </exception>
        /// <returns> An async collection of <see cref="ActivityRun" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ActivityRun> QueryByPipelineRunActivityRunsAsync(string runId, RunFilterParameters filterParameters, CancellationToken cancellationToken = default)
        {
            if (runId == null)
            {
                throw new ArgumentNullException(nameof(runId));
            }
            if (filterParameters == null)
            {
                throw new ArgumentNullException(nameof(filterParameters));
            }

            async Task<Page<ActivityRun>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Factory.QueryByPipelineRunActivityRuns");
                scope.Start();
                try
                {
                    var response = await _activityRunsRestClient.QueryByPipelineRunAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, runId, filterParameters, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Query activity runs based on input filter conditions. </summary>
        /// <param name="runId"> The pipeline run identifier. </param>
        /// <param name="filterParameters"> Parameters to filter the activity runs. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="runId"/> or <paramref name="filterParameters"/> is null. </exception>
        /// <returns> A collection of <see cref="ActivityRun" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ActivityRun> QueryByPipelineRunActivityRuns(string runId, RunFilterParameters filterParameters, CancellationToken cancellationToken = default)
        {
            if (runId == null)
            {
                throw new ArgumentNullException(nameof(runId));
            }
            if (filterParameters == null)
            {
                throw new ArgumentNullException(nameof(filterParameters));
            }

            Page<ActivityRun> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Factory.QueryByPipelineRunActivityRuns");
                scope.Start();
                try
                {
                    var response = _activityRunsRestClient.QueryByPipelineRun(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, runId, filterParameters, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Query triggers. </summary>
        /// <param name="filterParameters"> Parameters to filter the triggers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="filterParameters"/> is null. </exception>
        /// <returns> An async collection of <see cref="TriggerResourceData" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<TriggerResourceData> QueryTriggersAsync(TriggerFilterParameters filterParameters, CancellationToken cancellationToken = default)
        {
            if (filterParameters == null)
            {
                throw new ArgumentNullException(nameof(filterParameters));
            }

            async Task<Page<TriggerResourceData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Factory.QueryTriggers");
                scope.Start();
                try
                {
                    var response = await _triggersRestClient.QueryByFactoryAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filterParameters, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Query triggers. </summary>
        /// <param name="filterParameters"> Parameters to filter the triggers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="filterParameters"/> is null. </exception>
        /// <returns> A collection of <see cref="TriggerResourceData" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<TriggerResourceData> QueryTriggers(TriggerFilterParameters filterParameters, CancellationToken cancellationToken = default)
        {
            if (filterParameters == null)
            {
                throw new ArgumentNullException(nameof(filterParameters));
            }

            Page<TriggerResourceData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Factory.QueryTriggers");
                scope.Start();
                try
                {
                    var response = _triggersRestClient.QueryByFactory(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filterParameters, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Query trigger runs. </summary>
        /// <param name="filterParameters"> Parameters to filter the pipeline run. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="filterParameters"/> is null. </exception>
        /// <returns> An async collection of <see cref="TriggerRun" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<TriggerRun> QueryTriggerRunsAsync(RunFilterParameters filterParameters, CancellationToken cancellationToken = default)
        {
            if (filterParameters == null)
            {
                throw new ArgumentNullException(nameof(filterParameters));
            }

            async Task<Page<TriggerRun>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Factory.QueryTriggerRuns");
                scope.Start();
                try
                {
                    var response = await _triggerRunsRestClient.QueryByFactoryAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filterParameters, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Query trigger runs. </summary>
        /// <param name="filterParameters"> Parameters to filter the pipeline run. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="filterParameters"/> is null. </exception>
        /// <returns> A collection of <see cref="TriggerRun" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<TriggerRun> QueryTriggerRuns(RunFilterParameters filterParameters, CancellationToken cancellationToken = default)
        {
            if (filterParameters == null)
            {
                throw new ArgumentNullException(nameof(filterParameters));
            }

            Page<TriggerRun> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Factory.QueryTriggerRuns");
                scope.Start();
                try
                {
                    var response = _triggerRunsRestClient.QueryByFactory(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filterParameters, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Creates a data flow debug session. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="request"> Data flow debug session definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="request"/> is null. </exception>
        public async virtual Task<FactoryCreateDataFlowDebugSessionOperation> CreateDataFlowDebugSessionAsync(bool waitForCompletion, CreateDataFlowDebugSessionRequest request, CancellationToken cancellationToken = default)
        {
            if (request == null)
            {
                throw new ArgumentNullException(nameof(request));
            }

            using var scope = _clientDiagnostics.CreateScope("Factory.CreateDataFlowDebugSession");
            scope.Start();
            try
            {
                var response = await _dataFlowDebugSessionRestClient.CreateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, request, cancellationToken).ConfigureAwait(false);
                var operation = new FactoryCreateDataFlowDebugSessionOperation(_clientDiagnostics, Pipeline, _dataFlowDebugSessionRestClient.CreateCreateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, request).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a data flow debug session. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="request"> Data flow debug session definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="request"/> is null. </exception>
        public virtual FactoryCreateDataFlowDebugSessionOperation CreateDataFlowDebugSession(bool waitForCompletion, CreateDataFlowDebugSessionRequest request, CancellationToken cancellationToken = default)
        {
            if (request == null)
            {
                throw new ArgumentNullException(nameof(request));
            }

            using var scope = _clientDiagnostics.CreateScope("Factory.CreateDataFlowDebugSession");
            scope.Start();
            try
            {
                var response = _dataFlowDebugSessionRestClient.Create(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, request, cancellationToken);
                var operation = new FactoryCreateDataFlowDebugSessionOperation(_clientDiagnostics, Pipeline, _dataFlowDebugSessionRestClient.CreateCreateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, request).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Query all active data flow debug sessions. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DataFlowDebugSessionInfo" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DataFlowDebugSessionInfo> QueryDataFlowDebugSessionsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<DataFlowDebugSessionInfo>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Factory.QueryDataFlowDebugSessions");
                scope.Start();
                try
                {
                    var response = await _dataFlowDebugSessionRestClient.QueryByFactoryAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DataFlowDebugSessionInfo>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Factory.QueryDataFlowDebugSessions");
                scope.Start();
                try
                {
                    var response = await _dataFlowDebugSessionRestClient.QueryByFactoryNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Query all active data flow debug sessions. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DataFlowDebugSessionInfo" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DataFlowDebugSessionInfo> QueryDataFlowDebugSessions(CancellationToken cancellationToken = default)
        {
            Page<DataFlowDebugSessionInfo> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Factory.QueryDataFlowDebugSessions");
                scope.Start();
                try
                {
                    var response = _dataFlowDebugSessionRestClient.QueryByFactory(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DataFlowDebugSessionInfo> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Factory.QueryDataFlowDebugSessions");
                scope.Start();
                try
                {
                    var response = _dataFlowDebugSessionRestClient.QueryByFactoryNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Add a data flow into debug session. </summary>
        /// <param name="request"> Data flow debug session definition with debug content. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="request"/> is null. </exception>
        public async virtual Task<Response<AddDataFlowToDebugSessionResponse>> AddDataFlowDataFlowDebugSessionAsync(DataFlowDebugPackage request, CancellationToken cancellationToken = default)
        {
            if (request == null)
            {
                throw new ArgumentNullException(nameof(request));
            }

            using var scope = _clientDiagnostics.CreateScope("Factory.AddDataFlowDataFlowDebugSession");
            scope.Start();
            try
            {
                var response = await _dataFlowDebugSessionRestClient.AddDataFlowAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, request, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add a data flow into debug session. </summary>
        /// <param name="request"> Data flow debug session definition with debug content. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="request"/> is null. </exception>
        public virtual Response<AddDataFlowToDebugSessionResponse> AddDataFlowDataFlowDebugSession(DataFlowDebugPackage request, CancellationToken cancellationToken = default)
        {
            if (request == null)
            {
                throw new ArgumentNullException(nameof(request));
            }

            using var scope = _clientDiagnostics.CreateScope("Factory.AddDataFlowDataFlowDebugSession");
            scope.Start();
            try
            {
                var response = _dataFlowDebugSessionRestClient.AddDataFlow(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, request, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a data flow debug session. </summary>
        /// <param name="request"> Data flow debug session definition for deletion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="request"/> is null. </exception>
        public async virtual Task<Response> DeleteDataFlowDebugSessionAsync(DeleteDataFlowDebugSessionRequest request, CancellationToken cancellationToken = default)
        {
            if (request == null)
            {
                throw new ArgumentNullException(nameof(request));
            }

            using var scope = _clientDiagnostics.CreateScope("Factory.DeleteDataFlowDebugSession");
            scope.Start();
            try
            {
                var response = await _dataFlowDebugSessionRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, request, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a data flow debug session. </summary>
        /// <param name="request"> Data flow debug session definition for deletion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="request"/> is null. </exception>
        public virtual Response DeleteDataFlowDebugSession(DeleteDataFlowDebugSessionRequest request, CancellationToken cancellationToken = default)
        {
            if (request == null)
            {
                throw new ArgumentNullException(nameof(request));
            }

            using var scope = _clientDiagnostics.CreateScope("Factory.DeleteDataFlowDebugSession");
            scope.Start();
            try
            {
                var response = _dataFlowDebugSessionRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, request, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Execute a data flow debug command. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="request"> Data flow debug command definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="request"/> is null. </exception>
        public async virtual Task<FactoryExecuteCommandDataFlowDebugSessionOperation> ExecuteCommandDataFlowDebugSessionAsync(bool waitForCompletion, DataFlowDebugCommandRequest request, CancellationToken cancellationToken = default)
        {
            if (request == null)
            {
                throw new ArgumentNullException(nameof(request));
            }

            using var scope = _clientDiagnostics.CreateScope("Factory.ExecuteCommandDataFlowDebugSession");
            scope.Start();
            try
            {
                var response = await _dataFlowDebugSessionRestClient.ExecuteCommandAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, request, cancellationToken).ConfigureAwait(false);
                var operation = new FactoryExecuteCommandDataFlowDebugSessionOperation(_clientDiagnostics, Pipeline, _dataFlowDebugSessionRestClient.CreateExecuteCommandRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, request).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Execute a data flow debug command. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="request"> Data flow debug command definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="request"/> is null. </exception>
        public virtual FactoryExecuteCommandDataFlowDebugSessionOperation ExecuteCommandDataFlowDebugSession(bool waitForCompletion, DataFlowDebugCommandRequest request, CancellationToken cancellationToken = default)
        {
            if (request == null)
            {
                throw new ArgumentNullException(nameof(request));
            }

            using var scope = _clientDiagnostics.CreateScope("Factory.ExecuteCommandDataFlowDebugSession");
            scope.Start();
            try
            {
                var response = _dataFlowDebugSessionRestClient.ExecuteCommand(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, request, cancellationToken);
                var operation = new FactoryExecuteCommandDataFlowDebugSessionOperation(_clientDiagnostics, Pipeline, _dataFlowDebugSessionRestClient.CreateExecuteCommandRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, request).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the private link resources. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PrivateLinkResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PrivateLinkResource> GetprivateLinkResourcesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<PrivateLinkResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Factory.GetprivateLinkResources");
                scope.Start();
                try
                {
                    var response = await _privateLinkResourcesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Gets the private link resources. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PrivateLinkResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PrivateLinkResource> GetprivateLinkResources(CancellationToken cancellationToken = default)
        {
            Page<PrivateLinkResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Factory.GetprivateLinkResources");
                scope.Start();
                try
                {
                    var response = _privateLinkResourcesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        #region IntegrationRuntimeResource

        /// <summary> Gets a collection of IntegrationRuntimeResources in the Factory. </summary>
        /// <returns> An object representing collection of IntegrationRuntimeResources and their operations over a Factory. </returns>
        public virtual IntegrationRuntimeResourceCollection GetIntegrationRuntimeResources()
        {
            return new IntegrationRuntimeResourceCollection(this);
        }
        #endregion

        #region LinkedServiceResource

        /// <summary> Gets a collection of LinkedServiceResources in the Factory. </summary>
        /// <returns> An object representing collection of LinkedServiceResources and their operations over a Factory. </returns>
        public virtual LinkedServiceResourceCollection GetLinkedServiceResources()
        {
            return new LinkedServiceResourceCollection(this);
        }
        #endregion

        #region DatasetResource

        /// <summary> Gets a collection of DatasetResources in the Factory. </summary>
        /// <returns> An object representing collection of DatasetResources and their operations over a Factory. </returns>
        public virtual DatasetResourceCollection GetDatasetResources()
        {
            return new DatasetResourceCollection(this);
        }
        #endregion

        #region PipelineResource

        /// <summary> Gets a collection of PipelineResources in the Factory. </summary>
        /// <returns> An object representing collection of PipelineResources and their operations over a Factory. </returns>
        public virtual PipelineResourceCollection GetPipelineResources()
        {
            return new PipelineResourceCollection(this);
        }
        #endregion

        #region TriggerResource

        /// <summary> Gets a collection of TriggerResources in the Factory. </summary>
        /// <returns> An object representing collection of TriggerResources and their operations over a Factory. </returns>
        public virtual TriggerResourceCollection GetTriggerResources()
        {
            return new TriggerResourceCollection(this);
        }
        #endregion

        #region DataFlowResource

        /// <summary> Gets a collection of DataFlowResources in the Factory. </summary>
        /// <returns> An object representing collection of DataFlowResources and their operations over a Factory. </returns>
        public virtual DataFlowResourceCollection GetDataFlowResources()
        {
            return new DataFlowResourceCollection(this);
        }
        #endregion

        #region ManagedVirtualNetworkResource

        /// <summary> Gets a collection of ManagedVirtualNetworkResources in the Factory. </summary>
        /// <returns> An object representing collection of ManagedVirtualNetworkResources and their operations over a Factory. </returns>
        public virtual ManagedVirtualNetworkResourceCollection GetManagedVirtualNetworkResources()
        {
            return new ManagedVirtualNetworkResourceCollection(this);
        }
        #endregion

        #region PrivateEndpointConnectionResource

        /// <summary> Gets a collection of PrivateEndpointConnectionResources in the Factory. </summary>
        /// <returns> An object representing collection of PrivateEndpointConnectionResources and their operations over a Factory. </returns>
        public virtual PrivateEndpointConnectionResourceCollection GetPrivateEndpointConnectionResources()
        {
            return new PrivateEndpointConnectionResourceCollection(this);
        }
        #endregion
    }
}
