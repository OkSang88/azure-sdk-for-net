// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Cdn;
using Azure.ResourceManager.Cdn.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Cdn.Tests.Mock
{
    /// <summary> Test for AfdRoute. </summary>
    public partial class AfdRouteCollectionMockTests : MockTestBase
    {
        public AfdRouteCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Routes_Create
            string routeName = "route1";
            Cdn.AfdRouteData route = new Cdn.AfdRouteData()
            {
                OriginGroup = new WritableSubResource()
                {
                    Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/RG/providers/Microsoft.Cdn/profiles/profile1/originGroups/originGroup1"),
                },
                OriginPath = null,
                CompressionSettings = new Dictionary<string, object>()
                {
                    ["contentTypesToCompress"] = new object[]
            {
"text/html",
"application/octet-stream",
            }
            ,
                    ["isCompressionEnabled"] = "true",
                }
            ,
                QueryStringCachingBehavior = Cdn.Models.AfdQueryStringCachingBehavior.IgnoreQueryString,
                ForwardingProtocol = new Cdn.Models.ForwardingProtocol("MatchRequest"),
                LinkToDefaultDomain = new Cdn.Models.LinkToDefaultDomain("Enabled"),
                HttpsRedirect = new Cdn.Models.HttpsRedirect("Enabled"),
                EnabledState = new Cdn.Models.EnabledState("Enabled"),
            };

            var afdEndpointId = Cdn.AfdEndpoint.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "RG", "profile1", "endpoint1");
            var collection = GetArmClient().GetAfdEndpoint(afdEndpointId).GetAfdRoutes();
            await collection.CreateOrUpdateAsync(true, routeName, route);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Routes_Get
            string routeName = "route1";

            var afdEndpointId = Cdn.AfdEndpoint.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "RG", "profile1", "endpoint1");
            var collection = GetArmClient().GetAfdEndpoint(afdEndpointId).GetAfdRoutes();
            await collection.GetAsync(routeName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: Routes_ListByEndpoint

            var afdEndpointId = Cdn.AfdEndpoint.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "RG", "profile1", "endpoint1");
            var collection = GetArmClient().GetAfdEndpoint(afdEndpointId).GetAfdRoutes();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
