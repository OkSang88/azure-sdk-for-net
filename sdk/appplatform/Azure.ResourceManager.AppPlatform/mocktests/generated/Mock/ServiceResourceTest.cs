// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using AppPlatformManagementClient;
using AppPlatformManagementClient.Models;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;

namespace AppPlatformManagementClient.Tests.Mock
{
    /// <summary> Test for ServiceResource. </summary>
    public partial class ServiceResourceMockTests : MockTestBase
    {
        public ServiceResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Services_Get
            var serviceResourceId = AppPlatformManagementClient.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);

            await serviceResource.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Services_Delete
            var serviceResourceId = AppPlatformManagementClient.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);

            await serviceResource.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Services_Update
            var serviceResourceId = AppPlatformManagementClient.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);
            AppPlatformManagementClient.ServiceResourceData resource = new AppPlatformManagementClient.ServiceResourceData()
            {
                Properties = new AppPlatformManagementClient.Models.ClusterResourceProperties(),
                Sku = new AppPlatformManagementClient.Models.Sku()
                {
                    Name = "S0",
                    Tier = "Standard",
                },
                Location = "eastus",
            };

            await serviceResource.UpdateAsync(true, resource);
        }

        [RecordedTest]
        public async Task GetTestKeys()
        {
            // Example: Services_ListTestKeys
            var serviceResourceId = AppPlatformManagementClient.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);

            await serviceResource.GetTestKeysAsync();
        }

        [RecordedTest]
        public async Task RegenerateTestKey()
        {
            // Example: Services_RegenerateTestKey
            var serviceResourceId = AppPlatformManagementClient.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);
            AppPlatformManagementClient.Models.RegenerateTestKeyRequestPayload regenerateTestKeyRequest = new AppPlatformManagementClient.Models.RegenerateTestKeyRequestPayload(keyType: new AppPlatformManagementClient.Models.TestKeyType("Primary"));

            await serviceResource.RegenerateTestKeyAsync(regenerateTestKeyRequest);
        }

        [RecordedTest]
        public async Task DisableTestEndpoint()
        {
            // Example: Services_DisableTestEndpoint
            var serviceResourceId = AppPlatformManagementClient.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);

            await serviceResource.DisableTestEndpointAsync();
        }

        [RecordedTest]
        public async Task EnableTestEndpoint()
        {
            // Example: Services_EnableTestEndpoint
            var serviceResourceId = AppPlatformManagementClient.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);

            await serviceResource.EnableTestEndpointAsync();
        }

        [RecordedTest]
        public async Task Stop()
        {
            // Example: Services_Stop
            var serviceResourceId = AppPlatformManagementClient.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);

            await serviceResource.StopAsync(true);
        }

        [RecordedTest]
        public async Task Start()
        {
            // Example: Services_Start
            var serviceResourceId = AppPlatformManagementClient.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);

            await serviceResource.StartAsync(true);
        }

        [RecordedTest]
        public async Task ValidateConfigServer()
        {
            // Example: ConfigServers_Validate
            var serviceResourceId = AppPlatformManagementClient.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);
            AppPlatformManagementClient.Models.ConfigServerSettings configServerSettings = new AppPlatformManagementClient.Models.ConfigServerSettings()
            {
                GitProperty = new AppPlatformManagementClient.Models.ConfigServerGitProperty(uri: "https://github.com/fake-user/fake-repository.git")
                {
                    Label = "master",
                },
            };

            await serviceResource.ValidateConfigServerAsync(true, configServerSettings);
        }

        [RecordedTest]
        public async Task GetForClusterDeployments()
        {
            // Example: Deployments_ListForCluster
            var serviceResourceId = AppPlatformManagementClient.ServiceResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var serviceResource = GetArmClient().GetServiceResource(serviceResourceId);
            IEnumerable<string> version = null;

            await foreach (var _ in serviceResource.GetForClusterDeploymentsAsync(version))
            {
            }
        }

        [RecordedTest]
        public async Task ConfigServerResourceGet()
        {
            // Example: ConfigServers_Get
            var configServerResourceId = AppPlatformManagementClient.ConfigServerResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var configServerResource = GetArmClient().GetConfigServerResource(configServerResourceId);

            await configServerResource.GetAsync();
        }

        [RecordedTest]
        public async Task ConfigServerResourceUpdate()
        {
            // Example: ConfigServers_UpdatePatch
            var configServerResourceId = AppPlatformManagementClient.ConfigServerResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var configServerResource = GetArmClient().GetConfigServerResource(configServerResourceId);
            AppPlatformManagementClient.ConfigServerResourceData configServerResource2 = new AppPlatformManagementClient.ConfigServerResourceData()
            {
                Properties = new AppPlatformManagementClient.Models.ConfigServerProperties()
                {
                    ConfigServer = new AppPlatformManagementClient.Models.ConfigServerSettings()
                    {
                        GitProperty = new AppPlatformManagementClient.Models.ConfigServerGitProperty(uri: "https://github.com/fake-user/fake-repository.git")
                        {
                            Label = "master",
                        },
                    },
                },
            };

            await configServerResource.UpdateAsync(true, configServerResource2);
        }

        [RecordedTest]
        public async Task MonitoringSettingResourceGet()
        {
            // Example: MonitoringSettings_Get
            var monitoringSettingResourceId = AppPlatformManagementClient.MonitoringSettingResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var monitoringSettingResource = GetArmClient().GetMonitoringSettingResource(monitoringSettingResourceId);

            await monitoringSettingResource.GetAsync();
        }

        [RecordedTest]
        public async Task MonitoringSettingResourceUpdate()
        {
            // Example: MonitoringSettings_UpdatePatch
            var monitoringSettingResourceId = AppPlatformManagementClient.MonitoringSettingResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myservice");
            var monitoringSettingResource = GetArmClient().GetMonitoringSettingResource(monitoringSettingResourceId);
            AppPlatformManagementClient.MonitoringSettingResourceData monitoringSettingResource2 = new AppPlatformManagementClient.MonitoringSettingResourceData()
            {
                Properties = new AppPlatformManagementClient.Models.MonitoringSettingProperties()
                {
                    TraceEnabled = true,
                    AppInsightsInstrumentationKey = "00000000-0000-0000-0000-000000000000",
                    AppInsightsSamplingRate = 10,
                },
            };

            await monitoringSettingResource.UpdateAsync(true, monitoringSettingResource2);
        }
    }
}
