// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.AppService.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.AppService.Tests.Mock
{
    /// <summary> Test for StaticSiteBuildARMResource. </summary>
    public partial class StaticSiteBuildARMResourceMockTests : MockTestBase
    {
        public StaticSiteBuildARMResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get a static site build
            var staticSiteBuildARMResource = GetArmClient().GetStaticSiteBuildARMResource(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Web/staticSites/testStaticSite0/builds/12"));

            await staticSiteBuildARMResource.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: Delete a static site build
            var staticSiteBuildARMResource = GetArmClient().GetStaticSiteBuildARMResource(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Web/staticSites/testStaticSite0/builds/12"));

            await staticSiteBuildARMResource.DeleteAsync();
        }

        [RecordedTest]
        public async Task CreateOrUpdateStaticSiteBuildAppSettingsAsync()
        {
            // Example: Creates or updates the function app settings of a static site build.
            var staticSiteBuildARMResource = GetArmClient().GetStaticSiteBuildARMResource(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Web/staticSites/testStaticSite0/builds/12"));
            AppService.Models.StringDictionary appSettings = new AppService.Models.StringDictionary();

            await staticSiteBuildARMResource.CreateOrUpdateStaticSiteBuildAppSettingsAsync(appSettings);
        }

        [RecordedTest]
        public async Task CreateOrUpdateStaticSiteBuildFunctionAppSettingsAsync()
        {
            // Example: Creates or updates the function app settings of a static site build.
            var staticSiteBuildARMResource = GetArmClient().GetStaticSiteBuildARMResource(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Web/staticSites/testStaticSite0/builds/12"));
            AppService.Models.StringDictionary appSettings = new AppService.Models.StringDictionary();

            await staticSiteBuildARMResource.CreateOrUpdateStaticSiteBuildFunctionAppSettingsAsync(appSettings);
        }

        [RecordedTest]
        public void GetStaticSiteBuildFunctionsAsync()
        {
            // Example: Gets the functions of a particular static site build
            var staticSiteBuildARMResource = GetArmClient().GetStaticSiteBuildARMResource(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Web/staticSites/testStaticSite0/builds/default"));

            staticSiteBuildARMResource.GetStaticSiteBuildFunctionsAsync();
        }

        [RecordedTest]
        public async Task GetStaticSiteBuildAppSettingsAsync()
        {
            // Example: Get app settings of a static site build
            var staticSiteBuildARMResource = GetArmClient().GetStaticSiteBuildARMResource(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Web/staticSites/testStaticSite0/builds/12"));

            await staticSiteBuildARMResource.GetStaticSiteBuildAppSettingsAsync();
        }

        [RecordedTest]
        public async Task GetStaticSiteBuildFunctionAppSettingsAsync()
        {
            // Example: Get function app settings of a static site build
            var staticSiteBuildARMResource = GetArmClient().GetStaticSiteBuildARMResource(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Web/staticSites/testStaticSite0/builds/12"));

            await staticSiteBuildARMResource.GetStaticSiteBuildFunctionAppSettingsAsync();
        }

        [RecordedTest]
        public async Task CreateZipDeploymentForStaticSiteBuildAsync()
        {
            // Example: Deploy a site from a zipped package to a particular static site build
            var staticSiteBuildARMResource = GetArmClient().GetStaticSiteBuildARMResource(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Web/staticSites/testStaticSite0/builds/12"));
            AppService.Models.StaticSiteZipDeploymentARMResource staticSiteZipDeploymentEnvelope = new AppService.Models.StaticSiteZipDeploymentARMResource()
            {
                AppZipUrl = "https://teststorageaccount.net/happy-sea-15afae3e-master-81828877/app-zipdeploy.zip",
                ApiZipUrl = "https://teststorageaccount.net/happy-sea-15afae3e-master-81828877/api-zipdeploy.zip",
                DeploymentTitle = "Update index.html",
                Provider = "testProvider",
                FunctionLanguage = "testFunctionLanguage",
            };

            await staticSiteBuildARMResource.CreateZipDeploymentForStaticSiteBuildAsync(staticSiteZipDeploymentEnvelope);
        }
    }
}
