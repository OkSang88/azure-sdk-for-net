// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.CosmosDB;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.CosmosDB.Tests.Mock
{
    /// <summary> Test for MongoDBCollection. </summary>
    public partial class MongoDBCollectionMockTests : MockTestBase
    {
        public MongoDBCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: CosmosDBMongoDBCollectionGet
            var mongoDBCollectionId = CosmosDB.MongoDBCollection.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rgName", "ddb1", "databaseName", "collectionName");
            var mongoDBCollection = GetArmClient().GetMongoDBCollection(mongoDBCollectionId);

            await mongoDBCollection.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: CosmosDBMongoDBCollectionDelete
            var mongoDBCollectionId = CosmosDB.MongoDBCollection.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1", "databaseName", "collectionName");
            var mongoDBCollection = GetArmClient().GetMongoDBCollection(mongoDBCollectionId);

            await mongoDBCollection.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task DatabaseAccountMongodbDatabaseCollectionThroughputSettingGet()
        {
            // Example: CosmosDBMongoDBCollectionThroughputGet
            var databaseAccountMongodbDatabaseCollectionThroughputSettingId = CosmosDB.DatabaseAccountMongodbDatabaseCollectionThroughputSetting.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1", "databaseName", "collectionName");
            var databaseAccountMongodbDatabaseCollectionThroughputSetting = GetArmClient().GetDatabaseAccountMongodbDatabaseCollectionThroughputSetting(databaseAccountMongodbDatabaseCollectionThroughputSettingId);

            await databaseAccountMongodbDatabaseCollectionThroughputSetting.GetAsync();
        }

        [RecordedTest]
        public async Task DatabaseAccountMongodbDatabaseCollectionThroughputSettingMigrateMongoDBCollectionToAutoscale()
        {
            // Example: CosmosDBMongoDBCollectionMigrateToAutoscale
            var databaseAccountMongodbDatabaseCollectionThroughputSettingId = CosmosDB.DatabaseAccountMongodbDatabaseCollectionThroughputSetting.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1", "databaseName", "collectionName");
            var databaseAccountMongodbDatabaseCollectionThroughputSetting = GetArmClient().GetDatabaseAccountMongodbDatabaseCollectionThroughputSetting(databaseAccountMongodbDatabaseCollectionThroughputSettingId);

            await databaseAccountMongodbDatabaseCollectionThroughputSetting.MigrateMongoDBCollectionToAutoscaleAsync(true);
        }

        [RecordedTest]
        public async Task DatabaseAccountMongodbDatabaseCollectionThroughputSettingMigrateMongoDBCollectionToManualThroughput()
        {
            // Example: CosmosDBMongoDBCollectionMigrateToManualThroughput
            var databaseAccountMongodbDatabaseCollectionThroughputSettingId = CosmosDB.DatabaseAccountMongodbDatabaseCollectionThroughputSetting.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1", "databaseName", "collectionName");
            var databaseAccountMongodbDatabaseCollectionThroughputSetting = GetArmClient().GetDatabaseAccountMongodbDatabaseCollectionThroughputSetting(databaseAccountMongodbDatabaseCollectionThroughputSettingId);

            await databaseAccountMongodbDatabaseCollectionThroughputSetting.MigrateMongoDBCollectionToManualThroughputAsync(true);
        }
    }
}
