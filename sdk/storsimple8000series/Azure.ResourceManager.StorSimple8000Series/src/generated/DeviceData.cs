// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;
using StorSimple8000SeriesManagementClient.Models;

namespace StorSimple8000SeriesManagementClient
{
    /// <summary> A class representing the Device data model. </summary>
    public partial class DeviceData : BaseModel
    {
        /// <summary> Initializes a new instance of DeviceData. </summary>
        /// <param name="friendlyName"> The friendly name of the device. </param>
        /// <param name="activationTime"> The UTC time at which the device was activated. </param>
        /// <param name="culture"> The language culture setting on the device. For eg: &quot;en-US&quot;. </param>
        /// <param name="deviceDescription"> The device description. </param>
        /// <param name="deviceSoftwareVersion"> The version number of the software running on the device. </param>
        /// <param name="deviceConfigurationStatus"> The current configuration status of the device. </param>
        /// <param name="targetIqn"> The target IQN. </param>
        /// <param name="modelDescription"> The device model. </param>
        /// <param name="status"> The current status of the device. </param>
        /// <param name="serialNumber"> The serial number. </param>
        /// <param name="deviceType"> The type of the device. </param>
        /// <param name="activeController"> The identifier of the active controller of the device. </param>
        /// <param name="friendlySoftwareVersion"> The device friendly software version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="friendlyName"/>, <paramref name="culture"/>, <paramref name="deviceDescription"/>, <paramref name="deviceSoftwareVersion"/>, <paramref name="targetIqn"/>, <paramref name="modelDescription"/>, <paramref name="serialNumber"/>, or <paramref name="friendlySoftwareVersion"/> is null. </exception>
        public DeviceData(string friendlyName, DateTimeOffset activationTime, string culture, string deviceDescription, string deviceSoftwareVersion, DeviceConfigurationStatus deviceConfigurationStatus, string targetIqn, string modelDescription, DeviceStatus status, string serialNumber, DeviceType deviceType, ControllerId activeController, string friendlySoftwareVersion)
        {
            if (friendlyName == null)
            {
                throw new ArgumentNullException(nameof(friendlyName));
            }
            if (culture == null)
            {
                throw new ArgumentNullException(nameof(culture));
            }
            if (deviceDescription == null)
            {
                throw new ArgumentNullException(nameof(deviceDescription));
            }
            if (deviceSoftwareVersion == null)
            {
                throw new ArgumentNullException(nameof(deviceSoftwareVersion));
            }
            if (targetIqn == null)
            {
                throw new ArgumentNullException(nameof(targetIqn));
            }
            if (modelDescription == null)
            {
                throw new ArgumentNullException(nameof(modelDescription));
            }
            if (serialNumber == null)
            {
                throw new ArgumentNullException(nameof(serialNumber));
            }
            if (friendlySoftwareVersion == null)
            {
                throw new ArgumentNullException(nameof(friendlySoftwareVersion));
            }

            FriendlyName = friendlyName;
            ActivationTime = activationTime;
            Culture = culture;
            DeviceDescription = deviceDescription;
            DeviceSoftwareVersion = deviceSoftwareVersion;
            DeviceConfigurationStatus = deviceConfigurationStatus;
            TargetIqn = targetIqn;
            ModelDescription = modelDescription;
            Status = status;
            SerialNumber = serialNumber;
            DeviceType = deviceType;
            ActiveController = activeController;
            FriendlySoftwareVersion = friendlySoftwareVersion;
        }

        /// <summary> Initializes a new instance of DeviceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="type"> The type. </param>
        /// <param name="kind"> The Kind of the object. Currently only Series8000 is supported. </param>
        /// <param name="friendlyName"> The friendly name of the device. </param>
        /// <param name="activationTime"> The UTC time at which the device was activated. </param>
        /// <param name="culture"> The language culture setting on the device. For eg: &quot;en-US&quot;. </param>
        /// <param name="deviceDescription"> The device description. </param>
        /// <param name="deviceSoftwareVersion"> The version number of the software running on the device. </param>
        /// <param name="friendlySoftwareName"> The friendly name of the software running on the device. </param>
        /// <param name="deviceConfigurationStatus"> The current configuration status of the device. </param>
        /// <param name="targetIqn"> The target IQN. </param>
        /// <param name="modelDescription"> The device model. </param>
        /// <param name="status"> The current status of the device. </param>
        /// <param name="serialNumber"> The serial number. </param>
        /// <param name="deviceType"> The type of the device. </param>
        /// <param name="activeController"> The identifier of the active controller of the device. </param>
        /// <param name="friendlySoftwareVersion"> The device friendly software version. </param>
        /// <param name="availableLocalStorageInBytes"> The storage in bytes that is available locally on the device. </param>
        /// <param name="availableTieredStorageInBytes"> The storage in bytes that is available on the device for tiered volumes. </param>
        /// <param name="provisionedTieredStorageInBytes"> The storage in bytes that has been provisioned on the device for tiered volumes. </param>
        /// <param name="provisionedLocalStorageInBytes"> The storage in bytes used for locally pinned volumes on the device (including additional local reservation). </param>
        /// <param name="provisionedVolumeSizeInBytes"> Total capacity in bytes of tiered and locally pinned volumes on the device. </param>
        /// <param name="usingStorageInBytes"> The storage in bytes that is currently being used on the device, including both local and cloud. </param>
        /// <param name="totalTieredStorageInBytes"> The total tiered storage available on the device in bytes. </param>
        /// <param name="agentGroupVersion"> The device agent group version. </param>
        /// <param name="networkInterfaceCardCount"> The number of network interface cards. </param>
        /// <param name="deviceLocation"> The location of the virtual appliance. </param>
        /// <param name="virtualMachineApiType"> The virtual machine API type. </param>
        /// <param name="details"> The additional device details regarding the end point count and volume container count. </param>
        /// <param name="rolloverDetails"> The additional device details for the service data encryption key rollover. </param>
        internal DeviceData(ResourceIdentifier id, string name, ResourceType type, string kind, string friendlyName, DateTimeOffset activationTime, string culture, string deviceDescription, string deviceSoftwareVersion, string friendlySoftwareName, DeviceConfigurationStatus deviceConfigurationStatus, string targetIqn, string modelDescription, DeviceStatus status, string serialNumber, DeviceType deviceType, ControllerId activeController, string friendlySoftwareVersion, long? availableLocalStorageInBytes, long? availableTieredStorageInBytes, long? provisionedTieredStorageInBytes, long? provisionedLocalStorageInBytes, long? provisionedVolumeSizeInBytes, long? usingStorageInBytes, long? totalTieredStorageInBytes, int? agentGroupVersion, int? networkInterfaceCardCount, string deviceLocation, VirtualMachineApiType? virtualMachineApiType, DeviceDetails details, DeviceRolloverDetails rolloverDetails) : base(id, name, type, kind)
        {
            FriendlyName = friendlyName;
            ActivationTime = activationTime;
            Culture = culture;
            DeviceDescription = deviceDescription;
            DeviceSoftwareVersion = deviceSoftwareVersion;
            FriendlySoftwareName = friendlySoftwareName;
            DeviceConfigurationStatus = deviceConfigurationStatus;
            TargetIqn = targetIqn;
            ModelDescription = modelDescription;
            Status = status;
            SerialNumber = serialNumber;
            DeviceType = deviceType;
            ActiveController = activeController;
            FriendlySoftwareVersion = friendlySoftwareVersion;
            AvailableLocalStorageInBytes = availableLocalStorageInBytes;
            AvailableTieredStorageInBytes = availableTieredStorageInBytes;
            ProvisionedTieredStorageInBytes = provisionedTieredStorageInBytes;
            ProvisionedLocalStorageInBytes = provisionedLocalStorageInBytes;
            ProvisionedVolumeSizeInBytes = provisionedVolumeSizeInBytes;
            UsingStorageInBytes = usingStorageInBytes;
            TotalTieredStorageInBytes = totalTieredStorageInBytes;
            AgentGroupVersion = agentGroupVersion;
            NetworkInterfaceCardCount = networkInterfaceCardCount;
            DeviceLocation = deviceLocation;
            VirtualMachineApiType = virtualMachineApiType;
            Details = details;
            RolloverDetails = rolloverDetails;
        }

        /// <summary> The friendly name of the device. </summary>
        public string FriendlyName { get; set; }
        /// <summary> The UTC time at which the device was activated. </summary>
        public DateTimeOffset ActivationTime { get; set; }
        /// <summary> The language culture setting on the device. For eg: &quot;en-US&quot;. </summary>
        public string Culture { get; set; }
        /// <summary> The device description. </summary>
        public string DeviceDescription { get; set; }
        /// <summary> The version number of the software running on the device. </summary>
        public string DeviceSoftwareVersion { get; set; }
        /// <summary> The friendly name of the software running on the device. </summary>
        public string FriendlySoftwareName { get; set; }
        /// <summary> The current configuration status of the device. </summary>
        public DeviceConfigurationStatus DeviceConfigurationStatus { get; set; }
        /// <summary> The target IQN. </summary>
        public string TargetIqn { get; set; }
        /// <summary> The device model. </summary>
        public string ModelDescription { get; set; }
        /// <summary> The current status of the device. </summary>
        public DeviceStatus Status { get; set; }
        /// <summary> The serial number. </summary>
        public string SerialNumber { get; set; }
        /// <summary> The type of the device. </summary>
        public DeviceType DeviceType { get; set; }
        /// <summary> The identifier of the active controller of the device. </summary>
        public ControllerId ActiveController { get; set; }
        /// <summary> The device friendly software version. </summary>
        public string FriendlySoftwareVersion { get; set; }
        /// <summary> The storage in bytes that is available locally on the device. </summary>
        public long? AvailableLocalStorageInBytes { get; set; }
        /// <summary> The storage in bytes that is available on the device for tiered volumes. </summary>
        public long? AvailableTieredStorageInBytes { get; set; }
        /// <summary> The storage in bytes that has been provisioned on the device for tiered volumes. </summary>
        public long? ProvisionedTieredStorageInBytes { get; set; }
        /// <summary> The storage in bytes used for locally pinned volumes on the device (including additional local reservation). </summary>
        public long? ProvisionedLocalStorageInBytes { get; set; }
        /// <summary> Total capacity in bytes of tiered and locally pinned volumes on the device. </summary>
        public long? ProvisionedVolumeSizeInBytes { get; set; }
        /// <summary> The storage in bytes that is currently being used on the device, including both local and cloud. </summary>
        public long? UsingStorageInBytes { get; set; }
        /// <summary> The total tiered storage available on the device in bytes. </summary>
        public long? TotalTieredStorageInBytes { get; set; }
        /// <summary> The device agent group version. </summary>
        public int? AgentGroupVersion { get; set; }
        /// <summary> The number of network interface cards. </summary>
        public int? NetworkInterfaceCardCount { get; set; }
        /// <summary> The location of the virtual appliance. </summary>
        public string DeviceLocation { get; set; }
        /// <summary> The virtual machine API type. </summary>
        public VirtualMachineApiType? VirtualMachineApiType { get; }
        /// <summary> The additional device details regarding the end point count and volume container count. </summary>
        public DeviceDetails Details { get; set; }
        /// <summary> The additional device details for the service data encryption key rollover. </summary>
        public DeviceRolloverDetails RolloverDetails { get; set; }
    }
}
