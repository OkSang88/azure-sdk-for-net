// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for VirtualHub. </summary>
    public partial class VirtualHubMockTests : MockTestBase
    {
        public VirtualHubMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: VirtualHubGet
            var virtualHub = GetArmClient().GetVirtualHub(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1"));

            await virtualHub.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: VirtualHubDelete
            var virtualHub = GetArmClient().GetVirtualHub(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1"));

            await virtualHub.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: VirtualHubUpdate
            var virtualHub = GetArmClient().GetVirtualHub(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub2"));
            Network.Models.TagsObject virtualHubParameters = new Network.Models.TagsObject();

            await virtualHub.UpdateAsync(virtualHubParameters);
        }

        [RecordedTest]
        public async Task GetEffectiveVirtualHubRoutesAsync()
        {
            // Example: Effective Routes for a Connection resource
            var virtualHub = GetArmClient().GetVirtualHub(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1"));
            Network.Models.EffectiveRoutesParameters effectiveRoutesParameters = new Network.Models.EffectiveRoutesParameters()
            {
                ResourceId = "/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteGateways/expressRouteGatewayName/expressRouteConnections/connectionName",
                VirtualWanResourceType = "ExpressRouteConnection",
            };

            await virtualHub.GetEffectiveVirtualHubRoutesAsync(effectiveRoutesParameters);
        }

        [RecordedTest]
        public async Task GetEffectiveVirtualHubRoutesAsync2()
        {
            // Example: Effective Routes for a Route Table resource
            var virtualHub = GetArmClient().GetVirtualHub(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1"));
            Network.Models.EffectiveRoutesParameters effectiveRoutesParameters = new Network.Models.EffectiveRoutesParameters()
            {
                ResourceId = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1",
                VirtualWanResourceType = "RouteTable",
            };

            await virtualHub.GetEffectiveVirtualHubRoutesAsync(effectiveRoutesParameters);
        }

        [RecordedTest]
        public async Task GetEffectiveVirtualHubRoutesAsync3()
        {
            // Example: Effective Routes for the Virtual Hub
            var virtualHub = GetArmClient().GetVirtualHub(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1"));
            Network.Models.EffectiveRoutesParameters effectiveRoutesParameters = new Network.Models.EffectiveRoutesParameters();

            await virtualHub.GetEffectiveVirtualHubRoutesAsync(effectiveRoutesParameters);
        }
    }
}
