// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.EventHubs.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.EventHubs.Tests.Mock
{
    /// <summary> Test for AuthorizationRule. </summary>
    public partial class DisasterRecoveryAuthorizationRuleCollectionMockTests : MockTestBase
    {
        public DisasterRecoveryAuthorizationRuleCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: NameSpaceAuthorizationRuleGet
            var collection = GetArmClient().GetDisasterRecovery(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/exampleResourceGroup/providers/Microsoft.EventHub/namespaces/sdk-Namespace-9080/disasterRecoveryConfigs/sdk-DisasterRecovery-4879")).GetDisasterRecoveryAuthorizationRules();
            string authorizationRuleName = "sdk-Authrules-4879";

            await collection.GetAsync(authorizationRuleName);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: ListAuthorizationRules
            var collection = GetArmClient().GetDisasterRecovery(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/exampleResourceGroup/providers/Microsoft.EventHub/namespaces/sdk-Namespace-9080/disasterRecoveryConfigs/sdk-DisasterRecovery-4047")).GetDisasterRecoveryAuthorizationRules();

            collection.GetAllAsync();
        }
    }
}
