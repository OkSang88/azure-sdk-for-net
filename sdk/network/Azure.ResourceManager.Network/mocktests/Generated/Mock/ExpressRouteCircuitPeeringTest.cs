// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for ExpressRouteCircuitPeering. </summary>
    public partial class ExpressRouteCircuitPeeringMockTests : MockTestBase
    {
        public ExpressRouteCircuitPeeringMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get ExpressRouteCircuit Peering
            var expressRouteCircuitPeeringId = Network.ExpressRouteCircuitPeering.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "circuitName", "MicrosoftPeering");
            var expressRouteCircuitPeering = GetArmClient().GetExpressRouteCircuitPeering(expressRouteCircuitPeeringId);

            await expressRouteCircuitPeering.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete ExpressRouteCircuit Peerings
            var expressRouteCircuitPeeringId = Network.ExpressRouteCircuitPeering.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "circuitName", "peeringName");
            var expressRouteCircuitPeering = GetArmClient().GetExpressRouteCircuitPeering(expressRouteCircuitPeeringId);

            await expressRouteCircuitPeering.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task GetArpTableExpressRouteCircuit()
        {
            // Example: List ARP Table
            var expressRouteCircuitPeeringId = Network.ExpressRouteCircuitPeering.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "circuitName", "peeringName");
            var expressRouteCircuitPeering = GetArmClient().GetExpressRouteCircuitPeering(expressRouteCircuitPeeringId);
            string devicePath = "devicePath";

            await expressRouteCircuitPeering.GetArpTableExpressRouteCircuitAsync(true, devicePath);
        }

        [RecordedTest]
        public async Task GetRoutesTableExpressRouteCircuit()
        {
            // Example: List Route Tables
            var expressRouteCircuitPeeringId = Network.ExpressRouteCircuitPeering.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "circuitName", "peeringName");
            var expressRouteCircuitPeering = GetArmClient().GetExpressRouteCircuitPeering(expressRouteCircuitPeeringId);
            string devicePath = "devicePath";

            await expressRouteCircuitPeering.GetRoutesTableExpressRouteCircuitAsync(true, devicePath);
        }

        [RecordedTest]
        public async Task GetRoutesTableSummaryExpressRouteCircuit()
        {
            // Example: List Route Table Summary
            var expressRouteCircuitPeeringId = Network.ExpressRouteCircuitPeering.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "circuitName", "peeringName");
            var expressRouteCircuitPeering = GetArmClient().GetExpressRouteCircuitPeering(expressRouteCircuitPeeringId);
            string devicePath = "devicePath";

            await expressRouteCircuitPeering.GetRoutesTableSummaryExpressRouteCircuitAsync(true, devicePath);
        }

        [RecordedTest]
        public async Task GetPeeringStatsExpressRouteCircuit()
        {
            // Example: Get ExpressRoute Circuit Peering Traffic Stats
            var expressRouteCircuitPeeringId = Network.ExpressRouteCircuitPeering.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "circuitName", "peeringName");
            var expressRouteCircuitPeering = GetArmClient().GetExpressRouteCircuitPeering(expressRouteCircuitPeeringId);

            await expressRouteCircuitPeering.GetPeeringStatsExpressRouteCircuitAsync();
        }
    }
}
