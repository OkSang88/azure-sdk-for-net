// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace StorageCacheManagementClient.Models
{
    public partial class CacheUsernameDownloadSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ExtendedGroups))
            {
                writer.WritePropertyName("extendedGroups");
                writer.WriteBooleanValue(ExtendedGroups.Value);
            }
            if (Optional.IsDefined(UsernameSource))
            {
                writer.WritePropertyName("usernameSource");
                writer.WriteStringValue(UsernameSource.Value.ToString());
            }
            if (Optional.IsDefined(GroupFileURI))
            {
                writer.WritePropertyName("groupFileURI");
                writer.WriteStringValue(GroupFileURI);
            }
            if (Optional.IsDefined(UserFileURI))
            {
                writer.WritePropertyName("userFileURI");
                writer.WriteStringValue(UserFileURI);
            }
            if (Optional.IsDefined(LdapServer))
            {
                writer.WritePropertyName("ldapServer");
                writer.WriteStringValue(LdapServer);
            }
            if (Optional.IsDefined(LdapBaseDN))
            {
                writer.WritePropertyName("ldapBaseDN");
                writer.WriteStringValue(LdapBaseDN);
            }
            if (Optional.IsDefined(EncryptLdapConnection))
            {
                writer.WritePropertyName("encryptLdapConnection");
                writer.WriteBooleanValue(EncryptLdapConnection.Value);
            }
            if (Optional.IsDefined(RequireValidCertificate))
            {
                writer.WritePropertyName("requireValidCertificate");
                writer.WriteBooleanValue(RequireValidCertificate.Value);
            }
            if (Optional.IsDefined(AutoDownloadCertificate))
            {
                writer.WritePropertyName("autoDownloadCertificate");
                writer.WriteBooleanValue(AutoDownloadCertificate.Value);
            }
            if (Optional.IsDefined(CaCertificateURI))
            {
                writer.WritePropertyName("caCertificateURI");
                writer.WriteStringValue(CaCertificateURI);
            }
            if (Optional.IsDefined(Credentials))
            {
                writer.WritePropertyName("credentials");
                writer.WriteObjectValue(Credentials);
            }
            writer.WriteEndObject();
        }

        internal static CacheUsernameDownloadSettings DeserializeCacheUsernameDownloadSettings(JsonElement element)
        {
            Optional<bool> extendedGroups = default;
            Optional<UsernameSource> usernameSource = default;
            Optional<string> groupFileURI = default;
            Optional<string> userFileURI = default;
            Optional<string> ldapServer = default;
            Optional<string> ldapBaseDN = default;
            Optional<bool> encryptLdapConnection = default;
            Optional<bool> requireValidCertificate = default;
            Optional<bool> autoDownloadCertificate = default;
            Optional<string> caCertificateURI = default;
            Optional<UsernameDownloadedType> usernameDownloaded = default;
            Optional<CacheUsernameDownloadSettingsCredentials> credentials = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("extendedGroups"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    extendedGroups = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("usernameSource"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    usernameSource = new UsernameSource(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("groupFileURI"))
                {
                    groupFileURI = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("userFileURI"))
                {
                    userFileURI = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ldapServer"))
                {
                    ldapServer = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ldapBaseDN"))
                {
                    ldapBaseDN = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("encryptLdapConnection"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    encryptLdapConnection = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("requireValidCertificate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    requireValidCertificate = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("autoDownloadCertificate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    autoDownloadCertificate = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("caCertificateURI"))
                {
                    caCertificateURI = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("usernameDownloaded"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    usernameDownloaded = new UsernameDownloadedType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("credentials"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    credentials = CacheUsernameDownloadSettingsCredentials.DeserializeCacheUsernameDownloadSettingsCredentials(property.Value);
                    continue;
                }
            }
            return new CacheUsernameDownloadSettings(Optional.ToNullable(extendedGroups), Optional.ToNullable(usernameSource), groupFileURI.Value, userFileURI.Value, ldapServer.Value, ldapBaseDN.Value, Optional.ToNullable(encryptLdapConnection), Optional.ToNullable(requireValidCertificate), Optional.ToNullable(autoDownloadCertificate), caCertificateURI.Value, Optional.ToNullable(usernameDownloaded), credentials.Value);
        }
    }
}
