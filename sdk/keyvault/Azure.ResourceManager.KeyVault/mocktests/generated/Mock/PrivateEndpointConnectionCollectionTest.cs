// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.KeyVault;
using Azure.ResourceManager.KeyVault.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.KeyVault.Tests.Mock
{
    /// <summary> Test for PrivateEndpointConnection. </summary>
    public partial class PrivateEndpointConnectionCollectionMockTests : MockTestBase
    {
        public PrivateEndpointConnectionCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: KeyVaultPutPrivateEndpointConnection
            string privateEndpointConnectionName = "sample-pec";
            KeyVault.PrivateEndpointConnectionData properties = new KeyVault.PrivateEndpointConnectionData()
            {
                Etag = "",
                PrivateLinkServiceConnectionState = new KeyVault.Models.PrivateLinkServiceConnectionState()
                {
                    Status = new KeyVault.Models.PrivateEndpointServiceConnectionStatus("Approved"),
                    Description = "My name is Joe and I'm approving this.",
                },
            };

            var vaultId = KeyVault.Vault.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sample-group", "sample-vault");
            var collection = GetArmClient().GetVault(vaultId).GetPrivateEndpointConnections();
            await collection.CreateOrUpdateAsync(true, privateEndpointConnectionName, properties);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: KeyVaultGetPrivateEndpointConnection
            string privateEndpointConnectionName = "sample-pec";

            var vaultId = KeyVault.Vault.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sample-group", "sample-vault");
            var collection = GetArmClient().GetVault(vaultId).GetPrivateEndpointConnections();
            await collection.GetAsync(privateEndpointConnectionName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: KeyVaultListPrivateEndpointConnection

            var vaultId = KeyVault.Vault.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sample-group", "sample-vault");
            var collection = GetArmClient().GetVault(vaultId).GetPrivateEndpointConnections();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
