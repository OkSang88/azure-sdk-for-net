// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceFabricMesh.Models
{
    public partial class HttpRouteMatchRule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("path");
            writer.WriteObjectValue(Path);
            if (Optional.IsCollectionDefined(Headers))
            {
                writer.WritePropertyName("headers");
                writer.WriteStartArray();
                foreach (var item in Headers)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static HttpRouteMatchRule DeserializeHttpRouteMatchRule(JsonElement element)
        {
            HttpRouteMatchPath path = default;
            Optional<IList<HttpRouteMatchHeader>> headers = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("path"))
                {
                    path = HttpRouteMatchPath.DeserializeHttpRouteMatchPath(property.Value);
                    continue;
                }
                if (property.NameEquals("headers"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<HttpRouteMatchHeader> array = new List<HttpRouteMatchHeader>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HttpRouteMatchHeader.DeserializeHttpRouteMatchHeader(item));
                    }
                    headers = array;
                    continue;
                }
            }
            return new HttpRouteMatchRule(path, Optional.ToList(headers));
        }
    }
}
