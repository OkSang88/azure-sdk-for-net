// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.StorSimple8000Series.Models;

namespace Azure.ResourceManager.StorSimple8000Series
{
    /// <summary> A class representing collection of BackupSchedule and their operations over its parent. </summary>
    public partial class BackupScheduleCollection : ArmCollection, IEnumerable<BackupSchedule>, IAsyncEnumerable<BackupSchedule>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly BackupSchedulesRestOperations _backupSchedulesRestClient;

        /// <summary> Initializes a new instance of the <see cref="BackupScheduleCollection"/> class for mocking. </summary>
        protected BackupScheduleCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="BackupScheduleCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal BackupScheduleCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _backupSchedulesRestClient = new BackupSchedulesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != BackupPolicy.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, BackupPolicy.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Creates or updates the backup schedule. </summary>
        /// <param name="backupScheduleName"> The backup schedule name. </param>
        /// <param name="parameters"> The backup schedule. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="backupScheduleName"/> or <paramref name="parameters"/> is null. </exception>
        public virtual BackupScheduleCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string backupScheduleName, BackupScheduleData parameters, CancellationToken cancellationToken = default)
        {
            if (backupScheduleName == null)
            {
                throw new ArgumentNullException(nameof(backupScheduleName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("BackupScheduleCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _backupSchedulesRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, backupScheduleName, parameters, cancellationToken);
                var operation = new BackupScheduleCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _backupSchedulesRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, backupScheduleName, parameters).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates the backup schedule. </summary>
        /// <param name="backupScheduleName"> The backup schedule name. </param>
        /// <param name="parameters"> The backup schedule. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="backupScheduleName"/> or <paramref name="parameters"/> is null. </exception>
        public async virtual Task<BackupScheduleCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string backupScheduleName, BackupScheduleData parameters, CancellationToken cancellationToken = default)
        {
            if (backupScheduleName == null)
            {
                throw new ArgumentNullException(nameof(backupScheduleName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("BackupScheduleCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _backupSchedulesRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, backupScheduleName, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new BackupScheduleCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _backupSchedulesRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, backupScheduleName, parameters).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of the specified backup schedule name. </summary>
        /// <param name="backupScheduleName"> The name of the backup schedule to be fetched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="backupScheduleName"/> is null. </exception>
        public virtual Response<BackupSchedule> Get(string backupScheduleName, CancellationToken cancellationToken = default)
        {
            if (backupScheduleName == null)
            {
                throw new ArgumentNullException(nameof(backupScheduleName));
            }

            using var scope = _clientDiagnostics.CreateScope("BackupScheduleCollection.Get");
            scope.Start();
            try
            {
                var response = _backupSchedulesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, backupScheduleName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new BackupSchedule(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of the specified backup schedule name. </summary>
        /// <param name="backupScheduleName"> The name of the backup schedule to be fetched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="backupScheduleName"/> is null. </exception>
        public async virtual Task<Response<BackupSchedule>> GetAsync(string backupScheduleName, CancellationToken cancellationToken = default)
        {
            if (backupScheduleName == null)
            {
                throw new ArgumentNullException(nameof(backupScheduleName));
            }

            using var scope = _clientDiagnostics.CreateScope("BackupScheduleCollection.Get");
            scope.Start();
            try
            {
                var response = await _backupSchedulesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, backupScheduleName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new BackupSchedule(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="backupScheduleName"> The name of the backup schedule to be fetched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="backupScheduleName"/> is null. </exception>
        public virtual Response<BackupSchedule> GetIfExists(string backupScheduleName, CancellationToken cancellationToken = default)
        {
            if (backupScheduleName == null)
            {
                throw new ArgumentNullException(nameof(backupScheduleName));
            }

            using var scope = _clientDiagnostics.CreateScope("BackupScheduleCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _backupSchedulesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, backupScheduleName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<BackupSchedule>(null, response.GetRawResponse());
                return Response.FromValue(new BackupSchedule(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="backupScheduleName"> The name of the backup schedule to be fetched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="backupScheduleName"/> is null. </exception>
        public async virtual Task<Response<BackupSchedule>> GetIfExistsAsync(string backupScheduleName, CancellationToken cancellationToken = default)
        {
            if (backupScheduleName == null)
            {
                throw new ArgumentNullException(nameof(backupScheduleName));
            }

            using var scope = _clientDiagnostics.CreateScope("BackupScheduleCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _backupSchedulesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, backupScheduleName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<BackupSchedule>(null, response.GetRawResponse());
                return Response.FromValue(new BackupSchedule(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="backupScheduleName"> The name of the backup schedule to be fetched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="backupScheduleName"/> is null. </exception>
        public virtual Response<bool> Exists(string backupScheduleName, CancellationToken cancellationToken = default)
        {
            if (backupScheduleName == null)
            {
                throw new ArgumentNullException(nameof(backupScheduleName));
            }

            using var scope = _clientDiagnostics.CreateScope("BackupScheduleCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(backupScheduleName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="backupScheduleName"> The name of the backup schedule to be fetched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="backupScheduleName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string backupScheduleName, CancellationToken cancellationToken = default)
        {
            if (backupScheduleName == null)
            {
                throw new ArgumentNullException(nameof(backupScheduleName));
            }

            using var scope = _clientDiagnostics.CreateScope("BackupScheduleCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(backupScheduleName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets all the backup schedules in a backup policy. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="BackupSchedule" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<BackupSchedule> GetAll(CancellationToken cancellationToken = default)
        {
            Page<BackupSchedule> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("BackupScheduleCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _backupSchedulesRestClient.ListByBackupPolicy(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new BackupSchedule(Parent, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Gets all the backup schedules in a backup policy. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="BackupSchedule" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<BackupSchedule> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<BackupSchedule>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("BackupScheduleCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _backupSchedulesRestClient.ListByBackupPolicyAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new BackupSchedule(Parent, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        IEnumerator<BackupSchedule> IEnumerable<BackupSchedule>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<BackupSchedule> IAsyncEnumerable<BackupSchedule>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, BackupSchedule, BackupScheduleData> Construct() { }
    }
}
