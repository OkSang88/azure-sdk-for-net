// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for SqlDatabase. </summary>
    public partial class SqlDatabaseMockTests : MockTestBase
    {
        public SqlDatabaseMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Gets a database.
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"));

            await sqlDatabase.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: Deletes a database.
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"));

            await sqlDatabase.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: Assigns maintenance window to a database.
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"));
            Sql.Models.DatabaseUpdate parameters = new Sql.Models.DatabaseUpdate()
            {
                Sku = new Sql.Models.Sku(name: "BC_Gen5_4"),
                MaintenanceConfigurationId = "/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_SouthEastAsia_1",
            };

            await sqlDatabase.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task UpdateAsync2()
        {
            // Example: Resets maintenance window of a database to default.
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"));
            Sql.Models.DatabaseUpdate parameters = new Sql.Models.DatabaseUpdate()
            {
                Sku = new Sql.Models.Sku(name: "BC_Gen5_4"),
                MaintenanceConfigurationId = "/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_Default",
            };

            await sqlDatabase.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task UpdateAsync3()
        {
            // Example: Updates a database.
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"));
            Sql.Models.DatabaseUpdate parameters = new Sql.Models.DatabaseUpdate()
            {
                Sku = new Sql.Models.Sku(name: "BC_Gen4_4"),
                MaxSizeBytes = 1073741824,
                LicenseType = new Sql.Models.DatabaseLicenseType("LicenseIncluded"),
            };

            await sqlDatabase.UpdateAsync(parameters);
        }

        [RecordedTest]
        public void GetMetricsAsync()
        {
            // Example: List database usage metrics
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-6730/providers/Microsoft.Sql/servers/sqlcrudtest-9007/databases/3481"));
            string filter = "name/value eq 'cpu_percent' and timeGrain eq '00:10:00' and startTime eq '2017-06-02T18:35:00Z' and endTime eq '2017-06-02T18:55:00Z'";

            sqlDatabase.GetMetricsAsync(filter);
        }

        [RecordedTest]
        public void GetMetricDefinitionsAsync()
        {
            // Example: List database usage metrics
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-6730/providers/Microsoft.Sql/servers/sqlcrudtest-9007/databases/3481"));

            sqlDatabase.GetMetricDefinitionsAsync();
        }

        [RecordedTest]
        public async Task FailoverAsync()
        {
            // Example: Failover an database
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Sql/servers/testServer/databases/testDatabase"));
            Sql.Models.ReplicaType? replicaType = new Sql.Models.ReplicaType("Primary");

            await sqlDatabase.FailoverAsync(replicaType);
        }

        [RecordedTest]
        public async Task PauseAsync()
        {
            // Example: Pauses a database.
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdwdb"));

            await sqlDatabase.PauseAsync();
        }

        [RecordedTest]
        public async Task ResumeAsync()
        {
            // Example: Resumes a database.
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdwdb"));

            await sqlDatabase.ResumeAsync();
        }

        [RecordedTest]
        public async Task UpgradeDataWarehouseAsync()
        {
            // Example: Upgrades a data warehouse.
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdwdb"));

            await sqlDatabase.UpgradeDataWarehouseAsync();
        }

        [RecordedTest]
        public async Task RenameAsync()
        {
            // Example: Renames a database.
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"));
            Sql.Models.ResourceMoveDefinition parameters = new Sql.Models.ResourceMoveDefinition(id: "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/newtestdb");

            await sqlDatabase.RenameAsync(parameters);
        }

        [RecordedTest]
        public async Task ImportAsync()
        {
            // Example: Imports to an existing empty database, using private link to communicate with SQL server and storage account.
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"));
            Sql.Models.ImportExistingDatabaseDefinition parameters = new Sql.Models.ImportExistingDatabaseDefinition(storageKeyType: new Sql.Models.StorageKeyType("StorageAccessKey"), storageKey: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx==", storageUri: "https://test.blob.core.windows.net/test.bacpac", administratorLogin: "login", administratorLoginPassword: "password")
            {
                AuthenticationType = "Sql",
                NetworkIsolation = new Sql.Models.NetworkIsolationSettings()
                {
                    StorageAccountResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Storage/storageAccounts/test-privatelink",
                    SqlServerResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr",
                },
            };

            await sqlDatabase.ImportAsync(parameters);
        }

        [RecordedTest]
        public async Task ImportAsync2()
        {
            // Example: Imports to an existing empty database.
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"));
            Sql.Models.ImportExistingDatabaseDefinition parameters = new Sql.Models.ImportExistingDatabaseDefinition(storageKeyType: new Sql.Models.StorageKeyType("StorageAccessKey"), storageKey: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx==", storageUri: "https://test.blob.core.windows.net/test.bacpac", administratorLogin: "login", administratorLoginPassword: "password")
            {
                AuthenticationType = "Sql",
            };

            await sqlDatabase.ImportAsync(parameters);
        }

        [RecordedTest]
        public async Task ExportAsync()
        {
            // Example: Exports a database, using private link to communicate with SQL server and storage account.
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"));
            Sql.Models.ExportDatabaseDefinition parameters = new Sql.Models.ExportDatabaseDefinition(storageKeyType: new Sql.Models.StorageKeyType("StorageAccessKey"), storageKey: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx==", storageUri: "https://test.blob.core.windows.net/test.bacpac", administratorLogin: "login", administratorLoginPassword: "password")
            {
                AuthenticationType = "Sql",
                NetworkIsolation = new Sql.Models.NetworkIsolationSettings()
                {
                    StorageAccountResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Storage/storageAccounts/test-privatelink",
                    SqlServerResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr",
                },
            };

            await sqlDatabase.ExportAsync(parameters);
        }

        [RecordedTest]
        public async Task ExportAsync2()
        {
            // Example: Exports a database.
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"));
            Sql.Models.ExportDatabaseDefinition parameters = new Sql.Models.ExportDatabaseDefinition(storageKeyType: new Sql.Models.StorageKeyType("StorageAccessKey"), storageKey: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx==", storageUri: "https://test.blob.core.windows.net/test.bacpac", administratorLogin: "login", administratorLoginPassword: "password")
            {
                AuthenticationType = "Sql",
            };

            await sqlDatabase.ExportAsync(parameters);
        }

        [RecordedTest]
        public void GetDatabaseColumnsAsync()
        {
            // Example: Filter database columns
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG/providers/Microsoft.Sql/servers/serverName/databases/myDatabase"));
            IEnumerable<string> schema = new List<string>()
{
"dbo",};
            IEnumerable<string> table = new List<string>()
{
"customer","address",};
            IEnumerable<string> column = new List<string>()
{
"username",};
            IEnumerable<string> orderBy = new List<string>()
{
"schema asc","table","column desc",};
            string skiptoken = null;

            sqlDatabase.GetDatabaseColumnsAsync(schema, table, column, orderBy, skiptoken);
        }

        [RecordedTest]
        public void GetDatabaseColumnsAsync2()
        {
            // Example: List database columns
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG/providers/Microsoft.Sql/servers/serverName/databases/myDatabase"));
            IEnumerable<string> schema = null;
            IEnumerable<string> table = null;
            IEnumerable<string> column = null;
            IEnumerable<string> orderBy = null;
            string skiptoken = null;

            sqlDatabase.GetDatabaseColumnsAsync(schema, table, column, orderBy, skiptoken);
        }

        [RecordedTest]
        public async Task CreateRestorePointAsync()
        {
            // Example: Creates datawarehouse database restore point.
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testserver/databases/testDatabase"));
            Sql.Models.CreateDatabaseRestorePointDefinition parameters = new Sql.Models.CreateDatabaseRestorePointDefinition(restorePointLabel: "mylabel");

            await sqlDatabase.CreateRestorePointAsync(parameters);
        }

        [RecordedTest]
        public void GetCurrentSensitivityLabelsAsync()
        {
            // Example: Gets the current sensitivity labels of a given database
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG/providers/Microsoft.Sql/servers/myServer/databases/myDatabase"));
            string skipToken = null;
            bool? count = null;
            string filter = null;

            sqlDatabase.GetCurrentSensitivityLabelsAsync(skipToken, count, filter);
        }

        [RecordedTest]
        public async Task UpdateSensitivityLabelAsync()
        {
            // Example: Update sensitivity labels of a given database using an operations batch.
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG/providers/Microsoft.Sql/servers/myServer/databases/myDatabase"));
            Sql.Models.SensitivityLabelUpdateList parameters = new Sql.Models.SensitivityLabelUpdateList();

            await sqlDatabase.UpdateSensitivityLabelAsync(parameters);
        }

        [RecordedTest]
        public void GetRecommendedSensitivityLabelsAsync()
        {
            // Example: Gets the recommended sensitivity labels of a given database
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG/providers/Microsoft.Sql/servers/myServer/databases/myDatabase"));
            string skipToken = null;
            bool? includeDisabledRecommendations = null;
            string filter = null;

            sqlDatabase.GetRecommendedSensitivityLabelsAsync(skipToken, includeDisabledRecommendations, filter);
        }

        [RecordedTest]
        public async Task UpdateRecommendedSensitivityLabelAsync()
        {
            // Example: Update recommended sensitivity labels of a given database using an operations batch.
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG/providers/Microsoft.Sql/servers/myServer/databases/myDatabase"));
            Sql.Models.RecommendedSensitivityLabelUpdateList parameters = new Sql.Models.RecommendedSensitivityLabelUpdateList();

            await sqlDatabase.UpdateRecommendedSensitivityLabelAsync(parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateDatabaseExtensionAsync()
        {
            // Example: Create or Update database extensions.
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg_20cbe0f0-c2d9-4522-9177-5469aad53029/providers/Microsoft.Sql/servers/srv_1ffd1cf8-9951-47fb-807d-a9c384763849/databases/878e303f-1ea0-4f17-aa3d-a22ac5e9da08"));
            string extensionName = "polybaseimport";
            Sql.Models.DatabaseExtensions parameters = new Sql.Models.DatabaseExtensions()
            {
                OperationMode = new Sql.Models.OperationMode("PolybaseImport"),
                StorageKeyType = new Sql.Models.StorageKeyType("StorageAccessKey"),
                StorageKey = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                StorageUri = "https://teststorage.blob.core.windows.net/testcontainer/Manifest.xml",
            };

            await sqlDatabase.CreateOrUpdateDatabaseExtensionAsync(extensionName, parameters);
        }

        [RecordedTest]
        public void GetDatabaseExtensionsAsync()
        {
            // Example: List database extensions.
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg_4007c5a9-b3b0-41e1-bd46-9eef38768a4a/providers/Microsoft.Sql/servers/srv_3b67ec2a-519b-43a7-8533-fb62dce3431e/databases/719d8fa4-bf0f-48fc-8cd3-ef40fe6ba1fe"));

            sqlDatabase.GetDatabaseExtensionsAsync();
        }

        [RecordedTest]
        public async Task CancelDatabaseOperationAsync()
        {
            // Example: Cancel the database management operation
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-6661/databases/testdb"));
            Guid operationId = Guid.Parse("f779414b-e748-4925-8cfe-c8598f7660ae");

            await sqlDatabase.CancelDatabaseOperationAsync(operationId);
        }

        [RecordedTest]
        public void GetDatabaseOperationsAsync()
        {
            // Example: List the database management operations
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645/databases/testdb"));

            sqlDatabase.GetDatabaseOperationsAsync();
        }

        [RecordedTest]
        public void GetDatabaseUsagesAsync()
        {
            // Example: Gets database usages.
            var sqlDatabase = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"));

            sqlDatabase.GetDatabaseUsagesAsync();
        }

        [RecordedTest]
        public async Task DataMaskingPolicyGetAsync()
        {
            // Example: Get data masking policy
            var dataMaskingPolicy = GetArmClient().GetDataMaskingPolicy(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Sql/servers/sqlcrudtest-2080/databases/sqlcrudtest-331/dataMaskingPolicies/Default"));

            await dataMaskingPolicy.GetAsync();
        }

        [RecordedTest]
        public async Task DataMaskingPolicyCreateOrUpdateDataMaskingRuleAsync()
        {
            // Example: Create/Update data masking rule for default max
            var dataMaskingPolicy = GetArmClient().GetDataMaskingPolicy(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Sql/servers/sqlcrudtest-2080/databases/sqlcrudtest-331/dataMaskingPolicies/Default"));
            string dataMaskingRuleName = "rule1";
            Sql.Models.DataMaskingRule parameters = new Sql.Models.DataMaskingRule()
            {
                AliasName = "nickname",
                RuleState = Sql.Models.DataMaskingRuleState.Enabled,
                SchemaName = "dbo",
                TableName = "Table_1",
                ColumnName = "test1",
                MaskingFunction = Sql.Models.DataMaskingFunction.Default,
            };

            await dataMaskingPolicy.CreateOrUpdateDataMaskingRuleAsync(dataMaskingRuleName, parameters);
        }

        [RecordedTest]
        public async Task DataMaskingPolicyCreateOrUpdateDataMaskingRuleAsync2()
        {
            // Example: Create/Update data masking rule for default min
            var dataMaskingPolicy = GetArmClient().GetDataMaskingPolicy(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Sql/servers/sqlcrudtest-2080/databases/sqlcrudtest-331/dataMaskingPolicies/Default"));
            string dataMaskingRuleName = "rule1";
            Sql.Models.DataMaskingRule parameters = new Sql.Models.DataMaskingRule()
            {
                SchemaName = "dbo",
                TableName = "Table_1",
                ColumnName = "test1",
                MaskingFunction = Sql.Models.DataMaskingFunction.Default,
            };

            await dataMaskingPolicy.CreateOrUpdateDataMaskingRuleAsync(dataMaskingRuleName, parameters);
        }

        [RecordedTest]
        public async Task DataMaskingPolicyCreateOrUpdateDataMaskingRuleAsync3()
        {
            // Example: Create/Update data masking rule for numbers
            var dataMaskingPolicy = GetArmClient().GetDataMaskingPolicy(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Sql/servers/sqlcrudtest-2080/databases/sqlcrudtest-331/dataMaskingPolicies/Default"));
            string dataMaskingRuleName = "rule1";
            Sql.Models.DataMaskingRule parameters = new Sql.Models.DataMaskingRule()
            {
                SchemaName = "dbo",
                TableName = "Table_1",
                ColumnName = "test1",
                MaskingFunction = Sql.Models.DataMaskingFunction.Number,
                NumberFrom = "0",
                NumberTo = "2",
            };

            await dataMaskingPolicy.CreateOrUpdateDataMaskingRuleAsync(dataMaskingRuleName, parameters);
        }

        [RecordedTest]
        public async Task DataMaskingPolicyCreateOrUpdateDataMaskingRuleAsync4()
        {
            // Example: Create/Update data masking rule for text
            var dataMaskingPolicy = GetArmClient().GetDataMaskingPolicy(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Sql/servers/sqlcrudtest-2080/databases/sqlcrudtest-331/dataMaskingPolicies/Default"));
            string dataMaskingRuleName = "rule1";
            Sql.Models.DataMaskingRule parameters = new Sql.Models.DataMaskingRule()
            {
                SchemaName = "dbo",
                TableName = "Table_1",
                ColumnName = "test1",
                MaskingFunction = Sql.Models.DataMaskingFunction.Text,
                PrefixSize = "1",
                SuffixSize = "0",
                ReplacementString = "asdf",
            };

            await dataMaskingPolicy.CreateOrUpdateDataMaskingRuleAsync(dataMaskingRuleName, parameters);
        }

        [RecordedTest]
        public void DataMaskingPolicyGetDataMaskingRulesAsync()
        {
            // Example: List data masking rules
            var dataMaskingPolicy = GetArmClient().GetDataMaskingPolicy(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Sql/servers/sqlcrudtest-2080/databases/sqlcrudtest-331/dataMaskingPolicies/Default"));

            dataMaskingPolicy.GetDataMaskingRulesAsync();
        }

        [RecordedTest]
        public async Task DatabaseAutomaticTuningGetAsync()
        {
            // Example: Get a database's automatic tuning settings
            var databaseAutomaticTuning = GetArmClient().GetDatabaseAutomaticTuning(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/default-sql-onebox/providers/Microsoft.Sql/servers/testsvr11/databases/db1/automaticTuning/current"));

            await databaseAutomaticTuning.GetAsync();
        }

        [RecordedTest]
        public async Task DatabaseAutomaticTuningUpdateAsync()
        {
            // Example: Updates database automatic tuning settings with all properties
            var databaseAutomaticTuning = GetArmClient().GetDatabaseAutomaticTuning(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/default-sql-onebox/providers/Microsoft.Sql/servers/testsvr11/databases/db1/automaticTuning/current"));
            Sql.DatabaseAutomaticTuningData parameters = new Sql.DatabaseAutomaticTuningData()
            {
                DesiredState = Sql.Models.AutomaticTuningMode.Auto,
            };

            await databaseAutomaticTuning.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task DatabaseAutomaticTuningUpdateAsync2()
        {
            // Example: Updates database automatic tuning settings with minimal properties
            var databaseAutomaticTuning = GetArmClient().GetDatabaseAutomaticTuning(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/default-sql-onebox/providers/Microsoft.Sql/servers/testsvr11/databases/db1/automaticTuning/current"));
            Sql.DatabaseAutomaticTuningData parameters = new Sql.DatabaseAutomaticTuningData()
            {
                DesiredState = Sql.Models.AutomaticTuningMode.Auto,
            };

            await databaseAutomaticTuning.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task MaintenanceWindowOptionsGetAsync()
        {
            // Example: Gets a list of available maintenance windows for a selected database.
            var maintenanceWindowOptions = GetArmClient().GetMaintenanceWindowOptions(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/maintenanceWindowOptions/current"));
            string maintenanceWindowOptionsName = "current";

            await maintenanceWindowOptions.GetAsync(maintenanceWindowOptionsName);
        }

        [RecordedTest]
        public async Task MaintenanceWindowsGetAsync()
        {
            // Example: Gets maintenance window settings for a selected database.
            var maintenanceWindows = GetArmClient().GetMaintenanceWindows(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb/maintenanceWindows/current"));
            string maintenanceWindowName = "current";

            await maintenanceWindows.GetAsync(maintenanceWindowName);
        }
    }
}
