// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace StorSimple8000SeriesManagementClient.Models
{
    /// <summary> The backup element. </summary>
    public partial class BackupElement
    {
        /// <summary> Initializes a new instance of BackupElement. </summary>
        /// <param name="elementId"> The path ID that uniquely identifies the backup element. </param>
        /// <param name="elementName"> The name of the backup element. </param>
        /// <param name="elementType"> The hierarchical type of the backup element. </param>
        /// <param name="sizeInBytes"> The size in bytes. </param>
        /// <param name="volumeName"> The name of the volume. </param>
        /// <param name="volumeContainerId"> The path ID of the volume container. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="elementId"/>, <paramref name="elementName"/>, <paramref name="elementType"/>, <paramref name="volumeName"/>, or <paramref name="volumeContainerId"/> is null. </exception>
        public BackupElement(string elementId, string elementName, string elementType, long sizeInBytes, string volumeName, string volumeContainerId)
        {
            if (elementId == null)
            {
                throw new ArgumentNullException(nameof(elementId));
            }
            if (elementName == null)
            {
                throw new ArgumentNullException(nameof(elementName));
            }
            if (elementType == null)
            {
                throw new ArgumentNullException(nameof(elementType));
            }
            if (volumeName == null)
            {
                throw new ArgumentNullException(nameof(volumeName));
            }
            if (volumeContainerId == null)
            {
                throw new ArgumentNullException(nameof(volumeContainerId));
            }

            ElementId = elementId;
            ElementName = elementName;
            ElementType = elementType;
            SizeInBytes = sizeInBytes;
            VolumeName = volumeName;
            VolumeContainerId = volumeContainerId;
        }

        /// <summary> Initializes a new instance of BackupElement. </summary>
        /// <param name="elementId"> The path ID that uniquely identifies the backup element. </param>
        /// <param name="elementName"> The name of the backup element. </param>
        /// <param name="elementType"> The hierarchical type of the backup element. </param>
        /// <param name="sizeInBytes"> The size in bytes. </param>
        /// <param name="volumeName"> The name of the volume. </param>
        /// <param name="volumeContainerId"> The path ID of the volume container. </param>
        /// <param name="volumeType"> The volume type. </param>
        internal BackupElement(string elementId, string elementName, string elementType, long sizeInBytes, string volumeName, string volumeContainerId, VolumeType? volumeType)
        {
            ElementId = elementId;
            ElementName = elementName;
            ElementType = elementType;
            SizeInBytes = sizeInBytes;
            VolumeName = volumeName;
            VolumeContainerId = volumeContainerId;
            VolumeType = volumeType;
        }

        /// <summary> The path ID that uniquely identifies the backup element. </summary>
        public string ElementId { get; set; }
        /// <summary> The name of the backup element. </summary>
        public string ElementName { get; set; }
        /// <summary> The hierarchical type of the backup element. </summary>
        public string ElementType { get; set; }
        /// <summary> The size in bytes. </summary>
        public long SizeInBytes { get; set; }
        /// <summary> The name of the volume. </summary>
        public string VolumeName { get; set; }
        /// <summary> The path ID of the volume container. </summary>
        public string VolumeContainerId { get; set; }
        /// <summary> The volume type. </summary>
        public VolumeType? VolumeType { get; set; }
    }
}
