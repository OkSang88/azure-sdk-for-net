// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.SqlVirtualMachine;
using Azure.ResourceManager.SqlVirtualMachine.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.SqlVirtualMachine.Tests.Mock
{
    /// <summary> Test for SqlVirtualMachineGroup. </summary>
    public partial class SqlVirtualMachineGroupCollectionMockTests : MockTestBase
    {
        public SqlVirtualMachineGroupCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Creates or updates a SQL virtual machine group.
            string sqlVirtualMachineGroupName = "testvmgroup";
            SqlVirtualMachine.SqlVirtualMachineGroupData parameters = new SqlVirtualMachine.SqlVirtualMachineGroupData(location: "northeurope")
            {
                SqlImageOffer = "SQL2016-WS2016",
                SqlImageSku = new SqlVirtualMachine.Models.SqlVmGroupImageSku("Enterprise"),
                WsfcDomainProfile = new SqlVirtualMachine.Models.WsfcDomainProfile()
                {
                    DomainFqdn = "testdomain.com",
                    OuPath = "OU=WSCluster,DC=testdomain,DC=com",
                    ClusterBootstrapAccount = "testrpadmin",
                    ClusterOperatorAccount = "testrp@testdomain.com",
                    SqlServiceAccount = "sqlservice@testdomain.com",
                    StorageAccountUrl = "https://storgact.blob.core.windows.net/",
                    StorageAccountPrimaryKey = "<primary storage access key>",
                },
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>()
            {
                ["mytag"] = "myval",
            });

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg")).GetSqlVirtualMachineGroups();
            await collection.CreateOrUpdateAsync(true, sqlVirtualMachineGroupName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Gets a SQL virtual machine group.
            string sqlVirtualMachineGroupName = "testvmgroup";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg")).GetSqlVirtualMachineGroups();
            await collection.GetAsync(sqlVirtualMachineGroupName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: Gets all SQL virtual machine groups in a resource group.

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg")).GetSqlVirtualMachineGroups();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
