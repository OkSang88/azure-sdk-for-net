// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ServiceFabricMesh.Models
{
    /// <summary> Enumerates the triggers for auto scaling. </summary>
    public readonly partial struct AutoScalingTriggerKind : IEquatable<AutoScalingTriggerKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AutoScalingTriggerKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AutoScalingTriggerKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AverageLoadValue = "AverageLoad";

        /// <summary> Indicates that scaling should be performed based on average load of all replicas in the service. </summary>
        public static AutoScalingTriggerKind AverageLoad { get; } = new AutoScalingTriggerKind(AverageLoadValue);
        /// <summary> Determines if two <see cref="AutoScalingTriggerKind"/> values are the same. </summary>
        public static bool operator ==(AutoScalingTriggerKind left, AutoScalingTriggerKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AutoScalingTriggerKind"/> values are not the same. </summary>
        public static bool operator !=(AutoScalingTriggerKind left, AutoScalingTriggerKind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AutoScalingTriggerKind"/>. </summary>
        public static implicit operator AutoScalingTriggerKind(string value) => new AutoScalingTriggerKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AutoScalingTriggerKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AutoScalingTriggerKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
