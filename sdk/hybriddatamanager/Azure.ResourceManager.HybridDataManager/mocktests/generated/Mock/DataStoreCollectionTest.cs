// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.HybridDataManager;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.HybridDataManager.Tests.Mock
{
    /// <summary> Test for DataStore. </summary>
    public partial class DataStoreCollectionMockTests : MockTestBase
    {
        public DataStoreCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: DataStores_CreateOrUpdate_DataSinkPUT162
            string dataStoreName = "TestAzureStorage1";
            HybridDataManager.DataStoreData dataStore = new HybridDataManager.DataStoreData(state: HybridDataManager.Models.State.Enabled, dataStoreTypeId: "/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/AzureStorageAccount")
            {
                RepositoryId = "/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.Storage/storageAccounts/dmsdatasink",
                ExtendedProperties = new Dictionary<string, object>()
                {
                    ["extendedSaKey"] = null,
                    ["extendedSaName"] = "/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.Storage/storageAccounts/dmsdatasink",
                    ["storageAccountNameForQueue"] = "/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.Storage/storageAccounts/dmsdatasink",
                }
            ,
            };

            var dataManagerId = HybridDataManager.DataManager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "TestAzureSDKOperations");
            var collection = GetArmClient().GetDataManager(dataManagerId).GetDataStores();
            await collection.CreateOrUpdateAsync(true, dataStoreName, dataStore);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: DataStores_CreateOrUpdate_DataSourcePUT162
            string dataStoreName = "TestStorSimpleSource1";
            HybridDataManager.DataStoreData dataStore = new HybridDataManager.DataStoreData(state: HybridDataManager.Models.State.Enabled, dataStoreTypeId: "/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/StorSimple8000Series")
            {
                RepositoryId = "/subscriptions/c5fc377d-0085-41b9-86b7-cc96dc56d1e9/resourceGroups/ForDMS/providers/Microsoft.StorSimple/managers/BLR8600",
                ExtendedProperties = new Dictionary<string, object>()
                {
                    ["extendedSaKey"] = null,
                    ["resourceId"] = "/subscriptions/c5fc377d-0085-41b9-86b7-cc96dc56d1e9/resourceGroups/ForDMS/providers/Microsoft.StorSimple/managers/BLR8600",
                }
            ,
            };

            var dataManagerId = HybridDataManager.DataManager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "TestAzureSDKOperations");
            var collection = GetArmClient().GetDataManager(dataManagerId).GetDataStores();
            await collection.CreateOrUpdateAsync(true, dataStoreName, dataStore);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: DataStores_GetGET161
            string dataStoreName = "TestStorSimpleSource1";

            var dataManagerId = HybridDataManager.DataManager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "TestAzureSDKOperations");
            var collection = GetArmClient().GetDataManager(dataManagerId).GetDataStores();
            await collection.GetAsync(dataStoreName);
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: DataStores_GetGET162
            string dataStoreName = "TestAzureStorage1";

            var dataManagerId = HybridDataManager.DataManager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "TestAzureSDKOperations");
            var collection = GetArmClient().GetDataManager(dataManagerId).GetDataStores();
            await collection.GetAsync(dataStoreName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: DataStores_ListByDataManagerGET151
            string filter = null;

            var dataManagerId = HybridDataManager.DataManager.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "TestAzureSDKOperations");
            var collection = GetArmClient().GetDataManager(dataManagerId).GetDataStores();
            await foreach (var _ in collection.GetAllAsync(filter))
            {
            }
        }
    }
}
