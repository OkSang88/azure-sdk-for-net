// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.StorSimple8000Series.Models;

namespace Azure.ResourceManager.StorSimple8000Series
{
    public partial class VolumeContainerData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind");
                writer.WriteStringValue(Kind);
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(EncryptionKey))
            {
                writer.WritePropertyName("encryptionKey");
                writer.WriteObjectValue(EncryptionKey);
            }
            writer.WritePropertyName("storageAccountCredentialId");
            writer.WriteStringValue(StorageAccountCredentialId);
            if (Optional.IsDefined(BandWidthRateInMbps))
            {
                writer.WritePropertyName("bandWidthRateInMbps");
                writer.WriteNumberValue(BandWidthRateInMbps.Value);
            }
            if (Optional.IsDefined(BandwidthSettingId))
            {
                writer.WritePropertyName("bandwidthSettingId");
                writer.WriteStringValue(BandwidthSettingId);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static VolumeContainerData DeserializeVolumeContainerData(JsonElement element)
        {
            Optional<string> kind = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<AsymmetricEncryptedSecret> encryptionKey = default;
            Optional<EncryptionStatus> encryptionStatus = default;
            Optional<int> volumeCount = default;
            string storageAccountCredentialId = default;
            Optional<OwnerShipStatus> ownerShipStatus = default;
            Optional<int> bandWidthRateInMbps = default;
            Optional<string> bandwidthSettingId = default;
            Optional<long> totalCloudStorageUsageInBytes = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("encryptionKey"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            encryptionKey = AsymmetricEncryptedSecret.DeserializeAsymmetricEncryptedSecret(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("encryptionStatus"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            encryptionStatus = property0.Value.GetString().ToEncryptionStatus();
                            continue;
                        }
                        if (property0.NameEquals("volumeCount"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            volumeCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("storageAccountCredentialId"))
                        {
                            storageAccountCredentialId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("ownerShipStatus"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            ownerShipStatus = property0.Value.GetString().ToOwnerShipStatus();
                            continue;
                        }
                        if (property0.NameEquals("bandWidthRateInMbps"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            bandWidthRateInMbps = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("bandwidthSettingId"))
                        {
                            bandwidthSettingId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("totalCloudStorageUsageInBytes"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            totalCloudStorageUsageInBytes = property0.Value.GetInt64();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new VolumeContainerData(id, name, type, kind.Value, encryptionKey.Value, Optional.ToNullable(encryptionStatus), Optional.ToNullable(volumeCount), storageAccountCredentialId, Optional.ToNullable(ownerShipStatus), Optional.ToNullable(bandWidthRateInMbps), bandwidthSettingId.Value, Optional.ToNullable(totalCloudStorageUsageInBytes));
        }
    }
}
