// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.ServiceFabricManagedClusters;
using Azure.ResourceManager.ServiceFabricManagedClusters.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.ServiceFabricManagedClusters.Tests.Mock
{
    /// <summary> Test for ServiceResource. </summary>
    public partial class ServiceResourceCollectionMockTests : MockTestBase
    {
        public ServiceResourceCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Put a service with maximum parameters
            string serviceName = "myService";
            ServiceFabricManagedClusters.ServiceResourceData parameters = new ServiceFabricManagedClusters.ServiceResourceData(location: "eastus")
            {
                Properties = new ServiceFabricManagedClusters.Models.StatelessServiceProperties(serviceTypeName: "myServiceType", partitionDescription: new ServiceFabricManagedClusters.Models.SingletonPartitionScheme()
                {
                    PartitionScheme = new ServiceFabricManagedClusters.Models.PartitionScheme("Singleton"),
                }, instanceCount: 5)
                {
                    MinInstanceCount = 3,
                    MinInstancePercentage = 30,
                    ServiceKind = new ServiceFabricManagedClusters.Models.ServiceKind("Stateless"),
                    ServicePackageActivationMode = new ServiceFabricManagedClusters.Models.ServicePackageActivationMode("SharedProcess"),
                    PlacementConstraints = "NodeType==frontend",
                    DefaultMoveCost = new ServiceFabricManagedClusters.Models.MoveCost("Medium"),
                },
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>()
            {
                ["a"] = "b",
            });

            var applicationResourceId = ServiceFabricManagedClusters.ApplicationResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster", "myApp");
            var collection = GetArmClient().GetApplicationResource(applicationResourceId).GetServiceResources();
            await collection.CreateOrUpdateAsync(true, serviceName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Put a service with minimum parameters
            string serviceName = "myService";
            ServiceFabricManagedClusters.ServiceResourceData parameters = new ServiceFabricManagedClusters.ServiceResourceData(location: "eastus")
            {
                Properties = new ServiceFabricManagedClusters.Models.StatelessServiceProperties(serviceTypeName: "myServiceType", partitionDescription: new ServiceFabricManagedClusters.Models.SingletonPartitionScheme()
                {
                    PartitionScheme = new ServiceFabricManagedClusters.Models.PartitionScheme("Singleton"),
                }, instanceCount: 1)
                {
                    ServiceKind = new ServiceFabricManagedClusters.Models.ServiceKind("Stateless"),
                },
            };

            var applicationResourceId = ServiceFabricManagedClusters.ApplicationResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster", "myApp");
            var collection = GetArmClient().GetApplicationResource(applicationResourceId).GetServiceResources();
            await collection.CreateOrUpdateAsync(true, serviceName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get a service
            string serviceName = "myService";

            var applicationResourceId = ServiceFabricManagedClusters.ApplicationResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster", "myApp");
            var collection = GetArmClient().GetApplicationResource(applicationResourceId).GetServiceResources();
            await collection.GetAsync(serviceName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: Get a list of service resources

            var applicationResourceId = ServiceFabricManagedClusters.ApplicationResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster", "myApp");
            var collection = GetArmClient().GetApplicationResource(applicationResourceId).GetServiceResources();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
