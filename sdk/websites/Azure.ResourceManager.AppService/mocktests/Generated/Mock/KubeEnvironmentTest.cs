// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.AppService;
using Azure.ResourceManager.AppService.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.AppService.Tests.Mock
{
    /// <summary> Test for KubeEnvironment. </summary>
    public partial class KubeEnvironmentMockTests : MockTestBase
    {
        public KubeEnvironmentMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get kube environments by name
            var kubeEnvironmentId = AppService.KubeEnvironment.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "examplerg", "jlaw-demo1");
            var kubeEnvironment = GetArmClient().GetKubeEnvironment(kubeEnvironmentId);

            await kubeEnvironment.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete kube environment by name
            var kubeEnvironmentId = AppService.KubeEnvironment.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "examplerg", "examplekenv");
            var kubeEnvironment = GetArmClient().GetKubeEnvironment(kubeEnvironmentId);

            await kubeEnvironment.DeleteAsync();
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Update kube environments
            var kubeEnvironmentId = AppService.KubeEnvironment.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "examplerg", "testkubeenv");
            var kubeEnvironment = GetArmClient().GetKubeEnvironment(kubeEnvironmentId);
            AppService.Models.KubeEnvironmentPatchResource kubeEnvironmentEnvelope = new AppService.Models.KubeEnvironmentPatchResource()
            {
                StaticIp = "1.2.3.4",
            };

            await kubeEnvironment.UpdateAsync(kubeEnvironmentEnvelope);
        }
    }
}
