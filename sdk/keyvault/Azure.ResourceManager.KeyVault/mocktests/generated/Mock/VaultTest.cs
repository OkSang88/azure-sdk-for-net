// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.KeyVault.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.KeyVault.Tests.Mock
{
    /// <summary> Test for Vault. </summary>
    public partial class VaultMockTests : MockTestBase
    {
        public VaultMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Retrieve a vault
            var vault = GetArmClient().GetVault(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-resource-group/providers/Microsoft.KeyVault/vaults/sample-vault"));

            await vault.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: Delete a vault
            var vault = GetArmClient().GetVault(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-resource-group/providers/Microsoft.KeyVault/vaults/sample-vault"));

            await vault.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: Update an existing vault
            var vault = GetArmClient().GetVault(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-resource-group/providers/Microsoft.KeyVault/vaults/sample-vault"));
            KeyVault.Models.VaultPatchParameters parameters = new KeyVault.Models.VaultPatchParameters()
            {
                Properties = new KeyVault.Models.VaultPatchProperties()
                {
                    TenantId = Guid.Parse("00000000-0000-0000-0000-000000000000"),
                    Sku = new KeyVault.Models.Sku(family: new KeyVault.Models.SkuFamily("A"), name: KeyVault.Models.SkuName.Standard),
                    EnabledForDeployment = true,
                    EnabledForDiskEncryption = true,
                    EnabledForTemplateDeployment = true,
                },
            };

            await vault.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task UpdateAccessPolicyAsync()
        {
            // Example: Add an access policy, or update an access policy with new permissions
            var vault = GetArmClient().GetVault(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault"));
            KeyVault.Models.AccessPolicyUpdateKind operationKind = KeyVault.Models.AccessPolicyUpdateKind.Add;
            KeyVault.Models.VaultAccessPolicyParameters parameters = new KeyVault.Models.VaultAccessPolicyParameters(properties: new KeyVault.Models.VaultAccessPolicyProperties(accessPolicies: new List<KeyVault.Models.AccessPolicyEntry>()
{
new KeyVault.Models.AccessPolicyEntry(tenantId: Guid.Parse("00000000-0000-0000-0000-000000000000"),objectId: "00000000-0000-0000-0000-000000000000",permissions: new KeyVault.Models.Permissions()),}));

            await vault.UpdateAccessPolicyAsync(operationKind, parameters);
        }

        [RecordedTest]
        public async Task GetPrivateLinkResourcesAsync()
        {
            // Example: KeyVaultListPrivateLinkResources
            var vault = GetArmClient().GetVault(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-group/providers/Microsoft.KeyVault/vaults/sample-vault"));

            await vault.GetPrivateLinkResourcesAsync();
        }
    }
}
