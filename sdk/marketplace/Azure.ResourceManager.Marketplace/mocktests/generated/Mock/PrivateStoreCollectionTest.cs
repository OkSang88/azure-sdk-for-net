// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Marketplace;
using Azure.ResourceManager.Marketplace.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Marketplace.Tests.Mock
{
    /// <summary> Test for PrivateStore. </summary>
    public partial class PrivateStoreCollectionMockTests : MockTestBase
    {
        public PrivateStoreCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: PrivateStores_update
            string privateStoreId = "a0e28e55-90c4-41d8-8e34-bb7ef7775406";
            Marketplace.PrivateStoreData payload = new Marketplace.PrivateStoreData()
            {
                Availability = new Marketplace.Models.Availability("disabled"),
                ETag = "\"9301f4fd-0000-0100-0000-5e248b350345\"",
            };

            var collection = GetArmClient().GetTenants().GetAll().GetEnumerator().Current.GetPrivateStores();
            await collection.CreateOrUpdateAsync(true, privateStoreId, payload);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: GetPrivateStore
            string privateStoreId = "a0e28e55-90c4-41d8-8e34-bb7ef7775406";

            var collection = GetArmClient().GetTenants().GetAll().GetEnumerator().Current.GetPrivateStores();
            await collection.GetAsync(privateStoreId);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: GetPrivateStores
            string useCache = null;

            var collection = GetArmClient().GetTenants().GetAll().GetEnumerator().Current.GetPrivateStores();
            await foreach (var _ in collection.GetAllAsync(useCache))
            {
            }
        }
    }
}
