// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Storage;
using Azure.ResourceManager.Storage.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Storage.Tests.Mock
{
    /// <summary> Test for EncryptionScope. </summary>
    public partial class EncryptionScopeMockTests : MockTestBase
    {
        public EncryptionScopeMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: StorageAccountGetEncryptionScope
            var encryptionScope = GetArmClient().GetEncryptionScope(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.Storage/storageAccounts/{{storage-account-name}}/encryptionScopes/{{encryption-scope-name}}"));

            await encryptionScope.GetAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: StorageAccountPatchEncryptionScope
            var encryptionScope = GetArmClient().GetEncryptionScope(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.Storage/storageAccounts/{{storage-account-name}}/encryptionScopes/{{encryption-scope-name}}"));
            Storage.EncryptionScopeData encryptionScope2 = new Storage.EncryptionScopeData()
            {
                Source = new Storage.Models.EncryptionScopeSource("Microsoft.KeyVault"),
                KeyVaultProperties = new Storage.Models.EncryptionScopeKeyVaultProperties()
                {
                    KeyUri = "https://testvault.vault.core.windows.net/keys/key1/863425f1358359c",
                },
            };

            await encryptionScope.UpdateAsync(encryptionScope2);
        }
    }
}
