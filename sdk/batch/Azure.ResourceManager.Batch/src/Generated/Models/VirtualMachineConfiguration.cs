// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Batch.Models
{
    /// <summary> The configuration for compute nodes in a pool based on the Azure Virtual Machines infrastructure. </summary>
    public partial class VirtualMachineConfiguration
    {
        /// <summary> Initializes a new instance of VirtualMachineConfiguration. </summary>
        /// <param name="imageReference"> A reference to an Azure Virtual Machines Marketplace image or the Azure Image resource of a custom Virtual Machine. To get the list of all imageReferences verified by Azure Batch, see the &apos;List supported node agent SKUs&apos; operation. </param>
        /// <param name="nodeAgentSkuId"> The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the &apos;List supported node agent SKUs&apos; operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="imageReference"/> or <paramref name="nodeAgentSkuId"/> is null. </exception>
        public VirtualMachineConfiguration(ImageReference imageReference, string nodeAgentSkuId)
        {
            if (imageReference == null)
            {
                throw new ArgumentNullException(nameof(imageReference));
            }
            if (nodeAgentSkuId == null)
            {
                throw new ArgumentNullException(nameof(nodeAgentSkuId));
            }

            ImageReference = imageReference;
            NodeAgentSkuId = nodeAgentSkuId;
            DataDisks = new ChangeTrackingList<DataDisk>();
            Extensions = new ChangeTrackingList<VMExtension>();
        }

        /// <summary> Initializes a new instance of VirtualMachineConfiguration. </summary>
        /// <param name="imageReference"> A reference to an Azure Virtual Machines Marketplace image or the Azure Image resource of a custom Virtual Machine. To get the list of all imageReferences verified by Azure Batch, see the &apos;List supported node agent SKUs&apos; operation. </param>
        /// <param name="nodeAgentSkuId"> The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the &apos;List supported node agent SKUs&apos; operation. </param>
        /// <param name="windowsConfiguration"> This property must not be specified if the imageReference specifies a Linux OS image. </param>
        /// <param name="dataDisks"> This property must be specified if the compute nodes in the pool need to have empty data disks attached to them. </param>
        /// <param name="licenseType">
        /// This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
        /// 
        ///  Windows_Server - The on-premises license is for Windows Server.
        ///  Windows_Client - The on-premises license is for Windows Client.
        /// 
        /// </param>
        /// <param name="containerConfiguration"> If specified, setup is performed on each node in the pool to allow tasks to run in containers. All regular tasks and job manager tasks run on this pool must specify the containerSettings property, and all other tasks may specify it. </param>
        /// <param name="diskEncryptionConfiguration"> If specified, encryption is performed on each node in the pool during node provisioning. </param>
        /// <param name="nodePlacementConfiguration"> This configuration will specify rules on how nodes in the pool will be physically allocated. </param>
        /// <param name="extensions"> If specified, the extensions mentioned in this configuration will be installed on each node. </param>
        /// <param name="osDisk"> Contains configuration for ephemeral OSDisk settings. </param>
        internal VirtualMachineConfiguration(ImageReference imageReference, string nodeAgentSkuId, WindowsConfiguration windowsConfiguration, IList<DataDisk> dataDisks, string licenseType, ContainerConfiguration containerConfiguration, DiskEncryptionConfiguration diskEncryptionConfiguration, NodePlacementConfiguration nodePlacementConfiguration, IList<VMExtension> extensions, OSDisk osDisk)
        {
            ImageReference = imageReference;
            NodeAgentSkuId = nodeAgentSkuId;
            WindowsConfiguration = windowsConfiguration;
            DataDisks = dataDisks;
            LicenseType = licenseType;
            ContainerConfiguration = containerConfiguration;
            DiskEncryptionConfiguration = diskEncryptionConfiguration;
            NodePlacementConfiguration = nodePlacementConfiguration;
            Extensions = extensions;
            OsDisk = osDisk;
        }

        /// <summary> A reference to an Azure Virtual Machines Marketplace image or the Azure Image resource of a custom Virtual Machine. To get the list of all imageReferences verified by Azure Batch, see the &apos;List supported node agent SKUs&apos; operation. </summary>
        public ImageReference ImageReference { get; set; }
        /// <summary> The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the &apos;List supported node agent SKUs&apos; operation. </summary>
        public string NodeAgentSkuId { get; set; }
        /// <summary> This property must not be specified if the imageReference specifies a Linux OS image. </summary>
        public WindowsConfiguration WindowsConfiguration { get; set; }
        /// <summary> This property must be specified if the compute nodes in the pool need to have empty data disks attached to them. </summary>
        public IList<DataDisk> DataDisks { get; }
        /// <summary>
        /// This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
        /// 
        ///  Windows_Server - The on-premises license is for Windows Server.
        ///  Windows_Client - The on-premises license is for Windows Client.
        /// 
        /// </summary>
        public string LicenseType { get; set; }
        /// <summary> If specified, setup is performed on each node in the pool to allow tasks to run in containers. All regular tasks and job manager tasks run on this pool must specify the containerSettings property, and all other tasks may specify it. </summary>
        public ContainerConfiguration ContainerConfiguration { get; set; }
        /// <summary> If specified, encryption is performed on each node in the pool during node provisioning. </summary>
        public DiskEncryptionConfiguration DiskEncryptionConfiguration { get; set; }
        /// <summary> This configuration will specify rules on how nodes in the pool will be physically allocated. </summary>
        public NodePlacementConfiguration NodePlacementConfiguration { get; set; }
        /// <summary> If specified, the extensions mentioned in this configuration will be installed on each node. </summary>
        public IList<VMExtension> Extensions { get; }
        /// <summary> Contains configuration for ephemeral OSDisk settings. </summary>
        public OSDisk OsDisk { get; set; }
    }
}
