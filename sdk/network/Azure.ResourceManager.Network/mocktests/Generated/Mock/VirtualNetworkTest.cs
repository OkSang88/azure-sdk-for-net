// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for VirtualNetwork. </summary>
    public partial class VirtualNetworkMockTests : MockTestBase
    {
        public VirtualNetworkMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get virtual network
            var virtualNetwork = GetArmClient().GetVirtualNetwork(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet"));
            string expand = null;

            await virtualNetwork.GetAsync(expand);
        }

        [RecordedTest]
        public async Task GetAsync2()
        {
            // Example: Get virtual network with a delegated subnet
            var virtualNetwork = GetArmClient().GetVirtualNetwork(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet"));
            string expand = null;

            await virtualNetwork.GetAsync(expand);
        }

        [RecordedTest]
        public async Task GetAsync3()
        {
            // Example: Get virtual network with service association links
            var virtualNetwork = GetArmClient().GetVirtualNetwork(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet"));
            string expand = null;

            await virtualNetwork.GetAsync(expand);
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: Delete virtual network
            var virtualNetwork = GetArmClient().GetVirtualNetwork(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet"));

            await virtualNetwork.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: Update virtual network tags
            var virtualNetwork = GetArmClient().GetVirtualNetwork(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet"));
            Network.Models.TagsObject parameters = new Network.Models.TagsObject();

            await virtualNetwork.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task CheckIPAddressAvailabilityAsync()
        {
            // Example: Check IP address availability
            var virtualNetwork = GetArmClient().GetVirtualNetwork(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet"));
            string ipAddress = "10.0.1.4";

            await virtualNetwork.CheckIPAddressAvailabilityAsync(ipAddress);
        }

        [RecordedTest]
        public void GetUsageAsync()
        {
            // Example: VnetGetUsage
            var virtualNetwork = GetArmClient().GetVirtualNetwork(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetName"));

            virtualNetwork.GetUsageAsync();
        }
    }
}
