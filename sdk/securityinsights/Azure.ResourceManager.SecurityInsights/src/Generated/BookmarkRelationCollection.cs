// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.SecurityInsights.Models;

namespace Azure.ResourceManager.SecurityInsights
{
    /// <summary> A class representing collection of Relation and their operations over its parent. </summary>
    public partial class BookmarkRelationCollection : ArmCollection, IEnumerable<BookmarkRelation>, IAsyncEnumerable<BookmarkRelation>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly BookmarkRelationsRestOperations _bookmarkRelationsRestClient;

        /// <summary> Initializes a new instance of the <see cref="BookmarkRelationCollection"/> class for mocking. </summary>
        protected BookmarkRelationCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="BookmarkRelationCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal BookmarkRelationCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            ClientOptions.TryGetApiVersion(BookmarkRelation.ResourceType, out string apiVersion);
            _bookmarkRelationsRestClient = new BookmarkRelationsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != Bookmark.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, Bookmark.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Creates the bookmark relation. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="relationName"> Relation Name. </param>
        /// <param name="relation"> The relation model. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="relationName"/> or <paramref name="relation"/> is null. </exception>
        public virtual BookmarkRelationCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string relationName, RelationData relation, CancellationToken cancellationToken = default)
        {
            if (relationName == null)
            {
                throw new ArgumentNullException(nameof(relationName));
            }
            if (relation == null)
            {
                throw new ArgumentNullException(nameof(relation));
            }

            using var scope = _clientDiagnostics.CreateScope("BookmarkRelationCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _bookmarkRelationsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, relationName, relation, cancellationToken);
                var operation = new BookmarkRelationCreateOrUpdateOperation(this, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates the bookmark relation. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="relationName"> Relation Name. </param>
        /// <param name="relation"> The relation model. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="relationName"/> or <paramref name="relation"/> is null. </exception>
        public async virtual Task<BookmarkRelationCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string relationName, RelationData relation, CancellationToken cancellationToken = default)
        {
            if (relationName == null)
            {
                throw new ArgumentNullException(nameof(relationName));
            }
            if (relation == null)
            {
                throw new ArgumentNullException(nameof(relation));
            }

            using var scope = _clientDiagnostics.CreateScope("BookmarkRelationCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _bookmarkRelationsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, relationName, relation, cancellationToken).ConfigureAwait(false);
                var operation = new BookmarkRelationCreateOrUpdateOperation(this, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a bookmark relation. </summary>
        /// <param name="relationName"> Relation Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="relationName"/> is null. </exception>
        public virtual Response<BookmarkRelation> Get(string relationName, CancellationToken cancellationToken = default)
        {
            if (relationName == null)
            {
                throw new ArgumentNullException(nameof(relationName));
            }

            using var scope = _clientDiagnostics.CreateScope("BookmarkRelationCollection.Get");
            scope.Start();
            try
            {
                var response = _bookmarkRelationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, relationName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new BookmarkRelation(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a bookmark relation. </summary>
        /// <param name="relationName"> Relation Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="relationName"/> is null. </exception>
        public async virtual Task<Response<BookmarkRelation>> GetAsync(string relationName, CancellationToken cancellationToken = default)
        {
            if (relationName == null)
            {
                throw new ArgumentNullException(nameof(relationName));
            }

            using var scope = _clientDiagnostics.CreateScope("BookmarkRelationCollection.Get");
            scope.Start();
            try
            {
                var response = await _bookmarkRelationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, relationName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new BookmarkRelation(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="relationName"> Relation Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="relationName"/> is null. </exception>
        public virtual Response<BookmarkRelation> GetIfExists(string relationName, CancellationToken cancellationToken = default)
        {
            if (relationName == null)
            {
                throw new ArgumentNullException(nameof(relationName));
            }

            using var scope = _clientDiagnostics.CreateScope("BookmarkRelationCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _bookmarkRelationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, relationName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<BookmarkRelation>(null, response.GetRawResponse());
                return Response.FromValue(new BookmarkRelation(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="relationName"> Relation Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="relationName"/> is null. </exception>
        public async virtual Task<Response<BookmarkRelation>> GetIfExistsAsync(string relationName, CancellationToken cancellationToken = default)
        {
            if (relationName == null)
            {
                throw new ArgumentNullException(nameof(relationName));
            }

            using var scope = _clientDiagnostics.CreateScope("BookmarkRelationCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _bookmarkRelationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, relationName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<BookmarkRelation>(null, response.GetRawResponse());
                return Response.FromValue(new BookmarkRelation(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="relationName"> Relation Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="relationName"/> is null. </exception>
        public virtual Response<bool> Exists(string relationName, CancellationToken cancellationToken = default)
        {
            if (relationName == null)
            {
                throw new ArgumentNullException(nameof(relationName));
            }

            using var scope = _clientDiagnostics.CreateScope("BookmarkRelationCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(relationName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="relationName"> Relation Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="relationName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string relationName, CancellationToken cancellationToken = default)
        {
            if (relationName == null)
            {
                throw new ArgumentNullException(nameof(relationName));
            }

            using var scope = _clientDiagnostics.CreateScope("BookmarkRelationCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(relationName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets all bookmark relations. </summary>
        /// <param name="filter"> Filters the results, based on a Boolean condition. Optional. </param>
        /// <param name="orderby"> Sorts the results. Optional. </param>
        /// <param name="top"> Returns only the first n results. Optional. </param>
        /// <param name="skipToken"> Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. Optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="BookmarkRelation" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<BookmarkRelation> GetAll(string filter = null, string orderby = null, int? top = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            Page<BookmarkRelation> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("BookmarkRelationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _bookmarkRelationsRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, orderby, top, skipToken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new BookmarkRelation(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<BookmarkRelation> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("BookmarkRelationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _bookmarkRelationsRestClient.ListNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, orderby, top, skipToken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new BookmarkRelation(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all bookmark relations. </summary>
        /// <param name="filter"> Filters the results, based on a Boolean condition. Optional. </param>
        /// <param name="orderby"> Sorts the results. Optional. </param>
        /// <param name="top"> Returns only the first n results. Optional. </param>
        /// <param name="skipToken"> Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. Optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="BookmarkRelation" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<BookmarkRelation> GetAllAsync(string filter = null, string orderby = null, int? top = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<BookmarkRelation>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("BookmarkRelationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _bookmarkRelationsRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, orderby, top, skipToken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new BookmarkRelation(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<BookmarkRelation>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("BookmarkRelationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _bookmarkRelationsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, orderby, top, skipToken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new BookmarkRelation(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<BookmarkRelation> IEnumerable<BookmarkRelation>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<BookmarkRelation> IAsyncEnumerable<BookmarkRelation>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, BookmarkRelation, RelationData> Construct() { }
    }
}
