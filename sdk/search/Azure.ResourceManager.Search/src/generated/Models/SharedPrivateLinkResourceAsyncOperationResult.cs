// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace SearchManagementClient.Models
{
    /// <summary> The current status of the long running asynchronous shared private link resource operation. </summary>
    internal readonly partial struct SharedPrivateLinkResourceAsyncOperationResult : IEquatable<SharedPrivateLinkResourceAsyncOperationResult>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SharedPrivateLinkResourceAsyncOperationResult"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SharedPrivateLinkResourceAsyncOperationResult(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RunningValue = "Running";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";

        /// <summary> Running. </summary>
        public static SharedPrivateLinkResourceAsyncOperationResult Running { get; } = new SharedPrivateLinkResourceAsyncOperationResult(RunningValue);
        /// <summary> Succeeded. </summary>
        public static SharedPrivateLinkResourceAsyncOperationResult Succeeded { get; } = new SharedPrivateLinkResourceAsyncOperationResult(SucceededValue);
        /// <summary> Failed. </summary>
        public static SharedPrivateLinkResourceAsyncOperationResult Failed { get; } = new SharedPrivateLinkResourceAsyncOperationResult(FailedValue);
        /// <summary> Determines if two <see cref="SharedPrivateLinkResourceAsyncOperationResult"/> values are the same. </summary>
        public static bool operator ==(SharedPrivateLinkResourceAsyncOperationResult left, SharedPrivateLinkResourceAsyncOperationResult right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SharedPrivateLinkResourceAsyncOperationResult"/> values are not the same. </summary>
        public static bool operator !=(SharedPrivateLinkResourceAsyncOperationResult left, SharedPrivateLinkResourceAsyncOperationResult right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SharedPrivateLinkResourceAsyncOperationResult"/>. </summary>
        public static implicit operator SharedPrivateLinkResourceAsyncOperationResult(string value) => new SharedPrivateLinkResourceAsyncOperationResult(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SharedPrivateLinkResourceAsyncOperationResult other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SharedPrivateLinkResourceAsyncOperationResult other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
