// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using ServiceFabricMeshManagementClient.Models;

namespace ServiceFabricMeshManagementClient
{
    public partial class ApplicationResourceDescriptionData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("tags");
            writer.WriteStartObject();
            foreach (var item in Tags)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("location");
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(Services))
            {
                writer.WritePropertyName("services");
                writer.WriteStartArray();
                foreach (var item in Services)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Diagnostics))
            {
                writer.WritePropertyName("diagnostics");
                writer.WriteObjectValue(Diagnostics);
            }
            if (Optional.IsDefined(DebugParams))
            {
                writer.WritePropertyName("debugParams");
                writer.WriteStringValue(DebugParams);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static ApplicationResourceDescriptionData DeserializeApplicationResourceDescriptionData(JsonElement element)
        {
            IDictionary<string, string> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<string> provisioningState = default;
            Optional<string> description = default;
            Optional<IList<ServiceResourceDescriptionData>> services = default;
            Optional<DiagnosticsDescription> diagnostics = default;
            Optional<string> debugParams = default;
            Optional<IReadOnlyList<string>> serviceNames = default;
            Optional<ResourceStatus> status = default;
            Optional<string> statusDetails = default;
            Optional<HealthState> healthState = default;
            Optional<string> unhealthyEvaluation = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tags"))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    location = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("provisioningState"))
                        {
                            provisioningState = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("description"))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("services"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<ServiceResourceDescriptionData> array = new List<ServiceResourceDescriptionData>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ServiceResourceDescriptionData.DeserializeServiceResourceDescriptionData(item));
                            }
                            services = array;
                            continue;
                        }
                        if (property0.NameEquals("diagnostics"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            diagnostics = DiagnosticsDescription.DeserializeDiagnosticsDescription(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("debugParams"))
                        {
                            debugParams = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("serviceNames"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            serviceNames = array;
                            continue;
                        }
                        if (property0.NameEquals("status"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            status = new ResourceStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("statusDetails"))
                        {
                            statusDetails = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("healthState"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            healthState = new HealthState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("unhealthyEvaluation"))
                        {
                            unhealthyEvaluation = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ApplicationResourceDescriptionData(id, name, type, tags, location, provisioningState.Value, description.Value, Optional.ToList(services), diagnostics.Value, debugParams.Value, Optional.ToList(serviceNames), Optional.ToNullable(status), statusDetails.Value, Optional.ToNullable(healthState), unhealthyEvaluation.Value);
        }
    }
}
