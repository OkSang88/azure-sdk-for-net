// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.RecoveryServicesSiteRecovery.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery
{
    public partial class Sample_NetworkMappingResource
    {
        // Gets network mapping by name.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetsNetworkMappingByName()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationNetworkMappings_Get.json
            // this example is just showing the usage of "ReplicationNetworkMappings_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this NetworkMappingResource created on azure
            // for more information of creating NetworkMappingResource, please refer to the document of NetworkMappingResource
            string subscriptionId = "9112a37f-0f3e-46ec-9c00-060c6edca071";
            string resourceGroupName = "srcBvte2a14C27";
            string resourceName = "srce2avaultbvtaC27";
            string fabricName = "b0cef6e9a4437b81803d0b55ada4f700ab66caae59c35d62723a1589c0cd13ac";
            string networkName = "e2267b5c-2650-49bd-ab3f-d66aae694c06";
            string networkMappingName = "corpe2amap";
            ResourceIdentifier networkMappingResourceId = NetworkMappingResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, fabricName, networkName, networkMappingName);
            NetworkMappingResource networkMapping = client.GetNetworkMappingResource(networkMappingResourceId);

            // invoke the operation
            NetworkMappingResource result = await networkMapping.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NetworkMappingData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete network mapping.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteNetworkMapping()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationNetworkMappings_Delete.json
            // this example is just showing the usage of "ReplicationNetworkMappings_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this NetworkMappingResource created on azure
            // for more information of creating NetworkMappingResource, please refer to the document of NetworkMappingResource
            string subscriptionId = "9112a37f-0f3e-46ec-9c00-060c6edca071";
            string resourceGroupName = "srcBvte2a14C27";
            string resourceName = "srce2avaultbvtaC27";
            string fabricName = "b0cef6e9a4437b81803d0b55ada4f700ab66caae59c35d62723a1589c0cd13ac";
            string networkName = "e2267b5c-2650-49bd-ab3f-d66aae694c06";
            string networkMappingName = "corpe2amap";
            ResourceIdentifier networkMappingResourceId = NetworkMappingResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, fabricName, networkName, networkMappingName);
            NetworkMappingResource networkMapping = client.GetNetworkMappingResource(networkMappingResourceId);

            // invoke the operation
            await networkMapping.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Updates network mapping.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_UpdatesNetworkMapping()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationNetworkMappings_Update.json
            // this example is just showing the usage of "ReplicationNetworkMappings_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this NetworkMappingResource created on azure
            // for more information of creating NetworkMappingResource, please refer to the document of NetworkMappingResource
            string subscriptionId = "9112a37f-0f3e-46ec-9c00-060c6edca071";
            string resourceGroupName = "srcBvte2a14C27";
            string resourceName = "srce2avaultbvtaC27";
            string fabricName = "b0cef6e9a4437b81803d0b55ada4f700ab66caae59c35d62723a1589c0cd13ac";
            string networkName = "e2267b5c-2650-49bd-ab3f-d66aae694c06";
            string networkMappingName = "corpe2amap";
            ResourceIdentifier networkMappingResourceId = NetworkMappingResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, fabricName, networkName, networkMappingName);
            NetworkMappingResource networkMapping = client.GetNetworkMappingResource(networkMappingResourceId);

            // invoke the operation
            NetworkMappingPatch patch = new NetworkMappingPatch()
            {
                Properties = new UpdateNetworkMappingInputProperties()
                {
                    RecoveryFabricName = "Microsoft Azure",
                    RecoveryNetworkId = "/subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/siterecoveryProd1/providers/Microsoft.Network/virtualNetworks/vnetavrai2",
                    FabricSpecificDetails = new FabricSpecificUpdateNetworkMappingInput()
                    {
                        InstanceType = "VmmToAzure",
                    },
                },
            };
            ArmOperation<NetworkMappingResource> lro = await networkMapping.UpdateAsync(WaitUntil.Completed, patch);
            NetworkMappingResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NetworkMappingData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Gets all the network mappings under a vault.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetNetworkMappings_GetsAllTheNetworkMappingsUnderAVault()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationNetworkMappings_List.json
            // this example is just showing the usage of "ReplicationNetworkMappings_List" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "9112a37f-0f3e-46ec-9c00-060c6edca071";
            string resourceGroupName = "srcBvte2a14C27";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation and iterate over the result
            string resourceName = "srce2avaultbvtaC27";
            await foreach (NetworkMappingResource item in resourceGroupResource.GetNetworkMappingsAsync(resourceName))
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                NetworkMappingData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }
    }
}
