// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for PrivateDnsZoneGroup. </summary>
    public partial class PrivateDnsZoneGroupMockTests : MockTestBase
    {
        public PrivateDnsZoneGroupMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get private dns zone group
            var privateDnsZoneGroupId = Network.PrivateDnsZoneGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "testPe", "testPdnsgroup");
            var privateDnsZoneGroup = GetArmClient().GetPrivateDnsZoneGroup(privateDnsZoneGroupId);

            await privateDnsZoneGroup.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete private dns zone group
            var privateDnsZoneGroupId = Network.PrivateDnsZoneGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "testPe", "testPdnsgroup");
            var privateDnsZoneGroup = GetArmClient().GetPrivateDnsZoneGroup(privateDnsZoneGroupId);

            await privateDnsZoneGroup.DeleteAsync(true);
        }
    }
}
