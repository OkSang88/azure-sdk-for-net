// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.CosmosDB.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.CosmosDB.Tests.Mock
{
    /// <summary> Test for SqlContainer. </summary>
    public partial class SqlContainerCollectionMockTests : MockTestBase
    {
        public SqlContainerCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: CosmosDBSqlContainerCreateUpdate
            var collection = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName")).GetSqlContainers();
            string containerName = "containerName";
            CosmosDB.Models.SqlContainerCreateUpdateOptions createUpdateSqlContainerParameters = new CosmosDB.Models.SqlContainerCreateUpdateOptions(location: "West US", resource: new CosmosDB.Models.SqlContainerResource(id: "containerName")
            {
                IndexingPolicy = new CosmosDB.Models.IndexingPolicy()
                {
                    Automatic = true,
                    IndexingMode = new CosmosDB.Models.IndexingMode("consistent"),
                },
                PartitionKey = new CosmosDB.Models.ContainerPartitionKey()
                {
                    Kind = new CosmosDB.Models.PartitionKind("Hash"),
                },
                DefaultTtl = 100,
                UniqueKeyPolicy = new CosmosDB.Models.UniqueKeyPolicy(),
                ConflictResolutionPolicy = new CosmosDB.Models.ConflictResolutionPolicy()
                {
                    Mode = new CosmosDB.Models.ConflictResolutionMode("LastWriterWins"),
                    ConflictResolutionPath = "/path",
                },
            })
            {
                Options = new CosmosDB.Models.CreateUpdateOptions(),
            };
            createUpdateSqlContainerParameters.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>() { });
            await collection.CreateOrUpdateAsync(containerName, createUpdateSqlContainerParameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: CosmosDBSqlContainerGet
            var collection = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rgName/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName")).GetSqlContainers();
            string containerName = "containerName";

            await collection.GetAsync(containerName);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: CosmosDBSqlContainerList
            var collection = GetArmClient().GetSqlDatabase(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rgName/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName")).GetSqlContainers();

            collection.GetAllAsync();
        }
    }
}
