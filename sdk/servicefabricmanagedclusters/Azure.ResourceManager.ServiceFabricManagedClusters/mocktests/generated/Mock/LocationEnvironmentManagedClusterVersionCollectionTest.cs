// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.ServiceFabricManagedClusters.Tests.Mock.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.ServiceFabricManagedClusters.Tests.Mock.Tests.Mock
{
    /// <summary> Test for ManagedClusterCodeVersionResult. </summary>
    public partial class LocationEnvironmentManagedClusterVersionCollectionMockTests : MockTestBase
    {
        public LocationEnvironmentManagedClusterVersionCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get cluster version by environment
            string location = "eastus";
            ServiceFabricManagedClusters.Tests.Mock.Models.Enum25 environment = new ServiceFabricManagedClusters.Tests.Mock.Models.Enum25("Windows");
            string clusterVersion = "7.2.477.9590";

            var collection = GetArmClient().GetSubscription(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000")).GetLocationEnvironmentManagedClusterVersions(location, environment);
            await collection.GetAsync(clusterVersion);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List cluster versions by environment
            string location = "eastus";
            ServiceFabricManagedClusters.Tests.Mock.Models.Enum25 environment = new ServiceFabricManagedClusters.Tests.Mock.Models.Enum25("Windows");

            var collection = GetArmClient().GetSubscription(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000")).GetLocationEnvironmentManagedClusterVersions(location, environment);
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
