// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for FailoverGroup. </summary>
    public partial class FailoverGroupMockTests : MockTestBase
    {
        public FailoverGroupMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get failover group
            var failoverGroupId = Sql.FailoverGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default", "failover-group-primary-server", "failover-group-test");
            var failoverGroup = GetArmClient().GetFailoverGroup(failoverGroupId);

            await failoverGroup.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete failover group
            var failoverGroupId = Sql.FailoverGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default", "failover-group-primary-server", "failover-group-test-1");
            var failoverGroup = GetArmClient().GetFailoverGroup(failoverGroupId);

            await failoverGroup.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Update failover group
            var failoverGroupId = Sql.FailoverGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default", "failover-group-primary-server", "failover-group-test-1");
            var failoverGroup = GetArmClient().GetFailoverGroup(failoverGroupId);
            Sql.Models.FailoverGroupUpdate parameters = new Sql.Models.FailoverGroupUpdate()
            {
                ReadWriteEndpoint = new Sql.Models.FailoverGroupReadWriteEndpoint(failoverPolicy: new Sql.Models.ReadWriteEndpointFailoverPolicy("Automatic"))
                {
                    FailoverWithDataLossGracePeriodMinutes = 120,
                },
            };

            await failoverGroup.UpdateAsync(true, parameters);
        }

        [RecordedTest]
        public async Task Failover()
        {
            // Example: Planned failover of a failover group
            var failoverGroupId = Sql.FailoverGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default", "failover-group-secondary-server", "failover-group-test-3");
            var failoverGroup = GetArmClient().GetFailoverGroup(failoverGroupId);

            await failoverGroup.FailoverAsync(true);
        }

        [RecordedTest]
        public async Task ForceFailoverAllowDataLoss()
        {
            // Example: Forced failover of a failover group allowing data loss
            var failoverGroupId = Sql.FailoverGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default", "failover-group-secondary-server", "failover-group-test-3");
            var failoverGroup = GetArmClient().GetFailoverGroup(failoverGroupId);

            await failoverGroup.ForceFailoverAllowDataLossAsync(true);
        }
    }
}
