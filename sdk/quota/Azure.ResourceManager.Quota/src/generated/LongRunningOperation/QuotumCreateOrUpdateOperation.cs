// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using AzureQuotaExtensionAPI;

namespace AzureQuotaExtensionAPI.Models
{
    /// <summary>
    /// Create or update the quota limit for the specified resource with the requested value. To update the quota, follow these steps:
    /// 1. Use the GET operation for quotas and usages to determine how much quota remains for the specific resource and to calculate the new quota limit. These steps are detailed in [this example](https://techcommunity.microsoft.com/t5/azure-governance-and-management/using-the-new-quota-rest-api/ba-p/2183670).
    /// 2. Use this PUT operation to update the quota limit. Please check the URI in location header for the detailed status of the request.
    /// </summary>
    public partial class QuotumCreateOrUpdateOperation : Operation<CurrentQuotaLimitBase>, IOperationSource<CurrentQuotaLimitBase>
    {
        private readonly OperationInternals<CurrentQuotaLimitBase> _operation;

        private readonly ArmResource _operationBase;

        /// <summary> Initializes a new instance of QuotumCreateOrUpdateOperation for mocking. </summary>
        protected QuotumCreateOrUpdateOperation()
        {
        }

        internal QuotumCreateOrUpdateOperation(ArmResource operationsBase, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Request request, Response response)
        {
            _operation = new OperationInternals<CurrentQuotaLimitBase>(this, clientDiagnostics, pipeline, request, response, OperationFinalStateVia.Location, "QuotumCreateOrUpdateOperation");
            _operationBase = operationsBase;
        }

        /// <inheritdoc />
        public override string Id => _operation.Id;

        /// <inheritdoc />
        public override CurrentQuotaLimitBase Value => _operation.Value;

        /// <inheritdoc />
        public override bool HasCompleted => _operation.HasCompleted;

        /// <inheritdoc />
        public override bool HasValue => _operation.HasValue;

        /// <inheritdoc />
        public override Response GetRawResponse() => _operation.GetRawResponse();

        /// <inheritdoc />
        public override Response UpdateStatus(CancellationToken cancellationToken = default) => _operation.UpdateStatus(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response> UpdateStatusAsync(CancellationToken cancellationToken = default) => _operation.UpdateStatusAsync(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response<CurrentQuotaLimitBase>> WaitForCompletionAsync(CancellationToken cancellationToken = default) => _operation.WaitForCompletionAsync(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response<CurrentQuotaLimitBase>> WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken = default) => _operation.WaitForCompletionAsync(pollingInterval, cancellationToken);

        CurrentQuotaLimitBase IOperationSource<CurrentQuotaLimitBase>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            using var document = JsonDocument.Parse(response.ContentStream);
            var data = CurrentQuotaLimitBaseData.DeserializeCurrentQuotaLimitBaseData(document.RootElement);
            return new CurrentQuotaLimitBase(_operationBase, data);
        }

        async ValueTask<CurrentQuotaLimitBase> IOperationSource<CurrentQuotaLimitBase>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
            var data = CurrentQuotaLimitBaseData.DeserializeCurrentQuotaLimitBaseData(document.RootElement);
            return new CurrentQuotaLimitBase(_operationBase, data);
        }
    }
}
