// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace StorSimple8000SeriesManagementClient.Models
{
    /// <summary> Represents the eligibility of a device as a failover target device. </summary>
    public partial class FailoverTarget
    {
        /// <summary> Initializes a new instance of FailoverTarget. </summary>
        internal FailoverTarget()
        {
        }

        /// <summary> Initializes a new instance of FailoverTarget. </summary>
        /// <param name="deviceId"> The path ID of the device. </param>
        /// <param name="deviceStatus"> The status of the device. </param>
        /// <param name="modelDescription"> The model number of the device. </param>
        /// <param name="deviceSoftwareVersion"> The software version of the device. </param>
        /// <param name="dataContainersCount"> The count of data containers on the device. </param>
        /// <param name="volumesCount"> The count of volumes on the device. </param>
        /// <param name="availableLocalStorageInBytes"> The amount of free local storage available on the device in bytes. </param>
        /// <param name="availableTieredStorageInBytes"> The amount of free tiered storage available for the device in bytes. </param>
        /// <param name="deviceLocation"> The geo location (applicable only for cloud appliances) of the device. </param>
        /// <param name="friendlyDeviceSoftwareVersion"> The friendly name for the current version of software on the device. </param>
        /// <param name="eligibilityResult"> The eligibility result of the device, as a failover target device. </param>
        internal FailoverTarget(string deviceId, DeviceStatus? deviceStatus, string modelDescription, string deviceSoftwareVersion, int? dataContainersCount, int? volumesCount, long? availableLocalStorageInBytes, long? availableTieredStorageInBytes, string deviceLocation, string friendlyDeviceSoftwareVersion, TargetEligibilityResult eligibilityResult)
        {
            DeviceId = deviceId;
            DeviceStatus = deviceStatus;
            ModelDescription = modelDescription;
            DeviceSoftwareVersion = deviceSoftwareVersion;
            DataContainersCount = dataContainersCount;
            VolumesCount = volumesCount;
            AvailableLocalStorageInBytes = availableLocalStorageInBytes;
            AvailableTieredStorageInBytes = availableTieredStorageInBytes;
            DeviceLocation = deviceLocation;
            FriendlyDeviceSoftwareVersion = friendlyDeviceSoftwareVersion;
            EligibilityResult = eligibilityResult;
        }

        /// <summary> The path ID of the device. </summary>
        public string DeviceId { get; }
        /// <summary> The status of the device. </summary>
        public DeviceStatus? DeviceStatus { get; }
        /// <summary> The model number of the device. </summary>
        public string ModelDescription { get; }
        /// <summary> The software version of the device. </summary>
        public string DeviceSoftwareVersion { get; }
        /// <summary> The count of data containers on the device. </summary>
        public int? DataContainersCount { get; }
        /// <summary> The count of volumes on the device. </summary>
        public int? VolumesCount { get; }
        /// <summary> The amount of free local storage available on the device in bytes. </summary>
        public long? AvailableLocalStorageInBytes { get; }
        /// <summary> The amount of free tiered storage available for the device in bytes. </summary>
        public long? AvailableTieredStorageInBytes { get; }
        /// <summary> The geo location (applicable only for cloud appliances) of the device. </summary>
        public string DeviceLocation { get; }
        /// <summary> The friendly name for the current version of software on the device. </summary>
        public string FriendlyDeviceSoftwareVersion { get; }
        /// <summary> The eligibility result of the device, as a failover target device. </summary>
        public TargetEligibilityResult EligibilityResult { get; }
    }
}
