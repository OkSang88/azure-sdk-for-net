// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.ServiceFabricMesh.Models
{
    /// <summary> This type describes properties of a service resource. </summary>
    public partial class ServiceResourceProperties : ProvisionedResourceProperties
    {
        /// <summary> Initializes a new instance of ServiceResourceProperties. </summary>
        /// <param name="osType"> The operation system required by the code in service. </param>
        /// <param name="codePackages"> Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.). </param>
        /// <exception cref="ArgumentNullException"> <paramref name="codePackages"/> is null. </exception>
        public ServiceResourceProperties(OperatingSystemType osType, IEnumerable<ContainerCodePackageProperties> codePackages)
        {
            if (codePackages == null)
            {
                throw new ArgumentNullException(nameof(codePackages));
            }

            OsType = osType;
            CodePackages = codePackages.ToList();
            NetworkRefs = new ChangeTrackingList<NetworkRef>();
            AutoScalingPolicies = new ChangeTrackingList<AutoScalingPolicy>();
        }

        /// <summary> Initializes a new instance of ServiceResourceProperties. </summary>
        /// <param name="provisioningState"> State of the resource. </param>
        /// <param name="osType"> The operation system required by the code in service. </param>
        /// <param name="codePackages"> Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.). </param>
        /// <param name="networkRefs"> The names of the private networks that this service needs to be part of. </param>
        /// <param name="diagnostics"> Reference to sinks in DiagnosticsDescription. </param>
        /// <param name="description"> User readable description of the service. </param>
        /// <param name="replicaCount"> The number of replicas of the service to create. Defaults to 1 if not specified. </param>
        /// <param name="autoScalingPolicies"> Auto scaling policies. </param>
        /// <param name="status"> Status of the service. </param>
        /// <param name="statusDetails"> Gives additional information about the current status of the service. </param>
        /// <param name="healthState"> Describes the health state of an application resource. </param>
        /// <param name="unhealthyEvaluation"> When the service&apos;s health state is not &apos;Ok&apos;, this additional details from service fabric Health Manager for the user to know why the service is marked unhealthy. </param>
        internal ServiceResourceProperties(string provisioningState, OperatingSystemType osType, IList<ContainerCodePackageProperties> codePackages, IList<NetworkRef> networkRefs, DiagnosticsRef diagnostics, string description, int? replicaCount, IList<AutoScalingPolicy> autoScalingPolicies, ResourceStatus? status, string statusDetails, HealthState? healthState, string unhealthyEvaluation) : base(provisioningState)
        {
            OsType = osType;
            CodePackages = codePackages;
            NetworkRefs = networkRefs;
            Diagnostics = diagnostics;
            Description = description;
            ReplicaCount = replicaCount;
            AutoScalingPolicies = autoScalingPolicies;
            Status = status;
            StatusDetails = statusDetails;
            HealthState = healthState;
            UnhealthyEvaluation = unhealthyEvaluation;
        }

        /// <summary> The operation system required by the code in service. </summary>
        public OperatingSystemType OsType { get; set; }
        /// <summary> Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.). </summary>
        public IList<ContainerCodePackageProperties> CodePackages { get; }
        /// <summary> The names of the private networks that this service needs to be part of. </summary>
        public IList<NetworkRef> NetworkRefs { get; }
        /// <summary> Reference to sinks in DiagnosticsDescription. </summary>
        public DiagnosticsRef Diagnostics { get; set; }
        /// <summary> User readable description of the service. </summary>
        public string Description { get; set; }
        /// <summary> The number of replicas of the service to create. Defaults to 1 if not specified. </summary>
        public int? ReplicaCount { get; set; }
        /// <summary> Auto scaling policies. </summary>
        public IList<AutoScalingPolicy> AutoScalingPolicies { get; }
        /// <summary> Status of the service. </summary>
        public ResourceStatus? Status { get; }
        /// <summary> Gives additional information about the current status of the service. </summary>
        public string StatusDetails { get; }
        /// <summary> Describes the health state of an application resource. </summary>
        public HealthState? HealthState { get; }
        /// <summary> When the service&apos;s health state is not &apos;Ok&apos;, this additional details from service fabric Health Manager for the user to know why the service is marked unhealthy. </summary>
        public string UnhealthyEvaluation { get; }
    }
}
