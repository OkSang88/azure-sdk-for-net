// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for ManagedInstanceEncryptionProtector. </summary>
    public partial class ManagedInstanceEncryptionProtectorCollectionMockTests : MockTestBase
    {
        public ManagedInstanceEncryptionProtectorCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Update the encryption protector to key vault
            Sql.Models.EncryptionProtectorName encryptionProtectorName = new Sql.Models.EncryptionProtectorName("current");
            Sql.ManagedInstanceEncryptionProtectorData parameters = new Sql.ManagedInstanceEncryptionProtectorData()
            {
                ServerKeyName = "someVault_someKey_01234567890123456789012345678901",
                ServerKeyType = new Sql.Models.ServerKeyType("AzureKeyVault"),
                AutoRotationEnabled = false,
            };

            var managedInstanceId = Sql.ManagedInstance.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-7398", "sqlcrudtest-4645");
            var collection = GetArmClient().GetManagedInstance(managedInstanceId).GetManagedInstanceEncryptionProtectors();
            await collection.CreateOrUpdateAsync(true, encryptionProtectorName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Update the encryption protector to service managed
            Sql.Models.EncryptionProtectorName encryptionProtectorName = new Sql.Models.EncryptionProtectorName("current");
            Sql.ManagedInstanceEncryptionProtectorData parameters = new Sql.ManagedInstanceEncryptionProtectorData()
            {
                ServerKeyName = "ServiceManaged",
                ServerKeyType = new Sql.Models.ServerKeyType("ServiceManaged"),
            };

            var managedInstanceId = Sql.ManagedInstance.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-7398", "sqlcrudtest-4645");
            var collection = GetArmClient().GetManagedInstance(managedInstanceId).GetManagedInstanceEncryptionProtectors();
            await collection.CreateOrUpdateAsync(true, encryptionProtectorName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get the encryption protector
            Sql.Models.EncryptionProtectorName encryptionProtectorName = new Sql.Models.EncryptionProtectorName("current");

            var managedInstanceId = Sql.ManagedInstance.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-7398", "sqlcrudtest-4645");
            var collection = GetArmClient().GetManagedInstance(managedInstanceId).GetManagedInstanceEncryptionProtectors();
            await collection.GetAsync(encryptionProtectorName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List encryption protectors by managed instance

            var managedInstanceId = Sql.ManagedInstance.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-7398", "sqlcrudtest-4645");
            var collection = GetArmClient().GetManagedInstance(managedInstanceId).GetManagedInstanceEncryptionProtectors();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
