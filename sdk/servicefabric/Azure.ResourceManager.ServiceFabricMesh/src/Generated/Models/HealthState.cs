// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ServiceFabricMesh.Models
{
    /// <summary> The health state of a Service Fabric entity such as Cluster, Node, Application, Service, Partition, Replica etc. </summary>
    public readonly partial struct HealthState : IEquatable<HealthState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HealthState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HealthState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InvalidValue = "Invalid";
        private const string OkValue = "Ok";
        private const string WarningValue = "Warning";
        private const string ErrorValue = "Error";
        private const string UnknownValue = "Unknown";

        /// <summary> Indicates an invalid health state. All Service Fabric enumerations have the invalid type. The value is zero. </summary>
        public static HealthState Invalid { get; } = new HealthState(InvalidValue);
        /// <summary> Indicates the health state is okay. The value is 1. </summary>
        public static HealthState Ok { get; } = new HealthState(OkValue);
        /// <summary> Indicates the health state is at a warning level. The value is 2. </summary>
        public static HealthState Warning { get; } = new HealthState(WarningValue);
        /// <summary> Indicates the health state is at an error level. Error health state should be investigated, as they can impact the correct functionality of the cluster. The value is 3. </summary>
        public static HealthState Error { get; } = new HealthState(ErrorValue);
        /// <summary> Indicates an unknown health status. The value is 65535. </summary>
        public static HealthState Unknown { get; } = new HealthState(UnknownValue);
        /// <summary> Determines if two <see cref="HealthState"/> values are the same. </summary>
        public static bool operator ==(HealthState left, HealthState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HealthState"/> values are not the same. </summary>
        public static bool operator !=(HealthState left, HealthState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="HealthState"/>. </summary>
        public static implicit operator HealthState(string value) => new HealthState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HealthState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HealthState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
