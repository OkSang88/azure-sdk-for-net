// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for ExpressRouteCircuitConnection. </summary>
    public partial class ExpressRouteCircuitConnectionCollectionMockTests : MockTestBase
    {
        public ExpressRouteCircuitConnectionCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: ExpressRouteCircuitConnectionCreate
            string connectionName = "circuitConnectionUSAUS";
            Network.ExpressRouteCircuitConnectionData expressRouteCircuitConnectionParameters = new Network.ExpressRouteCircuitConnectionData()
            {
                ExpressRouteCircuitPeering = new WritableSubResource()
                {
                    Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/dedharcktinit/providers/Microsoft.Network/expressRouteCircuits/dedharcktlocal/peerings/AzurePrivatePeering"),
                },
                PeerExpressRouteCircuitPeering = new WritableSubResource()
                {
                    Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/dedharcktpeer/providers/Microsoft.Network/expressRouteCircuits/dedharcktremote/peerings/AzurePrivatePeering"),
                },
                AddressPrefix = "10.0.0.0/29",
                AuthorizationKey = "946a1918-b7a2-4917-b43c-8c4cdaee006a",
                Ipv6CircuitConnectionConfig = new Network.Models.Ipv6CircuitConnectionConfig()
                {
                    AddressPrefix = "aa:bb::/125",
                },
            };

            var expressRouteCircuitPeeringId = Network.ExpressRouteCircuitPeering.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ExpressRouteARMCircuitA", "AzurePrivatePeering");
            var collection = GetArmClient().GetExpressRouteCircuitPeering(expressRouteCircuitPeeringId).GetExpressRouteCircuitConnections();
            await collection.CreateOrUpdateAsync(connectionName, expressRouteCircuitConnectionParameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: ExpressRouteCircuitConnectionGet
            string connectionName = "circuitConnectionUSAUS";

            var expressRouteCircuitPeeringId = Network.ExpressRouteCircuitPeering.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ExpressRouteARMCircuitA", "AzurePrivatePeering");
            var collection = GetArmClient().GetExpressRouteCircuitPeering(expressRouteCircuitPeeringId).GetExpressRouteCircuitConnections();
            await collection.GetAsync(connectionName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List ExpressRouteCircuit Connection

            var expressRouteCircuitPeeringId = Network.ExpressRouteCircuitPeering.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ExpressRouteARMCircuitA", "AzurePrivatePeering");
            var collection = GetArmClient().GetExpressRouteCircuitPeering(expressRouteCircuitPeeringId).GetExpressRouteCircuitConnections();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
