// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Batch;
using Azure.ResourceManager.Batch.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Batch.Tests.Mock
{
    /// <summary> Test for Certificate. </summary>
    public partial class CertificateCollectionMockTests : MockTestBase
    {
        public CertificateCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: CreateCertificate - Full
            string certificateName = "sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e";
            Batch.Models.CertificateCreateOrUpdateParameters parameters = new Batch.Models.CertificateCreateOrUpdateParameters()
            {
                ThumbprintAlgorithm = "sha1",
                Thumbprint = "0a0e4f50d51beadeac1d35afc5116098e7902e6e",
                Format = Batch.Models.CertificateFormat.Pfx,
                Data = "MIIJsgIBAzCCCW4GCSqGSIb3DQE...",
                Password = "<ExamplePassword>",
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var batchAccountId = Batch.BatchAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct");
            var collection = GetArmClient().GetBatchAccount(batchAccountId).GetCertificates();
            await collection.CreateOrUpdateAsync(true, certificateName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: CreateCertificate - Minimal Cer
            string certificateName = "sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e";
            Batch.Models.CertificateCreateOrUpdateParameters parameters = new Batch.Models.CertificateCreateOrUpdateParameters()
            {
                Format = Batch.Models.CertificateFormat.Cer,
                Data = "MIICrjCCAZagAwI...",
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var batchAccountId = Batch.BatchAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct");
            var collection = GetArmClient().GetBatchAccount(batchAccountId).GetCertificates();
            await collection.CreateOrUpdateAsync(true, certificateName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate3()
        {
            // Example: CreateCertificate - Minimal Pfx
            string certificateName = "sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e";
            Batch.Models.CertificateCreateOrUpdateParameters parameters = new Batch.Models.CertificateCreateOrUpdateParameters()
            {
                Data = "MIIJsgIBAzCCCW4GCSqGSIb3DQE...",
                Password = "<ExamplePassword>",
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var batchAccountId = Batch.BatchAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct");
            var collection = GetArmClient().GetBatchAccount(batchAccountId).GetCertificates();
            await collection.CreateOrUpdateAsync(true, certificateName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get Certificate
            string certificateName = "sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e";

            var batchAccountId = Batch.BatchAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct");
            var collection = GetArmClient().GetBatchAccount(batchAccountId).GetCertificates();
            await collection.GetAsync(certificateName);
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: Get Certificate with Deletion Error
            string certificateName = "sha1-0a0e4f50d51beadeac1d35afc5116098e7902e6e";

            var batchAccountId = Batch.BatchAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct");
            var collection = GetArmClient().GetBatchAccount(batchAccountId).GetCertificates();
            await collection.GetAsync(certificateName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: ListCertificates
            int? maxresults = null;
            string select = null;
            string filter = null;

            var batchAccountId = Batch.BatchAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct");
            var collection = GetArmClient().GetBatchAccount(batchAccountId).GetCertificates();
            await foreach (var _ in collection.GetAllAsync(maxresults, select, filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetAll2()
        {
            // Example: ListCertificates - Filter and Select
            int? maxresults = null;
            string select = "properties/format,properties/provisioningState";
            string filter = "properties/provisioningStateTransitionTime gt '2017-05-01' or properties/provisioningState eq 'Failed'";

            var batchAccountId = Batch.BatchAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct");
            var collection = GetArmClient().GetBatchAccount(batchAccountId).GetCertificates();
            await foreach (var _ in collection.GetAllAsync(maxresults, select, filter))
            {
            }
        }
    }
}
