// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using MarketplaceRPService.Models;

namespace MarketplaceRPService
{
    /// <summary> A class representing collection of Collection and their operations over its parent. </summary>
    public partial class CollectionCollection : ArmCollection, IEnumerable<Collection>, IAsyncEnumerable<Collection>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly PrivateStoreCollectionRestOperations _privateStoreCollectionRestClient;

        /// <summary> Initializes a new instance of the <see cref="CollectionCollection"/> class for mocking. </summary>
        protected CollectionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="CollectionCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal CollectionCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _privateStoreCollectionRestClient = new PrivateStoreCollectionRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != PrivateStore.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, PrivateStore.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Create or update private store collection. </summary>
        /// <param name="collectionId"> The collection ID. </param>
        /// <param name="payload"> The Collection to use. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> is null. </exception>
        public virtual PrivateStoreCollectionCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string collectionId, CollectionData payload = null, CancellationToken cancellationToken = default)
        {
            if (collectionId == null)
            {
                throw new ArgumentNullException(nameof(collectionId));
            }

            using var scope = _clientDiagnostics.CreateScope("CollectionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _privateStoreCollectionRestClient.CreateOrUpdate(Id.Name, collectionId, payload, cancellationToken);
                var operation = new PrivateStoreCollectionCreateOrUpdateOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update private store collection. </summary>
        /// <param name="collectionId"> The collection ID. </param>
        /// <param name="payload"> The Collection to use. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> is null. </exception>
        public async virtual Task<PrivateStoreCollectionCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string collectionId, CollectionData payload = null, CancellationToken cancellationToken = default)
        {
            if (collectionId == null)
            {
                throw new ArgumentNullException(nameof(collectionId));
            }

            using var scope = _clientDiagnostics.CreateScope("CollectionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _privateStoreCollectionRestClient.CreateOrUpdateAsync(Id.Name, collectionId, payload, cancellationToken).ConfigureAwait(false);
                var operation = new PrivateStoreCollectionCreateOrUpdateOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets private store collection. </summary>
        /// <param name="collectionId"> The collection ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> is null. </exception>
        public virtual Response<Collection> Get(string collectionId, CancellationToken cancellationToken = default)
        {
            if (collectionId == null)
            {
                throw new ArgumentNullException(nameof(collectionId));
            }

            using var scope = _clientDiagnostics.CreateScope("CollectionCollection.Get");
            scope.Start();
            try
            {
                var response = _privateStoreCollectionRestClient.Get(Id.Name, collectionId, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new Collection(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets private store collection. </summary>
        /// <param name="collectionId"> The collection ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> is null. </exception>
        public async virtual Task<Response<Collection>> GetAsync(string collectionId, CancellationToken cancellationToken = default)
        {
            if (collectionId == null)
            {
                throw new ArgumentNullException(nameof(collectionId));
            }

            using var scope = _clientDiagnostics.CreateScope("CollectionCollection.Get");
            scope.Start();
            try
            {
                var response = await _privateStoreCollectionRestClient.GetAsync(Id.Name, collectionId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new Collection(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="collectionId"> The collection ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> is null. </exception>
        public virtual Response<Collection> GetIfExists(string collectionId, CancellationToken cancellationToken = default)
        {
            if (collectionId == null)
            {
                throw new ArgumentNullException(nameof(collectionId));
            }

            using var scope = _clientDiagnostics.CreateScope("CollectionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _privateStoreCollectionRestClient.Get(Id.Name, collectionId, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<Collection>(null, response.GetRawResponse());
                return Response.FromValue(new Collection(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="collectionId"> The collection ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> is null. </exception>
        public async virtual Task<Response<Collection>> GetIfExistsAsync(string collectionId, CancellationToken cancellationToken = default)
        {
            if (collectionId == null)
            {
                throw new ArgumentNullException(nameof(collectionId));
            }

            using var scope = _clientDiagnostics.CreateScope("CollectionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _privateStoreCollectionRestClient.GetAsync(Id.Name, collectionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<Collection>(null, response.GetRawResponse());
                return Response.FromValue(new Collection(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="collectionId"> The collection ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> is null. </exception>
        public virtual Response<bool> Exists(string collectionId, CancellationToken cancellationToken = default)
        {
            if (collectionId == null)
            {
                throw new ArgumentNullException(nameof(collectionId));
            }

            using var scope = _clientDiagnostics.CreateScope("CollectionCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(collectionId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="collectionId"> The collection ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string collectionId, CancellationToken cancellationToken = default)
        {
            if (collectionId == null)
            {
                throw new ArgumentNullException(nameof(collectionId));
            }

            using var scope = _clientDiagnostics.CreateScope("CollectionCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(collectionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets private store collections list. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Collection" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Collection> GetAll(CancellationToken cancellationToken = default)
        {
            Page<Collection> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("CollectionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _privateStoreCollectionRestClient.List(Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new Collection(Parent, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Gets private store collections list. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Collection" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Collection> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<Collection>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("CollectionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _privateStoreCollectionRestClient.ListAsync(Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new Collection(Parent, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        IEnumerator<Collection> IEnumerable<Collection>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<Collection> IAsyncEnumerable<Collection>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, Collection, CollectionData> Construct() { }
    }
}
