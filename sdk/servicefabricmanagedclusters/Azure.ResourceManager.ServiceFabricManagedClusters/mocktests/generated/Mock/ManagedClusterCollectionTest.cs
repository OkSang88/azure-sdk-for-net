// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.ServiceFabricManagedClusters.Tests.Mock;
using Azure.ResourceManager.ServiceFabricManagedClusters.Tests.Mock.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.ServiceFabricManagedClusters.Tests.Mock.Tests.Mock
{
    /// <summary> Test for ManagedCluster. </summary>
    public partial class ManagedClusterCollectionMockTests : MockTestBase
    {
        public ManagedClusterCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Put a cluster with maximum parameters
            string clusterName = "myCluster";
            ServiceFabricManagedClusters.Tests.Mock.ManagedClusterData parameters = new ServiceFabricManagedClusters.Tests.Mock.ManagedClusterData(location: "eastus")
            {
                Sku = new ServiceFabricManagedClusters.Tests.Mock.Models.Sku(name: new ServiceFabricManagedClusters.Tests.Mock.Models.SkuName("Basic")),
                DnsName = "myCluster",
                ClientConnectionPort = 19000,
                HttpGatewayConnectionPort = 19080,
                AdminUserName = "vmadmin",
                AdminPassword = "{vm-password}",
                AllowRdpAccess = true,
                ClusterCodeVersion = "7.1.168.9494",
                ClusterUpgradeMode = new ServiceFabricManagedClusters.Tests.Mock.Models.ClusterUpgradeMode("Manual"),
                EnableAutoOSUpgrade = true,
                ZonalResiliency = true,
                ApplicationTypeVersionsCleanupPolicy = new ServiceFabricManagedClusters.Tests.Mock.Models.ApplicationTypeVersionsCleanupPolicy(maxUnusedVersionsToKeep: 3),
                EnableIpv6 = true,
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>()
            {
            });

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg")).GetManagedClusters();
            await collection.CreateOrUpdateAsync(true, clusterName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Put a cluster with minimum parameters
            string clusterName = "myCluster";
            ServiceFabricManagedClusters.Tests.Mock.ManagedClusterData parameters = new ServiceFabricManagedClusters.Tests.Mock.ManagedClusterData(location: "eastus")
            {
                DnsName = "myCluster",
                AdminUserName = "vmadmin",
                AdminPassword = "{vm-password}",
                ClusterUpgradeMode = new ServiceFabricManagedClusters.Tests.Mock.Models.ClusterUpgradeMode("Automatic"),
                ClusterUpgradeCadence = new ServiceFabricManagedClusters.Tests.Mock.Models.ClusterUpgradeCadence("Wave1"),
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg")).GetManagedClusters();
            await collection.CreateOrUpdateAsync(true, clusterName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get a cluster
            string clusterName = "myCluster";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg")).GetManagedClusters();
            await collection.GetAsync(clusterName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List cluster by resource group

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg")).GetManagedClusters();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
