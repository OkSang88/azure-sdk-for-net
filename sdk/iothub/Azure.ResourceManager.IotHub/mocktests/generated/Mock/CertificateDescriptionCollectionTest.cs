// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.IotHub.Tests.Mock;
using Azure.ResourceManager.IotHub.Tests.Mock.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.IotHub.Tests.Mock.Tests.Mock
{
    /// <summary> Test for CertificateDescription. </summary>
    public partial class CertificateDescriptionCollectionMockTests : MockTestBase
    {
        public CertificateDescriptionCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Certificates_CreateOrUpdate
            string certificateName = "cert";
            IotHub.Tests.Mock.CertificateDescriptionData certificateDescription = new IotHub.Tests.Mock.CertificateDescriptionData()
            {
                Properties = new IotHub.Tests.Mock.Models.CertificateProperties()
                {
                    Certificate = "############################################",
                },
            };
            string ifMatch = null;

            var iotHubDescriptionId = IotHub.Tests.Mock.IotHubDescription.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "iothub");
            var collection = GetArmClient().GetIotHubDescription(iotHubDescriptionId).GetCertificateDescriptions();
            await collection.CreateOrUpdateAsync(true, certificateName, certificateDescription, ifMatch);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Certificates_Get
            string certificateName = "cert";

            var iotHubDescriptionId = IotHub.Tests.Mock.IotHubDescription.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "testhub");
            var collection = GetArmClient().GetIotHubDescription(iotHubDescriptionId).GetCertificateDescriptions();
            await collection.GetAsync(certificateName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: Certificates_ListByIotHub

            var iotHubDescriptionId = IotHub.Tests.Mock.IotHubDescription.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "testhub");
            var collection = GetArmClient().GetIotHubDescription(iotHubDescriptionId).GetCertificateDescriptions();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
