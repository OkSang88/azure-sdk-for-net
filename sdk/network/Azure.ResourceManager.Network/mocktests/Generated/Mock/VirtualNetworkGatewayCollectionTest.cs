// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for VirtualNetworkGateway. </summary>
    public partial class VirtualNetworkGatewayCollectionMockTests : MockTestBase
    {
        public VirtualNetworkGatewayCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: UpdateVirtualNetworkGateway
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetVirtualNetworkGateways();
            string virtualNetworkGatewayName = "vpngw";
            Network.VirtualNetworkGatewayData parameters = new Network.VirtualNetworkGatewayData()
            {
                GatewayType = new Network.Models.VirtualNetworkGatewayType("Vpn"),
                VpnType = new Network.Models.VpnType("RouteBased"),
                EnableBgp = false,
                Active = false,
                Sku = new Network.Models.VirtualNetworkGatewaySku()
                {
                    Name = new Network.Models.VirtualNetworkGatewaySkuName("VpnGw1"),
                    Tier = new Network.Models.VirtualNetworkGatewaySkuTier("VpnGw1"),
                },
                VpnClientConfiguration = new Network.Models.VpnClientConfiguration(),
                BgpSettings = new Network.Models.BgpSettings()
                {
                    Asn = 65515,
                    BgpPeeringAddress = "10.0.1.30",
                    PeerWeight = 0,
                },
                CustomRoutes = new Network.Models.AddressSpace(),
                EnableDnsForwarding = true,
                EnableBgpRouteTranslationForNat = false,
                Location = "centralus",
            };

            await collection.CreateOrUpdateAsync(virtualNetworkGatewayName, parameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: GetVirtualNetworkGateway
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetVirtualNetworkGateways();
            string virtualNetworkGatewayName = "vpngw";

            await collection.GetAsync(virtualNetworkGatewayName);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: ListVirtualNetworkGatewaysinResourceGroup
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetVirtualNetworkGateways();

            collection.GetAllAsync();
        }
    }
}
