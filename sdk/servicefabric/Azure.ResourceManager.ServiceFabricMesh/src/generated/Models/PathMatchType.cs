// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace ServiceFabricMeshManagementClient.Models
{
    /// <summary> how to match value in the Uri. </summary>
    public readonly partial struct PathMatchType : IEquatable<PathMatchType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PathMatchType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PathMatchType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PrefixValue = "prefix";

        /// <summary> prefix. </summary>
        public static PathMatchType Prefix { get; } = new PathMatchType(PrefixValue);
        /// <summary> Determines if two <see cref="PathMatchType"/> values are the same. </summary>
        public static bool operator ==(PathMatchType left, PathMatchType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PathMatchType"/> values are not the same. </summary>
        public static bool operator !=(PathMatchType left, PathMatchType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PathMatchType"/>. </summary>
        public static implicit operator PathMatchType(string value) => new PathMatchType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PathMatchType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PathMatchType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
