// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for VirtualNetworkPeering. </summary>
    public partial class VirtualNetworkPeeringCollectionMockTests : MockTestBase
    {
        public VirtualNetworkPeeringCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create peering
            var collection = GetArmClient().GetVirtualNetwork(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet1")).GetVirtualNetworkPeerings();
            string virtualNetworkPeeringName = "peer";
            Network.VirtualNetworkPeeringData virtualNetworkPeeringParameters = new Network.VirtualNetworkPeeringData()
            {
                AllowVirtualNetworkAccess = true,
                AllowForwardedTraffic = true,
                AllowGatewayTransit = false,
                UseRemoteGateways = false,
                RemoteVirtualNetwork = new WritableSubResource()
                {
                    Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"),
                },
            };
            Network.Models.SyncRemoteAddressSpace? syncRemoteAddressSpace = null;

            await collection.CreateOrUpdateAsync(virtualNetworkPeeringName, virtualNetworkPeeringParameters, syncRemoteAddressSpace);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync2()
        {
            // Example: Sync Peering
            var collection = GetArmClient().GetVirtualNetwork(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet1")).GetVirtualNetworkPeerings();
            string virtualNetworkPeeringName = "peer";
            Network.VirtualNetworkPeeringData virtualNetworkPeeringParameters = new Network.VirtualNetworkPeeringData()
            {
                AllowVirtualNetworkAccess = true,
                AllowForwardedTraffic = true,
                AllowGatewayTransit = false,
                UseRemoteGateways = false,
                RemoteVirtualNetwork = new WritableSubResource()
                {
                    Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"),
                },
            };
            Network.Models.SyncRemoteAddressSpace? syncRemoteAddressSpace = new Network.Models.SyncRemoteAddressSpace("true");

            await collection.CreateOrUpdateAsync(virtualNetworkPeeringName, virtualNetworkPeeringParameters, syncRemoteAddressSpace);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get peering
            var collection = GetArmClient().GetVirtualNetwork(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet1")).GetVirtualNetworkPeerings();
            string virtualNetworkPeeringName = "peer";

            await collection.GetAsync(virtualNetworkPeeringName);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: List peerings
            var collection = GetArmClient().GetVirtualNetwork(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet1")).GetVirtualNetworkPeerings();

            collection.GetAllAsync();
        }
    }
}
