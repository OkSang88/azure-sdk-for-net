// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.KubernetesConfiguration.Tests.Mock;
using Azure.ResourceManager.KubernetesConfiguration.Tests.Mock.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.KubernetesConfiguration.Tests.Mock.Tests.Mock
{
    /// <summary> Test for FluxConfiguration. </summary>
    public partial class FluxConfigurationMockTests : MockTestBase
    {
        public FluxConfigurationMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get Flux Configuration
            var fluxConfigurationId = KubernetesConfiguration.Tests.Mock.FluxConfiguration.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "Microsoft.Kubernetes", "connectedClusters", "clusterName1", "srs-fluxconfig");
            var fluxConfiguration = GetArmClient().GetFluxConfiguration(fluxConfigurationId);

            await fluxConfiguration.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete Flux Configuration
            var fluxConfigurationId = KubernetesConfiguration.Tests.Mock.FluxConfiguration.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "Microsoft.Kubernetes", "connectedClusters", "clusterName1", "srs-fluxconfig");
            var fluxConfiguration = GetArmClient().GetFluxConfiguration(fluxConfigurationId);
            bool? forceDelete = null;

            await fluxConfiguration.DeleteAsync(true, forceDelete);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Patch Flux Configuration
            var fluxConfigurationId = KubernetesConfiguration.Tests.Mock.FluxConfiguration.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "Microsoft.Kubernetes", "connectedClusters", "clusterName1", "srs-fluxconfig");
            var fluxConfiguration = GetArmClient().GetFluxConfiguration(fluxConfigurationId);
            KubernetesConfiguration.Tests.Mock.Models.FluxConfigurationPatch fluxConfigurationPatch = new KubernetesConfiguration.Tests.Mock.Models.FluxConfigurationPatch()
            {
                Suspend = true,
                GitRepository = new KubernetesConfiguration.Tests.Mock.Models.GitRepositoryPatchDefinition()
                {
                    Url = "https://github.com/jonathan-innis/flux2-kustomize-helm-example.git",
                },
                Kustomizations = new Dictionary<string, KubernetesConfiguration.Tests.Mock.Models.KustomizationPatchDefinition>()
                {
                    ["srs-kustomization1"] = new KubernetesConfiguration.Tests.Mock.Models.KustomizationPatchDefinition(),
                    ["srs-kustomization2"] = new KubernetesConfiguration.Tests.Mock.Models.KustomizationPatchDefinition()
                    {
                        Path = "./test/alt-path",
                        DependsOn = new List<KubernetesConfiguration.Tests.Mock.Models.DependsOnDefinition>()
                        {
                        },
                        SyncIntervalInSeconds = 300,
                    },
                    ["srs-kustomization3"] = new KubernetesConfiguration.Tests.Mock.Models.KustomizationPatchDefinition()
                    {
                        Path = "./test/another-path",
                        SyncIntervalInSeconds = 300,
                    },
                },
            };

            await fluxConfiguration.UpdateAsync(true, fluxConfigurationPatch);
        }

        [RecordedTest]
        public async Task GetFluxConfigOperationStatu()
        {
            // Example: FluxConfigurationAsyncOperationStatus Get
            var fluxConfigurationId = KubernetesConfiguration.Tests.Mock.FluxConfiguration.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "Microsoft.Kubernetes", "connectedClusters", "clusterName1", "srs-fluxconfig");
            var fluxConfiguration = GetArmClient().GetFluxConfiguration(fluxConfigurationId);
            string operationId = "99999999-9999-9999-9999-999999999999";

            await fluxConfiguration.GetFluxConfigOperationStatuAsync(operationId);
        }
    }
}
