// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using AttestationManagementClient;
using AttestationManagementClient.Models;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;

namespace AttestationManagementClient.Tests.Mock
{
    /// <summary> Test for PrivateEndpointConnection. </summary>
    public partial class PrivateEndpointConnectionCollectionMockTests : MockTestBase
    {
        public PrivateEndpointConnectionCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: AttestationProviderPutPrivateEndpointConnection
            string privateEndpointConnectionName = "{privateEndpointConnectionName}";
            AttestationManagementClient.PrivateEndpointConnectionData properties = new AttestationManagementClient.PrivateEndpointConnectionData()
            {
                PrivateLinkServiceConnectionState = new AttestationManagementClient.Models.PrivateLinkServiceConnectionState()
                {
                    Status = new AttestationManagementClient.Models.PrivateEndpointServiceConnectionStatus("Approved"),
                    Description = "Auto-Approved",
                },
            };

            var attestationProviderId = AttestationManagementClient.AttestationProvider.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res7687", "sto9699");
            var collection = GetArmClient().GetAttestationProvider(attestationProviderId).GetPrivateEndpointConnections();
            await collection.CreateOrUpdateAsync(true, privateEndpointConnectionName, properties);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: AttestationProviderGetPrivateEndpointConnection
            string privateEndpointConnectionName = "{privateEndpointConnectionName}";

            var attestationProviderId = AttestationManagementClient.AttestationProvider.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res6977", "sto2527");
            var collection = GetArmClient().GetAttestationProvider(attestationProviderId).GetPrivateEndpointConnections();
            await collection.GetAsync(privateEndpointConnectionName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: AttestationProviderListPrivateEndpointConnections

            var attestationProviderId = AttestationManagementClient.AttestationProvider.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res6977", "sto2527");
            var collection = GetArmClient().GetAttestationProvider(attestationProviderId).GetPrivateEndpointConnections();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
