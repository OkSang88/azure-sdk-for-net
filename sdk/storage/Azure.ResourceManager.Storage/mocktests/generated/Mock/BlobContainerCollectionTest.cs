// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Storage;
using Azure.ResourceManager.Storage.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Storage.Tests.Mock
{
    /// <summary> Test for BlobContainer. </summary>
    public partial class BlobContainerCollectionMockTests : MockTestBase
    {
        public BlobContainerCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: PutContainerWithDefaultEncryptionScope
            var collection = GetArmClient().GetBlobService(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/blobServices/default")).GetBlobContainers();
            string containerName = "container6185";
            Storage.BlobContainerData blobContainer = new Storage.BlobContainerData()
            {
                DefaultEncryptionScope = "encryptionscope185",
                DenyEncryptionScopeOverride = true,
            };

            await collection.CreateOrUpdateAsync(containerName, blobContainer);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync2()
        {
            // Example: PutContainerWithObjectLevelWorm
            var collection = GetArmClient().GetBlobService(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/blobServices/default")).GetBlobContainers();
            string containerName = "container6185";
            Storage.BlobContainerData blobContainer = new Storage.BlobContainerData()
            {
                ImmutableStorageWithVersioning = new Storage.Models.ImmutableStorageWithVersioning()
                {
                    Enabled = true,
                },
            };

            await collection.CreateOrUpdateAsync(containerName, blobContainer);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync3()
        {
            // Example: PutContainers
            var collection = GetArmClient().GetBlobService(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/blobServices/default")).GetBlobContainers();
            string containerName = "container6185";
            Storage.BlobContainerData blobContainer = new Storage.BlobContainerData();

            await collection.CreateOrUpdateAsync(containerName, blobContainer);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: GetContainers
            var collection = GetArmClient().GetBlobService(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res9871/providers/Microsoft.Storage/storageAccounts/sto6217/blobServices/default")).GetBlobContainers();
            string containerName = "container1634";

            await collection.GetAsync(containerName);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: ListContainers
            var collection = GetArmClient().GetBlobService(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/blobServices/default")).GetBlobContainers();
            string maxpagesize = null;
            string filter = null;
            Storage.Models.ListContainersInclude? include = null;

            collection.GetAllAsync(maxpagesize, filter, include);
        }

        [RecordedTest]
        public void GetAllAsync2()
        {
            // Example: ListDeletedContainers
            var collection = GetArmClient().GetBlobService(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/blobServices/default")).GetBlobContainers();
            string maxpagesize = null;
            string filter = null;
            Storage.Models.ListContainersInclude? include = new Storage.Models.ListContainersInclude("deleted");

            collection.GetAllAsync(maxpagesize, filter, include);
        }
    }
}
