// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.OperationalInsights.Models;

namespace Azure.ResourceManager.OperationalInsights
{
    /// <summary> A Class representing a Workspace along with the instance operations that can be performed on it. </summary>
    public partial class Workspace : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="Workspace"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string workspaceName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}";
            return new ResourceIdentifier(resourceId);
        }
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly WorkspacesRestOperations _workspacesRestClient;
        private readonly IntelligencePacksRestOperations _intelligencePacksRestClient;
        private readonly ManagementGroupsRestOperations _managementGroupsRestClient;
        private readonly SharedKeysRestOperations _sharedKeysRestClient;
        private readonly UsagesRestOperations _usagesRestClient;
        private readonly AvailableServiceTiersRestOperations _availableServiceTiersRestClient;
        private readonly GatewaysRestOperations _gatewaysRestClient;
        private readonly SchemaRestOperations _schemaRestClient;
        private readonly WorkspacePurgeRestOperations _workspacePurgeRestClient;
        private readonly WorkspaceData _data;

        /// <summary> Initializes a new instance of the <see cref="Workspace"/> class for mocking. </summary>
        protected Workspace()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "Workspace"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal Workspace(ArmResource options, WorkspaceData data) : base(options, data.Id)
        {
            HasData = true;
            _data = data;
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            ClientOptions.TryGetApiVersion(ResourceType, out string apiVersion);
            _workspacesRestClient = new WorkspacesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _intelligencePacksRestClient = new IntelligencePacksRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _managementGroupsRestClient = new ManagementGroupsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _sharedKeysRestClient = new SharedKeysRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _usagesRestClient = new UsagesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _availableServiceTiersRestClient = new AvailableServiceTiersRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _gatewaysRestClient = new GatewaysRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _schemaRestClient = new SchemaRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _workspacePurgeRestClient = new WorkspacePurgeRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Initializes a new instance of the <see cref="Workspace"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal Workspace(ArmResource options, ResourceIdentifier id) : base(options, id)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            ClientOptions.TryGetApiVersion(ResourceType, out string apiVersion);
            _workspacesRestClient = new WorkspacesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _intelligencePacksRestClient = new IntelligencePacksRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _managementGroupsRestClient = new ManagementGroupsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _sharedKeysRestClient = new SharedKeysRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _usagesRestClient = new UsagesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _availableServiceTiersRestClient = new AvailableServiceTiersRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _gatewaysRestClient = new GatewaysRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _schemaRestClient = new SchemaRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _workspacePurgeRestClient = new WorkspacePurgeRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Initializes a new instance of the <see cref="Workspace"/> class. </summary>
        /// <param name="clientOptions"> The client options to build client context. </param>
        /// <param name="credential"> The credential to build client context. </param>
        /// <param name="uri"> The uri to build client context. </param>
        /// <param name="pipeline"> The pipeline to build client context. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal Workspace(ArmClientOptions clientOptions, TokenCredential credential, Uri uri, HttpPipeline pipeline, ResourceIdentifier id) : base(clientOptions, credential, uri, pipeline, id)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            ClientOptions.TryGetApiVersion(ResourceType, out string apiVersion);
            _workspacesRestClient = new WorkspacesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _intelligencePacksRestClient = new IntelligencePacksRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _managementGroupsRestClient = new ManagementGroupsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _sharedKeysRestClient = new SharedKeysRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _usagesRestClient = new UsagesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _availableServiceTiersRestClient = new AvailableServiceTiersRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _gatewaysRestClient = new GatewaysRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _schemaRestClient = new SchemaRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
            _workspacePurgeRestClient = new WorkspacePurgeRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.OperationalInsights/workspaces";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual WorkspaceData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a workspace instance. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<Workspace>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Workspace.Get");
            scope.Start();
            try
            {
                var response = await _workspacesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new Workspace(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a workspace instance. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Workspace> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Workspace.Get");
            scope.Start();
            try
            {
                var response = _workspacesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new Workspace(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public async virtual Task<IEnumerable<AzureLocation>> GetAvailableLocationsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Workspace.GetAvailableLocations");
            scope.Start();
            try
            {
                return await ListAvailableLocationsAsync(ResourceType, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public virtual IEnumerable<AzureLocation> GetAvailableLocations(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Workspace.GetAvailableLocations");
            scope.Start();
            try
            {
                return ListAvailableLocations(ResourceType, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a workspace resource. To recover the workspace, create it again with the same name, in the same subscription, resource group and location. The name is kept for 14 days and cannot be used for another workspace. To remove the workspace completely and release the name, use the force flag. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="force"> Deletes the workspace without the recovery option. A workspace that was deleted with this flag cannot be recovered. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<WorkspaceDeleteOperation> DeleteAsync(bool waitForCompletion, bool? force = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Workspace.Delete");
            scope.Start();
            try
            {
                var response = await _workspacesRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, force, cancellationToken).ConfigureAwait(false);
                var operation = new WorkspaceDeleteOperation(_clientDiagnostics, Pipeline, _workspacesRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, force).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a workspace resource. To recover the workspace, create it again with the same name, in the same subscription, resource group and location. The name is kept for 14 days and cannot be used for another workspace. To remove the workspace completely and release the name, use the force flag. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="force"> Deletes the workspace without the recovery option. A workspace that was deleted with this flag cannot be recovered. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual WorkspaceDeleteOperation Delete(bool waitForCompletion, bool? force = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Workspace.Delete");
            scope.Start();
            try
            {
                var response = _workspacesRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, force, cancellationToken);
                var operation = new WorkspaceDeleteOperation(_clientDiagnostics, Pipeline, _workspacesRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, force).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add a tag to the current resource. </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> The updated resource with the tag added. </returns>
        public async virtual Task<Response<Workspace>> AddTagAsync(string key, string value, CancellationToken cancellationToken = default)
        {
            if (string.IsNullOrWhiteSpace(key))
            {
                throw new ArgumentNullException(nameof(key), $"{nameof(key)} provided cannot be null or a whitespace.");
            }

            using var scope = _clientDiagnostics.CreateScope("Workspace.AddTag");
            scope.Start();
            try
            {
                var originalTags = await TagResource.GetAsync(cancellationToken).ConfigureAwait(false);
                originalTags.Value.Data.Properties.TagsValue[key] = value;
                await TagResource.CreateOrUpdateAsync(true, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalResponse = await _workspacesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new Workspace(this, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add a tag to the current resource. </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> The updated resource with the tag added. </returns>
        public virtual Response<Workspace> AddTag(string key, string value, CancellationToken cancellationToken = default)
        {
            if (string.IsNullOrWhiteSpace(key))
            {
                throw new ArgumentNullException(nameof(key), $"{nameof(key)} provided cannot be null or a whitespace.");
            }

            using var scope = _clientDiagnostics.CreateScope("Workspace.AddTag");
            scope.Start();
            try
            {
                var originalTags = TagResource.Get(cancellationToken);
                originalTags.Value.Data.Properties.TagsValue[key] = value;
                TagResource.CreateOrUpdate(true, originalTags.Value.Data, cancellationToken: cancellationToken);
                var originalResponse = _workspacesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return Response.FromValue(new Workspace(this, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Replace the tags on the resource with the given set. </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> The updated resource with the tags replaced. </returns>
        public async virtual Task<Response<Workspace>> SetTagsAsync(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            if (tags == null)
            {
                throw new ArgumentNullException(nameof(tags), $"{nameof(tags)} provided cannot be null.");
            }

            using var scope = _clientDiagnostics.CreateScope("Workspace.SetTags");
            scope.Start();
            try
            {
                await TagResource.DeleteAsync(true, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalTags = await TagResource.GetAsync(cancellationToken).ConfigureAwait(false);
                originalTags.Value.Data.Properties.TagsValue.ReplaceWith(tags);
                await TagResource.CreateOrUpdateAsync(true, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalResponse = await _workspacesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new Workspace(this, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Replace the tags on the resource with the given set. </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> The updated resource with the tags replaced. </returns>
        public virtual Response<Workspace> SetTags(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            if (tags == null)
            {
                throw new ArgumentNullException(nameof(tags), $"{nameof(tags)} provided cannot be null.");
            }

            using var scope = _clientDiagnostics.CreateScope("Workspace.SetTags");
            scope.Start();
            try
            {
                TagResource.Delete(true, cancellationToken: cancellationToken);
                var originalTags = TagResource.Get(cancellationToken);
                originalTags.Value.Data.Properties.TagsValue.ReplaceWith(tags);
                TagResource.CreateOrUpdate(true, originalTags.Value.Data, cancellationToken: cancellationToken);
                var originalResponse = _workspacesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return Response.FromValue(new Workspace(this, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Removes a tag by key from the resource. </summary>
        /// <param name="key"> The key of the tag to remove. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> The updated resource with the tag removed. </returns>
        public async virtual Task<Response<Workspace>> RemoveTagAsync(string key, CancellationToken cancellationToken = default)
        {
            if (string.IsNullOrWhiteSpace(key))
            {
                throw new ArgumentNullException(nameof(key), $"{nameof(key)} provided cannot be null or a whitespace.");
            }

            using var scope = _clientDiagnostics.CreateScope("Workspace.RemoveTag");
            scope.Start();
            try
            {
                var originalTags = await TagResource.GetAsync(cancellationToken).ConfigureAwait(false);
                originalTags.Value.Data.Properties.TagsValue.Remove(key);
                await TagResource.CreateOrUpdateAsync(true, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalResponse = await _workspacesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new Workspace(this, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Removes a tag by key from the resource. </summary>
        /// <param name="key"> The key of the tag to remove. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> The updated resource with the tag removed. </returns>
        public virtual Response<Workspace> RemoveTag(string key, CancellationToken cancellationToken = default)
        {
            if (string.IsNullOrWhiteSpace(key))
            {
                throw new ArgumentNullException(nameof(key), $"{nameof(key)} provided cannot be null or a whitespace.");
            }

            using var scope = _clientDiagnostics.CreateScope("Workspace.RemoveTag");
            scope.Start();
            try
            {
                var originalTags = TagResource.Get(cancellationToken);
                originalTags.Value.Data.Properties.TagsValue.Remove(key);
                TagResource.CreateOrUpdate(true, originalTags.Value.Data, cancellationToken: cancellationToken);
                var originalResponse = _workspacesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return Response.FromValue(new Workspace(this, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates a workspace. </summary>
        /// <param name="parameters"> The parameters required to patch a workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public async virtual Task<Response<Workspace>> UpdateAsync(WorkspacePatch parameters, CancellationToken cancellationToken = default)
        {
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("Workspace.Update");
            scope.Start();
            try
            {
                var response = await _workspacesRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, parameters, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new Workspace(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates a workspace. </summary>
        /// <param name="parameters"> The parameters required to patch a workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public virtual Response<Workspace> Update(WorkspacePatch parameters, CancellationToken cancellationToken = default)
        {
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("Workspace.Update");
            scope.Start();
            try
            {
                var response = _workspacesRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, parameters, cancellationToken);
                return Response.FromValue(new Workspace(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Disables an intelligence pack for a given workspace. </summary>
        /// <param name="intelligencePackName"> The name of the intelligence pack to be disabled. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="intelligencePackName"/> is null. </exception>
        public async virtual Task<Response> DisableIntelligencePackAsync(string intelligencePackName, CancellationToken cancellationToken = default)
        {
            if (intelligencePackName == null)
            {
                throw new ArgumentNullException(nameof(intelligencePackName));
            }

            using var scope = _clientDiagnostics.CreateScope("Workspace.DisableIntelligencePack");
            scope.Start();
            try
            {
                var response = await _intelligencePacksRestClient.DisableAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, intelligencePackName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Disables an intelligence pack for a given workspace. </summary>
        /// <param name="intelligencePackName"> The name of the intelligence pack to be disabled. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="intelligencePackName"/> is null. </exception>
        public virtual Response DisableIntelligencePack(string intelligencePackName, CancellationToken cancellationToken = default)
        {
            if (intelligencePackName == null)
            {
                throw new ArgumentNullException(nameof(intelligencePackName));
            }

            using var scope = _clientDiagnostics.CreateScope("Workspace.DisableIntelligencePack");
            scope.Start();
            try
            {
                var response = _intelligencePacksRestClient.Disable(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, intelligencePackName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Enables an intelligence pack for a given workspace. </summary>
        /// <param name="intelligencePackName"> The name of the intelligence pack to be enabled. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="intelligencePackName"/> is null. </exception>
        public async virtual Task<Response> EnableIntelligencePackAsync(string intelligencePackName, CancellationToken cancellationToken = default)
        {
            if (intelligencePackName == null)
            {
                throw new ArgumentNullException(nameof(intelligencePackName));
            }

            using var scope = _clientDiagnostics.CreateScope("Workspace.EnableIntelligencePack");
            scope.Start();
            try
            {
                var response = await _intelligencePacksRestClient.EnableAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, intelligencePackName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Enables an intelligence pack for a given workspace. </summary>
        /// <param name="intelligencePackName"> The name of the intelligence pack to be enabled. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="intelligencePackName"/> is null. </exception>
        public virtual Response EnableIntelligencePack(string intelligencePackName, CancellationToken cancellationToken = default)
        {
            if (intelligencePackName == null)
            {
                throw new ArgumentNullException(nameof(intelligencePackName));
            }

            using var scope = _clientDiagnostics.CreateScope("Workspace.EnableIntelligencePack");
            scope.Start();
            try
            {
                var response = _intelligencePacksRestClient.Enable(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, intelligencePackName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all the intelligence packs possible and whether they are enabled or disabled for a given workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="IntelligencePack" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<IntelligencePack> GetIntelligencePacksAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<IntelligencePack>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Workspace.GetIntelligencePacks");
                scope.Start();
                try
                {
                    var response = await _intelligencePacksRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Lists all the intelligence packs possible and whether they are enabled or disabled for a given workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="IntelligencePack" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<IntelligencePack> GetIntelligencePacks(CancellationToken cancellationToken = default)
        {
            Page<IntelligencePack> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Workspace.GetIntelligencePacks");
                scope.Start();
                try
                {
                    var response = _intelligencePacksRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Gets a list of management groups connected to a workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ManagementGroup" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ManagementGroup> GetManagementGroupsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ManagementGroup>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Workspace.GetManagementGroups");
                scope.Start();
                try
                {
                    var response = await _managementGroupsRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Gets a list of management groups connected to a workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ManagementGroup" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ManagementGroup> GetManagementGroups(CancellationToken cancellationToken = default)
        {
            Page<ManagementGroup> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Workspace.GetManagementGroups");
                scope.Start();
                try
                {
                    var response = _managementGroupsRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Gets the shared keys for a workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<SharedKeys>> GetSharedKeysSharedKeyAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Workspace.GetSharedKeysSharedKey");
            scope.Start();
            try
            {
                var response = await _sharedKeysRestClient.GetSharedKeysAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the shared keys for a workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SharedKeys> GetSharedKeysSharedKey(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Workspace.GetSharedKeysSharedKey");
            scope.Start();
            try
            {
                var response = _sharedKeysRestClient.GetSharedKeys(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Regenerates the shared keys for a Log Analytics Workspace. These keys are used to connect Microsoft Operational Insights agents to the workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<SharedKeys>> RegenerateSharedKeyAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Workspace.RegenerateSharedKey");
            scope.Start();
            try
            {
                var response = await _sharedKeysRestClient.RegenerateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Regenerates the shared keys for a Log Analytics Workspace. These keys are used to connect Microsoft Operational Insights agents to the workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SharedKeys> RegenerateSharedKey(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Workspace.RegenerateSharedKey");
            scope.Start();
            try
            {
                var response = _sharedKeysRestClient.Regenerate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of usage metrics for a workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="UsageMetric" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<UsageMetric> GetUsagesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<UsageMetric>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Workspace.GetUsages");
                scope.Start();
                try
                {
                    var response = await _usagesRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Gets a list of usage metrics for a workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="UsageMetric" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<UsageMetric> GetUsages(CancellationToken cancellationToken = default)
        {
            Page<UsageMetric> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Workspace.GetUsages");
                scope.Start();
                try
                {
                    var response = _usagesRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Gets the available service tiers for the workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AvailableServiceTier" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AvailableServiceTier> GetAvailableServiceTiersAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AvailableServiceTier>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Workspace.GetAvailableServiceTiers");
                scope.Start();
                try
                {
                    var response = await _availableServiceTiersRestClient.ListByWorkspaceAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Gets the available service tiers for the workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AvailableServiceTier" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AvailableServiceTier> GetAvailableServiceTiers(CancellationToken cancellationToken = default)
        {
            Page<AvailableServiceTier> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Workspace.GetAvailableServiceTiers");
                scope.Start();
                try
                {
                    var response = _availableServiceTiersRestClient.ListByWorkspace(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Delete a Log Analytics gateway. </summary>
        /// <param name="gatewayId"> The Log Analytics gateway Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="gatewayId"/> is null. </exception>
        public async virtual Task<Response> DeleteGatewayAsync(string gatewayId, CancellationToken cancellationToken = default)
        {
            if (gatewayId == null)
            {
                throw new ArgumentNullException(nameof(gatewayId));
            }

            using var scope = _clientDiagnostics.CreateScope("Workspace.DeleteGateway");
            scope.Start();
            try
            {
                var response = await _gatewaysRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, gatewayId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a Log Analytics gateway. </summary>
        /// <param name="gatewayId"> The Log Analytics gateway Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="gatewayId"/> is null. </exception>
        public virtual Response DeleteGateway(string gatewayId, CancellationToken cancellationToken = default)
        {
            if (gatewayId == null)
            {
                throw new ArgumentNullException(nameof(gatewayId));
            }

            using var scope = _clientDiagnostics.CreateScope("Workspace.DeleteGateway");
            scope.Start();
            try
            {
                var response = _gatewaysRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, gatewayId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the schema for a given workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SearchSchemaValue" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SearchSchemaValue> GetSchemasAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SearchSchemaValue>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Workspace.GetSchemas");
                scope.Start();
                try
                {
                    var response = await _schemaRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Gets the schema for a given workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SearchSchemaValue" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SearchSchemaValue> GetSchemas(CancellationToken cancellationToken = default)
        {
            Page<SearchSchemaValue> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Workspace.GetSchemas");
                scope.Start();
                try
                {
                    var response = _schemaRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Purges data in an Log Analytics workspace by a set of user-defined filters.
        /// 
        /// In order to manage system resources, purge requests are throttled at 50 requests per hour. You should batch the execution of purge requests by sending a single command whose predicate includes all user identities that require purging. Use the in operator to specify multiple identities. You should run the query prior to using for a purge request to verify that the results are expected.
        /// </summary>
        /// <param name="body"> Describes the body of a request to purge data in a single table of an Log Analytics Workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async virtual Task<Response<WorkspacePurgeResponse>> PurgeWorkspacePurgeAsync(WorkspacePurgeBody body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var scope = _clientDiagnostics.CreateScope("Workspace.PurgeWorkspacePurge");
            scope.Start();
            try
            {
                var response = await _workspacePurgeRestClient.PurgeAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, body, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Purges data in an Log Analytics workspace by a set of user-defined filters.
        /// 
        /// In order to manage system resources, purge requests are throttled at 50 requests per hour. You should batch the execution of purge requests by sending a single command whose predicate includes all user identities that require purging. Use the in operator to specify multiple identities. You should run the query prior to using for a purge request to verify that the results are expected.
        /// </summary>
        /// <param name="body"> Describes the body of a request to purge data in a single table of an Log Analytics Workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public virtual Response<WorkspacePurgeResponse> PurgeWorkspacePurge(WorkspacePurgeBody body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var scope = _clientDiagnostics.CreateScope("Workspace.PurgeWorkspacePurge");
            scope.Start();
            try
            {
                var response = _workspacePurgeRestClient.Purge(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, body, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets status of an ongoing purge operation. </summary>
        /// <param name="purgeId"> In a purge status request, this is the Id of the operation the status of which is returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="purgeId"/> is null. </exception>
        public async virtual Task<Response<WorkspacePurgeStatusResponse>> GetPurgeStatusWorkspacePurgeAsync(string purgeId, CancellationToken cancellationToken = default)
        {
            if (purgeId == null)
            {
                throw new ArgumentNullException(nameof(purgeId));
            }

            using var scope = _clientDiagnostics.CreateScope("Workspace.GetPurgeStatusWorkspacePurge");
            scope.Start();
            try
            {
                var response = await _workspacePurgeRestClient.GetPurgeStatusAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, purgeId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets status of an ongoing purge operation. </summary>
        /// <param name="purgeId"> In a purge status request, this is the Id of the operation the status of which is returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="purgeId"/> is null. </exception>
        public virtual Response<WorkspacePurgeStatusResponse> GetPurgeStatusWorkspacePurge(string purgeId, CancellationToken cancellationToken = default)
        {
            if (purgeId == null)
            {
                throw new ArgumentNullException(nameof(purgeId));
            }

            using var scope = _clientDiagnostics.CreateScope("Workspace.GetPurgeStatusWorkspacePurge");
            scope.Start();
            try
            {
                var response = _workspacePurgeRestClient.GetPurgeStatus(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, purgeId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        #region DataExport

        /// <summary> Gets a collection of DataExports in the Workspace. </summary>
        /// <returns> An object representing collection of DataExports and their operations over a Workspace. </returns>
        public virtual DataExportCollection GetDataExports()
        {
            return new DataExportCollection(this);
        }
        #endregion

        #region DataSource

        /// <summary> Gets a collection of DataSources in the Workspace. </summary>
        /// <returns> An object representing collection of DataSources and their operations over a Workspace. </returns>
        public virtual DataSourceCollection GetDataSources()
        {
            return new DataSourceCollection(this);
        }
        #endregion

        #region LinkedService

        /// <summary> Gets a collection of LinkedServices in the Workspace. </summary>
        /// <returns> An object representing collection of LinkedServices and their operations over a Workspace. </returns>
        public virtual LinkedServiceCollection GetLinkedServices()
        {
            return new LinkedServiceCollection(this);
        }
        #endregion

        #region LinkedStorageAccountsResource

        /// <summary> Gets a collection of LinkedStorageAccountsResources in the Workspace. </summary>
        /// <returns> An object representing collection of LinkedStorageAccountsResources and their operations over a Workspace. </returns>
        public virtual LinkedStorageAccountsResourceCollection GetLinkedStorageAccountsResources()
        {
            return new LinkedStorageAccountsResourceCollection(this);
        }
        #endregion

        #region StorageInsight

        /// <summary> Gets a collection of StorageInsights in the Workspace. </summary>
        /// <returns> An object representing collection of StorageInsights and their operations over a Workspace. </returns>
        public virtual StorageInsightCollection GetStorageInsights()
        {
            return new StorageInsightCollection(this);
        }
        #endregion

        #region SavedSearch

        /// <summary> Gets a collection of SavedSearches in the Workspace. </summary>
        /// <returns> An object representing collection of SavedSearches and their operations over a Workspace. </returns>
        public virtual SavedSearchCollection GetSavedSearches()
        {
            return new SavedSearchCollection(this);
        }
        #endregion

        #region Table

        /// <summary> Gets a collection of Tables in the Workspace. </summary>
        /// <returns> An object representing collection of Tables and their operations over a Workspace. </returns>
        public virtual TableCollection GetTables()
        {
            return new TableCollection(this);
        }
        #endregion
    }
}
