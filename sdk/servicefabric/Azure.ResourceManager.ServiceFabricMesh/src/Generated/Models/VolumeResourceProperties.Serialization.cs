// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceFabricMesh.Models
{
    public partial class VolumeResourceProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            writer.WritePropertyName("provider");
            writer.WriteStringValue(Provider.ToString());
            if (Optional.IsDefined(AzureFileParameters))
            {
                writer.WritePropertyName("azureFileParameters");
                writer.WriteObjectValue(AzureFileParameters);
            }
            writer.WriteEndObject();
        }

        internal static VolumeResourceProperties DeserializeVolumeResourceProperties(JsonElement element)
        {
            Optional<string> description = default;
            Optional<ResourceStatus> status = default;
            Optional<string> statusDetails = default;
            VolumeProvider provider = default;
            Optional<VolumeProviderParametersAzureFile> azureFileParameters = default;
            Optional<string> provisioningState = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    status = new ResourceStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("statusDetails"))
                {
                    statusDetails = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provider"))
                {
                    provider = new VolumeProvider(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("azureFileParameters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    azureFileParameters = VolumeProviderParametersAzureFile.DeserializeVolumeProviderParametersAzureFile(property.Value);
                    continue;
                }
                if (property.NameEquals("provisioningState"))
                {
                    provisioningState = property.Value.GetString();
                    continue;
                }
            }
            return new VolumeResourceProperties(provisioningState.Value, description.Value, Optional.ToNullable(status), statusDetails.Value, provider, azureFileParameters.Value);
        }
    }
}
