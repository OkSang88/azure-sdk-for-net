// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Communication;
using Azure.ResourceManager.Communication.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Communication.Tests.Mock
{
    /// <summary> Test for CommunicationService. </summary>
    public partial class CommunicationServiceMockTests : MockTestBase
    {
        public CommunicationServiceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get resource
            var communicationServiceId = Communication.CommunicationService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "MyResourceGroup", "MyCommunicationResource");
            var communicationService = GetArmClient().GetCommunicationService(communicationServiceId);

            await communicationService.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete resource
            var communicationServiceId = Communication.CommunicationService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "MyResourceGroup", "MyCommunicationResource");
            var communicationService = GetArmClient().GetCommunicationService(communicationServiceId);

            await communicationService.DeleteAsync();
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Update resource
            var communicationServiceId = Communication.CommunicationService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "MyResourceGroup", "MyCommunicationResource");
            var communicationService = GetArmClient().GetCommunicationService(communicationServiceId);
            Communication.CommunicationServiceData parameters = new Communication.CommunicationServiceData();

            await communicationService.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task LinkNotificationHub()
        {
            // Example: Link notification hub
            var communicationServiceId = Communication.CommunicationService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "MyResourceGroup", "MyCommunicationResource");
            var communicationService = GetArmClient().GetCommunicationService(communicationServiceId);
            Communication.Models.LinkNotificationHubOptions linkNotificationHubParameters = new Communication.Models.LinkNotificationHubOptions(resourceId: "/subscriptions/12345/resourceGroups/MyOtherResourceGroup/providers/Microsoft.NotificationHubs/namespaces/MyNamespace/notificationHubs/MyHub", connectionString: "Endpoint=sb://MyNamespace.servicebus.windows.net/;SharedAccessKey=abcd1234");

            await communicationService.LinkNotificationHubAsync(linkNotificationHubParameters);
        }

        [RecordedTest]
        public async Task GetKeys()
        {
            // Example: List keys
            var communicationServiceId = Communication.CommunicationService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "MyResourceGroup", "MyCommunicationResource");
            var communicationService = GetArmClient().GetCommunicationService(communicationServiceId);

            await communicationService.GetKeysAsync();
        }

        [RecordedTest]
        public async Task RegenerateKey()
        {
            // Example: Regenerate key
            var communicationServiceId = Communication.CommunicationService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "MyResourceGroup", "MyCommunicationResource");
            var communicationService = GetArmClient().GetCommunicationService(communicationServiceId);
            Communication.Models.RegenerateKeyOptions parameters = new Communication.Models.RegenerateKeyOptions()
            {
                KeyType = Communication.Models.KeyType.Primary,
            };

            await communicationService.RegenerateKeyAsync(parameters);
        }
    }
}
