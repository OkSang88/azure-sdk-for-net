// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using StorageCacheManagementClient;
using StorageCacheManagementClient.Models;

namespace StorageCacheManagementClient.Tests.Mock
{
    /// <summary> Test for Cache. </summary>
    public partial class CacheMockTests : MockTestBase
    {
        public CacheMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Caches_Get
            var cacheId = StorageCacheManagementClient.Cache.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "scgroup", "sc1");
            var cache = GetArmClient().GetCache(cacheId);

            await cache.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Caches_Delete
            var cacheId = StorageCacheManagementClient.Cache.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "scgroup", "sc");
            var cache = GetArmClient().GetCache(cacheId);

            await cache.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Caches_Update
            var cacheId = StorageCacheManagementClient.Cache.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "scgroup", "sc1");
            var cache = GetArmClient().GetCache(cacheId);
            StorageCacheManagementClient.CacheData cache2 = new StorageCacheManagementClient.CacheData(location: "westus")
            {
                Sku = new StorageCacheManagementClient.Models.CacheSku()
                {
                    Name = "Standard_2G",
                },
                CacheSizeGB = 3072,
                Subnet = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Network/virtualNetworks/scvnet/subnets/sub1",
                NetworkSettings = new StorageCacheManagementClient.Models.CacheNetworkSettings()
                {
                    Mtu = 1500,
                    DnsSearchDomain = "contoso.com",
                    NtpServer = "time.contoso.com",
                },
                SecuritySettings = new StorageCacheManagementClient.Models.CacheSecuritySettings(),
                DirectoryServicesSettings = new StorageCacheManagementClient.Models.CacheDirectorySettings()
                {
                    ActiveDirectory = new StorageCacheManagementClient.Models.CacheActiveDirectorySettings(primaryDnsIpAddress: "192.0.2.10", domainName: "contosoAd.contoso.local", domainNetBiosName: "contosoAd", cacheNetBiosName: "contosoSmb")
                    {
                        SecondaryDnsIpAddress = "192.0.2.11",
                    },
                    UsernameDownload = new StorageCacheManagementClient.Models.CacheUsernameDownloadSettings()
                    {
                        ExtendedGroups = true,
                        UsernameSource = new StorageCacheManagementClient.Models.UsernameSource("AD"),
                    },
                },
            };
            cache2.Tags.ReplaceWith(new Dictionary<string, string>() { ["Dept"] = "Contoso", });
            await cache.UpdateAsync(cache2);
        }

        [RecordedTest]
        public async Task Update2()
        {
            // Example: Caches_Update_ldap_only
            var cacheId = StorageCacheManagementClient.Cache.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "scgroup", "sc1");
            var cache = GetArmClient().GetCache(cacheId);
            StorageCacheManagementClient.CacheData cache2 = new StorageCacheManagementClient.CacheData(location: "westus")
            {
                Sku = new StorageCacheManagementClient.Models.CacheSku()
                {
                    Name = "Standard_2G",
                },
                CacheSizeGB = 3072,
                Subnet = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Network/virtualNetworks/scvnet/subnets/sub1",
                NetworkSettings = new StorageCacheManagementClient.Models.CacheNetworkSettings()
                {
                    Mtu = 1500,
                    DnsSearchDomain = "contoso.com",
                    NtpServer = "time.contoso.com",
                },
                SecuritySettings = new StorageCacheManagementClient.Models.CacheSecuritySettings(),
                DirectoryServicesSettings = new StorageCacheManagementClient.Models.CacheDirectorySettings()
                {
                    UsernameDownload = new StorageCacheManagementClient.Models.CacheUsernameDownloadSettings()
                    {
                        ExtendedGroups = true,
                        UsernameSource = new StorageCacheManagementClient.Models.UsernameSource("LDAP"),
                        LdapServer = "192.0.2.12",
                        LdapBaseDN = "dc=contosoad,dc=contoso,dc=local",
                        Credentials = new StorageCacheManagementClient.Models.CacheUsernameDownloadSettingsCredentials()
                        {
                            BindDn = "cn=ldapadmin,dc=contosoad,dc=contoso,dc=local",
                            BindPassword = "<bindPassword>",
                        },
                    },
                },
            };
            cache2.Tags.ReplaceWith(new Dictionary<string, string>() { ["Dept"] = "Contoso", });
            await cache.UpdateAsync(cache2);
        }

        [RecordedTest]
        public async Task DebugInfo()
        {
            // Example: Caches_DebugInfo
            var cacheId = StorageCacheManagementClient.Cache.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "scgroup", "sc");
            var cache = GetArmClient().GetCache(cacheId);

            await cache.DebugInfoAsync(true);
        }

        [RecordedTest]
        public async Task Flush()
        {
            // Example: Caches_Flush
            var cacheId = StorageCacheManagementClient.Cache.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "scgroup", "sc");
            var cache = GetArmClient().GetCache(cacheId);

            await cache.FlushAsync(true);
        }

        [RecordedTest]
        public async Task Start()
        {
            // Example: Caches_Start
            var cacheId = StorageCacheManagementClient.Cache.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "scgroup", "sc");
            var cache = GetArmClient().GetCache(cacheId);

            await cache.StartAsync(true);
        }

        [RecordedTest]
        public async Task Stop()
        {
            // Example: Caches_Stop
            var cacheId = StorageCacheManagementClient.Cache.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "scgroup", "sc");
            var cache = GetArmClient().GetCache(cacheId);

            await cache.StopAsync(true);
        }

        [RecordedTest]
        public async Task UpgradeFirmware()
        {
            // Example: Caches_UpgradeFirmware
            var cacheId = StorageCacheManagementClient.Cache.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "scgroup", "sc1");
            var cache = GetArmClient().GetCache(cacheId);

            await cache.UpgradeFirmwareAsync(true);
        }
    }
}
