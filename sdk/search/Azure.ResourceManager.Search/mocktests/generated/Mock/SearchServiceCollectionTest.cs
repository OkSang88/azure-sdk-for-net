// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using SearchManagementClient;
using SearchManagementClient.Models;

namespace SearchManagementClient.Tests.Mock
{
    /// <summary> Test for SearchService. </summary>
    public partial class SearchServiceCollectionMockTests : MockTestBase
    {
        public SearchServiceCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: SearchCreateOrUpdateService
            string searchServiceName = "mysearchservice";
            SearchManagementClient.SearchServiceData service = new SearchManagementClient.SearchServiceData(location: "westus")
            {
                Sku = new SearchManagementClient.Models.Sku()
                {
                    Name = SearchManagementClient.Models.SkuName.Standard,
                },
                ReplicaCount = 3,
                PartitionCount = 1,
                HostingMode = SearchManagementClient.Models.HostingMode.Default,
            };
            service.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>() { ["app-name"] = "My e-commerce app", }); SearchManagementClient.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetSearchServices();
            await collection.CreateOrUpdateAsync(true, searchServiceName, service, searchManagementRequestOptions);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: SearchCreateOrUpdateServiceToAllowAccessFromPrivateEndpoints
            string searchServiceName = "mysearchservice";
            SearchManagementClient.SearchServiceData service = new SearchManagementClient.SearchServiceData(location: "westus")
            {
                Sku = new SearchManagementClient.Models.Sku()
                {
                    Name = SearchManagementClient.Models.SkuName.Standard,
                },
                ReplicaCount = 3,
                PartitionCount = 1,
                HostingMode = SearchManagementClient.Models.HostingMode.Default,
                PublicNetworkAccess = SearchManagementClient.Models.PublicNetworkAccess.Disabled,
            };
            service.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>() { ["app-name"] = "My e-commerce app", }); SearchManagementClient.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetSearchServices();
            await collection.CreateOrUpdateAsync(true, searchServiceName, service, searchManagementRequestOptions);
        }

        [RecordedTest]
        public async Task CreateOrUpdate3()
        {
            // Example: SearchCreateOrUpdateServiceToAllowAccessFromPublicCustomIPs
            string searchServiceName = "mysearchservice";
            SearchManagementClient.SearchServiceData service = new SearchManagementClient.SearchServiceData(location: "westus")
            {
                Sku = new SearchManagementClient.Models.Sku()
                {
                    Name = SearchManagementClient.Models.SkuName.Standard,
                },
                ReplicaCount = 1,
                PartitionCount = 1,
                HostingMode = SearchManagementClient.Models.HostingMode.Default,
                NetworkRuleSet = new SearchManagementClient.Models.NetworkRuleSet(),
            };
            service.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>() { ["app-name"] = "My e-commerce app", }); SearchManagementClient.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetSearchServices();
            await collection.CreateOrUpdateAsync(true, searchServiceName, service, searchManagementRequestOptions);
        }

        [RecordedTest]
        public async Task CreateOrUpdate4()
        {
            // Example: SearchCreateOrUpdateServiceWithIdentity
            string searchServiceName = "mysearchservice";
            SearchManagementClient.SearchServiceData service = new SearchManagementClient.SearchServiceData(location: "westus")
            {
                Sku = new SearchManagementClient.Models.Sku()
                {
                    Name = SearchManagementClient.Models.SkuName.Standard,
                },
                Identity = new SearchManagementClient.Models.Identity(type: SearchManagementClient.Models.IdentityType.SystemAssigned),
                ReplicaCount = 3,
                PartitionCount = 1,
                HostingMode = SearchManagementClient.Models.HostingMode.Default,
            };
            service.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>() { ["app-name"] = "My e-commerce app", }); SearchManagementClient.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetSearchServices();
            await collection.CreateOrUpdateAsync(true, searchServiceName, service, searchManagementRequestOptions);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: SearchGetService
            string searchServiceName = "mysearchservice";
            SearchManagementClient.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetSearchServices();
            await collection.GetAsync(searchServiceName, searchManagementRequestOptions);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: SearchListServicesByResourceGroup
            SearchManagementClient.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetSearchServices();
            await foreach (var _ in collection.GetAllAsync(searchManagementRequestOptions))
            {
            }
        }
    }
}
