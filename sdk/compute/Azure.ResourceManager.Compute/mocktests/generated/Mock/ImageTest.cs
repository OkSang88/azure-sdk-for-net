// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for Image. </summary>
    public partial class ImageMockTests : MockTestBase
    {
        public ImageMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get information about a virtual machine image.
            var imageId = Compute.Image.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myImage");
            var image = GetArmClient().GetImage(imageId);
            string expand = null;

            await image.GetAsync(expand);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Updates tags of an Image.
            var imageId = Compute.Image.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myImage");
            var image = GetArmClient().GetImage(imageId);
            Compute.Models.ImageUpdate parameters = new Compute.Models.ImageUpdate()
            {
                SourceVirtualMachine = new WritableSubResource()
                {
                    Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
                },
                HyperVGeneration = new Compute.Models.HyperVGenerationTypes("V1"),
            };

            await image.UpdateAsync(true, parameters);
        }
    }
}
