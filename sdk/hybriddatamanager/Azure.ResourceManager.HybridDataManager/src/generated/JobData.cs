// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;
using Azure.ResourceManager.Models;
using HybridDataManagementClient.Models;

namespace HybridDataManagementClient
{
    /// <summary> A class representing the Job data model. </summary>
    public partial class JobData : Azure.ResourceManager.Models.Resource
    {
        /// <summary> Initializes a new instance of JobData. </summary>
        /// <param name="status"> Status of the job. </param>
        /// <param name="startTime"> Time at which the job was started in UTC ISO 8601 format. </param>
        /// <param name="isCancellable"> Describes whether the job is cancellable. </param>
        public JobData(JobStatus status, DateTimeOffset startTime, IsJobCancellable isCancellable)
        {
            Status = status;
            StartTime = startTime;
            IsCancellable = isCancellable;
        }

        /// <summary> Initializes a new instance of JobData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="type"> The type. </param>
        /// <param name="status"> Status of the job. </param>
        /// <param name="startTime"> Time at which the job was started in UTC ISO 8601 format. </param>
        /// <param name="endTime"> Time at which the job ended in UTC ISO 8601 format. </param>
        /// <param name="error"> Top level error for the job. </param>
        /// <param name="isCancellable"> Describes whether the job is cancellable. </param>
        /// <param name="bytesProcessed"> Number of bytes processed by the job as of now. </param>
        /// <param name="itemsProcessed"> Number of items processed by the job as of now. </param>
        /// <param name="totalBytesToProcess"> Number of bytes to be processed by the job in total. </param>
        /// <param name="totalItemsToProcess"> Number of items to be processed by the job in total. </param>
        /// <param name="details"> Details of a job run. This field will only be sent for expand details filter. </param>
        /// <param name="dataSourceName"> Name of the data source on which the job was triggered. </param>
        /// <param name="dataSinkName"> Name of the data sink on which the job was triggered. </param>
        internal JobData(ResourceIdentifier id, string name, ResourceType type, JobStatus status, DateTimeOffset startTime, DateTimeOffset? endTime, Error error, IsJobCancellable isCancellable, long? bytesProcessed, long? itemsProcessed, long? totalBytesToProcess, long? totalItemsToProcess, JobDetails details, string dataSourceName, string dataSinkName) : base(id, name, type)
        {
            Status = status;
            StartTime = startTime;
            EndTime = endTime;
            Error = error;
            IsCancellable = isCancellable;
            BytesProcessed = bytesProcessed;
            ItemsProcessed = itemsProcessed;
            TotalBytesToProcess = totalBytesToProcess;
            TotalItemsToProcess = totalItemsToProcess;
            Details = details;
            DataSourceName = dataSourceName;
            DataSinkName = dataSinkName;
        }

        /// <summary> Status of the job. </summary>
        public JobStatus Status { get; set; }
        /// <summary> Time at which the job was started in UTC ISO 8601 format. </summary>
        public DateTimeOffset StartTime { get; set; }
        /// <summary> Time at which the job ended in UTC ISO 8601 format. </summary>
        public DateTimeOffset? EndTime { get; set; }
        /// <summary> Top level error for the job. </summary>
        public Error Error { get; set; }
        /// <summary> Describes whether the job is cancellable. </summary>
        public IsJobCancellable IsCancellable { get; set; }
        /// <summary> Number of bytes processed by the job as of now. </summary>
        public long? BytesProcessed { get; set; }
        /// <summary> Number of items processed by the job as of now. </summary>
        public long? ItemsProcessed { get; set; }
        /// <summary> Number of bytes to be processed by the job in total. </summary>
        public long? TotalBytesToProcess { get; set; }
        /// <summary> Number of items to be processed by the job in total. </summary>
        public long? TotalItemsToProcess { get; set; }
        /// <summary> Details of a job run. This field will only be sent for expand details filter. </summary>
        public JobDetails Details { get; set; }
        /// <summary> Name of the data source on which the job was triggered. </summary>
        public string DataSourceName { get; set; }
        /// <summary> Name of the data sink on which the job was triggered. </summary>
        public string DataSinkName { get; set; }
    }
}
