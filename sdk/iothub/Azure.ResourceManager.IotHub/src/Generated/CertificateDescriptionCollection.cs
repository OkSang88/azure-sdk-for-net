// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.IotHub.Models;

namespace Azure.ResourceManager.IotHub
{
    /// <summary> A class representing collection of CertificateDescription and their operations over its parent. </summary>
    public partial class CertificateDescriptionCollection : ArmCollection, IEnumerable<CertificateDescription>, IAsyncEnumerable<CertificateDescription>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly CertificatesRestOperations _certificatesRestClient;

        /// <summary> Initializes a new instance of the <see cref="CertificateDescriptionCollection"/> class for mocking. </summary>
        protected CertificateDescriptionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="CertificateDescriptionCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal CertificateDescriptionCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            ClientOptions.TryGetApiVersion(CertificateDescription.ResourceType, out string apiVersion);
            _certificatesRestClient = new CertificatesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != IotHubDescription.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, IotHubDescription.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Adds new or replaces existing certificate. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="certificateName"> The name of the certificate. </param>
        /// <param name="certificateDescription"> The certificate body. </param>
        /// <param name="ifMatch"> ETag of the Certificate. Do not specify for creating a brand new certificate. Required to update an existing certificate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="certificateName"/> or <paramref name="certificateDescription"/> is null. </exception>
        public virtual CertificateDescriptionCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string certificateName, CertificateDescriptionData certificateDescription, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (certificateName == null)
            {
                throw new ArgumentNullException(nameof(certificateName));
            }
            if (certificateDescription == null)
            {
                throw new ArgumentNullException(nameof(certificateDescription));
            }

            using var scope = _clientDiagnostics.CreateScope("CertificateDescriptionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _certificatesRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, certificateName, certificateDescription, ifMatch, cancellationToken);
                var operation = new CertificateDescriptionCreateOrUpdateOperation(this, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds new or replaces existing certificate. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="certificateName"> The name of the certificate. </param>
        /// <param name="certificateDescription"> The certificate body. </param>
        /// <param name="ifMatch"> ETag of the Certificate. Do not specify for creating a brand new certificate. Required to update an existing certificate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="certificateName"/> or <paramref name="certificateDescription"/> is null. </exception>
        public async virtual Task<CertificateDescriptionCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string certificateName, CertificateDescriptionData certificateDescription, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (certificateName == null)
            {
                throw new ArgumentNullException(nameof(certificateName));
            }
            if (certificateDescription == null)
            {
                throw new ArgumentNullException(nameof(certificateDescription));
            }

            using var scope = _clientDiagnostics.CreateScope("CertificateDescriptionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _certificatesRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, certificateName, certificateDescription, ifMatch, cancellationToken).ConfigureAwait(false);
                var operation = new CertificateDescriptionCreateOrUpdateOperation(this, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the certificate. </summary>
        /// <param name="certificateName"> The name of the certificate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="certificateName"/> is null. </exception>
        public virtual Response<CertificateDescription> Get(string certificateName, CancellationToken cancellationToken = default)
        {
            if (certificateName == null)
            {
                throw new ArgumentNullException(nameof(certificateName));
            }

            using var scope = _clientDiagnostics.CreateScope("CertificateDescriptionCollection.Get");
            scope.Start();
            try
            {
                var response = _certificatesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, certificateName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new CertificateDescription(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the certificate. </summary>
        /// <param name="certificateName"> The name of the certificate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="certificateName"/> is null. </exception>
        public async virtual Task<Response<CertificateDescription>> GetAsync(string certificateName, CancellationToken cancellationToken = default)
        {
            if (certificateName == null)
            {
                throw new ArgumentNullException(nameof(certificateName));
            }

            using var scope = _clientDiagnostics.CreateScope("CertificateDescriptionCollection.Get");
            scope.Start();
            try
            {
                var response = await _certificatesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, certificateName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new CertificateDescription(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="certificateName"> The name of the certificate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="certificateName"/> is null. </exception>
        public virtual Response<CertificateDescription> GetIfExists(string certificateName, CancellationToken cancellationToken = default)
        {
            if (certificateName == null)
            {
                throw new ArgumentNullException(nameof(certificateName));
            }

            using var scope = _clientDiagnostics.CreateScope("CertificateDescriptionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _certificatesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, certificateName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<CertificateDescription>(null, response.GetRawResponse());
                return Response.FromValue(new CertificateDescription(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="certificateName"> The name of the certificate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="certificateName"/> is null. </exception>
        public async virtual Task<Response<CertificateDescription>> GetIfExistsAsync(string certificateName, CancellationToken cancellationToken = default)
        {
            if (certificateName == null)
            {
                throw new ArgumentNullException(nameof(certificateName));
            }

            using var scope = _clientDiagnostics.CreateScope("CertificateDescriptionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _certificatesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, certificateName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<CertificateDescription>(null, response.GetRawResponse());
                return Response.FromValue(new CertificateDescription(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="certificateName"> The name of the certificate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="certificateName"/> is null. </exception>
        public virtual Response<bool> Exists(string certificateName, CancellationToken cancellationToken = default)
        {
            if (certificateName == null)
            {
                throw new ArgumentNullException(nameof(certificateName));
            }

            using var scope = _clientDiagnostics.CreateScope("CertificateDescriptionCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(certificateName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="certificateName"> The name of the certificate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="certificateName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string certificateName, CancellationToken cancellationToken = default)
        {
            if (certificateName == null)
            {
                throw new ArgumentNullException(nameof(certificateName));
            }

            using var scope = _clientDiagnostics.CreateScope("CertificateDescriptionCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(certificateName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the list of certificates. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CertificateDescription" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CertificateDescription> GetAll(CancellationToken cancellationToken = default)
        {
            Page<CertificateDescription> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("CertificateDescriptionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _certificatesRestClient.ListByIotHub(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new CertificateDescription(this, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Returns the list of certificates. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CertificateDescription" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CertificateDescription> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<CertificateDescription>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("CertificateDescriptionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _certificatesRestClient.ListByIotHubAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new CertificateDescription(this, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        IEnumerator<CertificateDescription> IEnumerable<CertificateDescription>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<CertificateDescription> IAsyncEnumerable<CertificateDescription>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, CertificateDescription, CertificateDescriptionData> Construct() { }
    }
}
