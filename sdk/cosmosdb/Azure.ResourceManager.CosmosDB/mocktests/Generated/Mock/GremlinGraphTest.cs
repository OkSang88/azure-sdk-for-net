// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.CosmosDB.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.CosmosDB.Tests.Mock
{
    /// <summary> Test for GremlinGraph. </summary>
    public partial class GremlinGraphMockTests : MockTestBase
    {
        public GremlinGraphMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: CosmosDBGremlinGraphGet
            var gremlinGraph = GetArmClient().GetGremlinGraph(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rgName/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/gremlinDatabases/databaseName/graphs/graphName"));

            await gremlinGraph.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: CosmosDBGremlinGraphDelete
            var gremlinGraph = GetArmClient().GetGremlinGraph(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/gremlinDatabases/databaseName/graphs/graphName"));

            await gremlinGraph.DeleteAsync();
        }

        [RecordedTest]
        public async Task DatabaseAccountGremlinDatabaseGraphThroughputSettingGetAsync()
        {
            // Example: CosmosDBGremlinGraphThroughputGet
            var databaseAccountGremlinDatabaseGraphThroughputSetting = GetArmClient().GetDatabaseAccountGremlinDatabaseGraphThroughputSetting(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/gremlinDatabases/databaseName/graphs/graphName/throughputSettings/default"));

            await databaseAccountGremlinDatabaseGraphThroughputSetting.GetAsync();
        }

        [RecordedTest]
        public async Task DatabaseAccountGremlinDatabaseGraphThroughputSettingMigrateGremlinGraphToAutoscaleAsync()
        {
            // Example: CosmosDBGremlinGraphMigrateToAutoscale
            var databaseAccountGremlinDatabaseGraphThroughputSetting = GetArmClient().GetDatabaseAccountGremlinDatabaseGraphThroughputSetting(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/gremlinDatabases/databaseName/graphs/graphName/throughputSettings/default"));

            await databaseAccountGremlinDatabaseGraphThroughputSetting.MigrateGremlinGraphToAutoscaleAsync();
        }

        [RecordedTest]
        public async Task DatabaseAccountGremlinDatabaseGraphThroughputSettingMigrateGremlinGraphToManualThroughputAsync()
        {
            // Example: CosmosDBGremlinGraphMigrateToManualThroughput
            var databaseAccountGremlinDatabaseGraphThroughputSetting = GetArmClient().GetDatabaseAccountGremlinDatabaseGraphThroughputSetting(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/gremlinDatabases/databaseName/graphs/graphName/throughputSettings/default"));

            await databaseAccountGremlinDatabaseGraphThroughputSetting.MigrateGremlinGraphToManualThroughputAsync();
        }
    }
}
