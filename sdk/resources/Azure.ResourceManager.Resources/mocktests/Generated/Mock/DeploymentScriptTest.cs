// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Resources.Tests.Mock
{
    /// <summary> Test for DeploymentScript. </summary>
    public partial class DeploymentScriptMockTests : MockTestBase
    {
        public DeploymentScriptMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: DeploymentScriptsGet
            var deploymentScriptId = Resources.DeploymentScript.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "script-rg", "MyDeploymentScript");
            var deploymentScript = GetArmClient().GetDeploymentScript(deploymentScriptId);

            await deploymentScript.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: DeploymentScriptsDelete
            var deploymentScriptId = Resources.DeploymentScript.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "script-rg", "MyDeploymentScript");
            var deploymentScript = GetArmClient().GetDeploymentScript(deploymentScriptId);

            await deploymentScript.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: DeploymentScriptsUpdate
            var deploymentScriptId = Resources.DeploymentScript.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "script-rg", "MyDeploymentScript");
            var deploymentScript = GetArmClient().GetDeploymentScript(deploymentScriptId);
            IDictionary<string, string> tags = new Dictionary<string, string>()
            {
            };

            await deploymentScript.UpdateAsync(tags);
        }

        [RecordedTest]
        public async Task GetLogs()
        {
            // Example: DeploymentScriptsGetLogs
            var deploymentScriptId = Resources.DeploymentScript.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "script-rg", "MyDeploymentScript");
            var deploymentScript = GetArmClient().GetDeploymentScript(deploymentScriptId);

            await foreach (var _ in deploymentScript.GetLogsAsync())
            {
            }
        }

        [RecordedTest]
        public async Task ScriptLogGet()
        {
            // Example: DeploymentScriptsGetLogs
            var scriptLogId = Resources.ScriptLog.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "script-rg", "MyDeploymentScript");
            var scriptLog = GetArmClient().GetScriptLog(scriptLogId);
            int? tail = null;

            await scriptLog.GetAsync(tail);
        }

        [RecordedTest]
        public async Task ScriptLogGet2()
        {
            // Example: DeploymentScriptsGetLogsWithTail
            var scriptLogId = Resources.ScriptLog.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "script-rg", "MyDeploymentScript");
            var scriptLog = GetArmClient().GetScriptLog(scriptLogId);
            int? tail = 5;

            await scriptLog.GetAsync(tail);
        }
    }
}
