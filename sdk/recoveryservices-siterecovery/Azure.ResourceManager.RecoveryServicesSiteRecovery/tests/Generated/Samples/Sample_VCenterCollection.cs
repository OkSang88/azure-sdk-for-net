// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.RecoveryServicesSiteRecovery.Models;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery
{
    public partial class Sample_VCenterCollection
    {
        // Gets the list of vCenter registered under a fabric.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_GetsTheListOfVCenterRegisteredUnderAFabric()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationvCenters_ListByReplicationFabrics.json
            // this example is just showing the usage of "ReplicationvCenters_ListByReplicationFabrics" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this FabricResource created on azure
            // for more information of creating FabricResource, please refer to the document of FabricResource
            string subscriptionId = "7c943c1b-5122-4097-90c8-861411bdd574";
            string resourceGroupName = "MadhaviVRG";
            string resourceName = "MadhaviVault";
            string fabricName = "MadhaviFabric";
            ResourceIdentifier fabricResourceId = FabricResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, fabricName);
            FabricResource fabric = client.GetFabricResource(fabricResourceId);

            // get the collection of this VCenterResource
            VCenterCollection collection = fabric.GetVCenters();

            // invoke the operation and iterate over the result
            await foreach (VCenterResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                VCenterData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Gets the details of a vCenter.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetsTheDetailsOfAVCenter()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationvCenters_Get.json
            // this example is just showing the usage of "ReplicationvCenters_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this FabricResource created on azure
            // for more information of creating FabricResource, please refer to the document of FabricResource
            string subscriptionId = "7c943c1b-5122-4097-90c8-861411bdd574";
            string resourceGroupName = "MadhaviVRG";
            string resourceName = "MadhaviVault";
            string fabricName = "MadhaviFabric";
            ResourceIdentifier fabricResourceId = FabricResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, fabricName);
            FabricResource fabric = client.GetFabricResource(fabricResourceId);

            // get the collection of this VCenterResource
            VCenterCollection collection = fabric.GetVCenters();

            // invoke the operation
            string vCenterName = "esx-78";
            VCenterResource result = await collection.GetAsync(vCenterName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VCenterData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Gets the details of a vCenter.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetsTheDetailsOfAVCenter()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationvCenters_Get.json
            // this example is just showing the usage of "ReplicationvCenters_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this FabricResource created on azure
            // for more information of creating FabricResource, please refer to the document of FabricResource
            string subscriptionId = "7c943c1b-5122-4097-90c8-861411bdd574";
            string resourceGroupName = "MadhaviVRG";
            string resourceName = "MadhaviVault";
            string fabricName = "MadhaviFabric";
            ResourceIdentifier fabricResourceId = FabricResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, fabricName);
            FabricResource fabric = client.GetFabricResource(fabricResourceId);

            // get the collection of this VCenterResource
            VCenterCollection collection = fabric.GetVCenters();

            // invoke the operation
            string vCenterName = "esx-78";
            bool result = await collection.ExistsAsync(vCenterName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Add vCenter.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_AddVCenter()
        {
            // Generated from example definition: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2022-08-01/examples/ReplicationvCenters_Create.json
            // this example is just showing the usage of "ReplicationvCenters_Create" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this FabricResource created on azure
            // for more information of creating FabricResource, please refer to the document of FabricResource
            string subscriptionId = "7c943c1b-5122-4097-90c8-861411bdd574";
            string resourceGroupName = "MadhaviVRG";
            string resourceName = "MadhaviVault";
            string fabricName = "MadhaviFabric";
            ResourceIdentifier fabricResourceId = FabricResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, fabricName);
            FabricResource fabric = client.GetFabricResource(fabricResourceId);

            // get the collection of this VCenterResource
            VCenterCollection collection = fabric.GetVCenters();

            // invoke the operation
            string vCenterName = "esx-78";
            VCenterCreateOrUpdateContent content = new VCenterCreateOrUpdateContent()
            {
                Properties = new AddVCenterRequestProperties()
                {
                    FriendlyName = "esx-78",
                    IPAddress = "inmtest78",
                    ProcessServerId = "5A720CAB-39CB-F445-BD1662B0B33164B5",
                    Port = "443",
                    RunAsAccountId = "2",
                },
            };
            ArmOperation<VCenterResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, vCenterName, content);
            VCenterResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VCenterData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
