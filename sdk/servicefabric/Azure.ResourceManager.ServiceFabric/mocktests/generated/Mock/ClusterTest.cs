// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.ServiceFabric;
using Azure.ResourceManager.ServiceFabric.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.ServiceFabric.Tests.Mock
{
    /// <summary> Test for Cluster. </summary>
    public partial class ClusterMockTests : MockTestBase
    {
        public ClusterMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get a cluster
            var clusterId = ServiceFabric.Cluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster");
            var cluster = GetArmClient().GetCluster(clusterId);

            await cluster.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete a cluster
            var clusterId = ServiceFabric.Cluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster");
            var cluster = GetArmClient().GetCluster(clusterId);

            await cluster.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Patch a cluster
            var clusterId = ServiceFabric.Cluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster");
            var cluster = GetArmClient().GetCluster(clusterId);
            ServiceFabric.Models.ClusterUpdateParameters parameters = new ServiceFabric.Models.ClusterUpdateParameters()
            {
                EventStoreServiceEnabled = true,
                ReliabilityLevel = new ServiceFabric.Models.ReliabilityLevel("Bronze"),
                UpgradeMode = new ServiceFabric.Models.UpgradeMode("Automatic"),
                UpgradeWave = new ServiceFabric.Models.ClusterUpgradeCadence("Wave"),
                UpgradePauseStartTimestampUtc = DateTimeOffset.Parse("2021-06-21T22:00:00Z"),
                UpgradePauseEndTimestampUtc = DateTimeOffset.Parse("2021-06-25T22:00:00Z"),
            };

            await cluster.UpdateAsync(true, parameters);
        }

        [RecordedTest]
        public async Task GetUpgradableVersions()
        {
            // Example: Get minimum and maximum code versions
            var clusterId = ServiceFabric.Cluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster");
            var cluster = GetArmClient().GetCluster(clusterId);
            ServiceFabric.Models.UpgradableVersionsDescription versionsDescription = null;

            await cluster.GetUpgradableVersionsAsync(versionsDescription);
        }

        [RecordedTest]
        public async Task GetUpgradableVersions2()
        {
            // Example: Get upgrade path
            var clusterId = ServiceFabric.Cluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster");
            var cluster = GetArmClient().GetCluster(clusterId);
            ServiceFabric.Models.UpgradableVersionsDescription versionsDescription = new ServiceFabric.Models.UpgradableVersionsDescription(targetVersion: "7.2.432.9590");

            await cluster.GetUpgradableVersionsAsync(versionsDescription);
        }
    }
}
