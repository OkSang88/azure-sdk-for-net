// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for ExpressRouteCrossConnectionPeering. </summary>
    public partial class ExpressRouteCrossConnectionPeeringCollectionMockTests : MockTestBase
    {
        public ExpressRouteCrossConnectionPeeringCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: ExpressRouteCrossConnectionBgpPeeringCreate
            var collection = GetArmClient().GetExpressRouteCrossConnection(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/CrossConnection-SiliconValley/providers/Microsoft.Network/expressRouteCrossConnections/<circuitServiceKey>")).GetExpressRouteCrossConnectionPeerings();
            string peeringName = "AzurePrivatePeering";
            Network.ExpressRouteCrossConnectionPeeringData peeringParameters = new Network.ExpressRouteCrossConnectionPeeringData()
            {
                PeerASN = 200,
                PrimaryPeerAddressPrefix = "192.168.16.252/30",
                SecondaryPeerAddressPrefix = "192.168.18.252/30",
                VlanId = 200,
                Ipv6PeeringConfig = new Network.Models.Ipv6ExpressRouteCircuitPeeringConfig()
                {
                    PrimaryPeerAddressPrefix = "3FFE:FFFF:0:CD30::/126",
                    SecondaryPeerAddressPrefix = "3FFE:FFFF:0:CD30::4/126",
                },
            };

            await collection.CreateOrUpdateAsync(peeringName, peeringParameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: GetExpressRouteCrossConnectionBgpPeering
            var collection = GetArmClient().GetExpressRouteCrossConnection(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/CrossConnection-SiliconValley/providers/Microsoft.Network/expressRouteCrossConnections/<circuitServiceKey>")).GetExpressRouteCrossConnectionPeerings();
            string peeringName = "AzurePrivatePeering";

            await collection.GetAsync(peeringName);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: ExpressRouteCrossConnectionBgpPeeringList
            var collection = GetArmClient().GetExpressRouteCrossConnection(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/CrossConnection-SiliconValley/providers/Microsoft.Network/expressRouteCrossConnections/<circuitServiceKey>")).GetExpressRouteCrossConnectionPeerings();

            collection.GetAllAsync();
        }
    }
}
