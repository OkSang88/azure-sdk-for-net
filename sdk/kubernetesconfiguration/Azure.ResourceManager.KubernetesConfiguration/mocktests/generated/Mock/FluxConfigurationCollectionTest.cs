// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.KubernetesConfiguration;
using Azure.ResourceManager.KubernetesConfiguration.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.KubernetesConfiguration.Tests.Mock
{
    /// <summary> Test for FluxConfiguration. </summary>
    public partial class FluxConfigurationCollectionMockTests : MockTestBase
    {
        public FluxConfigurationCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create Flux Configuration
            KubernetesConfiguration.Models.Enum0 clusterRp = new KubernetesConfiguration.Models.Enum0("Microsoft.Kubernetes");
            KubernetesConfiguration.Models.Enum1 clusterResourceName = new KubernetesConfiguration.Models.Enum1("connectedClusters");
            string clusterName = "clusterName1";
            string fluxConfigurationName = "srs-fluxconfig";
            KubernetesConfiguration.FluxConfigurationData fluxConfiguration = new KubernetesConfiguration.FluxConfigurationData()
            {
                Scope = new KubernetesConfiguration.Models.ScopeType("cluster"),
                Namespace = "srs-namespace",
                SourceKind = new KubernetesConfiguration.Models.SourceKindType("GitRepository"),
                Suspend = false,
                GitRepository = new KubernetesConfiguration.Models.GitRepositoryDefinition()
                {
                    Url = "https://github.com/Azure/arc-k8s-demo",
                    TimeoutInSeconds = 600,
                    SyncIntervalInSeconds = 600,
                    RepositoryRef = new KubernetesConfiguration.Models.RepositoryRefDefinition()
                    {
                        Branch = "master",
                    },
                    HttpsCACert = "ZXhhbXBsZWNlcnRpZmljYXRl",
                },
                Kustomizations = new Dictionary<string, KubernetesConfiguration.Models.KustomizationDefinition>()
                {
                    ["srs-kustomization1"] = new KubernetesConfiguration.Models.KustomizationDefinition()
                    {
                        Path = "./test/path",
                        DependsOn = new List<KubernetesConfiguration.Models.DependsOnDefinition>()
                        {
                        },
                        TimeoutInSeconds = 600,
                        SyncIntervalInSeconds = 600,
                    },
                    ["srs-kustomization2"] = new KubernetesConfiguration.Models.KustomizationDefinition()
                    {
                        Path = "./other/test/path",
                        DependsOn = new List<KubernetesConfiguration.Models.DependsOnDefinition>()
{
new KubernetesConfiguration.Models.DependsOnDefinition()
{
KustomizationName = "srs-kustomization1", },},
                        TimeoutInSeconds = 600,
                        SyncIntervalInSeconds = 600,
                        RetryIntervalInSeconds = 600,
                        Prune = false,
                    },
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetFluxConfigurations(clusterRp, clusterResourceName, clusterName);
            await collection.CreateOrUpdateAsync(true, fluxConfigurationName, fluxConfiguration);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Create Flux Configuration with Bucket Source Kind
            KubernetesConfiguration.Models.Enum0 clusterRp = new KubernetesConfiguration.Models.Enum0("Microsoft.Kubernetes");
            KubernetesConfiguration.Models.Enum1 clusterResourceName = new KubernetesConfiguration.Models.Enum1("connectedClusters");
            string clusterName = "clusterName1";
            string fluxConfigurationName = "srs-fluxconfig";
            KubernetesConfiguration.FluxConfigurationData fluxConfiguration = new KubernetesConfiguration.FluxConfigurationData()
            {
                Scope = new KubernetesConfiguration.Models.ScopeType("cluster"),
                Namespace = "srs-namespace",
                SourceKind = new KubernetesConfiguration.Models.SourceKindType("Bucket"),
                Suspend = false,
                Bucket = new KubernetesConfiguration.Models.BucketDefinition()
                {
                    Url = "https://fluxminiotest.az.minio.io",
                    BucketName = "flux",
                    TimeoutInSeconds = 1000,
                    SyncIntervalInSeconds = 1000,
                    AccessKey = "fluxminiotest",
                },
                Kustomizations = new Dictionary<string, KubernetesConfiguration.Models.KustomizationDefinition>()
                {
                    ["srs-kustomization1"] = new KubernetesConfiguration.Models.KustomizationDefinition()
                    {
                        Path = "./test/path",
                        DependsOn = new List<KubernetesConfiguration.Models.DependsOnDefinition>()
                        {
                        },
                        TimeoutInSeconds = 600,
                        SyncIntervalInSeconds = 600,
                    },
                    ["srs-kustomization2"] = new KubernetesConfiguration.Models.KustomizationDefinition()
                    {
                        Path = "./other/test/path",
                        DependsOn = new List<KubernetesConfiguration.Models.DependsOnDefinition>()
{
new KubernetesConfiguration.Models.DependsOnDefinition()
{
KustomizationName = "srs-kustomization1", },},
                        TimeoutInSeconds = 600,
                        SyncIntervalInSeconds = 600,
                        RetryIntervalInSeconds = 600,
                        Prune = false,
                    },
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetFluxConfigurations(clusterRp, clusterResourceName, clusterName);
            await collection.CreateOrUpdateAsync(true, fluxConfigurationName, fluxConfiguration);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get Flux Configuration
            KubernetesConfiguration.Models.Enum0 clusterRp = new KubernetesConfiguration.Models.Enum0("Microsoft.Kubernetes");
            KubernetesConfiguration.Models.Enum1 clusterResourceName = new KubernetesConfiguration.Models.Enum1("connectedClusters");
            string clusterName = "clusterName1";
            string fluxConfigurationName = "srs-fluxconfig";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetFluxConfigurations(clusterRp, clusterResourceName, clusterName);
            await collection.GetAsync(fluxConfigurationName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List Flux Configuration
            KubernetesConfiguration.Models.Enum0 clusterRp = new KubernetesConfiguration.Models.Enum0("Microsoft.Kubernetes");
            KubernetesConfiguration.Models.Enum1 clusterResourceName = new KubernetesConfiguration.Models.Enum1("connectedClusters");
            string clusterName = "clusterName1";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetFluxConfigurations(clusterRp, clusterResourceName, clusterName);
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
