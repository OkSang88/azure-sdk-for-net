// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.DataFactory;
using Azure.ResourceManager.DataFactory.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.DataFactory.Tests.Mock
{
    /// <summary> Test for TriggerResource. </summary>
    public partial class TriggerResourceCollectionMockTests : MockTestBase
    {
        public TriggerResourceCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Triggers_Create
            string triggerName = "exampleTrigger";
            DataFactory.TriggerResourceData trigger = new DataFactory.TriggerResourceData(properties: new DataFactory.Models.ScheduleTrigger(recurrence: new DataFactory.Models.ScheduleTriggerRecurrence()
            {
                Frequency = new DataFactory.Models.RecurrenceFrequency("Minute"),
                Interval = 4,
                StartTime = DateTimeOffset.Parse("2018-06-16T00:39:13.8441801Z"),
                EndTime = DateTimeOffset.Parse("2018-06-16T00:55:13.8441801Z"),
                TimeZone = "UTC",
            })
            {
                Type = "ScheduleTrigger",
            });
            string ifMatch = null;

            var factoryId = DataFactory.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var collection = GetArmClient().GetFactory(factoryId).GetTriggerResources();
            await collection.CreateOrUpdateAsync(true, triggerName, trigger, ifMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Triggers_Update
            string triggerName = "exampleTrigger";
            DataFactory.TriggerResourceData trigger = new DataFactory.TriggerResourceData(properties: new DataFactory.Models.ScheduleTrigger(recurrence: new DataFactory.Models.ScheduleTriggerRecurrence()
            {
                Frequency = new DataFactory.Models.RecurrenceFrequency("Minute"),
                Interval = 4,
                StartTime = DateTimeOffset.Parse("2018-06-16T00:39:14.905167Z"),
                EndTime = DateTimeOffset.Parse("2018-06-16T00:55:14.905167Z"),
                TimeZone = "UTC",
            })
            {
                Type = "ScheduleTrigger",
                Description = "Example description",
            });
            string ifMatch = null;

            var factoryId = DataFactory.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var collection = GetArmClient().GetFactory(factoryId).GetTriggerResources();
            await collection.CreateOrUpdateAsync(true, triggerName, trigger, ifMatch);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Triggers_Get
            string triggerName = "exampleTrigger";
            string ifNoneMatch = null;

            var factoryId = DataFactory.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var collection = GetArmClient().GetFactory(factoryId).GetTriggerResources();
            await collection.GetAsync(triggerName, ifNoneMatch);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: Triggers_ListByFactory

            var factoryId = DataFactory.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var collection = GetArmClient().GetFactory(factoryId).GetTriggerResources();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
