// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Search;
using Azure.ResourceManager.Search.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Search.Tests.Mock
{
    /// <summary> Test for PrivateEndpointConnection. </summary>
    public partial class PrivateEndpointConnectionCollectionMockTests : MockTestBase
    {
        public PrivateEndpointConnectionCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: PrivateEndpointConnectionUpdate
            string privateEndpointConnectionName = "testEndpoint.50bf4fbe-d7c1-4b48-a642-4f5892642546";
            Search.PrivateEndpointConnectionData privateEndpointConnection = new Search.PrivateEndpointConnectionData()
            {
                Properties = new Search.Models.PrivateEndpointConnectionProperties()
                {
                    PrivateLinkServiceConnectionState = new Search.Models.PrivateEndpointConnectionPropertiesPrivateLinkServiceConnectionState()
                    {
                        Status = Search.Models.PrivateLinkServiceConnectionStatus.Rejected,
                        Description = "Rejected for some reason",
                    },
                },
            };
            Search.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            var searchServiceId = Search.SearchService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "mysearchservice");
            var collection = GetArmClient().GetSearchService(searchServiceId).GetPrivateEndpointConnections();
            await collection.CreateOrUpdateAsync(true, privateEndpointConnectionName, privateEndpointConnection, searchManagementRequestOptions);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: PrivateEndpointConnectionGet
            string privateEndpointConnectionName = "testEndpoint.50bf4fbe-d7c1-4b48-a642-4f5892642546";
            Search.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            var searchServiceId = Search.SearchService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "mysearchservice");
            var collection = GetArmClient().GetSearchService(searchServiceId).GetPrivateEndpointConnections();
            await collection.GetAsync(privateEndpointConnectionName, searchManagementRequestOptions);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: ListPrivateEndpointConnectionsByService
            Search.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            var searchServiceId = Search.SearchService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "mysearchservice");
            var collection = GetArmClient().GetSearchService(searchServiceId).GetPrivateEndpointConnections();
            await foreach (var _ in collection.GetAllAsync(searchManagementRequestOptions))
            {
            }
        }
    }
}
