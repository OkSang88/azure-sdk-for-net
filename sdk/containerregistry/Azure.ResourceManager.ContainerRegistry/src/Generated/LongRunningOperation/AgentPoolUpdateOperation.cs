// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.ContainerRegistry;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.ContainerRegistry.Models
{
    /// <summary> Updates an agent pool with the specified parameters. </summary>
    public partial class AgentPoolUpdateOperation : Operation<AgentPool>, IOperationSource<AgentPool>
    {
        private readonly OperationInternals<AgentPool> _operation;

        private readonly ArmResource _operationBase;

        /// <summary> Initializes a new instance of AgentPoolUpdateOperation for mocking. </summary>
        protected AgentPoolUpdateOperation()
        {
        }

        internal AgentPoolUpdateOperation(ArmResource operationsBase, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Azure.Core.Request request, Response response)
        {
            _operation = new OperationInternals<AgentPool>(this, clientDiagnostics, pipeline, request, response, OperationFinalStateVia.Location, "AgentPoolUpdateOperation");
            _operationBase = operationsBase;
        }

        /// <inheritdoc />
        public override string Id => _operation.Id;

        /// <inheritdoc />
        public override AgentPool Value => _operation.Value;

        /// <inheritdoc />
        public override bool HasCompleted => _operation.HasCompleted;

        /// <inheritdoc />
        public override bool HasValue => _operation.HasValue;

        /// <inheritdoc />
        public override Response GetRawResponse() => _operation.GetRawResponse();

        /// <inheritdoc />
        public override Response UpdateStatus(CancellationToken cancellationToken = default) => _operation.UpdateStatus(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response> UpdateStatusAsync(CancellationToken cancellationToken = default) => _operation.UpdateStatusAsync(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response<AgentPool>> WaitForCompletionAsync(CancellationToken cancellationToken = default) => _operation.WaitForCompletionAsync(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response<AgentPool>> WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken = default) => _operation.WaitForCompletionAsync(pollingInterval, cancellationToken);

        AgentPool IOperationSource<AgentPool>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            using var document = JsonDocument.Parse(response.ContentStream);
            var data = AgentPoolData.DeserializeAgentPoolData(document.RootElement);
            return new AgentPool(_operationBase, data);
        }

        async ValueTask<AgentPool> IOperationSource<AgentPool>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
            var data = AgentPoolData.DeserializeAgentPoolData(document.RootElement);
            return new AgentPool(_operationBase, data);
        }
    }
}
