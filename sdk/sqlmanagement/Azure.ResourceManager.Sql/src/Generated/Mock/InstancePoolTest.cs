// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for InstancePool. </summary>
    public partial class InstancePoolMockTests : MockTestBase
    {
        public InstancePoolMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get an instance pool
            var instancePoolId = Sql.InstancePool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "group1", "testIP");
            var instancePool = GetArmClient().GetInstancePool(instancePoolId);

            await instancePool.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete an instance pool
            var instancePoolId = Sql.InstancePool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "group1", "testIP");
            var instancePool = GetArmClient().GetInstancePool(instancePoolId);

            await instancePool.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Patch an instance pool
            var instancePoolId = Sql.InstancePool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "group1", "testIP");
            var instancePool = GetArmClient().GetInstancePool(instancePoolId);
            Sql.Models.InstancePoolUpdate parameters = new Sql.Models.InstancePoolUpdate();

            await instancePool.UpdateAsync(true, parameters);
        }

        [RecordedTest]
        public async Task GetManagedInstances()
        {
            // Example: List managed instances by instance pool
            var instancePoolId = Sql.InstancePool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Test1", "pool1");
            var instancePool = GetArmClient().GetInstancePool(instancePoolId);
            string expand = null;

            await foreach (var _ in instancePool.GetManagedInstancesAsync(expand))
            {
            }
        }

        [RecordedTest]
        public async Task GetManagedInstances2()
        {
            // Example: List managed instances by instance pool with expand equals administrators
            var instancePoolId = Sql.InstancePool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Test1", "pool1");
            var instancePool = GetArmClient().GetInstancePool(instancePoolId);
            string expand = null;

            await foreach (var _ in instancePool.GetManagedInstancesAsync(expand))
            {
            }
        }

        [RecordedTest]
        public async Task GetUsages()
        {
            // Example: List instance pool usages expanded with children.
            var instancePoolId = Sql.InstancePool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "group1", "testIP");
            var instancePool = GetArmClient().GetInstancePool(instancePoolId);
            bool? expandChildren = true;

            await foreach (var _ in instancePool.GetUsagesAsync(expandChildren))
            {
            }
        }

        [RecordedTest]
        public async Task GetUsages2()
        {
            // Example: List instance pool usages.
            var instancePoolId = Sql.InstancePool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "group1", "testIP");
            var instancePool = GetArmClient().GetInstancePool(instancePoolId);
            bool? expandChildren = null;

            await foreach (var _ in instancePool.GetUsagesAsync(expandChildren))
            {
            }
        }
    }
}
