// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for SshPublicKey. </summary>
    public partial class SshPublicKeyCollectionMockTests : MockTestBase
    {
        public SshPublicKeyCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create a new SSH public key resource.
            string sshPublicKeyName = "mySshPublicKeyName";
            Compute.SshPublicKeyData parameters = new Compute.SshPublicKeyData(location: "westus")
            {
                PublicKey = "{ssh-rsa public key}",
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetSshPublicKeys();
            await collection.CreateOrUpdateAsync(true, sshPublicKeyName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get an ssh public key.
            string sshPublicKeyName = "mySshPublicKeyName";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetSshPublicKeys();
            await collection.GetAsync(sshPublicKeyName);
        }
    }
}
