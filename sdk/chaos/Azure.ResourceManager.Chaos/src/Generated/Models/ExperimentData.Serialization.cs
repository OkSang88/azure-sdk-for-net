// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Chaos.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Chaos
{
    public partial class ExperimentData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Identity))
            {
                writer.WritePropertyName("identity");
                writer.WriteObjectValue(Identity);
            }
            writer.WritePropertyName("tags");
            writer.WriteStartObject();
            foreach (var item in Tags)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("location");
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            writer.WritePropertyName("steps");
            writer.WriteStartArray();
            foreach (var item in Steps)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("selectors");
            writer.WriteStartArray();
            foreach (var item in Selectors)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(StartOnCreation))
            {
                if (StartOnCreation != null)
                {
                    writer.WritePropertyName("startOnCreation");
                    writer.WriteBooleanValue(StartOnCreation.Value);
                }
                else
                {
                    writer.WriteNull("startOnCreation");
                }
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static ExperimentData DeserializeExperimentData(JsonElement element)
        {
            Optional<SystemData> systemData = default;
            Optional<ResourceIdentity> identity = default;
            IDictionary<string, string> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            IList<Step> steps = default;
            IList<Selector> selectors = default;
            Optional<bool?> startOnCreation = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("identity"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    identity = ResourceIdentity.DeserializeResourceIdentity(property.Value);
                    continue;
                }
                if (property.NameEquals("tags"))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    location = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("steps"))
                        {
                            List<Step> array = new List<Step>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(Step.DeserializeStep(item));
                            }
                            steps = array;
                            continue;
                        }
                        if (property0.NameEquals("selectors"))
                        {
                            List<Selector> array = new List<Selector>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(Selector.DeserializeSelector(item));
                            }
                            selectors = array;
                            continue;
                        }
                        if (property0.NameEquals("startOnCreation"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                startOnCreation = null;
                                continue;
                            }
                            startOnCreation = property0.Value.GetBoolean();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ExperimentData(id, name, type, tags, location, systemData, identity.Value, steps, selectors, Optional.ToNullable(startOnCreation));
        }
    }
}
