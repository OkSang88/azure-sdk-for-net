// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace StorSimple8000SeriesManagementClient.Models
{
    public partial class DeviceRolloverDetails : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(AuthorizationEligibility))
            {
                writer.WritePropertyName("authorizationEligibility");
                writer.WriteStringValue(AuthorizationEligibility.Value.ToSerialString());
            }
            if (Optional.IsDefined(AuthorizationStatus))
            {
                writer.WritePropertyName("authorizationStatus");
                writer.WriteStringValue(AuthorizationStatus.Value.ToSerialString());
            }
            if (Optional.IsDefined(InEligibilityReason))
            {
                writer.WritePropertyName("inEligibilityReason");
                writer.WriteStringValue(InEligibilityReason.Value.ToSerialString());
            }
            writer.WriteEndObject();
        }

        internal static DeviceRolloverDetails DeserializeDeviceRolloverDetails(JsonElement element)
        {
            Optional<AuthorizationEligibility> authorizationEligibility = default;
            Optional<AuthorizationStatus> authorizationStatus = default;
            Optional<InEligibilityCategory> inEligibilityReason = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("authorizationEligibility"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    authorizationEligibility = property.Value.GetString().ToAuthorizationEligibility();
                    continue;
                }
                if (property.NameEquals("authorizationStatus"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    authorizationStatus = property.Value.GetString().ToAuthorizationStatus();
                    continue;
                }
                if (property.NameEquals("inEligibilityReason"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    inEligibilityReason = property.Value.GetString().ToInEligibilityCategory();
                    continue;
                }
            }
            return new DeviceRolloverDetails(Optional.ToNullable(authorizationEligibility), Optional.ToNullable(authorizationStatus), Optional.ToNullable(inEligibilityReason));
        }
    }
}
