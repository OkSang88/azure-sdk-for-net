// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Marketplace.Tests.Mock;
using Azure.ResourceManager.Marketplace.Tests.Mock.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Marketplace.Tests.Mock.Tests.Mock
{
    /// <summary> Test for AdminRequestApprovalsResource. </summary>
    public partial class AdminRequestApprovalsResourceCollectionMockTests : MockTestBase
    {
        public AdminRequestApprovalsResourceCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: UpdateAdminRequestApproval
            string adminRequestApprovalId = "marketplacetestthirdparty.md-test-third-party-2";
            Marketplace.Tests.Mock.AdminRequestApprovalsResourceData payload = new Marketplace.Tests.Mock.AdminRequestApprovalsResourceData()
            {
                PublisherId = "marketplacetestthirdparty",
                AdminAction = new Marketplace.Tests.Mock.Models.AdminAction("Approved"),
                Comment = "I'm ok with that",
            };

            var privateStoreId = Marketplace.Tests.Mock.PrivateStore.CreateResourceIdentifier("a0e28e55-90c4-41d8-8e34-bb7ef7775406");
            var collection = GetArmClient().GetPrivateStore(privateStoreId).GetAdminRequestApprovalsResources();
            await collection.CreateOrUpdateAsync(true, adminRequestApprovalId, payload);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: GetAdminRequestApproval
            string adminRequestApprovalId = "marketplacetestthirdparty.md-test-third-party-2";
            string publisherId = "marketplacetestthirdparty";

            var privateStoreId = Marketplace.Tests.Mock.PrivateStore.CreateResourceIdentifier("a0e28e55-90c4-41d8-8e34-bb7ef7775406");
            var collection = GetArmClient().GetPrivateStore(privateStoreId).GetAdminRequestApprovalsResources();
            await collection.GetAsync(adminRequestApprovalId, publisherId);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: AdminRequestApprovalsList

            var privateStoreId = Marketplace.Tests.Mock.PrivateStore.CreateResourceIdentifier("a0e28e55-90c4-41d8-8e34-bb7ef7775406");
            var collection = GetArmClient().GetPrivateStore(privateStoreId).GetAdminRequestApprovalsResources();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
