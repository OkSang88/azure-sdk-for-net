// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for CloudService. </summary>
    public partial class CloudServiceCollectionMockTests : MockTestBase
    {
        public CloudServiceCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create New Cloud Service with Multiple Roles
            string cloudServiceName = "{cs-name}";
            Compute.CloudServiceData parameters = new Compute.CloudServiceData(location: "westus")
            {
                Properties = new Compute.Models.CloudServiceProperties()
                {
                    PackageUrl = "{PackageUrl}",
                    Configuration = "{ServiceConfiguration}",
                    UpgradeMode = new Compute.Models.CloudServiceUpgradeMode("Auto"),
                    RoleProfile = new Compute.Models.CloudServiceRoleProfile(),
                    NetworkProfile = new Compute.Models.CloudServiceNetworkProfile(),
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ConstosoRG")).GetCloudServices();
            await collection.CreateOrUpdateAsync(true, cloudServiceName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Create New Cloud Service with Single Role
            string cloudServiceName = "{cs-name}";
            Compute.CloudServiceData parameters = new Compute.CloudServiceData(location: "westus")
            {
                Properties = new Compute.Models.CloudServiceProperties()
                {
                    PackageUrl = "{PackageUrl}",
                    Configuration = "{ServiceConfiguration}",
                    UpgradeMode = new Compute.Models.CloudServiceUpgradeMode("Auto"),
                    RoleProfile = new Compute.Models.CloudServiceRoleProfile(),
                    NetworkProfile = new Compute.Models.CloudServiceNetworkProfile(),
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ConstosoRG")).GetCloudServices();
            await collection.CreateOrUpdateAsync(true, cloudServiceName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate3()
        {
            // Example: Create New Cloud Service with Single Role and Certificate from Key Vault
            string cloudServiceName = "{cs-name}";
            Compute.CloudServiceData parameters = new Compute.CloudServiceData(location: "westus")
            {
                Properties = new Compute.Models.CloudServiceProperties()
                {
                    PackageUrl = "{PackageUrl}",
                    Configuration = "{ServiceConfiguration}",
                    UpgradeMode = new Compute.Models.CloudServiceUpgradeMode("Auto"),
                    RoleProfile = new Compute.Models.CloudServiceRoleProfile(),
                    OsProfile = new Compute.Models.CloudServiceOsProfile(),
                    NetworkProfile = new Compute.Models.CloudServiceNetworkProfile(),
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ConstosoRG")).GetCloudServices();
            await collection.CreateOrUpdateAsync(true, cloudServiceName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate4()
        {
            // Example: Create New Cloud Service with Single Role and RDP Extension
            string cloudServiceName = "{cs-name}";
            Compute.CloudServiceData parameters = new Compute.CloudServiceData(location: "westus")
            {
                Properties = new Compute.Models.CloudServiceProperties()
                {
                    PackageUrl = "{PackageUrl}",
                    Configuration = "{ServiceConfiguration}",
                    UpgradeMode = new Compute.Models.CloudServiceUpgradeMode("Auto"),
                    RoleProfile = new Compute.Models.CloudServiceRoleProfile(),
                    NetworkProfile = new Compute.Models.CloudServiceNetworkProfile(),
                    ExtensionProfile = new Compute.Models.CloudServiceExtensionProfile(),
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ConstosoRG")).GetCloudServices();
            await collection.CreateOrUpdateAsync(true, cloudServiceName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get Cloud Service with Multiple Roles and RDP Extension
            string cloudServiceName = "{cs-name}";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ConstosoRG")).GetCloudServices();
            await collection.GetAsync(cloudServiceName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List Cloud Services in a Resource Group

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ConstosoRG")).GetCloudServices();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
