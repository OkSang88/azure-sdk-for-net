// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Storage.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Storage.Tests.Mock
{
    /// <summary> Test for StorageAccount. </summary>
    public partial class StorageAccountCollectionMockTests : MockTestBase
    {
        public StorageAccountCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: NfsV3AccountCreate
            string accountName = "sto4445";
            Storage.Models.StorageAccountCreateParameters parameters = new Storage.Models.StorageAccountCreateParameters(sku: new Storage.Models.Sku(name: new Storage.Models.SkuName("Premium_LRS")), kind: new Storage.Models.Kind("BlockBlobStorage"), location: "eastus")
            {
                NetworkRuleSet = new Storage.Models.NetworkRuleSet(defaultAction: Storage.Models.DefaultAction.Allow)
                {
                    Bypass = new Storage.Models.Bypass("AzureServices"),
                },
                EnableHttpsTrafficOnly = false,
                IsHnsEnabled = true,
                EnableNfsV3 = true,
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res9101")).GetStorageAccounts();
            await collection.CreateOrUpdateAsync(accountName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: StorageAccountCreate
            string accountName = "sto4445";
            Storage.Models.StorageAccountCreateParameters parameters = new Storage.Models.StorageAccountCreateParameters(sku: new Storage.Models.Sku(name: new Storage.Models.SkuName("Standard_GRS")), kind: new Storage.Models.Kind("Storage"), location: "eastus")
            {
                ExtendedLocation = new Storage.Models.ExtendedLocation()
                {
                    Name = "losangeles001",
                    Type = new Storage.Models.ExtendedLocationTypes("EdgeZone"),
                },
                SasPolicy = new Storage.Models.SasPolicy(sasExpirationPeriod: "1.15:59:59", expirationAction: new Storage.Models.ExpirationAction("Log")),
                KeyPolicy = new Storage.Models.KeyPolicy(keyExpirationPeriodInDays: 20),
                Encryption = new Storage.Models.Encryption(keySource: new Storage.Models.KeySource("Microsoft.Storage"))
                {
                    Services = new Storage.Models.EncryptionServices()
                    {
                        Blob = new Storage.Models.EncryptionService()
                        {
                            Enabled = true,
                            KeyType = new Storage.Models.KeyType("Account"),
                        },
                        File = new Storage.Models.EncryptionService()
                        {
                            Enabled = true,
                            KeyType = new Storage.Models.KeyType("Account"),
                        },
                    },
                    RequireInfrastructureEncryption = false,
                },
                IsHnsEnabled = true,
                RoutingPreference = new Storage.Models.RoutingPreference()
                {
                    RoutingChoice = new Storage.Models.RoutingChoice("MicrosoftRouting"),
                    PublishMicrosoftEndpoints = true,
                    PublishInternetEndpoints = true,
                },
                AllowBlobPublicAccess = false,
                MinimumTlsVersion = new Storage.Models.MinimumTlsVersion("TLS1_2"),
                AllowSharedKeyAccess = true,
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res9101")).GetStorageAccounts();
            await collection.CreateOrUpdateAsync(accountName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate3()
        {
            // Example: StorageAccountCreateUserAssignedEncryptionIdentityWithCMK
            string accountName = "sto4445";
            Storage.Models.StorageAccountCreateParameters parameters = new Storage.Models.StorageAccountCreateParameters(sku: new Storage.Models.Sku(name: new Storage.Models.SkuName("Standard_LRS")), kind: new Storage.Models.Kind("Storage"), location: "eastus")
            {
                Identity = new Storage.Models.Identity(type: new Storage.Models.IdentityType("UserAssigned")),
                Encryption = new Storage.Models.Encryption(keySource: new Storage.Models.KeySource("Microsoft.Keyvault"))
                {
                    Services = new Storage.Models.EncryptionServices()
                    {
                        Blob = new Storage.Models.EncryptionService()
                        {
                            Enabled = true,
                            KeyType = new Storage.Models.KeyType("Account"),
                        },
                        File = new Storage.Models.EncryptionService()
                        {
                            Enabled = true,
                            KeyType = new Storage.Models.KeyType("Account"),
                        },
                    },
                    KeyVaultProperties = new Storage.Models.KeyVaultProperties()
                    {
                        KeyName = "wrappingKey",
                        KeyVersion = "",
                        KeyVaultUri = "https://myvault8569.vault.azure.net",
                    },
                    EncryptionIdentity = new Storage.Models.EncryptionIdentity()
                    {
                        EncryptionUserAssignedIdentity = "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}",
                    },
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res9101")).GetStorageAccounts();
            await collection.CreateOrUpdateAsync(accountName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: StorageAccountGetProperties
            string accountName = "sto8596";
            Storage.Models.StorageAccountExpand? expand = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res9407")).GetStorageAccounts();
            await collection.GetAsync(accountName, expand);
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: StorageAccountGetPropertiesCMKEnabled
            string accountName = "sto8596";
            Storage.Models.StorageAccountExpand? expand = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res9407")).GetStorageAccounts();
            await collection.GetAsync(accountName, expand);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: StorageAccountListByResourceGroup

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res6117")).GetStorageAccounts();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
