// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.SecurityInsights.Models;

namespace Azure.ResourceManager.SecurityInsights
{
    /// <summary> A class representing collection of WatchlistItem and their operations over its parent. </summary>
    public partial class WatchlistItemCollection : ArmCollection, IEnumerable<WatchlistItem>, IAsyncEnumerable<WatchlistItem>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly WatchlistItemsRestOperations _watchlistItemsRestClient;

        /// <summary> Initializes a new instance of the <see cref="WatchlistItemCollection"/> class for mocking. </summary>
        protected WatchlistItemCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="WatchlistItemCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal WatchlistItemCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            ClientOptions.TryGetApiVersion(WatchlistItem.ResourceType, out string apiVersion);
            _watchlistItemsRestClient = new WatchlistItemsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != Watchlist.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, Watchlist.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Creates or updates a watchlist item. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="watchlistItemId"> Watchlist Item Id (GUID). </param>
        /// <param name="watchlistItem"> The watchlist item. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="watchlistItemId"/> or <paramref name="watchlistItem"/> is null. </exception>
        public virtual WatchlistItemCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string watchlistItemId, WatchlistItemData watchlistItem, CancellationToken cancellationToken = default)
        {
            if (watchlistItemId == null)
            {
                throw new ArgumentNullException(nameof(watchlistItemId));
            }
            if (watchlistItem == null)
            {
                throw new ArgumentNullException(nameof(watchlistItem));
            }

            using var scope = _clientDiagnostics.CreateScope("WatchlistItemCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _watchlistItemsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, watchlistItemId, watchlistItem, cancellationToken);
                var operation = new WatchlistItemCreateOrUpdateOperation(this, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a watchlist item. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="watchlistItemId"> Watchlist Item Id (GUID). </param>
        /// <param name="watchlistItem"> The watchlist item. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="watchlistItemId"/> or <paramref name="watchlistItem"/> is null. </exception>
        public async virtual Task<WatchlistItemCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string watchlistItemId, WatchlistItemData watchlistItem, CancellationToken cancellationToken = default)
        {
            if (watchlistItemId == null)
            {
                throw new ArgumentNullException(nameof(watchlistItemId));
            }
            if (watchlistItem == null)
            {
                throw new ArgumentNullException(nameof(watchlistItem));
            }

            using var scope = _clientDiagnostics.CreateScope("WatchlistItemCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _watchlistItemsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, watchlistItemId, watchlistItem, cancellationToken).ConfigureAwait(false);
                var operation = new WatchlistItemCreateOrUpdateOperation(this, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a watchlist, without its watchlist items. </summary>
        /// <param name="watchlistItemId"> Watchlist Item Id (GUID). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="watchlistItemId"/> is null. </exception>
        public virtual Response<WatchlistItem> Get(string watchlistItemId, CancellationToken cancellationToken = default)
        {
            if (watchlistItemId == null)
            {
                throw new ArgumentNullException(nameof(watchlistItemId));
            }

            using var scope = _clientDiagnostics.CreateScope("WatchlistItemCollection.Get");
            scope.Start();
            try
            {
                var response = _watchlistItemsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, watchlistItemId, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new WatchlistItem(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a watchlist, without its watchlist items. </summary>
        /// <param name="watchlistItemId"> Watchlist Item Id (GUID). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="watchlistItemId"/> is null. </exception>
        public async virtual Task<Response<WatchlistItem>> GetAsync(string watchlistItemId, CancellationToken cancellationToken = default)
        {
            if (watchlistItemId == null)
            {
                throw new ArgumentNullException(nameof(watchlistItemId));
            }

            using var scope = _clientDiagnostics.CreateScope("WatchlistItemCollection.Get");
            scope.Start();
            try
            {
                var response = await _watchlistItemsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, watchlistItemId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new WatchlistItem(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="watchlistItemId"> Watchlist Item Id (GUID). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="watchlistItemId"/> is null. </exception>
        public virtual Response<WatchlistItem> GetIfExists(string watchlistItemId, CancellationToken cancellationToken = default)
        {
            if (watchlistItemId == null)
            {
                throw new ArgumentNullException(nameof(watchlistItemId));
            }

            using var scope = _clientDiagnostics.CreateScope("WatchlistItemCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _watchlistItemsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, watchlistItemId, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<WatchlistItem>(null, response.GetRawResponse());
                return Response.FromValue(new WatchlistItem(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="watchlistItemId"> Watchlist Item Id (GUID). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="watchlistItemId"/> is null. </exception>
        public async virtual Task<Response<WatchlistItem>> GetIfExistsAsync(string watchlistItemId, CancellationToken cancellationToken = default)
        {
            if (watchlistItemId == null)
            {
                throw new ArgumentNullException(nameof(watchlistItemId));
            }

            using var scope = _clientDiagnostics.CreateScope("WatchlistItemCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _watchlistItemsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, watchlistItemId, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<WatchlistItem>(null, response.GetRawResponse());
                return Response.FromValue(new WatchlistItem(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="watchlistItemId"> Watchlist Item Id (GUID). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="watchlistItemId"/> is null. </exception>
        public virtual Response<bool> Exists(string watchlistItemId, CancellationToken cancellationToken = default)
        {
            if (watchlistItemId == null)
            {
                throw new ArgumentNullException(nameof(watchlistItemId));
            }

            using var scope = _clientDiagnostics.CreateScope("WatchlistItemCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(watchlistItemId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="watchlistItemId"> Watchlist Item Id (GUID). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="watchlistItemId"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string watchlistItemId, CancellationToken cancellationToken = default)
        {
            if (watchlistItemId == null)
            {
                throw new ArgumentNullException(nameof(watchlistItemId));
            }

            using var scope = _clientDiagnostics.CreateScope("WatchlistItemCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(watchlistItemId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets all watchlist Items. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WatchlistItem" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WatchlistItem> GetAll(CancellationToken cancellationToken = default)
        {
            Page<WatchlistItem> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WatchlistItemCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _watchlistItemsRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new WatchlistItem(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<WatchlistItem> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WatchlistItemCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _watchlistItemsRestClient.ListNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new WatchlistItem(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all watchlist Items. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WatchlistItem" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WatchlistItem> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<WatchlistItem>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WatchlistItemCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _watchlistItemsRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new WatchlistItem(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<WatchlistItem>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WatchlistItemCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _watchlistItemsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new WatchlistItem(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<WatchlistItem> IEnumerable<WatchlistItem>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<WatchlistItem> IAsyncEnumerable<WatchlistItem>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, WatchlistItem, WatchlistItemData> Construct() { }
    }
}
