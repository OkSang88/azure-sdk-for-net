// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.ServiceFabricManagedClusters;
using Azure.ResourceManager.ServiceFabricManagedClusters.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.ServiceFabricManagedClusters.Tests.Mock
{
    /// <summary> Test for NodeType. </summary>
    public partial class NodeTypeCollectionMockTests : MockTestBase
    {
        public NodeTypeCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Put a node type with auto-scale parameters
            string nodeTypeName = "BE";
            ServiceFabricManagedClusters.NodeTypeData parameters = new ServiceFabricManagedClusters.NodeTypeData()
            {
                IsPrimary = false,
                VmInstanceCount = -1,
                DataDiskSizeGB = 200,
                DataDiskType = new ServiceFabricManagedClusters.Models.DiskType("Premium_LRS"),
                VmSize = "Standard_DS3",
                VmImagePublisher = "MicrosoftWindowsServer",
                VmImageOffer = "WindowsServer",
                VmImageSku = "2016-Datacenter-Server-Core",
                VmImageVersion = "latest",
                VmManagedIdentity = new ServiceFabricManagedClusters.Models.VmManagedIdentity(),
                IsStateless = true,
                MultiplePlacementGroups = true,
            };

            var managedClusterId = ServiceFabricManagedClusters.ManagedCluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster");
            var collection = GetArmClient().GetManagedCluster(managedClusterId).GetNodeTypes();
            await collection.CreateOrUpdateAsync(true, nodeTypeName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Put a node type with maximum parameters
            string nodeTypeName = "BE";
            ServiceFabricManagedClusters.NodeTypeData parameters = new ServiceFabricManagedClusters.NodeTypeData()
            {
                IsPrimary = false,
                VmInstanceCount = 10,
                DataDiskSizeGB = 200,
                DataDiskType = new ServiceFabricManagedClusters.Models.DiskType("Premium_LRS"),
                DataDiskLetter = "S",
                VmSize = "Standard_DS3",
                VmImagePublisher = "MicrosoftWindowsServer",
                VmImageOffer = "WindowsServer",
                VmImageSku = "2016-Datacenter-Server-Core",
                VmImageVersion = "latest",
                VmManagedIdentity = new ServiceFabricManagedClusters.Models.VmManagedIdentity(),
                IsStateless = true,
                MultiplePlacementGroups = true,
                EnableEncryptionAtHost = true,
                EnableAcceleratedNetworking = true,
                UseDefaultPublicLoadBalancer = true,
            };

            var managedClusterId = ServiceFabricManagedClusters.ManagedCluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster");
            var collection = GetArmClient().GetManagedCluster(managedClusterId).GetNodeTypes();
            await collection.CreateOrUpdateAsync(true, nodeTypeName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate3()
        {
            // Example: Put a node type with minimum parameters
            string nodeTypeName = "BE";
            ServiceFabricManagedClusters.NodeTypeData parameters = new ServiceFabricManagedClusters.NodeTypeData()
            {
                IsPrimary = false,
                VmInstanceCount = 10,
                DataDiskSizeGB = 200,
                VmSize = "Standard_D3",
                VmImagePublisher = "MicrosoftWindowsServer",
                VmImageOffer = "WindowsServer",
                VmImageSku = "2016-Datacenter-Server-Core",
                VmImageVersion = "latest",
            };

            var managedClusterId = ServiceFabricManagedClusters.ManagedCluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster");
            var collection = GetArmClient().GetManagedCluster(managedClusterId).GetNodeTypes();
            await collection.CreateOrUpdateAsync(true, nodeTypeName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate4()
        {
            // Example: Put an stateless node type with temporary disk for service fabric
            string nodeTypeName = "BE";
            ServiceFabricManagedClusters.NodeTypeData parameters = new ServiceFabricManagedClusters.NodeTypeData()
            {
                IsPrimary = false,
                VmInstanceCount = 10,
                VmSize = "Standard_DS3",
                VmImagePublisher = "MicrosoftWindowsServer",
                VmImageOffer = "WindowsServer",
                VmImageSku = "2016-Datacenter-Server-Core",
                VmImageVersion = "latest",
                IsStateless = true,
                MultiplePlacementGroups = true,
                EnableEncryptionAtHost = true,
                UseTempDataDisk = true,
            };

            var managedClusterId = ServiceFabricManagedClusters.ManagedCluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster");
            var collection = GetArmClient().GetManagedCluster(managedClusterId).GetNodeTypes();
            await collection.CreateOrUpdateAsync(true, nodeTypeName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get a node type
            string nodeTypeName = "FE";

            var managedClusterId = ServiceFabricManagedClusters.ManagedCluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster");
            var collection = GetArmClient().GetManagedCluster(managedClusterId).GetNodeTypes();
            await collection.GetAsync(nodeTypeName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List node type of the specified managed cluster

            var managedClusterId = ServiceFabricManagedClusters.ManagedCluster.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resRg", "myCluster");
            var collection = GetArmClient().GetManagedCluster(managedClusterId).GetNodeTypes();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
