// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using IotDpsClient;
using IotDpsClient.Models;

namespace IotDpsClient.Tests.Mock
{
    /// <summary> Test for CertificateResponse. </summary>
    public partial class CertificateResponseMockTests : MockTestBase
    {
        public CertificateResponseMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: DPSGetCertificate
            var certificateResponseId = IotDpsClient.CertificateResponse.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myFirstProvisioningService", "cert");
            var certificateResponse = GetArmClient().GetCertificateResponse(certificateResponseId);
            string ifMatch = null;

            await certificateResponse.GetAsync(ifMatch);
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: DPSDeleteCertificate
            var certificateResponseId = IotDpsClient.CertificateResponse.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myFirstProvisioningService", "cert");
            var certificateResponse = GetArmClient().GetCertificateResponse(certificateResponseId);
            string ifMatch = "AAAAAAAADGk=";
            string certificateName1 = null;
            byte[] certificateRawBytes = null;
            bool? certificateIsVerified = null;
            IotDpsClient.Models.CertificatePurpose? certificatePurpose = null;
            DateTimeOffset? certificateCreated = null;
            DateTimeOffset? certificateLastUpdated = null;
            bool? certificateHasPrivateKey = null;
            string certificateNonce = null;

            await certificateResponse.DeleteAsync(true, ifMatch, certificateName1, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce);
        }

        [RecordedTest]
        public async Task GenerateVerificationCode()
        {
            // Example: DPSGenerateVerificationCode
            var certificateResponseId = IotDpsClient.CertificateResponse.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myFirstProvisioningService", "cert");
            var certificateResponse = GetArmClient().GetCertificateResponse(certificateResponseId);
            string ifMatch = "AAAAAAAADGk=";
            string certificateName1 = null;
            byte[] certificateRawBytes = null;
            bool? certificateIsVerified = null;
            IotDpsClient.Models.CertificatePurpose? certificatePurpose = null;
            DateTimeOffset? certificateCreated = null;
            DateTimeOffset? certificateLastUpdated = null;
            bool? certificateHasPrivateKey = null;
            string certificateNonce = null;

            await certificateResponse.GenerateVerificationCodeAsync(ifMatch, certificateName1, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce);
        }

        [RecordedTest]
        public async Task VerifyCertificate()
        {
            // Example: DPSVerifyCertificate
            var certificateResponseId = IotDpsClient.CertificateResponse.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myFirstProvisioningService", "cert");
            var certificateResponse = GetArmClient().GetCertificateResponse(certificateResponseId);
            string ifMatch = "AAAAAAAADGk=";
            IotDpsClient.Models.VerificationCodeRequest request = new IotDpsClient.Models.VerificationCodeRequest()
            {
                Certificate = "#####################################",
            };
            string certificateName1 = null;
            byte[] certificateRawBytes = null;
            bool? certificateIsVerified = null;
            IotDpsClient.Models.CertificatePurpose? certificatePurpose = null;
            DateTimeOffset? certificateCreated = null;
            DateTimeOffset? certificateLastUpdated = null;
            bool? certificateHasPrivateKey = null;
            string certificateNonce = null;

            await certificateResponse.VerifyCertificateAsync(ifMatch, request, certificateName1, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce);
        }
    }
}
