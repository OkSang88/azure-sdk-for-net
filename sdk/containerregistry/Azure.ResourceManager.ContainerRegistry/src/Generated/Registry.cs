// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.ContainerRegistry.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.ContainerRegistry
{
    /// <summary> A Class representing a Registry along with the instance operations that can be performed on it. </summary>
    public partial class Registry : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="Registry"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string registryName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}";
            return new ResourceIdentifier(resourceId);
        }
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly RegistriesRestOperations _registriesRestClient;
        private readonly RegistryData _data;

        /// <summary> Initializes a new instance of the <see cref="Registry"/> class for mocking. </summary>
        protected Registry()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "Registry"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal Registry(ArmResource options, RegistryData data) : base(options, data.Id)
        {
            HasData = true;
            _data = data;
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _registriesRestClient = new RegistriesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Initializes a new instance of the <see cref="Registry"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal Registry(ArmResource options, ResourceIdentifier id) : base(options, id)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _registriesRestClient = new RegistriesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Initializes a new instance of the <see cref="Registry"/> class. </summary>
        /// <param name="clientOptions"> The client options to build client context. </param>
        /// <param name="credential"> The credential to build client context. </param>
        /// <param name="uri"> The uri to build client context. </param>
        /// <param name="pipeline"> The pipeline to build client context. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal Registry(ArmClientOptions clientOptions, TokenCredential credential, Uri uri, HttpPipeline pipeline, ResourceIdentifier id) : base(clientOptions, credential, uri, pipeline, id)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _registriesRestClient = new RegistriesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.ContainerRegistry/registries";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual RegistryData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets the properties of the specified container registry. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<Registry>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Registry.Get");
            scope.Start();
            try
            {
                var response = await _registriesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new Registry(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of the specified container registry. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Registry> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Registry.Get");
            scope.Start();
            try
            {
                var response = _registriesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new Registry(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public async virtual Task<IEnumerable<AzureLocation>> GetAvailableLocationsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Registry.GetAvailableLocations");
            scope.Start();
            try
            {
                return await ListAvailableLocationsAsync(ResourceType, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public virtual IEnumerable<AzureLocation> GetAvailableLocations(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Registry.GetAvailableLocations");
            scope.Start();
            try
            {
                return ListAvailableLocations(ResourceType, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a container registry. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<RegistryDeleteOperation> DeleteAsync(bool waitForCompletion, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Registry.Delete");
            scope.Start();
            try
            {
                var response = await _registriesRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new RegistryDeleteOperation(_clientDiagnostics, Pipeline, _registriesRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a container registry. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual RegistryDeleteOperation Delete(bool waitForCompletion, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Registry.Delete");
            scope.Start();
            try
            {
                var response = _registriesRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                var operation = new RegistryDeleteOperation(_clientDiagnostics, Pipeline, _registriesRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates a container registry with the specified parameters. </summary>
        /// <param name="registryUpdateParameters"> The parameters for updating a container registry. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="registryUpdateParameters"/> is null. </exception>
        public async virtual Task<RegistryUpdateOperation> UpdateAsync(bool waitForCompletion, RegistryUpdateParameters registryUpdateParameters, CancellationToken cancellationToken = default)
        {
            if (registryUpdateParameters == null)
            {
                throw new ArgumentNullException(nameof(registryUpdateParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("Registry.Update");
            scope.Start();
            try
            {
                var response = await _registriesRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, registryUpdateParameters, cancellationToken).ConfigureAwait(false);
                var operation = new RegistryUpdateOperation(this, _clientDiagnostics, Pipeline, _registriesRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, registryUpdateParameters).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates a container registry with the specified parameters. </summary>
        /// <param name="registryUpdateParameters"> The parameters for updating a container registry. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="registryUpdateParameters"/> is null. </exception>
        public virtual RegistryUpdateOperation Update(bool waitForCompletion, RegistryUpdateParameters registryUpdateParameters, CancellationToken cancellationToken = default)
        {
            if (registryUpdateParameters == null)
            {
                throw new ArgumentNullException(nameof(registryUpdateParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("Registry.Update");
            scope.Start();
            try
            {
                var response = _registriesRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, registryUpdateParameters, cancellationToken);
                var operation = new RegistryUpdateOperation(this, _clientDiagnostics, Pipeline, _registriesRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, registryUpdateParameters).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Copies an image to this container registry from the specified container registry. </summary>
        /// <param name="parameters"> The parameters specifying the image to copy and the source container registry. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public async virtual Task<RegistryImportImageOperation> ImportImageAsync(bool waitForCompletion, ImportImageParameters parameters, CancellationToken cancellationToken = default)
        {
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("Registry.ImportImage");
            scope.Start();
            try
            {
                var response = await _registriesRestClient.ImportImageAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new RegistryImportImageOperation(_clientDiagnostics, Pipeline, _registriesRestClient.CreateImportImageRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, parameters).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Copies an image to this container registry from the specified container registry. </summary>
        /// <param name="parameters"> The parameters specifying the image to copy and the source container registry. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public virtual RegistryImportImageOperation ImportImage(bool waitForCompletion, ImportImageParameters parameters, CancellationToken cancellationToken = default)
        {
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("Registry.ImportImage");
            scope.Start();
            try
            {
                var response = _registriesRestClient.ImportImage(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, parameters, cancellationToken);
                var operation = new RegistryImportImageOperation(_clientDiagnostics, Pipeline, _registriesRestClient.CreateImportImageRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, parameters).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the quota usages for the specified container registry. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="RegistryUsage" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<RegistryUsage> GetUsagesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<RegistryUsage>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Registry.GetUsages");
                scope.Start();
                try
                {
                    var response = await _registriesRestClient.ListUsagesAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Gets the quota usages for the specified container registry. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="RegistryUsage" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<RegistryUsage> GetUsages(CancellationToken cancellationToken = default)
        {
            Page<RegistryUsage> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Registry.GetUsages");
                scope.Start();
                try
                {
                    var response = _registriesRestClient.ListUsages(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Lists the login credentials for the specified container registry. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<RegistryListCredentialsResult>> GetCredentialsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Registry.GetCredentials");
            scope.Start();
            try
            {
                var response = await _registriesRestClient.ListCredentialsAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the login credentials for the specified container registry. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<RegistryListCredentialsResult> GetCredentials(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Registry.GetCredentials");
            scope.Start();
            try
            {
                var response = _registriesRestClient.ListCredentials(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Regenerates one of the login credentials for the specified container registry. </summary>
        /// <param name="regenerateCredentialParameters"> Specifies name of the password which should be regenerated -- password or password2. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="regenerateCredentialParameters"/> is null. </exception>
        public async virtual Task<Response<RegistryListCredentialsResult>> RegenerateCredentialAsync(RegenerateCredentialParameters regenerateCredentialParameters, CancellationToken cancellationToken = default)
        {
            if (regenerateCredentialParameters == null)
            {
                throw new ArgumentNullException(nameof(regenerateCredentialParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("Registry.RegenerateCredential");
            scope.Start();
            try
            {
                var response = await _registriesRestClient.RegenerateCredentialAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, regenerateCredentialParameters, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Regenerates one of the login credentials for the specified container registry. </summary>
        /// <param name="regenerateCredentialParameters"> Specifies name of the password which should be regenerated -- password or password2. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="regenerateCredentialParameters"/> is null. </exception>
        public virtual Response<RegistryListCredentialsResult> RegenerateCredential(RegenerateCredentialParameters regenerateCredentialParameters, CancellationToken cancellationToken = default)
        {
            if (regenerateCredentialParameters == null)
            {
                throw new ArgumentNullException(nameof(regenerateCredentialParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("Registry.RegenerateCredential");
            scope.Start();
            try
            {
                var response = _registriesRestClient.RegenerateCredential(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, regenerateCredentialParameters, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Schedules a new run based on the request parameters and add it to the run queue. </summary>
        /// <param name="runRequest"> The parameters of a run that needs to scheduled. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="runRequest"/> is null. </exception>
        public async virtual Task<RegistryScheduleRunOperation> ScheduleRunAsync(bool waitForCompletion, RunRequest runRequest, CancellationToken cancellationToken = default)
        {
            if (runRequest == null)
            {
                throw new ArgumentNullException(nameof(runRequest));
            }

            using var scope = _clientDiagnostics.CreateScope("Registry.ScheduleRun");
            scope.Start();
            try
            {
                var response = await _registriesRestClient.ScheduleRunAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, runRequest, cancellationToken).ConfigureAwait(false);
                var operation = new RegistryScheduleRunOperation(_clientDiagnostics, Pipeline, _registriesRestClient.CreateScheduleRunRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, runRequest).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Schedules a new run based on the request parameters and add it to the run queue. </summary>
        /// <param name="runRequest"> The parameters of a run that needs to scheduled. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="runRequest"/> is null. </exception>
        public virtual RegistryScheduleRunOperation ScheduleRun(bool waitForCompletion, RunRequest runRequest, CancellationToken cancellationToken = default)
        {
            if (runRequest == null)
            {
                throw new ArgumentNullException(nameof(runRequest));
            }

            using var scope = _clientDiagnostics.CreateScope("Registry.ScheduleRun");
            scope.Start();
            try
            {
                var response = _registriesRestClient.ScheduleRun(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, runRequest, cancellationToken);
                var operation = new RegistryScheduleRunOperation(_clientDiagnostics, Pipeline, _registriesRestClient.CreateScheduleRunRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, runRequest).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the upload location for the user to be able to upload the source. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<SourceUploadDefinition>> GetBuildSourceUploadUrlAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Registry.GetBuildSourceUploadUrl");
            scope.Start();
            try
            {
                var response = await _registriesRestClient.GetBuildSourceUploadUrlAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the upload location for the user to be able to upload the source. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SourceUploadDefinition> GetBuildSourceUploadUrl(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Registry.GetBuildSourceUploadUrl");
            scope.Start();
            try
            {
                var response = _registriesRestClient.GetBuildSourceUploadUrl(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        #region PrivateLinkResource

        /// <summary> Gets a collection of PrivateLinkResources in the Registry. </summary>
        /// <returns> An object representing collection of PrivateLinkResources and their operations over a Registry. </returns>
        public virtual PrivateLinkResourceCollection GetPrivateLinkResources()
        {
            return new PrivateLinkResourceCollection(this);
        }
        #endregion

        #region PrivateEndpointConnection

        /// <summary> Gets a collection of PrivateEndpointConnections in the Registry. </summary>
        /// <returns> An object representing collection of PrivateEndpointConnections and their operations over a Registry. </returns>
        public virtual PrivateEndpointConnectionCollection GetPrivateEndpointConnections()
        {
            return new PrivateEndpointConnectionCollection(this);
        }
        #endregion

        #region Replication

        /// <summary> Gets a collection of Replications in the Registry. </summary>
        /// <returns> An object representing collection of Replications and their operations over a Registry. </returns>
        public virtual ReplicationCollection GetReplications()
        {
            return new ReplicationCollection(this);
        }
        #endregion

        #region Webhook

        /// <summary> Gets a collection of Webhooks in the Registry. </summary>
        /// <returns> An object representing collection of Webhooks and their operations over a Registry. </returns>
        public virtual WebhookCollection GetWebhooks()
        {
            return new WebhookCollection(this);
        }
        #endregion

        #region AgentPool

        /// <summary> Gets a collection of AgentPools in the Registry. </summary>
        /// <returns> An object representing collection of AgentPools and their operations over a Registry. </returns>
        public virtual AgentPoolCollection GetAgentPools()
        {
            return new AgentPoolCollection(this);
        }
        #endregion

        #region Run

        /// <summary> Gets a collection of Runs in the Registry. </summary>
        /// <returns> An object representing collection of Runs and their operations over a Registry. </returns>
        public virtual RunCollection GetRuns()
        {
            return new RunCollection(this);
        }
        #endregion

        #region TaskRun

        /// <summary> Gets a collection of TaskRuns in the Registry. </summary>
        /// <returns> An object representing collection of TaskRuns and their operations over a Registry. </returns>
        public virtual TaskRunCollection GetTaskRuns()
        {
            return new TaskRunCollection(this);
        }
        #endregion

        #region Task

        /// <summary> Gets a collection of Tasks in the Registry. </summary>
        /// <returns> An object representing collection of Tasks and their operations over a Registry. </returns>
        public virtual TaskCollection GetTasks()
        {
            return new TaskCollection(this);
        }
        #endregion
    }
}
