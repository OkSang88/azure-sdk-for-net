// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Storage;
using Azure.ResourceManager.Storage.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Storage.Tests.Mock
{
    /// <summary> Test for StorageAccount. </summary>
    public partial class StorageAccountMockTests : MockTestBase
    {
        public StorageAccountMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: StorageAccountGetProperties
            var storageAccountId = Storage.StorageAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res9407", "sto8596");
            var storageAccount = GetArmClient().GetStorageAccount(storageAccountId);
            Storage.Models.StorageAccountExpand? expand = null;

            await storageAccount.GetAsync(expand);
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: StorageAccountGetPropertiesCMKEnabled
            var storageAccountId = Storage.StorageAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res9407", "sto8596");
            var storageAccount = GetArmClient().GetStorageAccount(storageAccountId);
            Storage.Models.StorageAccountExpand? expand = null;

            await storageAccount.GetAsync(expand);
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: StorageAccountDelete
            var storageAccountId = Storage.StorageAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res4228", "sto2434");
            var storageAccount = GetArmClient().GetStorageAccount(storageAccountId);

            await storageAccount.DeleteAsync();
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: StorageAccountEnableAD
            var storageAccountId = Storage.StorageAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res9407", "sto8596");
            var storageAccount = GetArmClient().GetStorageAccount(storageAccountId);
            Storage.Models.StorageAccountUpdateParameters parameters = new Storage.Models.StorageAccountUpdateParameters()
            {
                AzureFilesIdentityBasedAuthentication = new Storage.Models.AzureFilesIdentityBasedAuthentication(directoryServiceOptions: new Storage.Models.DirectoryServiceOptions("AD"))
                {
                    ActiveDirectoryProperties = new Storage.Models.ActiveDirectoryProperties(domainName: "adtest.com", netBiosDomainName: "adtest.com", forestName: "adtest.com", domainGuid: "aebfc118-9fa9-4732-a21f-d98e41a77ae1", domainSid: "S-1-5-21-2400535526-2334094090-2402026252", azureStorageSid: "S-1-5-21-2400535526-2334094090-2402026252-0012"),
                },
            };

            await storageAccount.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task Update2()
        {
            // Example: StorageAccountEnableCMK
            var storageAccountId = Storage.StorageAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res9407", "sto8596");
            var storageAccount = GetArmClient().GetStorageAccount(storageAccountId);
            Storage.Models.StorageAccountUpdateParameters parameters = new Storage.Models.StorageAccountUpdateParameters()
            {
                Encryption = new Storage.Models.Encryption(keySource: new Storage.Models.KeySource("Microsoft.Keyvault"))
                {
                    Services = new Storage.Models.EncryptionServices()
                    {
                        Blob = new Storage.Models.EncryptionService()
                        {
                            Enabled = true,
                            KeyType = new Storage.Models.KeyType("Account"),
                        },
                        File = new Storage.Models.EncryptionService()
                        {
                            Enabled = true,
                            KeyType = new Storage.Models.KeyType("Account"),
                        },
                    },
                    KeyVaultProperties = new Storage.Models.KeyVaultProperties()
                    {
                        KeyName = "wrappingKey",
                        KeyVersion = "",
                        KeyVaultUri = "https://myvault8569.vault.azure.net",
                    },
                },
            };

            await storageAccount.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task Update3()
        {
            // Example: StorageAccountUpdate
            var storageAccountId = Storage.StorageAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res9407", "sto8596");
            var storageAccount = GetArmClient().GetStorageAccount(storageAccountId);
            Storage.Models.StorageAccountUpdateParameters parameters = new Storage.Models.StorageAccountUpdateParameters()
            {
                Encryption = new Storage.Models.Encryption(keySource: new Storage.Models.KeySource("Microsoft.Storage"))
                {
                    Services = new Storage.Models.EncryptionServices()
                    {
                        Blob = new Storage.Models.EncryptionService()
                        {
                            Enabled = true,
                            KeyType = new Storage.Models.KeyType("Account"),
                        },
                        File = new Storage.Models.EncryptionService()
                        {
                            Enabled = true,
                            KeyType = new Storage.Models.KeyType("Account"),
                        },
                    },
                },
                SasPolicy = new Storage.Models.SasPolicy(sasExpirationPeriod: "1.15:59:59", expirationAction: new Storage.Models.ExpirationAction("Log")),
                KeyPolicy = new Storage.Models.KeyPolicy(keyExpirationPeriodInDays: 20),
                NetworkRuleSet = new Storage.Models.NetworkRuleSet(defaultAction: Storage.Models.DefaultAction.Allow),
                RoutingPreference = new Storage.Models.RoutingPreference()
                {
                    RoutingChoice = new Storage.Models.RoutingChoice("MicrosoftRouting"),
                    PublishMicrosoftEndpoints = true,
                    PublishInternetEndpoints = true,
                },
                AllowBlobPublicAccess = false,
                MinimumTlsVersion = new Storage.Models.MinimumTlsVersion("TLS1_2"),
                AllowSharedKeyAccess = true,
            };

            await storageAccount.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task Update4()
        {
            // Example: StorageAccountUpdateUserAssignedEncryptionIdentityWithCMK
            var storageAccountId = Storage.StorageAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res9101", "sto4445");
            var storageAccount = GetArmClient().GetStorageAccount(storageAccountId);
            Storage.Models.StorageAccountUpdateParameters parameters = new Storage.Models.StorageAccountUpdateParameters()
            {
                Sku = new Storage.Models.Sku(name: new Storage.Models.SkuName("Standard_LRS")),
                Identity = new Storage.Models.Identity(type: new Storage.Models.IdentityType("UserAssigned")),
                Kind = new Storage.Models.Kind("Storage"),
                Encryption = new Storage.Models.Encryption(keySource: new Storage.Models.KeySource("Microsoft.Keyvault"))
                {
                    Services = new Storage.Models.EncryptionServices()
                    {
                        Blob = new Storage.Models.EncryptionService()
                        {
                            Enabled = true,
                            KeyType = new Storage.Models.KeyType("Account"),
                        },
                        File = new Storage.Models.EncryptionService()
                        {
                            Enabled = true,
                            KeyType = new Storage.Models.KeyType("Account"),
                        },
                    },
                    KeyVaultProperties = new Storage.Models.KeyVaultProperties()
                    {
                        KeyName = "wrappingKey",
                        KeyVersion = "",
                        KeyVaultUri = "https://myvault8569.vault.azure.net",
                    },
                    EncryptionIdentity = new Storage.Models.EncryptionIdentity()
                    {
                        EncryptionUserAssignedIdentity = "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}",
                    },
                },
            };

            await storageAccount.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task GetKeys()
        {
            // Example: StorageAccountListKeys
            var storageAccountId = Storage.StorageAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res418", "sto2220");
            var storageAccount = GetArmClient().GetStorageAccount(storageAccountId);

            await storageAccount.GetKeysAsync();
        }

        [RecordedTest]
        public async Task RegenerateKey()
        {
            // Example: StorageAccountRegenerateKerbKey
            var storageAccountId = Storage.StorageAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res4167", "sto3539");
            var storageAccount = GetArmClient().GetStorageAccount(storageAccountId);
            Storage.Models.StorageAccountRegenerateKeyParameters regenerateKey = new Storage.Models.StorageAccountRegenerateKeyParameters(keyName: "kerb1");

            await storageAccount.RegenerateKeyAsync(regenerateKey);
        }

        [RecordedTest]
        public async Task RegenerateKey2()
        {
            // Example: StorageAccountRegenerateKey
            var storageAccountId = Storage.StorageAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res4167", "sto3539");
            var storageAccount = GetArmClient().GetStorageAccount(storageAccountId);
            Storage.Models.StorageAccountRegenerateKeyParameters regenerateKey = new Storage.Models.StorageAccountRegenerateKeyParameters(keyName: "key2");

            await storageAccount.RegenerateKeyAsync(regenerateKey);
        }

        [RecordedTest]
        public async Task GetAccountSAS()
        {
            // Example: StorageAccountListAccountSAS
            var storageAccountId = Storage.StorageAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res7985", "sto8588");
            var storageAccount = GetArmClient().GetStorageAccount(storageAccountId);
            Storage.Models.AccountSasParameters parameters = new Storage.Models.AccountSasParameters(services: new Storage.Models.Services("b"), resourceTypes: new Storage.Models.SignedResourceTypes("s"), permissions: new Storage.Models.Permissions("r"), sharedAccessExpiryTime: DateTimeOffset.Parse("2017-05-24T11:42:03.1567373Z"))
            {
                Protocols = Storage.Models.HttpProtocol.HttpsHttp,
                SharedAccessStartTime = DateTimeOffset.Parse("2017-05-24T10:42:03.1567373Z"),
                KeyToSign = "key1",
            };

            await storageAccount.GetAccountSASAsync(parameters);
        }

        [RecordedTest]
        public async Task GetServiceSAS()
        {
            // Example: StorageAccountListServiceSAS
            var storageAccountId = Storage.StorageAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res7439", "sto1299");
            var storageAccount = GetArmClient().GetStorageAccount(storageAccountId);
            Storage.Models.ServiceSasParameters parameters = new Storage.Models.ServiceSasParameters(canonicalizedResource: "/blob/sto1299/music")
            {
                Resource = new Storage.Models.SignedResource("c"),
                Permissions = new Storage.Models.Permissions("l"),
                SharedAccessExpiryTime = DateTimeOffset.Parse("2017-05-24T11:32:48.8457197Z"),
            };

            await storageAccount.GetServiceSASAsync(parameters);
        }

        [RecordedTest]
        public async Task Failover()
        {
            // Example: StorageAccountFailover
            var storageAccountId = Storage.StorageAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res4228", "sto2434");
            var storageAccount = GetArmClient().GetStorageAccount(storageAccountId);

            await storageAccount.FailoverAsync();
        }

        [RecordedTest]
        public async Task RestoreBlobRanges()
        {
            // Example: BlobRangesRestore
            var storageAccountId = Storage.StorageAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res9101", "sto4445");
            var storageAccount = GetArmClient().GetStorageAccount(storageAccountId);
            Storage.Models.BlobRestoreParameters parameters = new Storage.Models.BlobRestoreParameters(timeToRestore: DateTimeOffset.Parse("2019-04-20T15:30:00.0000000Z"), blobRanges: new List<Storage.Models.BlobRestoreRange>()
{
new Storage.Models.BlobRestoreRange(startRange: "container/blobpath1",endRange: "container/blobpath2"),new Storage.Models.BlobRestoreRange(startRange: "container2/blobpath3",endRange: ""),});

            await storageAccount.RestoreBlobRangesAsync(parameters);
        }

        [RecordedTest]
        public async Task RevokeUserDelegationKeys()
        {
            // Example: StorageAccountRevokeUserDelegationKeys
            var storageAccountId = Storage.StorageAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res4167", "sto3539");
            var storageAccount = GetArmClient().GetStorageAccount(storageAccountId);

            await storageAccount.RevokeUserDelegationKeysAsync();
        }

        [RecordedTest]
        public async Task GetPrivateLinkResources()
        {
            // Example: StorageAccountListPrivateLinkResources
            var storageAccountId = Storage.StorageAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res6977", "sto2527");
            var storageAccount = GetArmClient().GetStorageAccount(storageAccountId);

            await foreach (var _ in storageAccount.GetPrivateLinkResourcesAsync())
            {
            }
        }

        [RecordedTest]
        public async Task ManagementPolicyGet()
        {
            // Example: StorageAccountGetManagementPolicies
            var managementPolicyId = Storage.ManagementPolicy.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res6977", "sto2527", "default");
            var managementPolicy = GetArmClient().GetManagementPolicy(managementPolicyId);

            await managementPolicy.GetAsync();
        }

        [RecordedTest]
        public async Task ManagementPolicyDelete()
        {
            // Example: StorageAccountDeleteManagementPolicies
            var managementPolicyId = Storage.ManagementPolicy.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res6977", "sto2527", "default");
            var managementPolicy = GetArmClient().GetManagementPolicy(managementPolicyId);

            await managementPolicy.DeleteAsync();
        }

        [RecordedTest]
        public async Task BlobServiceGet()
        {
            // Example: GetBlobServices
            var blobServiceId = Storage.BlobService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res4410", "sto8607");
            var blobService = GetArmClient().GetBlobService(blobServiceId);

            await blobService.GetAsync();
        }

        [RecordedTest]
        public async Task FileServiceGet()
        {
            // Example: GetFileServices
            var fileServiceId = Storage.FileService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res4410", "sto8607");
            var fileService = GetArmClient().GetFileService(fileServiceId);

            await fileService.GetAsync();
        }

        [RecordedTest]
        public async Task QueueServiceGet()
        {
            // Example: QueueServicesGet
            var queueServiceId = Storage.QueueService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res4410", "sto8607");
            var queueService = GetArmClient().GetQueueService(queueServiceId);

            await queueService.GetAsync();
        }

        [RecordedTest]
        public async Task TableServiceGet()
        {
            // Example: TableServicesGet
            var tableServiceId = Storage.TableService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res4410", "sto8607");
            var tableService = GetArmClient().GetTableService(tableServiceId);

            await tableService.GetAsync();
        }
    }
}
