// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceFabricMesh.Models
{
    public partial class AzureInternalMonitoringPipelineSinkDescription : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(AccountName))
            {
                writer.WritePropertyName("accountName");
                writer.WriteStringValue(AccountName);
            }
            if (Optional.IsDefined(Namespace))
            {
                writer.WritePropertyName("namespace");
                writer.WriteStringValue(Namespace);
            }
            if (Optional.IsDefined(MaConfigUrl))
            {
                writer.WritePropertyName("maConfigUrl");
                writer.WriteStringValue(MaConfigUrl);
            }
            if (Optional.IsDefined(FluentdConfigUrl))
            {
                writer.WritePropertyName("fluentdConfigUrl");
                writer.WriteObjectValue(FluentdConfigUrl);
            }
            if (Optional.IsDefined(AutoKeyConfigUrl))
            {
                writer.WritePropertyName("autoKeyConfigUrl");
                writer.WriteStringValue(AutoKeyConfigUrl);
            }
            writer.WritePropertyName("kind");
            writer.WriteStringValue(Kind.ToString());
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            writer.WriteEndObject();
        }

        internal static AzureInternalMonitoringPipelineSinkDescription DeserializeAzureInternalMonitoringPipelineSinkDescription(JsonElement element)
        {
            Optional<string> accountName = default;
            Optional<string> @namespace = default;
            Optional<string> maConfigUrl = default;
            Optional<object> fluentdConfigUrl = default;
            Optional<string> autoKeyConfigUrl = default;
            DiagnosticsSinkKind kind = default;
            Optional<string> name = default;
            Optional<string> description = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("accountName"))
                {
                    accountName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("namespace"))
                {
                    @namespace = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maConfigUrl"))
                {
                    maConfigUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fluentdConfigUrl"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    fluentdConfigUrl = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("autoKeyConfigUrl"))
                {
                    autoKeyConfigUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kind"))
                {
                    kind = new DiagnosticsSinkKind(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
            }
            return new AzureInternalMonitoringPipelineSinkDescription(kind, name.Value, description.Value, accountName.Value, @namespace.Value, maConfigUrl.Value, fluentdConfigUrl.Value, autoKeyConfigUrl.Value);
        }
    }
}
