// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for Disk. </summary>
    public partial class DiskCollectionMockTests : MockTestBase
    {
        public DiskCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create a confidential VM supported disk encrypted with customer managed key
            string diskName = "myDisk";
            Compute.DiskData disk = new Compute.DiskData(location: "West US")
            {
                OSType = Compute.Models.OperatingSystemTypes.Windows,
                CreationData = new Compute.Models.CreationData(createOption: new Compute.Models.DiskCreateOption("FromImage"))
                {
                    ImageReference = new Compute.Models.ImageDiskReference(id: "/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/westus/Publishers/{publisher}/ArtifactTypes/VMImage/Offers/{offer}/Skus/{sku}/Versions/1.0.0"),
                },
                SecurityProfile = new Compute.Models.DiskSecurityProfile()
                {
                    SecurityType = new Compute.Models.DiskSecurityTypes("ConfidentialVM_DiskEncryptedWithCustomerKey"),
                    SecureVMDiskEncryptionSetId = "/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}",
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetDisks();
            await collection.CreateOrUpdateAsync(true, diskName, disk);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Create a managed disk and associate with disk access resource.
            string diskName = "myDisk";
            Compute.DiskData disk = new Compute.DiskData(location: "West US")
            {
                CreationData = new Compute.Models.CreationData(createOption: new Compute.Models.DiskCreateOption("Empty")),
                DiskSizeGB = 200,
                NetworkAccessPolicy = new Compute.Models.NetworkAccessPolicy("AllowPrivate"),
                DiskAccessId = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/{existing-diskAccess-name}",
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetDisks();
            await collection.CreateOrUpdateAsync(true, diskName, disk);
        }

        [RecordedTest]
        public async Task CreateOrUpdate3()
        {
            // Example: Create a managed disk and associate with disk encryption set.
            string diskName = "myDisk";
            Compute.DiskData disk = new Compute.DiskData(location: "West US")
            {
                CreationData = new Compute.Models.CreationData(createOption: new Compute.Models.DiskCreateOption("Empty")),
                DiskSizeGB = 200,
                Encryption = new Compute.Models.Encryption()
                {
                    DiskEncryptionSetId = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}",
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetDisks();
            await collection.CreateOrUpdateAsync(true, diskName, disk);
        }

        [RecordedTest]
        public async Task CreateOrUpdate4()
        {
            // Example: Create a managed disk by copying a snapshot.
            string diskName = "myDisk";
            Compute.DiskData disk = new Compute.DiskData(location: "West US")
            {
                CreationData = new Compute.Models.CreationData(createOption: new Compute.Models.DiskCreateOption("Copy"))
                {
                    SourceResourceId = "subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot",
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetDisks();
            await collection.CreateOrUpdateAsync(true, diskName, disk);
        }

        [RecordedTest]
        public async Task CreateOrUpdate5()
        {
            // Example: Create a managed disk by importing an unmanaged blob from a different subscription.
            string diskName = "myDisk";
            Compute.DiskData disk = new Compute.DiskData(location: "West US")
            {
                CreationData = new Compute.Models.CreationData(createOption: new Compute.Models.DiskCreateOption("Import"))
                {
                    StorageAccountId = "subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount",
                    SourceUri = "https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd",
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetDisks();
            await collection.CreateOrUpdateAsync(true, diskName, disk);
        }

        [RecordedTest]
        public async Task CreateOrUpdate6()
        {
            // Example: Create a managed disk by importing an unmanaged blob from the same subscription.
            string diskName = "myDisk";
            Compute.DiskData disk = new Compute.DiskData(location: "West US")
            {
                CreationData = new Compute.Models.CreationData(createOption: new Compute.Models.DiskCreateOption("Import"))
                {
                    SourceUri = "https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd",
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetDisks();
            await collection.CreateOrUpdateAsync(true, diskName, disk);
        }

        [RecordedTest]
        public async Task CreateOrUpdate7()
        {
            // Example: Create a managed disk from ImportSecure create option
            string diskName = "myDisk";
            Compute.DiskData disk = new Compute.DiskData(location: "West US")
            {
                OSType = Compute.Models.OperatingSystemTypes.Windows,
                CreationData = new Compute.Models.CreationData(createOption: new Compute.Models.DiskCreateOption("ImportSecure"))
                {
                    StorageAccountId = "subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount",
                    SourceUri = "https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd",
                    SecurityDataUri = "https://mystorageaccount.blob.core.windows.net/osimages/vmgs.vhd",
                },
                SecurityProfile = new Compute.Models.DiskSecurityProfile()
                {
                    SecurityType = new Compute.Models.DiskSecurityTypes("ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey"),
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetDisks();
            await collection.CreateOrUpdateAsync(true, diskName, disk);
        }

        [RecordedTest]
        public async Task CreateOrUpdate8()
        {
            // Example: Create a managed disk from UploadPreparedSecure create option
            string diskName = "myDisk";
            Compute.DiskData disk = new Compute.DiskData(location: "West US")
            {
                OSType = Compute.Models.OperatingSystemTypes.Windows,
                CreationData = new Compute.Models.CreationData(createOption: new Compute.Models.DiskCreateOption("UploadPreparedSecure"))
                {
                    UploadSizeBytes = 10737418752,
                },
                SecurityProfile = new Compute.Models.DiskSecurityProfile()
                {
                    SecurityType = new Compute.Models.DiskSecurityTypes("TrustedLaunch"),
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetDisks();
            await collection.CreateOrUpdateAsync(true, diskName, disk);
        }

        [RecordedTest]
        public async Task CreateOrUpdate9()
        {
            // Example: Create a managed disk from a platform image.
            string diskName = "myDisk";
            Compute.DiskData disk = new Compute.DiskData(location: "West US")
            {
                OSType = Compute.Models.OperatingSystemTypes.Windows,
                CreationData = new Compute.Models.CreationData(createOption: new Compute.Models.DiskCreateOption("FromImage"))
                {
                    ImageReference = new Compute.Models.ImageDiskReference(id: "/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/westus/Publishers/{publisher}/ArtifactTypes/VMImage/Offers/{offer}/Skus/{sku}/Versions/1.0.0"),
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetDisks();
            await collection.CreateOrUpdateAsync(true, diskName, disk);
        }

        [RecordedTest]
        public async Task CreateOrUpdate10()
        {
            // Example: Create a managed disk from an existing managed disk in the same or different subscription.
            string diskName = "myDisk2";
            Compute.DiskData disk = new Compute.DiskData(location: "West US")
            {
                CreationData = new Compute.Models.CreationData(createOption: new Compute.Models.DiskCreateOption("Copy"))
                {
                    SourceResourceId = "subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk1",
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetDisks();
            await collection.CreateOrUpdateAsync(true, diskName, disk);
        }

        [RecordedTest]
        public async Task CreateOrUpdate11()
        {
            // Example: Create a managed disk with security profile
            string diskName = "myDisk";
            Compute.DiskData disk = new Compute.DiskData(location: "North Central US")
            {
                OSType = Compute.Models.OperatingSystemTypes.Windows,
                CreationData = new Compute.Models.CreationData(createOption: new Compute.Models.DiskCreateOption("FromImage"))
                {
                    ImageReference = new Compute.Models.ImageDiskReference(id: "/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/uswest/Publishers/Microsoft/ArtifactTypes/VMImage/Offers/{offer}"),
                },
                SecurityProfile = new Compute.Models.DiskSecurityProfile()
                {
                    SecurityType = new Compute.Models.DiskSecurityTypes("TrustedLaunch"),
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetDisks();
            await collection.CreateOrUpdateAsync(true, diskName, disk);
        }

        [RecordedTest]
        public async Task CreateOrUpdate12()
        {
            // Example: Create a managed disk with ssd zrs account type.
            string diskName = "myDisk";
            Compute.DiskData disk = new Compute.DiskData(location: "West US")
            {
                Sku = new Compute.Models.DiskSku()
                {
                    Name = new Compute.Models.DiskStorageAccountTypes("Premium_ZRS"),
                },
                CreationData = new Compute.Models.CreationData(createOption: new Compute.Models.DiskCreateOption("Empty")),
                DiskSizeGB = 200,
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetDisks();
            await collection.CreateOrUpdateAsync(true, diskName, disk);
        }

        [RecordedTest]
        public async Task CreateOrUpdate13()
        {
            // Example: Create a managed upload disk.
            string diskName = "myDisk";
            Compute.DiskData disk = new Compute.DiskData(location: "West US")
            {
                CreationData = new Compute.Models.CreationData(createOption: new Compute.Models.DiskCreateOption("Upload"))
                {
                    UploadSizeBytes = 10737418752,
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetDisks();
            await collection.CreateOrUpdateAsync(true, diskName, disk);
        }

        [RecordedTest]
        public async Task CreateOrUpdate14()
        {
            // Example: Create an empty managed disk in extended location.
            string diskName = "myDisk";
            Compute.DiskData disk = new Compute.DiskData(location: "West US")
            {
                ExtendedLocation = new Compute.Models.ExtendedLocation()
                {
                    Name = "{edge-zone-id}",
                    Type = new Compute.Models.ExtendedLocationTypes("EdgeZone"),
                },
                CreationData = new Compute.Models.CreationData(createOption: new Compute.Models.DiskCreateOption("Empty")),
                DiskSizeGB = 200,
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetDisks();
            await collection.CreateOrUpdateAsync(true, diskName, disk);
        }

        [RecordedTest]
        public async Task CreateOrUpdate15()
        {
            // Example: Create an empty managed disk.
            string diskName = "myDisk";
            Compute.DiskData disk = new Compute.DiskData(location: "West US")
            {
                CreationData = new Compute.Models.CreationData(createOption: new Compute.Models.DiskCreateOption("Empty")),
                DiskSizeGB = 200,
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetDisks();
            await collection.CreateOrUpdateAsync(true, diskName, disk);
        }

        [RecordedTest]
        public async Task CreateOrUpdate16()
        {
            // Example: Create an ultra managed disk with logicalSectorSize 512E
            string diskName = "myDisk";
            Compute.DiskData disk = new Compute.DiskData(location: "West US")
            {
                Sku = new Compute.Models.DiskSku()
                {
                    Name = new Compute.Models.DiskStorageAccountTypes("UltraSSD_LRS"),
                },
                CreationData = new Compute.Models.CreationData(createOption: new Compute.Models.DiskCreateOption("Empty"))
                {
                    LogicalSectorSize = 512,
                },
                DiskSizeGB = 200,
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetDisks();
            await collection.CreateOrUpdateAsync(true, diskName, disk);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get information about a managed disk.
            string diskName = "myManagedDisk";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetDisks();
            await collection.GetAsync(diskName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List all managed disks in a resource group.

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetDisks();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
