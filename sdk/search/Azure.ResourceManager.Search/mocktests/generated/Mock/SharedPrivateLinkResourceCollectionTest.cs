// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using SearchManagementClient;
using SearchManagementClient.Models;

namespace SearchManagementClient.Tests.Mock
{
    /// <summary> Test for SharedPrivateLinkResource. </summary>
    public partial class SharedPrivateLinkResourceCollectionMockTests : MockTestBase
    {
        public SharedPrivateLinkResourceCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: SharedPrivateLinkResourceCreateOrUpdate
            string sharedPrivateLinkResourceName = "testResource";
            SearchManagementClient.SharedPrivateLinkResourceData sharedPrivateLinkResource = new SearchManagementClient.SharedPrivateLinkResourceData()
            {
                Properties = new SearchManagementClient.Models.SharedPrivateLinkResourceProperties()
                {
                    PrivateLinkResourceId = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Storage/storageAccounts/storageAccountName",
                    GroupId = "blob",
                    RequestMessage = "please approve",
                    ResourceRegion = null,
                },
            };
            SearchManagementClient.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            var searchServiceId = SearchManagementClient.SearchService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "mysearchservice");
            var collection = GetArmClient().GetSearchService(searchServiceId).GetSharedPrivateLinkResources();
            await collection.CreateOrUpdateAsync(true, sharedPrivateLinkResourceName, sharedPrivateLinkResource, searchManagementRequestOptions);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: SharedPrivateLinkResourceGet
            string sharedPrivateLinkResourceName = "testResource";
            SearchManagementClient.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            var searchServiceId = SearchManagementClient.SearchService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "mysearchservice");
            var collection = GetArmClient().GetSearchService(searchServiceId).GetSharedPrivateLinkResources();
            await collection.GetAsync(sharedPrivateLinkResourceName, searchManagementRequestOptions);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: ListSharedPrivateLinkResourcesByService
            SearchManagementClient.Models.SearchManagementRequestOptions searchManagementRequestOptions = null;

            var searchServiceId = SearchManagementClient.SearchService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "mysearchservice");
            var collection = GetArmClient().GetSearchService(searchServiceId).GetSharedPrivateLinkResources();
            await foreach (var _ in collection.GetAllAsync(searchManagementRequestOptions))
            {
            }
        }
    }
}
