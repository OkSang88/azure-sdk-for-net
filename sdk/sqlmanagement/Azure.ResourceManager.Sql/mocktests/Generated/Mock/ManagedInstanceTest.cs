// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for ManagedInstance. </summary>
    public partial class ManagedInstanceMockTests : MockTestBase
    {
        public ManagedInstanceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get managed instance
            var managedInstanceId = Sql.ManagedInstance.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg", "testinstance");
            var managedInstance = GetArmClient().GetManagedInstance(managedInstanceId);
            string expand = null;

            await managedInstance.GetAsync(expand);
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: Get managed instance with $expand=administrators
            var managedInstanceId = Sql.ManagedInstance.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg", "testinstance");
            var managedInstance = GetArmClient().GetManagedInstance(managedInstanceId);
            string expand = null;

            await managedInstance.GetAsync(expand);
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete managed instance
            var managedInstanceId = Sql.ManagedInstance.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg", "testinstance");
            var managedInstance = GetArmClient().GetManagedInstance(managedInstanceId);

            await managedInstance.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Remove maintenance policy from managed instance (select default maintenance policy)
            var managedInstanceId = Sql.ManagedInstance.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg", "testinstance");
            var managedInstance = GetArmClient().GetManagedInstance(managedInstanceId);
            Sql.Models.ManagedInstanceUpdate parameters = new Sql.Models.ManagedInstanceUpdate()
            {
                MaintenanceConfigurationId = "/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_Default",
            };

            await managedInstance.UpdateAsync(true, parameters);
        }

        [RecordedTest]
        public async Task Update2()
        {
            // Example: Update managed instance with all properties
            var managedInstanceId = Sql.ManagedInstance.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg", "testinstance");
            var managedInstance = GetArmClient().GetManagedInstance(managedInstanceId);
            Sql.Models.ManagedInstanceUpdate parameters = new Sql.Models.ManagedInstanceUpdate()
            {
                Sku = new Sql.Models.Sku(name: "GP_Gen4")
                {
                    Tier = "GeneralPurpose",
                    Capacity = 8,
                },
                AdministratorLogin = "dummylogin",
                AdministratorLoginPassword = "PLACEHOLDER",
                LicenseType = new Sql.Models.ManagedInstanceLicenseType("BasePrice"),
                VCores = 8,
                StorageSizeInGB = 448,
                Collation = "SQL_Latin1_General_CP1_CI_AS",
                PublicDataEndpointEnabled = false,
                ProxyOverride = new Sql.Models.ManagedInstanceProxyOverride("Redirect"),
                MaintenanceConfigurationId = "/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_MI_1",
                MinimalTlsVersion = "1.2",
            };

            await managedInstance.UpdateAsync(true, parameters);
        }

        [RecordedTest]
        public async Task Update3()
        {
            // Example: Update managed instance with minimal properties
            var managedInstanceId = Sql.ManagedInstance.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg", "testinstance");
            var managedInstance = GetArmClient().GetManagedInstance(managedInstanceId);
            Sql.Models.ManagedInstanceUpdate parameters = new Sql.Models.ManagedInstanceUpdate();

            await managedInstance.UpdateAsync(true, parameters);
        }

        [RecordedTest]
        public async Task GetInaccessibleManagedDatabases()
        {
            // Example: List inaccessible managed databases by managed instances
            var managedInstanceId = Sql.ManagedInstance.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg", "testcl");
            var managedInstance = GetArmClient().GetManagedInstance(managedInstanceId);

            await foreach (var _ in managedInstance.GetInaccessibleManagedDatabasesAsync())
            {
            }
        }

        [RecordedTest]
        public async Task GetTopQueries()
        {
            // Example: Obtain list of instance's top resource consuming queries.
            var managedInstanceId = Sql.ManagedInstance.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-7398", "sqlcrudtest-4645");
            var managedInstance = GetArmClient().GetManagedInstance(managedInstanceId);
            int? numberOfQueries = null;
            string databases = null;
            string startTime = null;
            string endTime = null;
            Sql.Models.QueryTimeGrainType? interval = new Sql.Models.QueryTimeGrainType("PT1H");
            Sql.Models.AggregationFunctionType? aggregationFunction = null;
            Sql.Models.MetricType? observationMetric = new Sql.Models.MetricType("duration");

            await foreach (var _ in managedInstance.GetTopQueriesAsync(numberOfQueries, databases, startTime, endTime, interval, aggregationFunction, observationMetric))
            {
            }
        }

        [RecordedTest]
        public async Task GetTopQueries2()
        {
            // Example: Obtain list of instance's top resource consuming queries. Full-blown request and response.
            var managedInstanceId = Sql.ManagedInstance.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-7398", "sqlcrudtest-4645");
            var managedInstance = GetArmClient().GetManagedInstance(managedInstanceId);
            int? numberOfQueries = null;
            string databases = "db1,db2";
            string startTime = "2020-03-10T12:00:00Z";
            string endTime = "2020-03-12T12:00:00Z";
            Sql.Models.QueryTimeGrainType? interval = new Sql.Models.QueryTimeGrainType("P1D");
            Sql.Models.AggregationFunctionType? aggregationFunction = null;
            Sql.Models.MetricType? observationMetric = new Sql.Models.MetricType("cpu");

            await foreach (var _ in managedInstance.GetTopQueriesAsync(numberOfQueries, databases, startTime, endTime, interval, aggregationFunction, observationMetric))
            {
            }
        }

        [RecordedTest]
        public async Task GetTopQueries3()
        {
            // Example: Obtain list of instance's top resource consuming queries. Minimal request and response.
            var managedInstanceId = Sql.ManagedInstance.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-7398", "sqlcrudtest-4645");
            var managedInstance = GetArmClient().GetManagedInstance(managedInstanceId);
            int? numberOfQueries = null;
            string databases = null;
            string startTime = null;
            string endTime = null;
            Sql.Models.QueryTimeGrainType? interval = null;
            Sql.Models.AggregationFunctionType? aggregationFunction = null;
            Sql.Models.MetricType? observationMetric = null;

            await foreach (var _ in managedInstance.GetTopQueriesAsync(numberOfQueries, databases, startTime, endTime, interval, aggregationFunction, observationMetric))
            {
            }
        }

        [RecordedTest]
        public async Task Failover()
        {
            // Example: Failover a managed instance.
            var managedInstanceId = Sql.ManagedInstance.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "group1", "instanceName");
            var managedInstance = GetArmClient().GetManagedInstance(managedInstanceId);
            Sql.Models.ReplicaType? replicaType = new Sql.Models.ReplicaType("Primary");

            await managedInstance.FailoverAsync(true, replicaType);
        }

        [RecordedTest]
        public async Task CreateManagedInstanceTdeCertificate()
        {
            // Example: Upload a TDE certificate
            var managedInstanceId = Sql.ManagedInstance.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testtdecert", "testtdecert");
            var managedInstance = GetArmClient().GetManagedInstance(managedInstanceId);
            Sql.Models.TdeCertificate parameters = new Sql.Models.TdeCertificate()
            {
                PrivateBlob = "MIIXXXXXXXX",
            };

            await managedInstance.CreateManagedInstanceTdeCertificateAsync(true, parameters);
        }

        [RecordedTest]
        public async Task GetServerTrustGroups()
        {
            // Example: List server trust groups by managed instance
            var managedInstanceId = Sql.ManagedInstance.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "managedInstance-1");
            var managedInstance = GetArmClient().GetManagedInstance(managedInstanceId);

            await foreach (var _ in managedInstance.GetServerTrustGroupsAsync())
            {
            }
        }

        [RecordedTest]
        public async Task SqlAgentConfigurationGet()
        {
            // Example: Gets current instance sql agent configuration.
            var sqlAgentConfigurationId = Sql.SqlAgentConfiguration.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sqlcrudtest-7398", "sqlcrudtest-4645");
            var sqlAgentConfiguration = GetArmClient().GetSqlAgentConfiguration(sqlAgentConfigurationId);

            await sqlAgentConfiguration.GetAsync();
        }
    }
}
