// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for ConnectionMonitor. </summary>
    public partial class ConnectionMonitorCollectionMockTests : MockTestBase
    {
        public ConnectionMonitorCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create connection monitor V1
            string connectionMonitorName = "cm1";
            Network.Models.ConnectionMonitorInput parameters = new Network.Models.ConnectionMonitorInput()
            {
                Location = "eastus",
            };
            string migrate = null;

            var networkWatcherId = Network.NetworkWatcher.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "nw1");
            var collection = GetArmClient().GetNetworkWatcher(networkWatcherId).GetConnectionMonitors();
            await collection.CreateOrUpdateAsync(true, connectionMonitorName, parameters, migrate);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Create connection monitor V2
            string connectionMonitorName = "cm1";
            Network.Models.ConnectionMonitorInput parameters = new Network.Models.ConnectionMonitorInput();
            string migrate = null;

            var networkWatcherId = Network.NetworkWatcher.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "nw1");
            var collection = GetArmClient().GetNetworkWatcher(networkWatcherId).GetConnectionMonitors();
            await collection.CreateOrUpdateAsync(true, connectionMonitorName, parameters, migrate);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get connection monitor
            string connectionMonitorName = "cm1";

            var networkWatcherId = Network.NetworkWatcher.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "nw1");
            var collection = GetArmClient().GetNetworkWatcher(networkWatcherId).GetConnectionMonitors();
            await collection.GetAsync(connectionMonitorName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List connection monitors

            var networkWatcherId = Network.NetworkWatcher.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "nw1");
            var collection = GetArmClient().GetNetworkWatcher(networkWatcherId).GetConnectionMonitors();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
