// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using HybridDataManagementClient;

namespace HybridDataManagementClient.Tests.Mock
{
    /// <summary> Test for JobDefinition. </summary>
    public partial class JobDefinitionCollectionMockTests : MockTestBase
    {
        public JobDefinitionCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: JobDefinitions_CreateOrUpdatePUT83
            string jobDefinitionName = "jobdeffromtestcode1";
            HybridDataManagementClient.JobDefinitionData jobDefinition = new HybridDataManagementClient.JobDefinitionData(dataSourceId: "/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStores/TestStorSimpleSource1", dataSinkId: "/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStores/TestAzureStorage1", state: HybridDataManagementClient.Models.State.Enabled)
            {
                RunLocation = HybridDataManagementClient.Models.RunLocation.Westus,
                UserConfirmation = HybridDataManagementClient.Models.UserConfirmation.Required,
                DataServiceInput = new Dictionary<string, object>()
                {
                    ["AzureStorageType"] = "Blob",
                    ["BackupChoice"] = "UseExistingLatest",
                    ["ContainerName"] = "containerfromtest",
                    ["DeviceName"] = "8600-SHG0997877L71FC",
                    ["FileNameFilter"] = "*",
                    ["IsDirectoryMode"] = "false",
                    ["RootDirectories"] = new object[]
            {
"\\",
            }
            ,
                    ["VolumeNames"] = new object[]
            {
"TestAutomation",
            }
            ,
                }
            ,
            };

            var dataServiceId = HybridDataManagementClient.DataService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "TestAzureSDKOperations", "DataTransformation");
            var collection = GetArmClient().GetDataService(dataServiceId).GetJobDefinitions();
            await collection.CreateOrUpdateAsync(true, jobDefinitionName, jobDefinition);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: JobDefinitions_GetGET81
            string jobDefinitionName = "jobdeffromtestcode1";

            var dataServiceId = HybridDataManagementClient.DataService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "TestAzureSDKOperations", "DataTransformation");
            var collection = GetArmClient().GetDataService(dataServiceId).GetJobDefinitions();
            await collection.GetAsync(jobDefinitionName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: JobDefinitions_ListByDataServiceGET71
            string filter = null;

            var dataServiceId = HybridDataManagementClient.DataService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "TestAzureSDKOperations", "DataTransformation");
            var collection = GetArmClient().GetDataService(dataServiceId).GetJobDefinitions();
            await foreach (var _ in collection.GetAllAsync(filter))
            {
            }
        }
    }
}
