// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for Gallery. </summary>
    public partial class GalleryMockTests : MockTestBase
    {
        public GalleryMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get a gallery with select permissions.
            var galleryId = Compute.Gallery.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myGalleryName");
            var gallery = GetArmClient().GetGallery(galleryId);
            Compute.Models.SelectPermissions? select = new Compute.Models.SelectPermissions("Permissions");

            await gallery.GetAsync(select);
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: Get a gallery.
            var galleryId = Compute.Gallery.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myGalleryName");
            var gallery = GetArmClient().GetGallery(galleryId);
            Compute.Models.SelectPermissions? select = null;

            await gallery.GetAsync(select);
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete a gallery.
            var galleryId = Compute.Gallery.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myGalleryName");
            var gallery = GetArmClient().GetGallery(galleryId);

            await gallery.DeleteAsync();
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Update a simple gallery.
            var galleryId = Compute.Gallery.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myGalleryName");
            var gallery = GetArmClient().GetGallery(galleryId);
            Compute.Models.GalleryUpdate gallery2 = new Compute.Models.GalleryUpdate()
            {
                Description = "This is the gallery description.",
            };

            await gallery.UpdateAsync(gallery2);
        }

        [RecordedTest]
        public async Task UpdateGallerySharingProfile()
        {
            // Example: Add sharing id to the sharing profile of a gallery.
            var galleryId = Compute.Gallery.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myGalleryName");
            var gallery = GetArmClient().GetGallery(galleryId);
            Compute.Models.SharingUpdate sharingUpdate = new Compute.Models.SharingUpdate(operationType: new Compute.Models.SharingUpdateOperationTypes("Add"));

            await gallery.UpdateGallerySharingProfileAsync(sharingUpdate);
        }

        [RecordedTest]
        public async Task UpdateGallerySharingProfile2()
        {
            // Example: reset sharing profile of a gallery.
            var galleryId = Compute.Gallery.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myGalleryName");
            var gallery = GetArmClient().GetGallery(galleryId);
            Compute.Models.SharingUpdate sharingUpdate = new Compute.Models.SharingUpdate(operationType: new Compute.Models.SharingUpdateOperationTypes("Reset"));

            await gallery.UpdateGallerySharingProfileAsync(sharingUpdate);
        }
    }
}
