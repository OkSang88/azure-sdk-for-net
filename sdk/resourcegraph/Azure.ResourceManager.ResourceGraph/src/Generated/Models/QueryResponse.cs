// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.ResourceGraph.Models
{
    /// <summary> Query result. </summary>
    public partial class QueryResponse
    {
        /// <summary> Initializes a new instance of QueryResponse. </summary>
        /// <param name="totalRecords"> Number of total records matching the query. </param>
        /// <param name="count"> Number of records returned in the current response. In the case of paging, this is the number of records in the current page. </param>
        /// <param name="resultTruncated"> Indicates whether the query results are truncated. </param>
        /// <param name="data"> Query output in JObject array or Table format. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        internal QueryResponse(long totalRecords, long count, ResultTruncated resultTruncated, object data)
        {
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            TotalRecords = totalRecords;
            Count = count;
            ResultTruncated = resultTruncated;
            Data = data;
            Facets = new ChangeTrackingList<Facet>();
        }

        /// <summary> Initializes a new instance of QueryResponse. </summary>
        /// <param name="totalRecords"> Number of total records matching the query. </param>
        /// <param name="count"> Number of records returned in the current response. In the case of paging, this is the number of records in the current page. </param>
        /// <param name="resultTruncated"> Indicates whether the query results are truncated. </param>
        /// <param name="skipToken"> When present, the value can be passed to a subsequent query call (together with the same query and scopes used in the current request) to retrieve the next page of data. </param>
        /// <param name="data"> Query output in JObject array or Table format. </param>
        /// <param name="facets"> Query facets. </param>
        internal QueryResponse(long totalRecords, long count, ResultTruncated resultTruncated, string skipToken, object data, IReadOnlyList<Facet> facets)
        {
            TotalRecords = totalRecords;
            Count = count;
            ResultTruncated = resultTruncated;
            SkipToken = skipToken;
            Data = data;
            Facets = facets;
        }

        /// <summary> Number of total records matching the query. </summary>
        public long TotalRecords { get; }
        /// <summary> Number of records returned in the current response. In the case of paging, this is the number of records in the current page. </summary>
        public long Count { get; }
        /// <summary> Indicates whether the query results are truncated. </summary>
        public ResultTruncated ResultTruncated { get; }
        /// <summary> When present, the value can be passed to a subsequent query call (together with the same query and scopes used in the current request) to retrieve the next page of data. </summary>
        public string SkipToken { get; }
        /// <summary> Query output in JObject array or Table format. </summary>
        public object Data { get; }
        /// <summary> Query facets. </summary>
        public IReadOnlyList<Facet> Facets { get; }
    }
}
