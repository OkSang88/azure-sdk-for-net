// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using ChaosManagementClient;
using ChaosManagementClient.Models;

namespace ChaosManagementClient.Tests.Mock
{
    /// <summary> Test for Experiment. </summary>
    public partial class ExperimentCollectionMockTests : MockTestBase
    {
        public ExperimentCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create/update a Experiment in a resource group.
            string experimentName = "exampleExperiment";
            ChaosManagementClient.ExperimentData experiment = new ChaosManagementClient.ExperimentData(location: "centraluseuap", steps: new List<ChaosManagementClient.Models.Step>()
{
new ChaosManagementClient.Models.Step(name: "step1",branches: new List<ChaosManagementClient.Models.Branch>()
{
new ChaosManagementClient.Models.Branch(name: "branch1",actions: new List<ChaosManagementClient.Models.Action>()
{
new ChaosManagementClient.Models.Action(name: "urn:csci:provider:providername:Shutdown/1.0")
{
Type = "Continuous", },}),}),}, selectors: new List<ChaosManagementClient.Models.Selector>()
{
new ChaosManagementClient.Models.Selector(type: ChaosManagementClient.Models.SelectorType.List,id: "selector1",targets: new List<ChaosManagementClient.Models.TargetReference>()
{
new ChaosManagementClient.Models.TargetReference(id: "/subscriptions/6b052e15-03d3-4f17-b2e1-be7f07588291/resourceGroups/exampleRG/providers/Microsoft.Compute/virtualMachines/exampleVM/providers/Microsoft.Chaos/targets/Microsoft-VirtualMachine")
{
Type = "ChaosTarget", },}),})
            {
                Identity = new ChaosManagementClient.Models.ResourceIdentity(type: ChaosManagementClient.Models.ResourceIdentityType.SystemAssigned),
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/exampleRG")).GetExperiments();
            await collection.CreateOrUpdateAsync(true, experimentName, experiment);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get a Experiment in a resource group.
            string experimentName = "exampleExperiment";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/exampleRG")).GetExperiments();
            await collection.GetAsync(experimentName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List all Experiments in a resource group.
            bool? running = null;
            string continuationToken = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/exampleRG")).GetExperiments();
            await foreach (var _ in collection.GetAllAsync(running, continuationToken))
            {
            }
        }
    }
}
