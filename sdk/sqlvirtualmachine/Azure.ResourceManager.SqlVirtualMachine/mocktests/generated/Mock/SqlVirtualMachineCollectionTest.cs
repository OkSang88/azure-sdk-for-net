// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.SqlVirtualMachine.Tests.Mock;
using Azure.ResourceManager.SqlVirtualMachine.Tests.Mock.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.SqlVirtualMachine.Tests.Mock.Tests.Mock
{
    /// <summary> Test for SqlVirtualMachine. </summary>
    public partial class SqlVirtualMachineCollectionMockTests : MockTestBase
    {
        public SqlVirtualMachineCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Creates or updates a SQL virtual machine and joins it to a SQL virtual machine group.
            string sqlVirtualMachineName = "testvm";
            SqlVirtualMachine.Tests.Mock.SqlVirtualMachineData parameters = new SqlVirtualMachine.Tests.Mock.SqlVirtualMachineData(location: "northeurope")
            {
                VirtualMachineResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm2",
                SqlVirtualMachineGroupResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/testvmgroup",
                WsfcDomainCredentials = new SqlVirtualMachine.Tests.Mock.Models.WsfcDomainCredentials()
                {
                    ClusterBootstrapAccountPassword = "<Password>",
                    ClusterOperatorAccountPassword = "<Password>",
                    SqlServiceAccountPassword = "<Password>",
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg")).GetSqlVirtualMachines();
            await collection.CreateOrUpdateAsync(true, sqlVirtualMachineName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Creates or updates a SQL virtual machine for Storage Configuration Settings to EXTEND Data, Log or TempDB storage pool.
            string sqlVirtualMachineName = "testvm";
            SqlVirtualMachine.Tests.Mock.SqlVirtualMachineData parameters = new SqlVirtualMachine.Tests.Mock.SqlVirtualMachineData(location: "northeurope")
            {
                VirtualMachineResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm",
                StorageConfigurationSettings = new SqlVirtualMachine.Tests.Mock.Models.StorageConfigurationSettings()
                {
                    SqlDataSettings = new SqlVirtualMachine.Tests.Mock.Models.SQLStorageSettings(),
                    DiskConfigurationType = new SqlVirtualMachine.Tests.Mock.Models.DiskConfigurationType("EXTEND"),
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg")).GetSqlVirtualMachines();
            await collection.CreateOrUpdateAsync(true, sqlVirtualMachineName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate3()
        {
            // Example: Creates or updates a SQL virtual machine for Storage Configuration Settings to NEW Data, Log and TempDB storage pool.
            string sqlVirtualMachineName = "testvm";
            SqlVirtualMachine.Tests.Mock.SqlVirtualMachineData parameters = new SqlVirtualMachine.Tests.Mock.SqlVirtualMachineData(location: "northeurope")
            {
                VirtualMachineResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm",
                StorageConfigurationSettings = new SqlVirtualMachine.Tests.Mock.Models.StorageConfigurationSettings()
                {
                    SqlDataSettings = new SqlVirtualMachine.Tests.Mock.Models.SQLStorageSettings()
                    {
                        DefaultFilePath = "F:\\folderpath\\",
                    },
                    SqlLogSettings = new SqlVirtualMachine.Tests.Mock.Models.SQLStorageSettings()
                    {
                        DefaultFilePath = "G:\\folderpath\\",
                    },
                    SqlTempDbSettings = new SqlVirtualMachine.Tests.Mock.Models.SQLStorageSettings()
                    {
                        DefaultFilePath = "D:\\TEMP",
                    },
                    DiskConfigurationType = new SqlVirtualMachine.Tests.Mock.Models.DiskConfigurationType("NEW"),
                    StorageWorkloadType = new SqlVirtualMachine.Tests.Mock.Models.StorageWorkloadType("OLTP"),
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg")).GetSqlVirtualMachines();
            await collection.CreateOrUpdateAsync(true, sqlVirtualMachineName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate4()
        {
            // Example: Creates or updates a SQL virtual machine with max parameters.
            string sqlVirtualMachineName = "testvm";
            SqlVirtualMachine.Tests.Mock.SqlVirtualMachineData parameters = new SqlVirtualMachine.Tests.Mock.SqlVirtualMachineData(location: "northeurope")
            {
                VirtualMachineResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm",
                SqlServerLicenseType = new SqlVirtualMachine.Tests.Mock.Models.SqlServerLicenseType("PAYG"),
                SqlManagement = new SqlVirtualMachine.Tests.Mock.Models.SqlManagementMode("Full"),
                SqlImageSku = new SqlVirtualMachine.Tests.Mock.Models.SqlImageSku("Enterprise"),
                AutoPatchingSettings = new SqlVirtualMachine.Tests.Mock.Models.AutoPatchingSettings()
                {
                    Enable = true,
                    DayOfWeek = SqlVirtualMachine.Tests.Mock.Models.DayOfWeek.Sunday,
                    MaintenanceWindowStartingHour = 2,
                    MaintenanceWindowDuration = 60,
                },
                AutoBackupSettings = new SqlVirtualMachine.Tests.Mock.Models.AutoBackupSettings()
                {
                    Enable = true,
                    EnableEncryption = true,
                    RetentionPeriod = 17,
                    StorageAccountUrl = "https://teststorage.blob.core.windows.net/",
                    StorageAccessKey = "<primary storage access key>",
                    Password = "<Password>",
                    BackupSystemDbs = true,
                    BackupScheduleType = new SqlVirtualMachine.Tests.Mock.Models.BackupScheduleType("Manual"),
                    FullBackupFrequency = new SqlVirtualMachine.Tests.Mock.Models.FullBackupFrequencyType("Daily"),
                    FullBackupStartTime = 6,
                    FullBackupWindowHours = 11,
                    LogBackupFrequency = 10,
                },
                KeyVaultCredentialSettings = new SqlVirtualMachine.Tests.Mock.Models.KeyVaultCredentialSettings()
                {
                    Enable = false,
                },
                ServerConfigurationsManagementSettings = new SqlVirtualMachine.Tests.Mock.Models.ServerConfigurationsManagementSettings()
                {
                    SqlConnectivityUpdateSettings = new SqlVirtualMachine.Tests.Mock.Models.SqlConnectivityUpdateSettings()
                    {
                        ConnectivityType = new SqlVirtualMachine.Tests.Mock.Models.ConnectivityType("PRIVATE"),
                        Port = 1433,
                        SqlAuthUpdateUserName = "sqllogin",
                        SqlAuthUpdatePassword = "<password>",
                    },
                    SqlWorkloadTypeUpdateSettings = new SqlVirtualMachine.Tests.Mock.Models.SqlWorkloadTypeUpdateSettings()
                    {
                        SqlWorkloadType = new SqlVirtualMachine.Tests.Mock.Models.SqlWorkloadType("OLTP"),
                    },
                    SqlStorageUpdateSettings = new SqlVirtualMachine.Tests.Mock.Models.SqlStorageUpdateSettings()
                    {
                        DiskCount = 1,
                        StartingDeviceId = 2,
                        DiskConfigurationType = new SqlVirtualMachine.Tests.Mock.Models.DiskConfigurationType("NEW"),
                    },
                    AdditionalFeaturesServerConfigurations = new SqlVirtualMachine.Tests.Mock.Models.AdditionalFeaturesServerConfigurations()
                    {
                        IsRServicesEnabled = false,
                    },
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg")).GetSqlVirtualMachines();
            await collection.CreateOrUpdateAsync(true, sqlVirtualMachineName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate5()
        {
            // Example: Creates or updates a SQL virtual machine with min parameters.
            string sqlVirtualMachineName = "testvm";
            SqlVirtualMachine.Tests.Mock.SqlVirtualMachineData parameters = new SqlVirtualMachine.Tests.Mock.SqlVirtualMachineData(location: "northeurope")
            {
                VirtualMachineResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Compute/virtualMachines/testvm",
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg")).GetSqlVirtualMachines();
            await collection.CreateOrUpdateAsync(true, sqlVirtualMachineName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Gets a SQL virtual machine.
            string sqlVirtualMachineName = "testvm";
            string expand = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg")).GetSqlVirtualMachines();
            await collection.GetAsync(sqlVirtualMachineName, expand);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: Gets all SQL virtual machines in a resource group.

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testrg")).GetSqlVirtualMachines();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
