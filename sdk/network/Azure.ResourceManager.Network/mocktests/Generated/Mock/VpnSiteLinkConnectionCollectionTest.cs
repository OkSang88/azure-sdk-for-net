// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for VpnSiteLinkConnection. </summary>
    public partial class VpnSiteLinkConnectionCollectionMockTests : MockTestBase
    {
        public VpnSiteLinkConnectionCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: VpnSiteLinkConnectionGet
            string linkConnectionName = "Connection-Link1";

            var vpnConnectionId = Network.VpnConnection.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "gateway1", "vpnConnection1");
            var collection = GetArmClient().GetVpnConnection(vpnConnectionId).GetVpnSiteLinkConnections();
            await collection.GetAsync(linkConnectionName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: VpnSiteLinkConnectionList

            var vpnConnectionId = Network.VpnConnection.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "gateway1", "vpnConnection1");
            var collection = GetArmClient().GetVpnConnection(vpnConnectionId).GetVpnSiteLinkConnections();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
