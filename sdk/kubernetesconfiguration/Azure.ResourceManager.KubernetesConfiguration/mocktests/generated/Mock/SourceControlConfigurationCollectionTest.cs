// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using SourceControlConfigurationClient;
using SourceControlConfigurationClient.Models;

namespace SourceControlConfigurationClient.Tests.Mock
{
    /// <summary> Test for SourceControlConfiguration. </summary>
    public partial class SourceControlConfigurationCollectionMockTests : MockTestBase
    {
        public SourceControlConfigurationCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create Source Control Configuration
            SourceControlConfigurationClient.Models.Enum0 clusterRp = new SourceControlConfigurationClient.Models.Enum0("Microsoft.Kubernetes");
            SourceControlConfigurationClient.Models.Enum1 clusterResourceName = new SourceControlConfigurationClient.Models.Enum1("connectedClusters");
            string clusterName = "clusterName1";
            string sourceControlConfigurationName = "SRS_GitHubConfig";
            SourceControlConfigurationClient.SourceControlConfigurationData sourceControlConfiguration = new SourceControlConfigurationClient.SourceControlConfigurationData()
            {
                RepositoryUrl = "git@github.com:k8sdeveloper425/flux-get-started",
                OperatorNamespace = "SRS_Namespace",
                OperatorInstanceName = "SRSGitHubFluxOp-01",
                OperatorType = new SourceControlConfigurationClient.Models.OperatorType("Flux"),
                OperatorParams = "--git-email=xyzgituser@users.srs.github.com",
                OperatorScope = new SourceControlConfigurationClient.Models.OperatorScopeType("namespace"),
                SshKnownHostsContents = "c3NoLmRldi5henVyZS5jb20gc3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCQVFDN0hyMW9UV3FOcU9sekdKT2ZHSjROYWtWeUl6ZjFyWFlkNGQ3d282akJsa0x2Q0E0b2RCbEwwbURVeVowL1FVZlRUcWV1K3RtMjJnT3N2K1ZyVlRNazZ2d1JVNzVnWS95OXV0NU1iM2JSNUJWNThkS1h5cTlBOVVlQjVDYWtlaG41WmdtNngxbUtvVnlmK0ZGbjI2aVlxWEpSZ3pJWlpjWjVWNmhyRTBRZzM5a1ptNGF6NDhvMEFVYmY2U3A0U0xkdm51TWEyc1ZOd0hCYm9TN0VKa201N1hRUFZVMy9RcHlOTEhiV0Rkend0cmxTK2V6MzBTM0FkWWhMS0VPeEFHOHdlT255cnRMSkFVZW45bVRrb2w4b0lJMWVkZjdtV1diV1ZmMG5CbWx5MjErblpjbUNUSVNRQnRkY3lQYUVubzdmRlFNREQyNi9zMGxmS29iNEt3OEg=",
                EnableHelmOperator = true,
                HelmOperatorProperties = new SourceControlConfigurationClient.Models.HelmOperatorProperties()
                {
                    ChartVersion = "0.3.0",
                    ChartValues = "--set git.ssh.secretName=flux-git-deploy --set tillerNamespace=kube-system",
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetSourceControlConfigurations(clusterRp, clusterResourceName, clusterName);
            await collection.CreateOrUpdateAsync(true, sourceControlConfigurationName, sourceControlConfiguration);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get Source Control Configuration
            SourceControlConfigurationClient.Models.Enum0 clusterRp = new SourceControlConfigurationClient.Models.Enum0("Microsoft.Kubernetes");
            SourceControlConfigurationClient.Models.Enum1 clusterResourceName = new SourceControlConfigurationClient.Models.Enum1("connectedClusters");
            string clusterName = "clusterName1";
            string sourceControlConfigurationName = "SRS_GitHubConfig";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetSourceControlConfigurations(clusterRp, clusterResourceName, clusterName);
            await collection.GetAsync(sourceControlConfigurationName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List Source Control Configuration
            SourceControlConfigurationClient.Models.Enum0 clusterRp = new SourceControlConfigurationClient.Models.Enum0("Microsoft.Kubernetes");
            SourceControlConfigurationClient.Models.Enum1 clusterResourceName = new SourceControlConfigurationClient.Models.Enum1("connectedClusters");
            string clusterName = "clusterName1";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetSourceControlConfigurations(clusterRp, clusterResourceName, clusterName);
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
