// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for Subnet. </summary>
    public partial class SubnetMockTests : MockTestBase
    {
        public SubnetMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get subnet
            var subnetId = Network.Subnet.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "subnet-test", "vnetname", "subnet1");
            var subnet = GetArmClient().GetSubnet(subnetId);
            string expand = null;

            await subnet.GetAsync(expand);
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: Get subnet with a delegation
            var subnetId = Network.Subnet.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "subnet-test", "vnetname", "subnet1");
            var subnet = GetArmClient().GetSubnet(subnetId);
            string expand = null;

            await subnet.GetAsync(expand);
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete subnet
            var subnetId = Network.Subnet.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "subnet-test", "vnetname", "subnet1");
            var subnet = GetArmClient().GetSubnet(subnetId);

            await subnet.DeleteAsync();
        }

        [RecordedTest]
        public async Task PrepareNetworkPolicies()
        {
            // Example: Prepare Network Policies
            var subnetId = Network.Subnet.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "test-vnet", "subnet1");
            var subnet = GetArmClient().GetSubnet(subnetId);
            Network.Models.PrepareNetworkPoliciesRequest prepareNetworkPoliciesRequestParameters = new Network.Models.PrepareNetworkPoliciesRequest()
            {
                ServiceName = "Microsoft.Sql/managedInstances",
            };

            await subnet.PrepareNetworkPoliciesAsync(prepareNetworkPoliciesRequestParameters);
        }

        [RecordedTest]
        public async Task UnprepareNetworkPolicies()
        {
            // Example: Unprepare Network Policies
            var subnetId = Network.Subnet.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "test-vnet", "subnet1");
            var subnet = GetArmClient().GetSubnet(subnetId);
            Network.Models.UnprepareNetworkPoliciesRequest unprepareNetworkPoliciesRequestParameters = new Network.Models.UnprepareNetworkPoliciesRequest()
            {
                ServiceName = "Microsoft.Sql/managedInstances",
            };

            await subnet.UnprepareNetworkPoliciesAsync(unprepareNetworkPoliciesRequestParameters);
        }

        //[RecordedTest]
        //public async Task GetResourceNavigationLinks()
        //{
        //    // Example: Get Resource Navigation Links
        //    var subnetId = Network.Subnet.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "vnet", "subnet");
        //    var subnet = GetArmClient().GetSubnet(subnetId);

        //    await foreach (var _ in subnet.GetResourceNavigationLinksAsync())
        //    {
        //    }
        //}

        //[RecordedTest]
        //public async Task GetServiceAssociationLinks()
        //{
        //    // Example: Get Service Association Links
        //    var subnetId = Network.Subnet.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "vnet", "subnet");
        //    var subnet = GetArmClient().GetSubnet(subnetId);

        //    await foreach (var _ in subnet.GetServiceAssociationLinksAsync())
        //    {
        //    }
        //}
    }
}
