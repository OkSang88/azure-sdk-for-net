// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using ServiceFabricManagementClient;
using ServiceFabricManagementClient.Models;

namespace ServiceFabricManagementClient.Tests.Mock
{
    /// <summary> Test for Cluster. </summary>
    public partial class ClusterCollectionMockTests : MockTestBase
    {
        public ClusterCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Put a cluster with maximum parameters
            string clusterName = "myCluster";
            ServiceFabricManagementClient.ClusterData parameters = new ServiceFabricManagementClient.ClusterData(location: "eastus")
            {
                AzureActiveDirectory = new ServiceFabricManagementClient.Models.AzureActiveDirectory()
                {
                    TenantId = "6abcc6a0-8666-43f1-87b8-172cf86a9f9c",
                    ClusterApplication = "5886372e-7bf4-4878-a497-8098aba608ae",
                    ClientApplication = "d151ad89-4bce-4ae8-b3d1-1dc79679fa75",
                },
                CertificateCommonNames = new ServiceFabricManagementClient.Models.ServerCertificateCommonNames()
                {
                    X509StoreName = new ServiceFabricManagementClient.Models.StoreName("My"),
                },
                ClusterCodeVersion = "7.0.470.9590",
                DiagnosticsStorageAccountConfig = new ServiceFabricManagementClient.Models.DiagnosticsStorageAccountConfig(storageAccountName: "diag", protectedAccountKeyName: "StorageAccountKey1", blobEndpoint: "https://diag.blob.core.windows.net/", queueEndpoint: "https://diag.queue.core.windows.net/", tableEndpoint: "https://diag.table.core.windows.net/"),
                EventStoreServiceEnabled = true,
                ManagementEndpoint = "https://myCluster.eastus.cloudapp.azure.com:19080",
                ReliabilityLevel = new ServiceFabricManagementClient.Models.ReliabilityLevel("Platinum"),
                ReverseProxyCertificateCommonNames = new ServiceFabricManagementClient.Models.ServerCertificateCommonNames()
                {
                    X509StoreName = new ServiceFabricManagementClient.Models.StoreName("My"),
                },
                UpgradeDescription = new ServiceFabricManagementClient.Models.ClusterUpgradePolicy(upgradeReplicaSetCheckTimeout: "00:10:00", healthCheckWaitDuration: "00:00:30", healthCheckStableDuration: "00:00:30", healthCheckRetryTimeout: "00:05:00", upgradeTimeout: "01:00:00", upgradeDomainTimeout: "00:15:00", healthPolicy: new ServiceFabricManagementClient.Models.ClusterHealthPolicy()
                {
                    MaxPercentUnhealthyNodes = 0,
                    MaxPercentUnhealthyApplications = 0,
                })
                {
                    ForceRestart = false,
                    DeltaHealthPolicy = new ServiceFabricManagementClient.Models.ClusterUpgradeDeltaHealthPolicy(maxPercentDeltaUnhealthyNodes: 0, maxPercentUpgradeDomainDeltaUnhealthyNodes: 0, maxPercentDeltaUnhealthyApplications: 0),
                },
                UpgradeMode = new ServiceFabricManagementClient.Models.UpgradeMode("Manual"),
                ApplicationTypeVersionsCleanupPolicy = new ServiceFabricManagementClient.Models.ApplicationTypeVersionsCleanupPolicy(maxUnusedVersionsToKeep: 2),
                VmImage = "Windows",
                SfZonalUpgradeMode = new ServiceFabricManagementClient.Models.SfZonalUpgradeMode("Hierarchical"),
                VmssZonalUpgradeMode = new ServiceFabricManagementClient.Models.VmssZonalUpgradeMode("Parallel"),
                InfrastructureServiceManager = true,
                UpgradeWave = new ServiceFabricManagementClient.Models.ClusterUpgradeCadence("Wave1"),
                UpgradePauseStartTimestampUtc = DateTimeOffset.Parse("2021-06-21T22:00:00Z"),
                UpgradePauseEndTimestampUtc = DateTimeOffset.Parse("2021-06-25T22:00:00Z"),
            };
            parameters.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>() { });
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg")).GetClusters();
            await collection.CreateOrUpdateAsync(true, clusterName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Put a cluster with minimum parameters
            string clusterName = "myCluster";
            ServiceFabricManagementClient.ClusterData parameters = new ServiceFabricManagementClient.ClusterData(location: "eastus")
            {
                DiagnosticsStorageAccountConfig = new ServiceFabricManagementClient.Models.DiagnosticsStorageAccountConfig(storageAccountName: "diag", protectedAccountKeyName: "StorageAccountKey1", blobEndpoint: "https://diag.blob.core.windows.net/", queueEndpoint: "https://diag.queue.core.windows.net/", tableEndpoint: "https://diag.table.core.windows.net/"),
                ManagementEndpoint = "http://myCluster.eastus.cloudapp.azure.com:19080",
                ReliabilityLevel = new ServiceFabricManagementClient.Models.ReliabilityLevel("Silver"),
                UpgradeMode = new ServiceFabricManagementClient.Models.UpgradeMode("Automatic"),
            };
            parameters.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>() { });
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg")).GetClusters();
            await collection.CreateOrUpdateAsync(true, clusterName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get a cluster
            string clusterName = "myCluster";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg")).GetClusters();
            await collection.GetAsync(clusterName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List cluster by resource group

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg")).GetClusters();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
