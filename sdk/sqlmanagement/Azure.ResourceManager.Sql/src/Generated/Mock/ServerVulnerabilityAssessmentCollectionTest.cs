// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for ServerVulnerabilityAssessment. </summary>
    public partial class ServerVulnerabilityAssessmentCollectionMockTests : MockTestBase
    {
        public ServerVulnerabilityAssessmentCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create a server's vulnerability assessment with all parameters
            var collection = GetArmClient().GetSqlServer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/servers/vulnerabilityaseessmenttest-6440")).GetServerVulnerabilityAssessments();
            Sql.Models.VulnerabilityAssessmentName vulnerabilityAssessmentName = new Sql.Models.VulnerabilityAssessmentName("default");
            Sql.ServerVulnerabilityAssessmentData parameters = new Sql.ServerVulnerabilityAssessmentData()
            {
                StorageContainerPath = "https://myStorage.blob.core.windows.net/vulnerability-assessment/",
                StorageContainerSasKey = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
                StorageAccountAccessKey = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
                RecurringScans = new Sql.Models.VulnerabilityAssessmentRecurringScansProperties()
                {
                    IsEnabled = true,
                    EmailSubscriptionAdmins = true,
                },
            };

            await collection.CreateOrUpdateAsync(vulnerabilityAssessmentName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync2()
        {
            // Example: Create a server's vulnerability assessment with minimal parameters, when storageAccountAccessKey is specified
            var collection = GetArmClient().GetSqlServer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/servers/vulnerabilityaseessmenttest-6440")).GetServerVulnerabilityAssessments();
            Sql.Models.VulnerabilityAssessmentName vulnerabilityAssessmentName = new Sql.Models.VulnerabilityAssessmentName("default");
            Sql.ServerVulnerabilityAssessmentData parameters = new Sql.ServerVulnerabilityAssessmentData()
            {
                StorageContainerPath = "https://myStorage.blob.core.windows.net/vulnerability-assessment/",
                StorageAccountAccessKey = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
            };

            await collection.CreateOrUpdateAsync(vulnerabilityAssessmentName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync3()
        {
            // Example: Create a server's vulnerability assessment with minimal parameters, when storageContainerSasKey is specified
            var collection = GetArmClient().GetSqlServer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/servers/vulnerabilityaseessmenttest-6440")).GetServerVulnerabilityAssessments();
            Sql.Models.VulnerabilityAssessmentName vulnerabilityAssessmentName = new Sql.Models.VulnerabilityAssessmentName("default");
            Sql.ServerVulnerabilityAssessmentData parameters = new Sql.ServerVulnerabilityAssessmentData()
            {
                StorageContainerPath = "https://myStorage.blob.core.windows.net/vulnerability-assessment/",
                StorageContainerSasKey = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
            };

            await collection.CreateOrUpdateAsync(vulnerabilityAssessmentName, parameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get a server's vulnerability assessment
            var collection = GetArmClient().GetSqlServer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/servers/vulnerabilityaseessmenttest-6440")).GetServerVulnerabilityAssessments();
            Sql.Models.VulnerabilityAssessmentName vulnerabilityAssessmentName = new Sql.Models.VulnerabilityAssessmentName("default");

            await collection.GetAsync(vulnerabilityAssessmentName);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: Get a server's vulnerability assessment policies
            var collection = GetArmClient().GetSqlServer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/servers/vulnerabilityaseessmenttest-6440")).GetServerVulnerabilityAssessments();

            collection.GetAllAsync();
        }
    }
}
