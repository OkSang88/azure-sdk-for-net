// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using AppPlatformManagementClient.Models;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;

namespace AppPlatformManagementClient
{
    /// <summary> A class representing collection of Build and their operations over its parent. </summary>
    public partial class BuildCollection : ArmCollection, IEnumerable<Build>, IAsyncEnumerable<Build>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly BuildServiceRestOperations _buildServiceRestClient;

        /// <summary> Initializes a new instance of the <see cref="BuildCollection"/> class for mocking. </summary>
        protected BuildCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="BuildCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal BuildCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _buildServiceRestClient = new BuildServiceRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != BuildService.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, BuildService.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Create or update a KPack build. </summary>
        /// <param name="buildName"> The name of the build resource. </param>
        /// <param name="build"> Parameters for the create or update operation. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="buildName"/> or <paramref name="build"/> is null. </exception>
        public virtual BuildServiceCreateOrUpdateBuildOperation CreateOrUpdate(bool waitForCompletion, string buildName, BuildData build, CancellationToken cancellationToken = default)
        {
            if (buildName == null)
            {
                throw new ArgumentNullException(nameof(buildName));
            }
            if (build == null)
            {
                throw new ArgumentNullException(nameof(build));
            }

            using var scope = _clientDiagnostics.CreateScope("BuildCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _buildServiceRestClient.CreateOrUpdateBuild(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, buildName, build, cancellationToken);
                var operation = new BuildServiceCreateOrUpdateBuildOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a KPack build. </summary>
        /// <param name="buildName"> The name of the build resource. </param>
        /// <param name="build"> Parameters for the create or update operation. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="buildName"/> or <paramref name="build"/> is null. </exception>
        public async virtual Task<BuildServiceCreateOrUpdateBuildOperation> CreateOrUpdateAsync(bool waitForCompletion, string buildName, BuildData build, CancellationToken cancellationToken = default)
        {
            if (buildName == null)
            {
                throw new ArgumentNullException(nameof(buildName));
            }
            if (build == null)
            {
                throw new ArgumentNullException(nameof(build));
            }

            using var scope = _clientDiagnostics.CreateScope("BuildCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _buildServiceRestClient.CreateOrUpdateBuildAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, buildName, build, cancellationToken).ConfigureAwait(false);
                var operation = new BuildServiceCreateOrUpdateBuildOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a KPack build. </summary>
        /// <param name="buildName"> The name of the build resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="buildName"/> is null. </exception>
        public virtual Response<Build> Get(string buildName, CancellationToken cancellationToken = default)
        {
            if (buildName == null)
            {
                throw new ArgumentNullException(nameof(buildName));
            }

            using var scope = _clientDiagnostics.CreateScope("BuildCollection.Get");
            scope.Start();
            try
            {
                var response = _buildServiceRestClient.GetBuild(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, buildName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new Build(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a KPack build. </summary>
        /// <param name="buildName"> The name of the build resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="buildName"/> is null. </exception>
        public async virtual Task<Response<Build>> GetAsync(string buildName, CancellationToken cancellationToken = default)
        {
            if (buildName == null)
            {
                throw new ArgumentNullException(nameof(buildName));
            }

            using var scope = _clientDiagnostics.CreateScope("BuildCollection.Get");
            scope.Start();
            try
            {
                var response = await _buildServiceRestClient.GetBuildAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, buildName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new Build(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="buildName"> The name of the build resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="buildName"/> is null. </exception>
        public virtual Response<Build> GetIfExists(string buildName, CancellationToken cancellationToken = default)
        {
            if (buildName == null)
            {
                throw new ArgumentNullException(nameof(buildName));
            }

            using var scope = _clientDiagnostics.CreateScope("BuildCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _buildServiceRestClient.GetBuild(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, buildName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<Build>(null, response.GetRawResponse());
                return Response.FromValue(new Build(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="buildName"> The name of the build resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="buildName"/> is null. </exception>
        public async virtual Task<Response<Build>> GetIfExistsAsync(string buildName, CancellationToken cancellationToken = default)
        {
            if (buildName == null)
            {
                throw new ArgumentNullException(nameof(buildName));
            }

            using var scope = _clientDiagnostics.CreateScope("BuildCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _buildServiceRestClient.GetBuildAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, buildName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<Build>(null, response.GetRawResponse());
                return Response.FromValue(new Build(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="buildName"> The name of the build resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="buildName"/> is null. </exception>
        public virtual Response<bool> Exists(string buildName, CancellationToken cancellationToken = default)
        {
            if (buildName == null)
            {
                throw new ArgumentNullException(nameof(buildName));
            }

            using var scope = _clientDiagnostics.CreateScope("BuildCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(buildName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="buildName"> The name of the build resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="buildName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string buildName, CancellationToken cancellationToken = default)
        {
            if (buildName == null)
            {
                throw new ArgumentNullException(nameof(buildName));
            }

            using var scope = _clientDiagnostics.CreateScope("BuildCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(buildName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List KPack builds. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Build" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Build> GetAll(CancellationToken cancellationToken = default)
        {
            Page<Build> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("BuildCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _buildServiceRestClient.ListBuilds(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new Build(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Build> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("BuildCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _buildServiceRestClient.ListBuildsNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new Build(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List KPack builds. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Build" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Build> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<Build>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("BuildCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _buildServiceRestClient.ListBuildsAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new Build(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Build>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("BuildCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _buildServiceRestClient.ListBuildsNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new Build(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<Build> IEnumerable<Build>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<Build> IAsyncEnumerable<Build>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, Build, BuildData> Construct() { }
    }
}
