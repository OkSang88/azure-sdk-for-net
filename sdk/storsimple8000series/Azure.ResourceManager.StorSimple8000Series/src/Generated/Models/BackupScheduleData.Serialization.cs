// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.StorSimple8000Series.Models;

namespace Azure.ResourceManager.StorSimple8000Series
{
    public partial class BackupScheduleData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind");
                writer.WriteStringValue(Kind);
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            writer.WritePropertyName("scheduleRecurrence");
            writer.WriteObjectValue(ScheduleRecurrence);
            writer.WritePropertyName("backupType");
            writer.WriteStringValue(BackupType.ToSerialString());
            writer.WritePropertyName("retentionCount");
            writer.WriteNumberValue(RetentionCount);
            writer.WritePropertyName("startTime");
            writer.WriteStringValue(StartTime, "O");
            writer.WritePropertyName("scheduleStatus");
            writer.WriteStringValue(ScheduleStatus.ToSerialString());
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static BackupScheduleData DeserializeBackupScheduleData(JsonElement element)
        {
            Optional<string> kind = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            ScheduleRecurrence scheduleRecurrence = default;
            BackupType backupType = default;
            long retentionCount = default;
            DateTimeOffset startTime = default;
            ScheduleStatus scheduleStatus = default;
            Optional<DateTimeOffset> lastSuccessfulRun = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("scheduleRecurrence"))
                        {
                            scheduleRecurrence = ScheduleRecurrence.DeserializeScheduleRecurrence(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("backupType"))
                        {
                            backupType = property0.Value.GetString().ToBackupType();
                            continue;
                        }
                        if (property0.NameEquals("retentionCount"))
                        {
                            retentionCount = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("startTime"))
                        {
                            startTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("scheduleStatus"))
                        {
                            scheduleStatus = property0.Value.GetString().ToScheduleStatus();
                            continue;
                        }
                        if (property0.NameEquals("lastSuccessfulRun"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            lastSuccessfulRun = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new BackupScheduleData(id, name, type, kind.Value, scheduleRecurrence, backupType, retentionCount, startTime, scheduleStatus, Optional.ToNullable(lastSuccessfulRun));
        }
    }
}
