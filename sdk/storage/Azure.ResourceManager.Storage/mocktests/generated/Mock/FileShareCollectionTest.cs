// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Storage;
using Azure.ResourceManager.Storage.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Storage.Tests.Mock
{
    /// <summary> Test for FileShare. </summary>
    public partial class FileShareCollectionMockTests : MockTestBase
    {
        public FileShareCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create NFS Shares
            var collection = GetArmClient().GetFileService(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res346/providers/Microsoft.Storage/storageAccounts/sto666/fileServices/default")).GetFileShares();
            string shareName = "share1235";
            Storage.FileShareData fileShare = new Storage.FileShareData()
            {
                EnabledProtocols = new Storage.Models.EnabledProtocols("NFS"),
            };
            string expand = null;

            await collection.CreateOrUpdateAsync(shareName, fileShare, expand);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync2()
        {
            // Example: PutShares
            var collection = GetArmClient().GetFileService(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/fileServices/default")).GetFileShares();
            string shareName = "share6185";
            Storage.FileShareData fileShare = new Storage.FileShareData();
            string expand = null;

            await collection.CreateOrUpdateAsync(shareName, fileShare, expand);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync3()
        {
            // Example: PutShares with Access Tier
            var collection = GetArmClient().GetFileService(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res346/providers/Microsoft.Storage/storageAccounts/sto666/fileServices/default")).GetFileShares();
            string shareName = "share1235";
            Storage.FileShareData fileShare = new Storage.FileShareData()
            {
                AccessTier = new Storage.Models.ShareAccessTier("Hot"),
            };
            string expand = null;

            await collection.CreateOrUpdateAsync(shareName, fileShare, expand);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: GetShareStats
            var collection = GetArmClient().GetFileService(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res9871/providers/Microsoft.Storage/storageAccounts/sto6217/fileServices/default")).GetFileShares();
            string shareName = "share1634";
            string expand = "stats";
            string xMsSnapshot = null;

            await collection.GetAsync(shareName, expand, xMsSnapshot);
        }

        [RecordedTest]
        public async Task GetAsync2()
        {
            // Example: GetShares
            var collection = GetArmClient().GetFileService(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res9871/providers/Microsoft.Storage/storageAccounts/sto6217/fileServices/default")).GetFileShares();
            string shareName = "share1634";
            string expand = null;
            string xMsSnapshot = null;

            await collection.GetAsync(shareName, expand, xMsSnapshot);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: ListDeletedShares
            var collection = GetArmClient().GetFileService(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/fileServices/default")).GetFileShares();
            string maxpagesize = null;
            string filter = null;
            string expand = "deleted";

            collection.GetAllAsync(maxpagesize, filter, expand);
        }

        [RecordedTest]
        public void GetAllAsync2()
        {
            // Example: ListShareSnapshots
            var collection = GetArmClient().GetFileService(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/fileServices/default")).GetFileShares();
            string maxpagesize = null;
            string filter = null;
            string expand = "snapshots";

            collection.GetAllAsync(maxpagesize, filter, expand);
        }

        [RecordedTest]
        public void GetAllAsync3()
        {
            // Example: ListShares
            var collection = GetArmClient().GetFileService(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/fileServices/default")).GetFileShares();
            string maxpagesize = null;
            string filter = null;
            string expand = null;

            collection.GetAllAsync(maxpagesize, filter, expand);
        }
    }
}
