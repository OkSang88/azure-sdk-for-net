// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace ServiceFabricMeshManagementClient.Models
{
    public partial class ContainerCodePackageProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("name");
            writer.WriteStringValue(Name);
            writer.WritePropertyName("image");
            writer.WriteStringValue(Image);
            if (Optional.IsDefined(ImageRegistryCredential))
            {
                writer.WritePropertyName("imageRegistryCredential");
                writer.WriteObjectValue(ImageRegistryCredential);
            }
            if (Optional.IsDefined(Entrypoint))
            {
                writer.WritePropertyName("entrypoint");
                writer.WriteStringValue(Entrypoint);
            }
            if (Optional.IsCollectionDefined(Commands))
            {
                writer.WritePropertyName("commands");
                writer.WriteStartArray();
                foreach (var item in Commands)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(EnvironmentVariables))
            {
                writer.WritePropertyName("environmentVariables");
                writer.WriteStartArray();
                foreach (var item in EnvironmentVariables)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Settings))
            {
                writer.WritePropertyName("settings");
                writer.WriteStartArray();
                foreach (var item in Settings)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Labels))
            {
                writer.WritePropertyName("labels");
                writer.WriteStartArray();
                foreach (var item in Labels)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Endpoints))
            {
                writer.WritePropertyName("endpoints");
                writer.WriteStartArray();
                foreach (var item in Endpoints)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("resources");
            writer.WriteObjectValue(Resources);
            if (Optional.IsCollectionDefined(VolumeRefs))
            {
                writer.WritePropertyName("volumeRefs");
                writer.WriteStartArray();
                foreach (var item in VolumeRefs)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Volumes))
            {
                writer.WritePropertyName("volumes");
                writer.WriteStartArray();
                foreach (var item in Volumes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Diagnostics))
            {
                writer.WritePropertyName("diagnostics");
                writer.WriteObjectValue(Diagnostics);
            }
            if (Optional.IsCollectionDefined(ReliableCollectionsRefs))
            {
                writer.WritePropertyName("reliableCollectionsRefs");
                writer.WriteStartArray();
                foreach (var item in ReliableCollectionsRefs)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static ContainerCodePackageProperties DeserializeContainerCodePackageProperties(JsonElement element)
        {
            string name = default;
            string image = default;
            Optional<ImageRegistryCredential> imageRegistryCredential = default;
            Optional<string> entrypoint = default;
            Optional<IList<string>> commands = default;
            Optional<IList<EnvironmentVariable>> environmentVariables = default;
            Optional<IList<Setting>> settings = default;
            Optional<IList<ContainerLabel>> labels = default;
            Optional<IList<EndpointProperties>> endpoints = default;
            ResourceRequirements resources = default;
            Optional<IList<VolumeReference>> volumeRefs = default;
            Optional<IList<ApplicationScopedVolume>> volumes = default;
            Optional<DiagnosticsRef> diagnostics = default;
            Optional<IList<ReliableCollectionsRef>> reliableCollectionsRefs = default;
            Optional<ContainerInstanceView> instanceView = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("image"))
                {
                    image = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("imageRegistryCredential"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    imageRegistryCredential = ImageRegistryCredential.DeserializeImageRegistryCredential(property.Value);
                    continue;
                }
                if (property.NameEquals("entrypoint"))
                {
                    entrypoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("commands"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    commands = array;
                    continue;
                }
                if (property.NameEquals("environmentVariables"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<EnvironmentVariable> array = new List<EnvironmentVariable>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EnvironmentVariable.DeserializeEnvironmentVariable(item));
                    }
                    environmentVariables = array;
                    continue;
                }
                if (property.NameEquals("settings"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Setting> array = new List<Setting>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Setting.DeserializeSetting(item));
                    }
                    settings = array;
                    continue;
                }
                if (property.NameEquals("labels"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ContainerLabel> array = new List<ContainerLabel>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ContainerLabel.DeserializeContainerLabel(item));
                    }
                    labels = array;
                    continue;
                }
                if (property.NameEquals("endpoints"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<EndpointProperties> array = new List<EndpointProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EndpointProperties.DeserializeEndpointProperties(item));
                    }
                    endpoints = array;
                    continue;
                }
                if (property.NameEquals("resources"))
                {
                    resources = ResourceRequirements.DeserializeResourceRequirements(property.Value);
                    continue;
                }
                if (property.NameEquals("volumeRefs"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<VolumeReference> array = new List<VolumeReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(VolumeReference.DeserializeVolumeReference(item));
                    }
                    volumeRefs = array;
                    continue;
                }
                if (property.NameEquals("volumes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ApplicationScopedVolume> array = new List<ApplicationScopedVolume>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ApplicationScopedVolume.DeserializeApplicationScopedVolume(item));
                    }
                    volumes = array;
                    continue;
                }
                if (property.NameEquals("diagnostics"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    diagnostics = DiagnosticsRef.DeserializeDiagnosticsRef(property.Value);
                    continue;
                }
                if (property.NameEquals("reliableCollectionsRefs"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ReliableCollectionsRef> array = new List<ReliableCollectionsRef>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ReliableCollectionsRef.DeserializeReliableCollectionsRef(item));
                    }
                    reliableCollectionsRefs = array;
                    continue;
                }
                if (property.NameEquals("instanceView"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    instanceView = ContainerInstanceView.DeserializeContainerInstanceView(property.Value);
                    continue;
                }
            }
            return new ContainerCodePackageProperties(name, image, imageRegistryCredential.Value, entrypoint.Value, Optional.ToList(commands), Optional.ToList(environmentVariables), Optional.ToList(settings), Optional.ToList(labels), Optional.ToList(endpoints), resources, Optional.ToList(volumeRefs), Optional.ToList(volumes), diagnostics.Value, Optional.ToList(reliableCollectionsRefs), instanceView.Value);
        }
    }
}
