// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using ManagedNetworkManagementClient.Models;

namespace ManagedNetworkManagementClient
{
    /// <summary> A class representing collection of ManagedNetworkGroup and their operations over its parent. </summary>
    public partial class ManagedNetworkGroupCollection : ArmCollection, IEnumerable<ManagedNetworkGroup>, IAsyncEnumerable<ManagedNetworkGroup>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly ManagedNetworkGroupsRestOperations _managedNetworkGroupsRestClient;

        /// <summary> Initializes a new instance of the <see cref="ManagedNetworkGroupCollection"/> class for mocking. </summary>
        protected ManagedNetworkGroupCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ManagedNetworkGroupCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal ManagedNetworkGroupCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _managedNetworkGroupsRestClient = new ManagedNetworkGroupsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ManagedNetwork.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ManagedNetwork.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> The Put ManagedNetworkGroups operation creates or updates a Managed Network Group resource. </summary>
        /// <param name="managedNetworkGroupName"> The name of the Managed Network Group. </param>
        /// <param name="managedNetworkGroup"> Parameters supplied to the create/update a Managed Network Group resource. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managedNetworkGroupName"/> or <paramref name="managedNetworkGroup"/> is null. </exception>
        public virtual ManagedNetworkGroupCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string managedNetworkGroupName, ManagedNetworkGroupData managedNetworkGroup, CancellationToken cancellationToken = default)
        {
            if (managedNetworkGroupName == null)
            {
                throw new ArgumentNullException(nameof(managedNetworkGroupName));
            }
            if (managedNetworkGroup == null)
            {
                throw new ArgumentNullException(nameof(managedNetworkGroup));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedNetworkGroupCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _managedNetworkGroupsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, managedNetworkGroupName, managedNetworkGroup, cancellationToken);
                var operation = new ManagedNetworkGroupCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _managedNetworkGroupsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, managedNetworkGroupName, managedNetworkGroup).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The Put ManagedNetworkGroups operation creates or updates a Managed Network Group resource. </summary>
        /// <param name="managedNetworkGroupName"> The name of the Managed Network Group. </param>
        /// <param name="managedNetworkGroup"> Parameters supplied to the create/update a Managed Network Group resource. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managedNetworkGroupName"/> or <paramref name="managedNetworkGroup"/> is null. </exception>
        public async virtual Task<ManagedNetworkGroupCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string managedNetworkGroupName, ManagedNetworkGroupData managedNetworkGroup, CancellationToken cancellationToken = default)
        {
            if (managedNetworkGroupName == null)
            {
                throw new ArgumentNullException(nameof(managedNetworkGroupName));
            }
            if (managedNetworkGroup == null)
            {
                throw new ArgumentNullException(nameof(managedNetworkGroup));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedNetworkGroupCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _managedNetworkGroupsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, managedNetworkGroupName, managedNetworkGroup, cancellationToken).ConfigureAwait(false);
                var operation = new ManagedNetworkGroupCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _managedNetworkGroupsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, managedNetworkGroupName, managedNetworkGroup).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The Get ManagedNetworkGroups operation gets a Managed Network Group specified by the resource group, Managed Network name, and group name. </summary>
        /// <param name="managedNetworkGroupName"> The name of the Managed Network Group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managedNetworkGroupName"/> is null. </exception>
        public virtual Response<ManagedNetworkGroup> Get(string managedNetworkGroupName, CancellationToken cancellationToken = default)
        {
            if (managedNetworkGroupName == null)
            {
                throw new ArgumentNullException(nameof(managedNetworkGroupName));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedNetworkGroupCollection.Get");
            scope.Start();
            try
            {
                var response = _managedNetworkGroupsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, managedNetworkGroupName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ManagedNetworkGroup(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The Get ManagedNetworkGroups operation gets a Managed Network Group specified by the resource group, Managed Network name, and group name. </summary>
        /// <param name="managedNetworkGroupName"> The name of the Managed Network Group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managedNetworkGroupName"/> is null. </exception>
        public async virtual Task<Response<ManagedNetworkGroup>> GetAsync(string managedNetworkGroupName, CancellationToken cancellationToken = default)
        {
            if (managedNetworkGroupName == null)
            {
                throw new ArgumentNullException(nameof(managedNetworkGroupName));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedNetworkGroupCollection.Get");
            scope.Start();
            try
            {
                var response = await _managedNetworkGroupsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, managedNetworkGroupName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new ManagedNetworkGroup(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="managedNetworkGroupName"> The name of the Managed Network Group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managedNetworkGroupName"/> is null. </exception>
        public virtual Response<ManagedNetworkGroup> GetIfExists(string managedNetworkGroupName, CancellationToken cancellationToken = default)
        {
            if (managedNetworkGroupName == null)
            {
                throw new ArgumentNullException(nameof(managedNetworkGroupName));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedNetworkGroupCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _managedNetworkGroupsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, managedNetworkGroupName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<ManagedNetworkGroup>(null, response.GetRawResponse());
                return Response.FromValue(new ManagedNetworkGroup(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="managedNetworkGroupName"> The name of the Managed Network Group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managedNetworkGroupName"/> is null. </exception>
        public async virtual Task<Response<ManagedNetworkGroup>> GetIfExistsAsync(string managedNetworkGroupName, CancellationToken cancellationToken = default)
        {
            if (managedNetworkGroupName == null)
            {
                throw new ArgumentNullException(nameof(managedNetworkGroupName));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedNetworkGroupCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _managedNetworkGroupsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, managedNetworkGroupName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<ManagedNetworkGroup>(null, response.GetRawResponse());
                return Response.FromValue(new ManagedNetworkGroup(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="managedNetworkGroupName"> The name of the Managed Network Group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managedNetworkGroupName"/> is null. </exception>
        public virtual Response<bool> Exists(string managedNetworkGroupName, CancellationToken cancellationToken = default)
        {
            if (managedNetworkGroupName == null)
            {
                throw new ArgumentNullException(nameof(managedNetworkGroupName));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedNetworkGroupCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(managedNetworkGroupName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="managedNetworkGroupName"> The name of the Managed Network Group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managedNetworkGroupName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string managedNetworkGroupName, CancellationToken cancellationToken = default)
        {
            if (managedNetworkGroupName == null)
            {
                throw new ArgumentNullException(nameof(managedNetworkGroupName));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedNetworkGroupCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(managedNetworkGroupName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The ListByManagedNetwork ManagedNetworkGroup operation retrieves all the Managed Network Groups in a specified Managed Networks in a paginated format. </summary>
        /// <param name="top"> May be used to limit the number of results in a page for list queries. </param>
        /// <param name="skiptoken"> Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ManagedNetworkGroup" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ManagedNetworkGroup> GetAll(int? top = null, string skiptoken = null, CancellationToken cancellationToken = default)
        {
            Page<ManagedNetworkGroup> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ManagedNetworkGroupCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _managedNetworkGroupsRestClient.ListByManagedNetwork(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, top, skiptoken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ManagedNetworkGroup(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ManagedNetworkGroup> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ManagedNetworkGroupCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _managedNetworkGroupsRestClient.ListByManagedNetworkNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, top, skiptoken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ManagedNetworkGroup(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> The ListByManagedNetwork ManagedNetworkGroup operation retrieves all the Managed Network Groups in a specified Managed Networks in a paginated format. </summary>
        /// <param name="top"> May be used to limit the number of results in a page for list queries. </param>
        /// <param name="skiptoken"> Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ManagedNetworkGroup" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ManagedNetworkGroup> GetAllAsync(int? top = null, string skiptoken = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<ManagedNetworkGroup>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ManagedNetworkGroupCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _managedNetworkGroupsRestClient.ListByManagedNetworkAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, top, skiptoken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ManagedNetworkGroup(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ManagedNetworkGroup>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ManagedNetworkGroupCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _managedNetworkGroupsRestClient.ListByManagedNetworkNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, top, skiptoken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ManagedNetworkGroup(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<ManagedNetworkGroup> IEnumerable<ManagedNetworkGroup>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ManagedNetworkGroup> IAsyncEnumerable<ManagedNetworkGroup>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, ManagedNetworkGroup, ManagedNetworkGroupData> Construct() { }
    }
}
