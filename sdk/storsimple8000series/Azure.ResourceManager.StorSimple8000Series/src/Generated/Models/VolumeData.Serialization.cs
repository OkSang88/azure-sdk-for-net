// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.StorSimple8000Series.Models;

namespace Azure.ResourceManager.StorSimple8000Series
{
    public partial class VolumeData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind");
                writer.WriteStringValue(Kind);
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            writer.WritePropertyName("sizeInBytes");
            writer.WriteNumberValue(SizeInBytes);
            writer.WritePropertyName("volumeType");
            writer.WriteStringValue(VolumeType.ToSerialString());
            writer.WritePropertyName("accessControlRecordIds");
            writer.WriteStartArray();
            foreach (var item in AccessControlRecordIds)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("volumeStatus");
            writer.WriteStringValue(VolumeStatus.ToSerialString());
            writer.WritePropertyName("monitoringStatus");
            writer.WriteStringValue(MonitoringStatus.ToSerialString());
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static VolumeData DeserializeVolumeData(JsonElement element)
        {
            Optional<string> kind = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            long sizeInBytes = default;
            VolumeType volumeType = default;
            Optional<string> volumeContainerId = default;
            IList<string> accessControlRecordIds = default;
            VolumeStatus volumeStatus = default;
            Optional<OperationStatus> operationStatus = default;
            Optional<BackupStatus> backupStatus = default;
            MonitoringStatus monitoringStatus = default;
            Optional<IReadOnlyList<string>> backupPolicyIds = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("sizeInBytes"))
                        {
                            sizeInBytes = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("volumeType"))
                        {
                            volumeType = property0.Value.GetString().ToVolumeType();
                            continue;
                        }
                        if (property0.NameEquals("volumeContainerId"))
                        {
                            volumeContainerId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("accessControlRecordIds"))
                        {
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            accessControlRecordIds = array;
                            continue;
                        }
                        if (property0.NameEquals("volumeStatus"))
                        {
                            volumeStatus = property0.Value.GetString().ToVolumeStatus();
                            continue;
                        }
                        if (property0.NameEquals("operationStatus"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            operationStatus = property0.Value.GetString().ToOperationStatus();
                            continue;
                        }
                        if (property0.NameEquals("backupStatus"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            backupStatus = property0.Value.GetString().ToBackupStatus();
                            continue;
                        }
                        if (property0.NameEquals("monitoringStatus"))
                        {
                            monitoringStatus = property0.Value.GetString().ToMonitoringStatus();
                            continue;
                        }
                        if (property0.NameEquals("backupPolicyIds"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            backupPolicyIds = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new VolumeData(id, name, type, kind.Value, sizeInBytes, volumeType, volumeContainerId.Value, accessControlRecordIds, volumeStatus, Optional.ToNullable(operationStatus), Optional.ToNullable(backupStatus), monitoringStatus, Optional.ToList(backupPolicyIds));
        }
    }
}
