// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;
using Azure.ResourceManager.WebPubSub;
using Azure.ResourceManager.WebPubSub.Models;

namespace Azure.ResourceManager.WebPubSub.Tests.Mock
{
    /// <summary> Test for PrivateEndpointConnection. </summary>
    public partial class PrivateEndpointConnectionCollectionMockTests : MockTestBase
    {
        public PrivateEndpointConnectionCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: WebPubSubPrivateEndpointConnections_Update
            var collection = GetArmClient().GetWebPubSub(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.SignalRService/webPubSub/myWebPubSubService")).GetPrivateEndpointConnections();
            string privateEndpointConnectionName = "mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e";
            WebPubSub.PrivateEndpointConnectionData parameters = new WebPubSub.PrivateEndpointConnectionData()
            {
                PrivateEndpoint = new WebPubSub.Models.PrivateEndpoint()
                {
                    Id = "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint",
                },
                PrivateLinkServiceConnectionState = new WebPubSub.Models.PrivateLinkServiceConnectionState()
                {
                    Status = new WebPubSub.Models.PrivateLinkServiceConnectionStatus("Approved"),
                    ActionsRequired = "None",
                },
            };

            await collection.CreateOrUpdateAsync(privateEndpointConnectionName, parameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: WebPubSubPrivateEndpointConnections_Get
            var collection = GetArmClient().GetWebPubSub(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.SignalRService/webPubSub/myWebPubSubService")).GetPrivateEndpointConnections();
            string privateEndpointConnectionName = "mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e";

            await collection.GetAsync(privateEndpointConnectionName);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: WebPubSubPrivateEndpointConnections_List
            var collection = GetArmClient().GetWebPubSub(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.SignalRService/webPubSub/myWebPubSubService")).GetPrivateEndpointConnections();

            collection.GetAllAsync();
        }
    }
}
