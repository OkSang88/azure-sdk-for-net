// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.StorageCache.Models;

namespace Azure.ResourceManager.StorageCache
{
    /// <summary> A class representing collection of StorageTarget and their operations over its parent. </summary>
    public partial class StorageTargetCollection : ArmCollection, IEnumerable<StorageTarget>, IAsyncEnumerable<StorageTarget>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly StorageTargetsRestOperations _storageTargetsRestClient;

        /// <summary> Initializes a new instance of the <see cref="StorageTargetCollection"/> class for mocking. </summary>
        protected StorageTargetCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="StorageTargetCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal StorageTargetCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _storageTargetsRestClient = new StorageTargetsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != Cache.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, Cache.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Create or update a Storage Target. This operation is allowed at any time, but if the Cache is down or unhealthy, the actual creation/modification of the Storage Target may be delayed until the Cache is healthy again. </summary>
        /// <param name="storageTargetName"> Name of Storage Target. </param>
        /// <param name="storagetarget"> Object containing the definition of a Storage Target. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageTargetName"/> is null. </exception>
        public virtual StorageTargetCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string storageTargetName, StorageTargetData storagetarget = null, CancellationToken cancellationToken = default)
        {
            if (storageTargetName == null)
            {
                throw new ArgumentNullException(nameof(storageTargetName));
            }

            using var scope = _clientDiagnostics.CreateScope("StorageTargetCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _storageTargetsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, storageTargetName, storagetarget, cancellationToken);
                var operation = new StorageTargetCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _storageTargetsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, storageTargetName, storagetarget).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a Storage Target. This operation is allowed at any time, but if the Cache is down or unhealthy, the actual creation/modification of the Storage Target may be delayed until the Cache is healthy again. </summary>
        /// <param name="storageTargetName"> Name of Storage Target. </param>
        /// <param name="storagetarget"> Object containing the definition of a Storage Target. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageTargetName"/> is null. </exception>
        public async virtual Task<StorageTargetCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string storageTargetName, StorageTargetData storagetarget = null, CancellationToken cancellationToken = default)
        {
            if (storageTargetName == null)
            {
                throw new ArgumentNullException(nameof(storageTargetName));
            }

            using var scope = _clientDiagnostics.CreateScope("StorageTargetCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _storageTargetsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, storageTargetName, storagetarget, cancellationToken).ConfigureAwait(false);
                var operation = new StorageTargetCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _storageTargetsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, storageTargetName, storagetarget).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a Storage Target from a Cache. </summary>
        /// <param name="storageTargetName"> Name of Storage Target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageTargetName"/> is null. </exception>
        public virtual Response<StorageTarget> Get(string storageTargetName, CancellationToken cancellationToken = default)
        {
            if (storageTargetName == null)
            {
                throw new ArgumentNullException(nameof(storageTargetName));
            }

            using var scope = _clientDiagnostics.CreateScope("StorageTargetCollection.Get");
            scope.Start();
            try
            {
                var response = _storageTargetsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, storageTargetName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new StorageTarget(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a Storage Target from a Cache. </summary>
        /// <param name="storageTargetName"> Name of Storage Target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageTargetName"/> is null. </exception>
        public async virtual Task<Response<StorageTarget>> GetAsync(string storageTargetName, CancellationToken cancellationToken = default)
        {
            if (storageTargetName == null)
            {
                throw new ArgumentNullException(nameof(storageTargetName));
            }

            using var scope = _clientDiagnostics.CreateScope("StorageTargetCollection.Get");
            scope.Start();
            try
            {
                var response = await _storageTargetsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, storageTargetName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new StorageTarget(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="storageTargetName"> Name of Storage Target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageTargetName"/> is null. </exception>
        public virtual Response<StorageTarget> GetIfExists(string storageTargetName, CancellationToken cancellationToken = default)
        {
            if (storageTargetName == null)
            {
                throw new ArgumentNullException(nameof(storageTargetName));
            }

            using var scope = _clientDiagnostics.CreateScope("StorageTargetCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _storageTargetsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, storageTargetName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<StorageTarget>(null, response.GetRawResponse());
                return Response.FromValue(new StorageTarget(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="storageTargetName"> Name of Storage Target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageTargetName"/> is null. </exception>
        public async virtual Task<Response<StorageTarget>> GetIfExistsAsync(string storageTargetName, CancellationToken cancellationToken = default)
        {
            if (storageTargetName == null)
            {
                throw new ArgumentNullException(nameof(storageTargetName));
            }

            using var scope = _clientDiagnostics.CreateScope("StorageTargetCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _storageTargetsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, storageTargetName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<StorageTarget>(null, response.GetRawResponse());
                return Response.FromValue(new StorageTarget(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="storageTargetName"> Name of Storage Target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageTargetName"/> is null. </exception>
        public virtual Response<bool> Exists(string storageTargetName, CancellationToken cancellationToken = default)
        {
            if (storageTargetName == null)
            {
                throw new ArgumentNullException(nameof(storageTargetName));
            }

            using var scope = _clientDiagnostics.CreateScope("StorageTargetCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(storageTargetName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="storageTargetName"> Name of Storage Target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageTargetName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string storageTargetName, CancellationToken cancellationToken = default)
        {
            if (storageTargetName == null)
            {
                throw new ArgumentNullException(nameof(storageTargetName));
            }

            using var scope = _clientDiagnostics.CreateScope("StorageTargetCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(storageTargetName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of Storage Targets for the specified Cache. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="StorageTarget" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<StorageTarget> GetAll(CancellationToken cancellationToken = default)
        {
            Page<StorageTarget> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("StorageTargetCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _storageTargetsRestClient.ListByCache(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new StorageTarget(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<StorageTarget> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("StorageTargetCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _storageTargetsRestClient.ListByCacheNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new StorageTarget(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Returns a list of Storage Targets for the specified Cache. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="StorageTarget" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<StorageTarget> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<StorageTarget>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("StorageTargetCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _storageTargetsRestClient.ListByCacheAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new StorageTarget(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<StorageTarget>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("StorageTargetCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _storageTargetsRestClient.ListByCacheNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new StorageTarget(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<StorageTarget> IEnumerable<StorageTarget>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<StorageTarget> IAsyncEnumerable<StorageTarget>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, StorageTarget, StorageTargetData> Construct() { }
    }
}
