// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for VpnSite. </summary>
    public partial class VpnSiteCollectionMockTests : MockTestBase
    {
        public VpnSiteCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: VpnSiteCreate
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetVpnSites();
            string vpnSiteName = "vpnSite1";
            Network.VpnSiteData vpnSiteParameters = new Network.VpnSiteData()
            {
                VirtualWan = new WritableSubResource()
                {
                    Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualWANs/wan1"),
                },
                AddressSpace = new Network.Models.AddressSpace(),
                IsSecuritySite = false,
                O365Policy = new Network.Models.O365PolicyProperties()
                {
                    BreakOutCategories = new Network.Models.O365BreakOutCategoryPolicies()
                    {
                        Allow = true,
                        Optimize = true,
                        Default = false,
                    },
                },
                Location = "West US",
            };

            await collection.CreateOrUpdateAsync(vpnSiteName, vpnSiteParameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: VpnSiteGet
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetVpnSites();
            string vpnSiteName = "vpnSite1";

            await collection.GetAsync(vpnSiteName);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: VpnSiteListByResourceGroup
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetVpnSites();

            collection.GetAllAsync();
        }
    }
}
