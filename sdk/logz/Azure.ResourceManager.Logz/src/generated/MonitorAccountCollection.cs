// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using MicrosoftLogz.Models;

namespace MicrosoftLogz
{
    /// <summary> A class representing collection of LogzMonitorResource and their operations over its parent. </summary>
    public partial class MonitorAccountCollection : ArmCollection, IEnumerable<MonitorAccount>, IAsyncEnumerable<MonitorAccount>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly SubAccountRestOperations _subAccountRestClient;

        /// <summary> Initializes a new instance of the <see cref="MonitorAccountCollection"/> class for mocking. </summary>
        protected MonitorAccountCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MonitorAccountCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal MonitorAccountCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _subAccountRestClient = new SubAccountRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != Monitor.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, Monitor.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Create sub account under a given monitor resource. This create operation can take upto 10 minutes to complete. </summary>
        /// <param name="subAccountName"> Sub Account resource name. </param>
        /// <param name="body"> The LogzMonitorResource to use. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subAccountName"/> is null. </exception>
        public virtual SubAccountCreateOperation CreateOrUpdate(bool waitForCompletion, string subAccountName, LogzMonitorResourceData body = null, CancellationToken cancellationToken = default)
        {
            if (subAccountName == null)
            {
                throw new ArgumentNullException(nameof(subAccountName));
            }

            using var scope = _clientDiagnostics.CreateScope("MonitorAccountCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _subAccountRestClient.Create(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, subAccountName, body, cancellationToken);
                var operation = new SubAccountCreateOperation(Parent, _clientDiagnostics, Pipeline, _subAccountRestClient.CreateCreateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, subAccountName, body).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create sub account under a given monitor resource. This create operation can take upto 10 minutes to complete. </summary>
        /// <param name="subAccountName"> Sub Account resource name. </param>
        /// <param name="body"> The LogzMonitorResource to use. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subAccountName"/> is null. </exception>
        public async virtual Task<SubAccountCreateOperation> CreateOrUpdateAsync(bool waitForCompletion, string subAccountName, LogzMonitorResourceData body = null, CancellationToken cancellationToken = default)
        {
            if (subAccountName == null)
            {
                throw new ArgumentNullException(nameof(subAccountName));
            }

            using var scope = _clientDiagnostics.CreateScope("MonitorAccountCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _subAccountRestClient.CreateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, subAccountName, body, cancellationToken).ConfigureAwait(false);
                var operation = new SubAccountCreateOperation(Parent, _clientDiagnostics, Pipeline, _subAccountRestClient.CreateCreateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, subAccountName, body).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a sub account under a given monitor resource. </summary>
        /// <param name="subAccountName"> Sub Account resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subAccountName"/> is null. </exception>
        public virtual Response<MonitorAccount> Get(string subAccountName, CancellationToken cancellationToken = default)
        {
            if (subAccountName == null)
            {
                throw new ArgumentNullException(nameof(subAccountName));
            }

            using var scope = _clientDiagnostics.CreateScope("MonitorAccountCollection.Get");
            scope.Start();
            try
            {
                var response = _subAccountRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, subAccountName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new MonitorAccount(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a sub account under a given monitor resource. </summary>
        /// <param name="subAccountName"> Sub Account resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subAccountName"/> is null. </exception>
        public async virtual Task<Response<MonitorAccount>> GetAsync(string subAccountName, CancellationToken cancellationToken = default)
        {
            if (subAccountName == null)
            {
                throw new ArgumentNullException(nameof(subAccountName));
            }

            using var scope = _clientDiagnostics.CreateScope("MonitorAccountCollection.Get");
            scope.Start();
            try
            {
                var response = await _subAccountRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, subAccountName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new MonitorAccount(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="subAccountName"> Sub Account resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subAccountName"/> is null. </exception>
        public virtual Response<MonitorAccount> GetIfExists(string subAccountName, CancellationToken cancellationToken = default)
        {
            if (subAccountName == null)
            {
                throw new ArgumentNullException(nameof(subAccountName));
            }

            using var scope = _clientDiagnostics.CreateScope("MonitorAccountCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _subAccountRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, subAccountName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<MonitorAccount>(null, response.GetRawResponse());
                return Response.FromValue(new MonitorAccount(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="subAccountName"> Sub Account resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subAccountName"/> is null. </exception>
        public async virtual Task<Response<MonitorAccount>> GetIfExistsAsync(string subAccountName, CancellationToken cancellationToken = default)
        {
            if (subAccountName == null)
            {
                throw new ArgumentNullException(nameof(subAccountName));
            }

            using var scope = _clientDiagnostics.CreateScope("MonitorAccountCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _subAccountRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, subAccountName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<MonitorAccount>(null, response.GetRawResponse());
                return Response.FromValue(new MonitorAccount(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="subAccountName"> Sub Account resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subAccountName"/> is null. </exception>
        public virtual Response<bool> Exists(string subAccountName, CancellationToken cancellationToken = default)
        {
            if (subAccountName == null)
            {
                throw new ArgumentNullException(nameof(subAccountName));
            }

            using var scope = _clientDiagnostics.CreateScope("MonitorAccountCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(subAccountName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="subAccountName"> Sub Account resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subAccountName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string subAccountName, CancellationToken cancellationToken = default)
        {
            if (subAccountName == null)
            {
                throw new ArgumentNullException(nameof(subAccountName));
            }

            using var scope = _clientDiagnostics.CreateScope("MonitorAccountCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(subAccountName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List the sub account under a given monitor resource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="MonitorAccount" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<MonitorAccount> GetAll(CancellationToken cancellationToken = default)
        {
            Page<MonitorAccount> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("MonitorAccountCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _subAccountRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new MonitorAccount(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<MonitorAccount> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("MonitorAccountCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _subAccountRestClient.ListNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new MonitorAccount(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List the sub account under a given monitor resource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="MonitorAccount" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<MonitorAccount> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<MonitorAccount>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("MonitorAccountCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _subAccountRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new MonitorAccount(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<MonitorAccount>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("MonitorAccountCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _subAccountRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new MonitorAccount(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<MonitorAccount> IEnumerable<MonitorAccount>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<MonitorAccount> IAsyncEnumerable<MonitorAccount>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, MonitorAccount, LogzMonitorResourceData> Construct() { }
    }
}
