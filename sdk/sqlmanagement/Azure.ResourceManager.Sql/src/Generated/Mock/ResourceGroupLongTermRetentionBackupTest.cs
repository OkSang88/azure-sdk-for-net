// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for LongTermRetentionBackup. </summary>
    public partial class ResourceGroupLongTermRetentionBackupMockTests : MockTestBase
    {
        public ResourceGroupLongTermRetentionBackupMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get the long term retention backup.
            var resourceGroupLongTermRetentionBackupId = Sql.ResourceGroupLongTermRetentionBackup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testResourceGroup", "japaneast", "testserver", "testDatabase", "55555555-6666-7777-8888-999999999999;131637960820000000");
            var resourceGroupLongTermRetentionBackup = GetArmClient().GetResourceGroupLongTermRetentionBackup(resourceGroupLongTermRetentionBackupId);

            await resourceGroupLongTermRetentionBackup.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete the long term retention backup.
            var resourceGroupLongTermRetentionBackupId = Sql.ResourceGroupLongTermRetentionBackup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testResourceGroup", "japaneast", "testserver", "testDatabase", "55555555-6666-7777-8888-999999999999;131637960820000000");
            var resourceGroupLongTermRetentionBackup = GetArmClient().GetResourceGroupLongTermRetentionBackup(resourceGroupLongTermRetentionBackupId);

            await resourceGroupLongTermRetentionBackup.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task CopyByResourceGroup()
        {
            // Example: Copy the long term retention backup.
            var resourceGroupLongTermRetentionBackupId = Sql.ResourceGroupLongTermRetentionBackup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testResourceGroup", "japaneast", "testserver", "testDatabase", "55555555-6666-7777-8888-999999999999;131637960820000000");
            var resourceGroupLongTermRetentionBackup = GetArmClient().GetResourceGroupLongTermRetentionBackup(resourceGroupLongTermRetentionBackupId);
            Sql.Models.CopyLongTermRetentionBackupOptions parameters = new Sql.Models.CopyLongTermRetentionBackupOptions()
            {
                TargetServerResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Sql/resourceGroups/resourceGroup/servers/testserver2",
                TargetDatabaseName = "testDatabase2",
                TargetBackupStorageRedundancy = new Sql.Models.TargetBackupStorageRedundancy("Geo"),
            };

            await resourceGroupLongTermRetentionBackup.CopyByResourceGroupAsync(true, parameters);
        }

        [RecordedTest]
        public async Task UpdateByResourceGroup()
        {
            // Example: Update the long term retention backup.
            var resourceGroupLongTermRetentionBackupId = Sql.ResourceGroupLongTermRetentionBackup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testResourceGroup", "japaneast", "testserver", "testDatabase", "55555555-6666-7777-8888-999999999999;131637960820000000");
            var resourceGroupLongTermRetentionBackup = GetArmClient().GetResourceGroupLongTermRetentionBackup(resourceGroupLongTermRetentionBackupId);
            Sql.Models.UpdateLongTermRetentionBackupOptions parameters = new Sql.Models.UpdateLongTermRetentionBackupOptions()
            {
                RequestedBackupStorageRedundancy = new Sql.Models.RequestedBackupStorageRedundancy("Geo"),
            };

            await resourceGroupLongTermRetentionBackup.UpdateByResourceGroupAsync(true, parameters);
        }
    }
}
