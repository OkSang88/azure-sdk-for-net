// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for SqlServer. </summary>
    public partial class SqlServerMockTests : MockTestBase
    {
        public SqlServerMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get server
            var sqlServer = GetArmClient().GetSqlServer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645"));
            string expand = null;

            await sqlServer.GetAsync(expand);
        }

        [RecordedTest]
        public async Task GetAsync2()
        {
            // Example: Get server with $expand=administrators
            var sqlServer = GetArmClient().GetSqlServer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645"));
            string expand = null;

            await sqlServer.GetAsync(expand);
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: Delete server
            var sqlServer = GetArmClient().GetSqlServer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-6661"));

            await sqlServer.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: Update a server
            var sqlServer = GetArmClient().GetSqlServer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645"));
            Sql.Models.ServerUpdate parameters = new Sql.Models.ServerUpdate()
            {
                AdministratorLogin = "dummylogin",
                AdministratorLoginPassword = "placeholder",
                PublicNetworkAccess = new Sql.Models.ServerNetworkAccessFlag("Disabled"),
                RestrictOutboundNetworkAccess = new Sql.Models.ServerNetworkAccessFlag("Enabled"),
            };

            await sqlServer.UpdateAsync(parameters);
        }

        [RecordedTest]
        public void GetInaccessibleDatabasesAsync()
        {
            // Example: Gets a list of inaccessible databases in a logical server
            var sqlServer = GetArmClient().GetSqlServer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr"));

            sqlServer.GetInaccessibleDatabasesAsync();
        }

        [RecordedTest]
        public void GetReplicationLinksAsync()
        {
            // Example: List replication links on server
            var sqlServer = GetArmClient().GetSqlServer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default/providers/Microsoft.Sql/servers/sourcesvr"));

            sqlServer.GetReplicationLinksAsync();
        }

        [RecordedTest]
        public void GetServerUsagesAsync()
        {
            // Example: List servers usages
            var sqlServer = GetArmClient().GetSqlServer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-6730/providers/Microsoft.Sql/servers/sqlcrudtest-9007"));

            sqlServer.GetServerUsagesAsync();
        }

        [RecordedTest]
        public async Task ReplaceFirewallRuleAsync()
        {
            // Example: Replace firewall rules
            var sqlServer = GetArmClient().GetSqlServer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/firewallrulecrudtest-12/providers/Microsoft.Sql/servers/firewallrulecrudtest-6285"));
            Sql.Models.FirewallRuleList parameters = new Sql.Models.FirewallRuleList();

            await sqlServer.ReplaceFirewallRuleAsync(parameters);
        }

        [RecordedTest]
        public void GetServerOperationsAsync()
        {
            // Example: List the server management operations
            var sqlServer = GetArmClient().GetSqlServer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Sql/servers/sqlcrudtest-4645"));

            sqlServer.GetServerOperationsAsync();
        }

        [RecordedTest]
        public async Task CreateTdeCertificateAsync()
        {
            // Example: Upload a TDE certificate
            var sqlServer = GetArmClient().GetSqlServer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testtdecert/providers/Microsoft.Sql/servers/testtdecert"));
            Sql.Models.TdeCertificate parameters = new Sql.Models.TdeCertificate()
            {
                PrivateBlob = "MIIXXXXXXXX",
            };

            await sqlServer.CreateTdeCertificateAsync(parameters);
        }

        [RecordedTest]
        public async Task ImportDatabaseAsync()
        {
            // Example: Imports to a new database, using private link for the SQL server and storage account.
            var sqlServer = GetArmClient().GetSqlServer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr"));
            Sql.Models.ImportNewDatabaseDefinition parameters = new Sql.Models.ImportNewDatabaseDefinition(storageKeyType: new Sql.Models.StorageKeyType("StorageAccessKey"), storageKey: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx==", storageUri: "https://test.blob.core.windows.net/test.bacpac", administratorLogin: "login", administratorLoginPassword: "password")
            {
                DatabaseName = "testdb",
                AuthenticationType = "Sql",
                NetworkIsolation = new Sql.Models.NetworkIsolationSettings()
                {
                    StorageAccountResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Storage/storageAccounts/test-privatelink",
                    SqlServerResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr",
                },
            };

            await sqlServer.ImportDatabaseAsync(parameters);
        }

        [RecordedTest]
        public async Task ImportDatabaseAsync2()
        {
            // Example: Imports to a new database.
            var sqlServer = GetArmClient().GetSqlServer(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr"));
            Sql.Models.ImportNewDatabaseDefinition parameters = new Sql.Models.ImportNewDatabaseDefinition(storageKeyType: new Sql.Models.StorageKeyType("StorageAccessKey"), storageKey: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx==", storageUri: "https://test.blob.core.windows.net/test.bacpac", administratorLogin: "login", administratorLoginPassword: "password")
            {
                DatabaseName = "testdb",
                AuthenticationType = "Sql",
            };

            await sqlServer.ImportDatabaseAsync(parameters);
        }

        [RecordedTest]
        public async Task ServerAutomaticTuningGetAsync()
        {
            // Example: Get a server's automatic tuning settings
            var serverAutomaticTuning = GetArmClient().GetServerAutomaticTuning(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/default-sql-onebox/providers/Microsoft.Sql/servers/testsvr11/automaticTuning/current"));

            await serverAutomaticTuning.GetAsync();
        }

        [RecordedTest]
        public async Task ServerAutomaticTuningUpdateAsync()
        {
            // Example: Updates server automatic tuning settings with all properties
            var serverAutomaticTuning = GetArmClient().GetServerAutomaticTuning(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/default-sql-onebox/providers/Microsoft.Sql/servers/testsvr11/automaticTuning/current"));
            Sql.ServerAutomaticTuningData parameters = new Sql.ServerAutomaticTuningData()
            {
                DesiredState = Sql.Models.AutomaticTuningServerMode.Auto,
            };

            await serverAutomaticTuning.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task ServerAutomaticTuningUpdateAsync2()
        {
            // Example: Updates server automatic tuning settings with minimal properties
            var serverAutomaticTuning = GetArmClient().GetServerAutomaticTuning(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/default-sql-onebox/providers/Microsoft.Sql/servers/testsvr11/automaticTuning/current"));
            Sql.ServerAutomaticTuningData parameters = new Sql.ServerAutomaticTuningData()
            {
                DesiredState = Sql.Models.AutomaticTuningServerMode.Auto,
            };

            await serverAutomaticTuning.UpdateAsync(parameters);
        }
    }
}
