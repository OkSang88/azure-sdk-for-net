// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for PrivateEndpointConnection. </summary>
    public partial class PrivateEndpointConnectionCollectionMockTests : MockTestBase
    {
        public PrivateEndpointConnectionCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: approve or reject private end point connection for a private link service
            var collection = GetArmClient().GetPrivateLinkService(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls")).GetPrivateEndpointConnections();
            string peConnectionName = "testPlePeConnection";
            Network.PrivateEndpointConnectionData parameters = new Network.PrivateEndpointConnectionData()
            {
                Name = "testPlePeConnection",
                PrivateLinkServiceConnectionState = new Network.Models.PrivateLinkServiceConnectionState()
                {
                    Status = "Approved",
                    Description = "approved it for some reason.",
                },
            };

            await collection.CreateOrUpdateAsync(peConnectionName, parameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get private end point connection
            var collection = GetArmClient().GetPrivateLinkService(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls")).GetPrivateEndpointConnections();
            string peConnectionName = "testPlePeConnection";
            string expand = null;

            await collection.GetAsync(peConnectionName, expand);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: List private link service in resource group
            var collection = GetArmClient().GetPrivateLinkService(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls")).GetPrivateEndpointConnections();

            collection.GetAllAsync();
        }
    }
}
