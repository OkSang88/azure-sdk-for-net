// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for FirewallRule. </summary>
    public partial class FirewallRuleMockTests : MockTestBase
    {
        public FirewallRuleMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get Firewall Rule
            var firewallRuleId = Sql.FirewallRule.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "firewallrulecrudtest-12", "firewallrulecrudtest-6285", "firewallrulecrudtest-2304");
            var firewallRule = GetArmClient().GetFirewallRule(firewallRuleId);

            await firewallRule.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete a firewall rule
            var firewallRuleId = Sql.FirewallRule.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "firewallrulecrudtest-9886", "firewallrulecrudtest-2368", "firewallrulecrudtest-7011");
            var firewallRule = GetArmClient().GetFirewallRule(firewallRuleId);

            await firewallRule.DeleteAsync(true);
        }
    }
}
