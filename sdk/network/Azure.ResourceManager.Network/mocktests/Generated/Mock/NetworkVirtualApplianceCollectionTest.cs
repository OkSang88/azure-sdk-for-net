// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for NetworkVirtualAppliance. </summary>
    public partial class NetworkVirtualApplianceCollectionMockTests : MockTestBase
    {
        public NetworkVirtualApplianceCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create NetworkVirtualAppliance
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetNetworkVirtualAppliances();
            string networkVirtualApplianceName = "nva";
            Network.NetworkVirtualApplianceData parameters = new Network.NetworkVirtualApplianceData()
            {
                Identity = new ResourceIdentity(),
                NvaSku = new Network.Models.VirtualApplianceSkuProperties()
                {
                    Vendor = "Cisco SDWAN",
                    BundledScaleUnit = "1",
                    MarketPlaceVersion = "12.1",
                },
                VirtualHub = new WritableSubResource()
                {
                    Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"),
                },
                VirtualApplianceAsn = 10000,
                Location = "West US",
            };

            await collection.CreateOrUpdateAsync(networkVirtualApplianceName, parameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get NetworkVirtualAppliance
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetNetworkVirtualAppliances();
            string networkVirtualApplianceName = "nva";
            string expand = null;

            await collection.GetAsync(networkVirtualApplianceName, expand);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: List all Network Virtual Appliance for a given resource group
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetNetworkVirtualAppliances();

            collection.GetAllAsync();
        }
    }
}
