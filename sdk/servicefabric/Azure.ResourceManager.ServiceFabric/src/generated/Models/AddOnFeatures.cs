// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace ServiceFabricManagementClient.Models
{
    /// <summary> Available cluster add-on features. </summary>
    public readonly partial struct AddOnFeatures : IEquatable<AddOnFeatures>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AddOnFeatures"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AddOnFeatures(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RepairManagerValue = "RepairManager";
        private const string DnsServiceValue = "DnsService";
        private const string BackupRestoreServiceValue = "BackupRestoreService";
        private const string ResourceMonitorServiceValue = "ResourceMonitorService";

        /// <summary> RepairManager. </summary>
        public static AddOnFeatures RepairManager { get; } = new AddOnFeatures(RepairManagerValue);
        /// <summary> DnsService. </summary>
        public static AddOnFeatures DnsService { get; } = new AddOnFeatures(DnsServiceValue);
        /// <summary> BackupRestoreService. </summary>
        public static AddOnFeatures BackupRestoreService { get; } = new AddOnFeatures(BackupRestoreServiceValue);
        /// <summary> ResourceMonitorService. </summary>
        public static AddOnFeatures ResourceMonitorService { get; } = new AddOnFeatures(ResourceMonitorServiceValue);
        /// <summary> Determines if two <see cref="AddOnFeatures"/> values are the same. </summary>
        public static bool operator ==(AddOnFeatures left, AddOnFeatures right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AddOnFeatures"/> values are not the same. </summary>
        public static bool operator !=(AddOnFeatures left, AddOnFeatures right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AddOnFeatures"/>. </summary>
        public static implicit operator AddOnFeatures(string value) => new AddOnFeatures(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AddOnFeatures other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AddOnFeatures other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
