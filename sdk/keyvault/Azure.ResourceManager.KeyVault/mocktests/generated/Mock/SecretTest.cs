// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.KeyVault;
using Azure.ResourceManager.KeyVault.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.KeyVault.Tests.Mock
{
    /// <summary> Test for Secret. </summary>
    public partial class SecretMockTests : MockTestBase
    {
        public SecretMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get a secret
            var secretId = KeyVault.Secret.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sample-group", "sample-vault", "secret-name");
            var secret = GetArmClient().GetSecret(secretId);

            await secret.GetAsync();
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Update a secret
            var secretId = KeyVault.Secret.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "sample-group", "sample-vault", "secret-name");
            var secret = GetArmClient().GetSecret(secretId);
            KeyVault.Models.SecretPatchParameters parameters = new KeyVault.Models.SecretPatchParameters()
            {
                Properties = new KeyVault.Models.SecretPatchProperties()
                {
                    Value = "secret-value2",
                },
            };

            await secret.UpdateAsync(parameters);
        }
    }
}
