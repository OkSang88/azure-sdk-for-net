// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.ServiceFabricMesh.Models;

namespace Azure.ResourceManager.ServiceFabricMesh
{
    internal partial class SecretValueRestOperations
    {
        private Uri endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;
        private readonly string _userAgent;

        /// <summary> Initializes a new instance of SecretValueRestOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="options"> The client options used to construct the current client. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public SecretValueRestOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, ArmClientOptions options, Uri endpoint = null, string apiVersion = default)
        {
            this.endpoint = endpoint ?? new Uri("https://management.azure.com");
            this.apiVersion = apiVersion ?? "2018-09-01-preview";
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _userAgent = HttpMessageUtilities.GetUserAgentName(this, options);
        }

        internal HttpMessage CreateCreateRequest(string subscriptionId, string resourceGroupName, string secretResourceName, string secretValueResourceName, SecretValueResourceDescriptionData secretValueResourceDescription)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.ServiceFabricMesh/secrets/", false);
            uri.AppendPath(secretResourceName, false);
            uri.AppendPath("/values/", false);
            uri.AppendPath(secretValueResourceName, false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(secretValueResourceDescription);
            request.Content = content;
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed. </summary>
        /// <param name="subscriptionId"> The customer subscription identifier. </param>
        /// <param name="resourceGroupName"> Azure resource group name. </param>
        /// <param name="secretResourceName"> The name of the secret resource. </param>
        /// <param name="secretValueResourceName"> The name of the secret resource value which is typically the version identifier for the value. </param>
        /// <param name="secretValueResourceDescription"> Description for creating a value of a secret resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="secretResourceName"/>, <paramref name="secretValueResourceName"/>, or <paramref name="secretValueResourceDescription"/> is null. </exception>
        public async Task<Response<SecretValueResourceDescriptionData>> CreateAsync(string subscriptionId, string resourceGroupName, string secretResourceName, string secretValueResourceName, SecretValueResourceDescriptionData secretValueResourceDescription, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (secretResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretResourceName));
            }
            if (secretValueResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretValueResourceName));
            }
            if (secretValueResourceDescription == null)
            {
                throw new ArgumentNullException(nameof(secretValueResourceDescription));
            }

            using var message = CreateCreateRequest(subscriptionId, resourceGroupName, secretResourceName, secretValueResourceName, secretValueResourceDescription);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        SecretValueResourceDescriptionData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SecretValueResourceDescriptionData.DeserializeSecretValueResourceDescriptionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 202:
                    return Response.FromValue((SecretValueResourceDescriptionData)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates a new value of the specified secret resource. The name of the value is typically the version identifier. Once created the value cannot be changed. </summary>
        /// <param name="subscriptionId"> The customer subscription identifier. </param>
        /// <param name="resourceGroupName"> Azure resource group name. </param>
        /// <param name="secretResourceName"> The name of the secret resource. </param>
        /// <param name="secretValueResourceName"> The name of the secret resource value which is typically the version identifier for the value. </param>
        /// <param name="secretValueResourceDescription"> Description for creating a value of a secret resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="secretResourceName"/>, <paramref name="secretValueResourceName"/>, or <paramref name="secretValueResourceDescription"/> is null. </exception>
        public Response<SecretValueResourceDescriptionData> Create(string subscriptionId, string resourceGroupName, string secretResourceName, string secretValueResourceName, SecretValueResourceDescriptionData secretValueResourceDescription, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (secretResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretResourceName));
            }
            if (secretValueResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretValueResourceName));
            }
            if (secretValueResourceDescription == null)
            {
                throw new ArgumentNullException(nameof(secretValueResourceDescription));
            }

            using var message = CreateCreateRequest(subscriptionId, resourceGroupName, secretResourceName, secretValueResourceName, secretValueResourceDescription);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        SecretValueResourceDescriptionData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SecretValueResourceDescriptionData.DeserializeSecretValueResourceDescriptionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 202:
                    return Response.FromValue((SecretValueResourceDescriptionData)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string secretResourceName, string secretValueResourceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.ServiceFabricMesh/secrets/", false);
            uri.AppendPath(secretResourceName, false);
            uri.AppendPath("/values/", false);
            uri.AppendPath(secretValueResourceName, false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Get the information about the specified named secret value resources. The information does not include the actual value of the secret. </summary>
        /// <param name="subscriptionId"> The customer subscription identifier. </param>
        /// <param name="resourceGroupName"> Azure resource group name. </param>
        /// <param name="secretResourceName"> The name of the secret resource. </param>
        /// <param name="secretValueResourceName"> The name of the secret resource value which is typically the version identifier for the value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="secretResourceName"/>, or <paramref name="secretValueResourceName"/> is null. </exception>
        public async Task<Response<SecretValueResourceDescriptionData>> GetAsync(string subscriptionId, string resourceGroupName, string secretResourceName, string secretValueResourceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (secretResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretResourceName));
            }
            if (secretValueResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretValueResourceName));
            }

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, secretResourceName, secretValueResourceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SecretValueResourceDescriptionData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SecretValueResourceDescriptionData.DeserializeSecretValueResourceDescriptionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((SecretValueResourceDescriptionData)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get the information about the specified named secret value resources. The information does not include the actual value of the secret. </summary>
        /// <param name="subscriptionId"> The customer subscription identifier. </param>
        /// <param name="resourceGroupName"> Azure resource group name. </param>
        /// <param name="secretResourceName"> The name of the secret resource. </param>
        /// <param name="secretValueResourceName"> The name of the secret resource value which is typically the version identifier for the value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="secretResourceName"/>, or <paramref name="secretValueResourceName"/> is null. </exception>
        public Response<SecretValueResourceDescriptionData> Get(string subscriptionId, string resourceGroupName, string secretResourceName, string secretValueResourceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (secretResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretResourceName));
            }
            if (secretValueResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretValueResourceName));
            }

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, secretResourceName, secretValueResourceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SecretValueResourceDescriptionData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SecretValueResourceDescriptionData.DeserializeSecretValueResourceDescriptionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((SecretValueResourceDescriptionData)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRequest(string subscriptionId, string resourceGroupName, string secretResourceName, string secretValueResourceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.ServiceFabricMesh/secrets/", false);
            uri.AppendPath(secretResourceName, false);
            uri.AppendPath("/values/", false);
            uri.AppendPath(secretValueResourceName, false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Deletes the secret value resource identified by the name. The name of the resource is typically the version associated with that value. Deletion will fail if the specified value is in use. </summary>
        /// <param name="subscriptionId"> The customer subscription identifier. </param>
        /// <param name="resourceGroupName"> Azure resource group name. </param>
        /// <param name="secretResourceName"> The name of the secret resource. </param>
        /// <param name="secretValueResourceName"> The name of the secret resource value which is typically the version identifier for the value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="secretResourceName"/>, or <paramref name="secretValueResourceName"/> is null. </exception>
        public async Task<Response> DeleteAsync(string subscriptionId, string resourceGroupName, string secretResourceName, string secretValueResourceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (secretResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretResourceName));
            }
            if (secretValueResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretValueResourceName));
            }

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, secretResourceName, secretValueResourceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes the secret value resource identified by the name. The name of the resource is typically the version associated with that value. Deletion will fail if the specified value is in use. </summary>
        /// <param name="subscriptionId"> The customer subscription identifier. </param>
        /// <param name="resourceGroupName"> Azure resource group name. </param>
        /// <param name="secretResourceName"> The name of the secret resource. </param>
        /// <param name="secretValueResourceName"> The name of the secret resource value which is typically the version identifier for the value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="secretResourceName"/>, or <paramref name="secretValueResourceName"/> is null. </exception>
        public Response Delete(string subscriptionId, string resourceGroupName, string secretResourceName, string secretValueResourceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (secretResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretResourceName));
            }
            if (secretValueResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretValueResourceName));
            }

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, secretResourceName, secretValueResourceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListRequest(string subscriptionId, string resourceGroupName, string secretResourceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.ServiceFabricMesh/secrets/", false);
            uri.AppendPath(secretResourceName, false);
            uri.AppendPath("/values", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values. </summary>
        /// <param name="subscriptionId"> The customer subscription identifier. </param>
        /// <param name="resourceGroupName"> Azure resource group name. </param>
        /// <param name="secretResourceName"> The name of the secret resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, or <paramref name="secretResourceName"/> is null. </exception>
        public async Task<Response<SecretValueResourceDescriptionList>> ListAsync(string subscriptionId, string resourceGroupName, string secretResourceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (secretResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretResourceName));
            }

            using var message = CreateListRequest(subscriptionId, resourceGroupName, secretResourceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SecretValueResourceDescriptionList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SecretValueResourceDescriptionList.DeserializeSecretValueResourceDescriptionList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values. </summary>
        /// <param name="subscriptionId"> The customer subscription identifier. </param>
        /// <param name="resourceGroupName"> Azure resource group name. </param>
        /// <param name="secretResourceName"> The name of the secret resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, or <paramref name="secretResourceName"/> is null. </exception>
        public Response<SecretValueResourceDescriptionList> List(string subscriptionId, string resourceGroupName, string secretResourceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (secretResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretResourceName));
            }

            using var message = CreateListRequest(subscriptionId, resourceGroupName, secretResourceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SecretValueResourceDescriptionList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SecretValueResourceDescriptionList.DeserializeSecretValueResourceDescriptionList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListValueRequest(string subscriptionId, string resourceGroupName, string secretResourceName, string secretValueResourceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.ServiceFabricMesh/secrets/", false);
            uri.AppendPath(secretResourceName, false);
            uri.AppendPath("/values/", false);
            uri.AppendPath(secretValueResourceName, false);
            uri.AppendPath("/list_value", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation. </summary>
        /// <param name="subscriptionId"> The customer subscription identifier. </param>
        /// <param name="resourceGroupName"> Azure resource group name. </param>
        /// <param name="secretResourceName"> The name of the secret resource. </param>
        /// <param name="secretValueResourceName"> The name of the secret resource value which is typically the version identifier for the value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="secretResourceName"/>, or <paramref name="secretValueResourceName"/> is null. </exception>
        public async Task<Response<SecretValue>> ListValueAsync(string subscriptionId, string resourceGroupName, string secretResourceName, string secretValueResourceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (secretResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretResourceName));
            }
            if (secretValueResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretValueResourceName));
            }

            using var message = CreateListValueRequest(subscriptionId, resourceGroupName, secretResourceName, secretValueResourceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SecretValue value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SecretValue.DeserializeSecretValue(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation. </summary>
        /// <param name="subscriptionId"> The customer subscription identifier. </param>
        /// <param name="resourceGroupName"> Azure resource group name. </param>
        /// <param name="secretResourceName"> The name of the secret resource. </param>
        /// <param name="secretValueResourceName"> The name of the secret resource value which is typically the version identifier for the value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="secretResourceName"/>, or <paramref name="secretValueResourceName"/> is null. </exception>
        public Response<SecretValue> ListValue(string subscriptionId, string resourceGroupName, string secretResourceName, string secretValueResourceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (secretResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretResourceName));
            }
            if (secretValueResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretValueResourceName));
            }

            using var message = CreateListValueRequest(subscriptionId, resourceGroupName, secretResourceName, secretValueResourceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SecretValue value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SecretValue.DeserializeSecretValue(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName, string secretResourceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The customer subscription identifier. </param>
        /// <param name="resourceGroupName"> Azure resource group name. </param>
        /// <param name="secretResourceName"> The name of the secret resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, or <paramref name="secretResourceName"/> is null. </exception>
        public async Task<Response<SecretValueResourceDescriptionList>> ListNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, string secretResourceName, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (secretResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretResourceName));
            }

            using var message = CreateListNextPageRequest(nextLink, subscriptionId, resourceGroupName, secretResourceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SecretValueResourceDescriptionList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SecretValueResourceDescriptionList.DeserializeSecretValueResourceDescriptionList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets information about all secret value resources of the specified secret resource. The information includes the names of the secret value resources, but not the actual values. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The customer subscription identifier. </param>
        /// <param name="resourceGroupName"> Azure resource group name. </param>
        /// <param name="secretResourceName"> The name of the secret resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, or <paramref name="secretResourceName"/> is null. </exception>
        public Response<SecretValueResourceDescriptionList> ListNextPage(string nextLink, string subscriptionId, string resourceGroupName, string secretResourceName, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (secretResourceName == null)
            {
                throw new ArgumentNullException(nameof(secretResourceName));
            }

            using var message = CreateListNextPageRequest(nextLink, subscriptionId, resourceGroupName, secretResourceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SecretValueResourceDescriptionList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SecretValueResourceDescriptionList.DeserializeSecretValueResourceDescriptionList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
