// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for P2SVpnGateway. </summary>
    public partial class P2SVpnGatewayMockTests : MockTestBase
    {
        public P2SVpnGatewayMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: P2SVpnGatewayGet
            var p2SVpnGatewayId = Network.P2SVpnGateway.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "p2sVpnGateway1");
            var p2SVpnGateway = GetArmClient().GetP2SVpnGateway(p2SVpnGatewayId);

            await p2SVpnGateway.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: P2SVpnGatewayDelete
            var p2SVpnGatewayId = Network.P2SVpnGateway.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "p2sVpnGateway1");
            var p2SVpnGateway = GetArmClient().GetP2SVpnGateway(p2SVpnGatewayId);

            await p2SVpnGateway.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: P2SVpnGatewayUpdate
            var p2SVpnGatewayId = Network.P2SVpnGateway.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "p2sVpnGateway1");
            var p2SVpnGateway = GetArmClient().GetP2SVpnGateway(p2SVpnGatewayId);
            Network.Models.TagsObject p2SVpnGatewayParameters = new Network.Models.TagsObject();

            await p2SVpnGateway.UpdateAsync(true, p2SVpnGatewayParameters);
        }

        [RecordedTest]
        public async Task Reset()
        {
            // Example: ResetP2SVpnGateway
            var p2SVpnGatewayId = Network.P2SVpnGateway.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "p2sVpnGateway1");
            var p2SVpnGateway = GetArmClient().GetP2SVpnGateway(p2SVpnGatewayId);

            await p2SVpnGateway.ResetAsync(true);
        }

        [RecordedTest]
        public async Task GenerateVpnProfile()
        {
            // Example: GenerateP2SVpnGatewayVPNProfile
            var p2SVpnGatewayId = Network.P2SVpnGateway.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "p2sVpnGateway1");
            var p2SVpnGateway = GetArmClient().GetP2SVpnGateway(p2SVpnGatewayId);
            Network.Models.P2SVpnProfileParameters parameters = new Network.Models.P2SVpnProfileParameters()
            {
                AuthenticationMethod = new Network.Models.AuthenticationMethod("EAPTLS"),
            };

            await p2SVpnGateway.GenerateVpnProfileAsync(true, parameters);
        }

        [RecordedTest]
        public async Task GetP2SVpnConnectionHealth()
        {
            // Example: P2SVpnGatewayGetConnectionHealth
            var p2SVpnGatewayId = Network.P2SVpnGateway.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "p2sVpnGateway1");
            var p2SVpnGateway = GetArmClient().GetP2SVpnGateway(p2SVpnGatewayId);

            await p2SVpnGateway.GetP2SVpnConnectionHealthAsync(true);
        }

        [RecordedTest]
        public async Task GetP2SVpnConnectionHealthDetailed()
        {
            // Example: P2SVpnGatewayGetConnectionHealthDetailed
            var p2SVpnGatewayId = Network.P2SVpnGateway.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "p2s-vpn-gateway-test", "p2svpngateway");
            var p2SVpnGateway = GetArmClient().GetP2SVpnGateway(p2SVpnGatewayId);
            Network.Models.P2SVpnConnectionHealthRequest request = new Network.Models.P2SVpnConnectionHealthRequest()
            {
                OutputBlobSasUrl = "https://blobcortextesturl.blob.core.windows.net/folderforconfig/p2sconnectionhealths?sp=rw&se=2018-01-10T03%3A42%3A04Z&sv=2017-04-17&sig=WvXrT5bDmDFfgHs%2Brz%2BjAu123eRCNE9BO0eQYcPDT7pY%3D&sr=b",
            };

            await p2SVpnGateway.GetP2SVpnConnectionHealthDetailedAsync(true, request);
        }

        [RecordedTest]
        public async Task DisconnectP2SVpnConnections()
        {
            // Example: Disconnect VpnConnections from P2sVpn Gateway
            var p2SVpnGatewayId = Network.P2SVpnGateway.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "p2s-vpn-gateway-test", "default");
            var p2SVpnGateway = GetArmClient().GetP2SVpnGateway(p2SVpnGatewayId);
            Network.Models.P2SVpnConnectionRequest request = new Network.Models.P2SVpnConnectionRequest();

            await p2SVpnGateway.DisconnectP2SVpnConnectionsAsync(true, request);
        }
    }
}
