// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using StorSimple8000SeriesManagementClient.Models;

namespace StorSimple8000SeriesManagementClient
{
    /// <summary> A class representing collection of StorageAccountCredential and their operations over its parent. </summary>
    public partial class StorageAccountCredentialCollection : ArmCollection, IEnumerable<StorageAccountCredential>, IAsyncEnumerable<StorageAccountCredential>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly StorageAccountCredentialsRestOperations _storageAccountCredentialsRestClient;

        /// <summary> Initializes a new instance of the <see cref="StorageAccountCredentialCollection"/> class for mocking. </summary>
        protected StorageAccountCredentialCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="StorageAccountCredentialCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal StorageAccountCredentialCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _storageAccountCredentialsRestClient = new StorageAccountCredentialsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != Manager.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, Manager.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Creates or updates the storage account credential. </summary>
        /// <param name="storageAccountCredentialName"> The storage account credential name. </param>
        /// <param name="parameters"> The storage account credential to be added or updated. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageAccountCredentialName"/> or <paramref name="parameters"/> is null. </exception>
        public virtual StorageAccountCredentialCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string storageAccountCredentialName, StorageAccountCredentialData parameters, CancellationToken cancellationToken = default)
        {
            if (storageAccountCredentialName == null)
            {
                throw new ArgumentNullException(nameof(storageAccountCredentialName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("StorageAccountCredentialCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _storageAccountCredentialsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, storageAccountCredentialName, parameters, cancellationToken);
                var operation = new StorageAccountCredentialCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _storageAccountCredentialsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, storageAccountCredentialName, parameters).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates the storage account credential. </summary>
        /// <param name="storageAccountCredentialName"> The storage account credential name. </param>
        /// <param name="parameters"> The storage account credential to be added or updated. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageAccountCredentialName"/> or <paramref name="parameters"/> is null. </exception>
        public async virtual Task<StorageAccountCredentialCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string storageAccountCredentialName, StorageAccountCredentialData parameters, CancellationToken cancellationToken = default)
        {
            if (storageAccountCredentialName == null)
            {
                throw new ArgumentNullException(nameof(storageAccountCredentialName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("StorageAccountCredentialCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _storageAccountCredentialsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, storageAccountCredentialName, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new StorageAccountCredentialCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _storageAccountCredentialsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, storageAccountCredentialName, parameters).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of the specified storage account credential name. </summary>
        /// <param name="storageAccountCredentialName"> The name of storage account credential to be fetched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageAccountCredentialName"/> is null. </exception>
        public virtual Response<StorageAccountCredential> Get(string storageAccountCredentialName, CancellationToken cancellationToken = default)
        {
            if (storageAccountCredentialName == null)
            {
                throw new ArgumentNullException(nameof(storageAccountCredentialName));
            }

            using var scope = _clientDiagnostics.CreateScope("StorageAccountCredentialCollection.Get");
            scope.Start();
            try
            {
                var response = _storageAccountCredentialsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, storageAccountCredentialName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new StorageAccountCredential(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of the specified storage account credential name. </summary>
        /// <param name="storageAccountCredentialName"> The name of storage account credential to be fetched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageAccountCredentialName"/> is null. </exception>
        public async virtual Task<Response<StorageAccountCredential>> GetAsync(string storageAccountCredentialName, CancellationToken cancellationToken = default)
        {
            if (storageAccountCredentialName == null)
            {
                throw new ArgumentNullException(nameof(storageAccountCredentialName));
            }

            using var scope = _clientDiagnostics.CreateScope("StorageAccountCredentialCollection.Get");
            scope.Start();
            try
            {
                var response = await _storageAccountCredentialsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, storageAccountCredentialName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new StorageAccountCredential(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="storageAccountCredentialName"> The name of storage account credential to be fetched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageAccountCredentialName"/> is null. </exception>
        public virtual Response<StorageAccountCredential> GetIfExists(string storageAccountCredentialName, CancellationToken cancellationToken = default)
        {
            if (storageAccountCredentialName == null)
            {
                throw new ArgumentNullException(nameof(storageAccountCredentialName));
            }

            using var scope = _clientDiagnostics.CreateScope("StorageAccountCredentialCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _storageAccountCredentialsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, storageAccountCredentialName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<StorageAccountCredential>(null, response.GetRawResponse());
                return Response.FromValue(new StorageAccountCredential(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="storageAccountCredentialName"> The name of storage account credential to be fetched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageAccountCredentialName"/> is null. </exception>
        public async virtual Task<Response<StorageAccountCredential>> GetIfExistsAsync(string storageAccountCredentialName, CancellationToken cancellationToken = default)
        {
            if (storageAccountCredentialName == null)
            {
                throw new ArgumentNullException(nameof(storageAccountCredentialName));
            }

            using var scope = _clientDiagnostics.CreateScope("StorageAccountCredentialCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _storageAccountCredentialsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, storageAccountCredentialName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<StorageAccountCredential>(null, response.GetRawResponse());
                return Response.FromValue(new StorageAccountCredential(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="storageAccountCredentialName"> The name of storage account credential to be fetched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageAccountCredentialName"/> is null. </exception>
        public virtual Response<bool> Exists(string storageAccountCredentialName, CancellationToken cancellationToken = default)
        {
            if (storageAccountCredentialName == null)
            {
                throw new ArgumentNullException(nameof(storageAccountCredentialName));
            }

            using var scope = _clientDiagnostics.CreateScope("StorageAccountCredentialCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(storageAccountCredentialName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="storageAccountCredentialName"> The name of storage account credential to be fetched. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageAccountCredentialName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string storageAccountCredentialName, CancellationToken cancellationToken = default)
        {
            if (storageAccountCredentialName == null)
            {
                throw new ArgumentNullException(nameof(storageAccountCredentialName));
            }

            using var scope = _clientDiagnostics.CreateScope("StorageAccountCredentialCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(storageAccountCredentialName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets all the storage account credentials in a manager. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="StorageAccountCredential" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<StorageAccountCredential> GetAll(CancellationToken cancellationToken = default)
        {
            Page<StorageAccountCredential> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("StorageAccountCredentialCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _storageAccountCredentialsRestClient.ListByManager(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new StorageAccountCredential(Parent, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Gets all the storage account credentials in a manager. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="StorageAccountCredential" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<StorageAccountCredential> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<StorageAccountCredential>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("StorageAccountCredentialCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _storageAccountCredentialsRestClient.ListByManagerAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new StorageAccountCredential(Parent, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        IEnumerator<StorageAccountCredential> IEnumerable<StorageAccountCredential>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<StorageAccountCredential> IAsyncEnumerable<StorageAccountCredential>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, StorageAccountCredential, StorageAccountCredentialData> Construct() { }
    }
}
