// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for PeerExpressRouteCircuitConnection. </summary>
    public partial class PeerExpressRouteCircuitConnectionCollectionMockTests : MockTestBase
    {
        public PeerExpressRouteCircuitConnectionCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: PeerExpressRouteCircuitConnectionGet
            string connectionName = "60aee347-e889-4a42-8c1b-0aae8b1e4013";

            var expressRouteCircuitPeeringId = Network.ExpressRouteCircuitPeering.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ExpressRouteARMCircuitA", "AzurePrivatePeering");
            var collection = GetArmClient().GetExpressRouteCircuitPeering(expressRouteCircuitPeeringId).GetPeerExpressRouteCircuitConnections();
            await collection.GetAsync(connectionName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List Peer ExpressRouteCircuit Connection

            var expressRouteCircuitPeeringId = Network.ExpressRouteCircuitPeering.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ExpressRouteARMCircuitA", "AzurePrivatePeering");
            var collection = GetArmClient().GetExpressRouteCircuitPeering(expressRouteCircuitPeeringId).GetPeerExpressRouteCircuitConnections();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
