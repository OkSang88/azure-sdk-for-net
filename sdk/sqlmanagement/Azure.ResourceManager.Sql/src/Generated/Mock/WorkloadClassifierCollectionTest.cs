// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for WorkloadClassifier. </summary>
    public partial class WorkloadClassifierCollectionMockTests : MockTestBase
    {
        public WorkloadClassifierCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create a workload group with all properties specified.
            string workloadClassifierName = "wlm_workloadclassifier";
            Sql.WorkloadClassifierData parameters = new Sql.WorkloadClassifierData()
            {
                MemberName = "dbo",
                Label = "test_label",
                Context = "test_context",
                StartTime = "12:00",
                EndTime = "14:00",
                Importance = "high",
            };

            var workloadGroupId = Sql.WorkloadGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "testsvr", "testdb", "wlm_workloadgroup");
            var collection = GetArmClient().GetWorkloadGroup(workloadGroupId).GetWorkloadClassifiers();
            await collection.CreateOrUpdateAsync(true, workloadClassifierName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Create a workload group with the required properties specified.
            string workloadClassifierName = "wlm_workloadclassifier";
            Sql.WorkloadClassifierData parameters = new Sql.WorkloadClassifierData()
            {
                MemberName = "dbo",
            };

            var workloadGroupId = Sql.WorkloadGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "testsvr", "testdb", "wlm_workloadgroup");
            var collection = GetArmClient().GetWorkloadGroup(workloadGroupId).GetWorkloadClassifiers();
            await collection.CreateOrUpdateAsync(true, workloadClassifierName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Gets a workload classifier for a data warehouse
            string workloadClassifierName = "wlm_classifier";

            var workloadGroupId = Sql.WorkloadGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "testsvr", "testdb", "wlm_workloadgroup");
            var collection = GetArmClient().GetWorkloadGroup(workloadGroupId).GetWorkloadClassifiers();
            await collection.GetAsync(workloadClassifierName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: Get the list of workload classifiers for a workload group

            var workloadGroupId = Sql.WorkloadGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-SQL-SouthEastAsia", "testsvr", "testdb", "wlm_workloadgroup");
            var collection = GetArmClient().GetWorkloadGroup(workloadGroupId).GetWorkloadClassifiers();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
