// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace DataFactoryManagementClient.Models
{
    /// <summary> Specify the write behavior when copying data into sql dw. </summary>
    internal readonly partial struct SqlDWWriteBehaviorEnum : IEquatable<SqlDWWriteBehaviorEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SqlDWWriteBehaviorEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SqlDWWriteBehaviorEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InsertValue = "Insert";
        private const string UpsertValue = "Upsert";

        /// <summary> Insert. </summary>
        public static SqlDWWriteBehaviorEnum Insert { get; } = new SqlDWWriteBehaviorEnum(InsertValue);
        /// <summary> Upsert. </summary>
        public static SqlDWWriteBehaviorEnum Upsert { get; } = new SqlDWWriteBehaviorEnum(UpsertValue);
        /// <summary> Determines if two <see cref="SqlDWWriteBehaviorEnum"/> values are the same. </summary>
        public static bool operator ==(SqlDWWriteBehaviorEnum left, SqlDWWriteBehaviorEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SqlDWWriteBehaviorEnum"/> values are not the same. </summary>
        public static bool operator !=(SqlDWWriteBehaviorEnum left, SqlDWWriteBehaviorEnum right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SqlDWWriteBehaviorEnum"/>. </summary>
        public static implicit operator SqlDWWriteBehaviorEnum(string value) => new SqlDWWriteBehaviorEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SqlDWWriteBehaviorEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SqlDWWriteBehaviorEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
