// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for DataMaskingPolicy. </summary>
    public partial class DataMaskingPolicyMockTests : MockTestBase
    {
        public DataMaskingPolicyMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get data masking policy
            var dataMaskingPolicy = GetArmClient().GetDataMaskingPolicy(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Sql/servers/sqlcrudtest-2080/databases/sqlcrudtest-331/dataMaskingPolicies/Default"));

            await dataMaskingPolicy.GetAsync();
        }

        [RecordedTest]
        public async Task CreateOrUpdateDataMaskingRuleAsync()
        {
            // Example: Create/Update data masking rule for default max
            var dataMaskingPolicy = GetArmClient().GetDataMaskingPolicy(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Sql/servers/sqlcrudtest-2080/databases/sqlcrudtest-331/dataMaskingPolicies/Default"));
            string dataMaskingRuleName = "rule1";
            Sql.Models.DataMaskingRule parameters = new Sql.Models.DataMaskingRule()
            {
                AliasName = "nickname",
                RuleState = Sql.Models.DataMaskingRuleState.Enabled,
                SchemaName = "dbo",
                TableName = "Table_1",
                ColumnName = "test1",
                MaskingFunction = Sql.Models.DataMaskingFunction.Default,
            };

            await dataMaskingPolicy.CreateOrUpdateDataMaskingRuleAsync(dataMaskingRuleName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateDataMaskingRuleAsync2()
        {
            // Example: Create/Update data masking rule for default min
            var dataMaskingPolicy = GetArmClient().GetDataMaskingPolicy(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Sql/servers/sqlcrudtest-2080/databases/sqlcrudtest-331/dataMaskingPolicies/Default"));
            string dataMaskingRuleName = "rule1";
            Sql.Models.DataMaskingRule parameters = new Sql.Models.DataMaskingRule()
            {
                SchemaName = "dbo",
                TableName = "Table_1",
                ColumnName = "test1",
                MaskingFunction = Sql.Models.DataMaskingFunction.Default,
            };

            await dataMaskingPolicy.CreateOrUpdateDataMaskingRuleAsync(dataMaskingRuleName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateDataMaskingRuleAsync3()
        {
            // Example: Create/Update data masking rule for numbers
            var dataMaskingPolicy = GetArmClient().GetDataMaskingPolicy(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Sql/servers/sqlcrudtest-2080/databases/sqlcrudtest-331/dataMaskingPolicies/Default"));
            string dataMaskingRuleName = "rule1";
            Sql.Models.DataMaskingRule parameters = new Sql.Models.DataMaskingRule()
            {
                SchemaName = "dbo",
                TableName = "Table_1",
                ColumnName = "test1",
                MaskingFunction = Sql.Models.DataMaskingFunction.Number,
                NumberFrom = "0",
                NumberTo = "2",
            };

            await dataMaskingPolicy.CreateOrUpdateDataMaskingRuleAsync(dataMaskingRuleName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateDataMaskingRuleAsync4()
        {
            // Example: Create/Update data masking rule for text
            var dataMaskingPolicy = GetArmClient().GetDataMaskingPolicy(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Sql/servers/sqlcrudtest-2080/databases/sqlcrudtest-331/dataMaskingPolicies/Default"));
            string dataMaskingRuleName = "rule1";
            Sql.Models.DataMaskingRule parameters = new Sql.Models.DataMaskingRule()
            {
                SchemaName = "dbo",
                TableName = "Table_1",
                ColumnName = "test1",
                MaskingFunction = Sql.Models.DataMaskingFunction.Text,
                PrefixSize = "1",
                SuffixSize = "0",
                ReplacementString = "asdf",
            };

            await dataMaskingPolicy.CreateOrUpdateDataMaskingRuleAsync(dataMaskingRuleName, parameters);
        }

        [RecordedTest]
        public void GetDataMaskingRulesAsync()
        {
            // Example: List data masking rules
            var dataMaskingPolicy = GetArmClient().GetDataMaskingPolicy(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Sql/servers/sqlcrudtest-2080/databases/sqlcrudtest-331/dataMaskingPolicies/Default"));

            dataMaskingPolicy.GetDataMaskingRulesAsync();
        }
    }
}
