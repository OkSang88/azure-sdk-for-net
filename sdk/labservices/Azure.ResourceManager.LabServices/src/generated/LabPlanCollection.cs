// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Resources;
using LabServicesClient.Models;

namespace LabServicesClient
{
    /// <summary> A class representing collection of LabPlan and their operations over its parent. </summary>
    public partial class LabPlanCollection : ArmCollection, IEnumerable<LabPlan>, IAsyncEnumerable<LabPlan>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly LabPlansRestOperations _labPlansRestClient;

        /// <summary> Initializes a new instance of the <see cref="LabPlanCollection"/> class for mocking. </summary>
        protected LabPlanCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="LabPlanCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal LabPlanCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _labPlansRestClient = new LabPlansRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroup.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroup.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Operation to create or update a Lab Plan resource. </summary>
        /// <param name="labPlanName"> The name of the lab plan that uniquely identifies it within containing resource group. Used in resource URIs and in UI. </param>
        /// <param name="body"> The request body. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="labPlanName"/> or <paramref name="body"/> is null. </exception>
        public virtual LabPlanCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string labPlanName, LabPlanData body, CancellationToken cancellationToken = default)
        {
            if (labPlanName == null)
            {
                throw new ArgumentNullException(nameof(labPlanName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var scope = _clientDiagnostics.CreateScope("LabPlanCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _labPlansRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, labPlanName, body, cancellationToken);
                var operation = new LabPlanCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _labPlansRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, labPlanName, body).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Operation to create or update a Lab Plan resource. </summary>
        /// <param name="labPlanName"> The name of the lab plan that uniquely identifies it within containing resource group. Used in resource URIs and in UI. </param>
        /// <param name="body"> The request body. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="labPlanName"/> or <paramref name="body"/> is null. </exception>
        public async virtual Task<LabPlanCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string labPlanName, LabPlanData body, CancellationToken cancellationToken = default)
        {
            if (labPlanName == null)
            {
                throw new ArgumentNullException(nameof(labPlanName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var scope = _clientDiagnostics.CreateScope("LabPlanCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _labPlansRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, labPlanName, body, cancellationToken).ConfigureAwait(false);
                var operation = new LabPlanCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _labPlansRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, labPlanName, body).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves the properties of a Lab Plan. </summary>
        /// <param name="labPlanName"> The name of the lab plan that uniquely identifies it within containing resource group. Used in resource URIs and in UI. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="labPlanName"/> is null. </exception>
        public virtual Response<LabPlan> Get(string labPlanName, CancellationToken cancellationToken = default)
        {
            if (labPlanName == null)
            {
                throw new ArgumentNullException(nameof(labPlanName));
            }

            using var scope = _clientDiagnostics.CreateScope("LabPlanCollection.Get");
            scope.Start();
            try
            {
                var response = _labPlansRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, labPlanName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new LabPlan(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves the properties of a Lab Plan. </summary>
        /// <param name="labPlanName"> The name of the lab plan that uniquely identifies it within containing resource group. Used in resource URIs and in UI. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="labPlanName"/> is null. </exception>
        public async virtual Task<Response<LabPlan>> GetAsync(string labPlanName, CancellationToken cancellationToken = default)
        {
            if (labPlanName == null)
            {
                throw new ArgumentNullException(nameof(labPlanName));
            }

            using var scope = _clientDiagnostics.CreateScope("LabPlanCollection.Get");
            scope.Start();
            try
            {
                var response = await _labPlansRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, labPlanName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new LabPlan(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="labPlanName"> The name of the lab plan that uniquely identifies it within containing resource group. Used in resource URIs and in UI. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="labPlanName"/> is null. </exception>
        public virtual Response<LabPlan> GetIfExists(string labPlanName, CancellationToken cancellationToken = default)
        {
            if (labPlanName == null)
            {
                throw new ArgumentNullException(nameof(labPlanName));
            }

            using var scope = _clientDiagnostics.CreateScope("LabPlanCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _labPlansRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, labPlanName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<LabPlan>(null, response.GetRawResponse());
                return Response.FromValue(new LabPlan(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="labPlanName"> The name of the lab plan that uniquely identifies it within containing resource group. Used in resource URIs and in UI. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="labPlanName"/> is null. </exception>
        public async virtual Task<Response<LabPlan>> GetIfExistsAsync(string labPlanName, CancellationToken cancellationToken = default)
        {
            if (labPlanName == null)
            {
                throw new ArgumentNullException(nameof(labPlanName));
            }

            using var scope = _clientDiagnostics.CreateScope("LabPlanCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _labPlansRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, labPlanName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<LabPlan>(null, response.GetRawResponse());
                return Response.FromValue(new LabPlan(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="labPlanName"> The name of the lab plan that uniquely identifies it within containing resource group. Used in resource URIs and in UI. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="labPlanName"/> is null. </exception>
        public virtual Response<bool> Exists(string labPlanName, CancellationToken cancellationToken = default)
        {
            if (labPlanName == null)
            {
                throw new ArgumentNullException(nameof(labPlanName));
            }

            using var scope = _clientDiagnostics.CreateScope("LabPlanCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(labPlanName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="labPlanName"> The name of the lab plan that uniquely identifies it within containing resource group. Used in resource URIs and in UI. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="labPlanName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string labPlanName, CancellationToken cancellationToken = default)
        {
            if (labPlanName == null)
            {
                throw new ArgumentNullException(nameof(labPlanName));
            }

            using var scope = _clientDiagnostics.CreateScope("LabPlanCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(labPlanName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of all lab plans for a subscription and resource group. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="LabPlan" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<LabPlan> GetAll(CancellationToken cancellationToken = default)
        {
            Page<LabPlan> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("LabPlanCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _labPlansRestClient.ListByResourceGroup(Id.SubscriptionId, Id.ResourceGroupName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new LabPlan(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<LabPlan> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("LabPlanCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _labPlansRestClient.ListByResourceGroupNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new LabPlan(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Returns a list of all lab plans for a subscription and resource group. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="LabPlan" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<LabPlan> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<LabPlan>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("LabPlanCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _labPlansRestClient.ListByResourceGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new LabPlan(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<LabPlan>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("LabPlanCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _labPlansRestClient.ListByResourceGroupNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new LabPlan(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Filters the list of <see cref="LabPlan" /> for this resource group represented as generic resources. </summary>
        /// <param name="nameFilter"> The filter used in this operation. </param>
        /// <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. </param>
        /// <param name="top"> The number of results to return. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of resource that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<GenericResource> GetAllAsGenericResources(string nameFilter, string expand = null, int? top = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LabPlanCollection.GetAllAsGenericResources");
            scope.Start();
            try
            {
                var filters = new ResourceFilterCollection(LabPlan.ResourceType);
                filters.SubstringFilter = nameFilter;
                return ResourceListOperations.GetAtContext(Parent as ResourceGroup, filters, expand, top, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Filters the list of <see cref="LabPlan" /> for this resource group represented as generic resources. </summary>
        /// <param name="nameFilter"> The filter used in this operation. </param>
        /// <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. </param>
        /// <param name="top"> The number of results to return. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> An async collection of resource that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<GenericResource> GetAllAsGenericResourcesAsync(string nameFilter, string expand = null, int? top = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LabPlanCollection.GetAllAsGenericResources");
            scope.Start();
            try
            {
                var filters = new ResourceFilterCollection(LabPlan.ResourceType);
                filters.SubstringFilter = nameFilter;
                return ResourceListOperations.GetAtContextAsync(Parent as ResourceGroup, filters, expand, top, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<LabPlan> IEnumerable<LabPlan>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<LabPlan> IAsyncEnumerable<LabPlan>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, LabPlan, LabPlanData> Construct() { }
    }
}
