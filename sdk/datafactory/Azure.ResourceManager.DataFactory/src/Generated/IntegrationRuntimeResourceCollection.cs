// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.DataFactory.Models;

namespace Azure.ResourceManager.DataFactory
{
    /// <summary> A class representing collection of IntegrationRuntimeResource and their operations over its parent. </summary>
    public partial class IntegrationRuntimeResourceCollection : ArmCollection, IEnumerable<IntegrationRuntimeResource>, IAsyncEnumerable<IntegrationRuntimeResource>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly IntegrationRuntimesRestOperations _integrationRuntimesRestClient;

        /// <summary> Initializes a new instance of the <see cref="IntegrationRuntimeResourceCollection"/> class for mocking. </summary>
        protected IntegrationRuntimeResourceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="IntegrationRuntimeResourceCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal IntegrationRuntimeResourceCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            ClientOptions.TryGetApiVersion(IntegrationRuntimeResource.ResourceType, out string apiVersion);
            _integrationRuntimesRestClient = new IntegrationRuntimesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != Factory.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, Factory.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Creates or updates an integration runtime. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="integrationRuntimeName"> The integration runtime name. </param>
        /// <param name="integrationRuntime"> Integration runtime resource definition. </param>
        /// <param name="ifMatch"> ETag of the integration runtime entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="integrationRuntimeName"/> or <paramref name="integrationRuntime"/> is null. </exception>
        public virtual IntegrationRuntimeResourceCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string integrationRuntimeName, IntegrationRuntimeResourceData integrationRuntime, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (integrationRuntimeName == null)
            {
                throw new ArgumentNullException(nameof(integrationRuntimeName));
            }
            if (integrationRuntime == null)
            {
                throw new ArgumentNullException(nameof(integrationRuntime));
            }

            using var scope = _clientDiagnostics.CreateScope("IntegrationRuntimeResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _integrationRuntimesRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, integrationRuntimeName, integrationRuntime, ifMatch, cancellationToken);
                var operation = new IntegrationRuntimeResourceCreateOrUpdateOperation(this, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates an integration runtime. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="integrationRuntimeName"> The integration runtime name. </param>
        /// <param name="integrationRuntime"> Integration runtime resource definition. </param>
        /// <param name="ifMatch"> ETag of the integration runtime entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="integrationRuntimeName"/> or <paramref name="integrationRuntime"/> is null. </exception>
        public async virtual Task<IntegrationRuntimeResourceCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string integrationRuntimeName, IntegrationRuntimeResourceData integrationRuntime, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            if (integrationRuntimeName == null)
            {
                throw new ArgumentNullException(nameof(integrationRuntimeName));
            }
            if (integrationRuntime == null)
            {
                throw new ArgumentNullException(nameof(integrationRuntime));
            }

            using var scope = _clientDiagnostics.CreateScope("IntegrationRuntimeResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _integrationRuntimesRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, integrationRuntimeName, integrationRuntime, ifMatch, cancellationToken).ConfigureAwait(false);
                var operation = new IntegrationRuntimeResourceCreateOrUpdateOperation(this, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets an integration runtime. </summary>
        /// <param name="integrationRuntimeName"> The integration runtime name. </param>
        /// <param name="ifNoneMatch"> ETag of the integration runtime entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="integrationRuntimeName"/> is null. </exception>
        public virtual Response<IntegrationRuntimeResource> Get(string integrationRuntimeName, string ifNoneMatch = null, CancellationToken cancellationToken = default)
        {
            if (integrationRuntimeName == null)
            {
                throw new ArgumentNullException(nameof(integrationRuntimeName));
            }

            using var scope = _clientDiagnostics.CreateScope("IntegrationRuntimeResourceCollection.Get");
            scope.Start();
            try
            {
                var response = _integrationRuntimesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, integrationRuntimeName, ifNoneMatch, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new IntegrationRuntimeResource(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets an integration runtime. </summary>
        /// <param name="integrationRuntimeName"> The integration runtime name. </param>
        /// <param name="ifNoneMatch"> ETag of the integration runtime entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="integrationRuntimeName"/> is null. </exception>
        public async virtual Task<Response<IntegrationRuntimeResource>> GetAsync(string integrationRuntimeName, string ifNoneMatch = null, CancellationToken cancellationToken = default)
        {
            if (integrationRuntimeName == null)
            {
                throw new ArgumentNullException(nameof(integrationRuntimeName));
            }

            using var scope = _clientDiagnostics.CreateScope("IntegrationRuntimeResourceCollection.Get");
            scope.Start();
            try
            {
                var response = await _integrationRuntimesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, integrationRuntimeName, ifNoneMatch, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new IntegrationRuntimeResource(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="integrationRuntimeName"> The integration runtime name. </param>
        /// <param name="ifNoneMatch"> ETag of the integration runtime entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="integrationRuntimeName"/> is null. </exception>
        public virtual Response<IntegrationRuntimeResource> GetIfExists(string integrationRuntimeName, string ifNoneMatch = null, CancellationToken cancellationToken = default)
        {
            if (integrationRuntimeName == null)
            {
                throw new ArgumentNullException(nameof(integrationRuntimeName));
            }

            using var scope = _clientDiagnostics.CreateScope("IntegrationRuntimeResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _integrationRuntimesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, integrationRuntimeName, ifNoneMatch, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<IntegrationRuntimeResource>(null, response.GetRawResponse());
                return Response.FromValue(new IntegrationRuntimeResource(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="integrationRuntimeName"> The integration runtime name. </param>
        /// <param name="ifNoneMatch"> ETag of the integration runtime entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="integrationRuntimeName"/> is null. </exception>
        public async virtual Task<Response<IntegrationRuntimeResource>> GetIfExistsAsync(string integrationRuntimeName, string ifNoneMatch = null, CancellationToken cancellationToken = default)
        {
            if (integrationRuntimeName == null)
            {
                throw new ArgumentNullException(nameof(integrationRuntimeName));
            }

            using var scope = _clientDiagnostics.CreateScope("IntegrationRuntimeResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _integrationRuntimesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, integrationRuntimeName, ifNoneMatch, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<IntegrationRuntimeResource>(null, response.GetRawResponse());
                return Response.FromValue(new IntegrationRuntimeResource(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="integrationRuntimeName"> The integration runtime name. </param>
        /// <param name="ifNoneMatch"> ETag of the integration runtime entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="integrationRuntimeName"/> is null. </exception>
        public virtual Response<bool> Exists(string integrationRuntimeName, string ifNoneMatch = null, CancellationToken cancellationToken = default)
        {
            if (integrationRuntimeName == null)
            {
                throw new ArgumentNullException(nameof(integrationRuntimeName));
            }

            using var scope = _clientDiagnostics.CreateScope("IntegrationRuntimeResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(integrationRuntimeName, ifNoneMatch, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="integrationRuntimeName"> The integration runtime name. </param>
        /// <param name="ifNoneMatch"> ETag of the integration runtime entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="integrationRuntimeName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string integrationRuntimeName, string ifNoneMatch = null, CancellationToken cancellationToken = default)
        {
            if (integrationRuntimeName == null)
            {
                throw new ArgumentNullException(nameof(integrationRuntimeName));
            }

            using var scope = _clientDiagnostics.CreateScope("IntegrationRuntimeResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(integrationRuntimeName, ifNoneMatch, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists integration runtimes. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="IntegrationRuntimeResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<IntegrationRuntimeResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<IntegrationRuntimeResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("IntegrationRuntimeResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _integrationRuntimesRestClient.ListByFactory(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new IntegrationRuntimeResource(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<IntegrationRuntimeResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("IntegrationRuntimeResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _integrationRuntimesRestClient.ListByFactoryNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new IntegrationRuntimeResource(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists integration runtimes. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="IntegrationRuntimeResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<IntegrationRuntimeResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<IntegrationRuntimeResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("IntegrationRuntimeResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _integrationRuntimesRestClient.ListByFactoryAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new IntegrationRuntimeResource(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<IntegrationRuntimeResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("IntegrationRuntimeResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _integrationRuntimesRestClient.ListByFactoryNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new IntegrationRuntimeResource(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<IntegrationRuntimeResource> IEnumerable<IntegrationRuntimeResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<IntegrationRuntimeResource> IAsyncEnumerable<IntegrationRuntimeResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, IntegrationRuntimeResource, IntegrationRuntimeResourceData> Construct() { }
    }
}
