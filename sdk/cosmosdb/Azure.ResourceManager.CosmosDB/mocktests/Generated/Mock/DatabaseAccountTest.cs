// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.CosmosDB;
using Azure.ResourceManager.CosmosDB.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.CosmosDB.Tests.Mock
{
    /// <summary> Test for DatabaseAccount. </summary>
    public partial class DatabaseAccountMockTests : MockTestBase
    {
        public DatabaseAccountMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: CosmosDBDatabaseAccountGet
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);

            await databaseAccount.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: CosmosDBDatabaseAccountDelete
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);

            await databaseAccount.DeleteAsync();
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: CosmosDBDatabaseAccountPatch
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);
            CosmosDB.Models.DatabaseAccountUpdateOptions updateParameters = new CosmosDB.Models.DatabaseAccountUpdateOptions()
            {
                Location = "westus",
                Identity = new ResourceIdentity(),
                ConsistencyPolicy = new CosmosDB.Models.ConsistencyPolicy(defaultConsistencyLevel: CosmosDB.Models.DefaultConsistencyLevel.BoundedStaleness)
                {
                    MaxStalenessPrefix = 200,
                    MaxIntervalInSeconds = 10,
                },
                IsVirtualNetworkFilterEnabled = true,
                DefaultIdentity = "FirstPartyIdentity",
                EnableFreeTier = false,
                EnableAnalyticalStorage = true,
                AnalyticalStorageConfiguration = new CosmosDB.Models.AnalyticalStorageConfiguration()
                {
                    SchemaType = new CosmosDB.Models.AnalyticalStorageSchemaType("WellDefined"),
                },
                BackupPolicy = new CosmosDB.Models.PeriodicModeBackupPolicy()
                {
                    PeriodicModeProperties = new CosmosDB.Models.PeriodicModeProperties()
                    {
                        BackupIntervalInMinutes = 240,
                        BackupRetentionIntervalInHours = 720,
                    },
                    Type = new CosmosDB.Models.BackupPolicyType("Periodic"),
                },
                NetworkAclBypass = CosmosDB.Models.NetworkAclBypass.AzureServices,
            };

            await databaseAccount.UpdateAsync(updateParameters);
        }

        [RecordedTest]
        public async Task FailoverPriorityChange()
        {
            // Example: CosmosDBDatabaseAccountFailoverPriorityChange
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1-failover");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);
            CosmosDB.Models.FailoverPolicies failoverParameters = new CosmosDB.Models.FailoverPolicies(failoverPoliciesValue: new List<CosmosDB.Models.FailoverPolicy>()
{
new CosmosDB.Models.FailoverPolicy()
{
LocationName = "eastus", FailoverPriority = 0, },new CosmosDB.Models.FailoverPolicy()
{
LocationName = "westus", FailoverPriority = 1, },});

            await databaseAccount.FailoverPriorityChangeAsync(failoverParameters);
        }

        [RecordedTest]
        public async Task GetKeys()
        {
            // Example: CosmosDBDatabaseAccountListKeys
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);

            await databaseAccount.GetKeysAsync();
        }

        [RecordedTest]
        public async Task GetConnectionStrings()
        {
            // Example: CosmosDBDatabaseAccountListConnectionStrings
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);

            await databaseAccount.GetConnectionStringsAsync();
        }

        [RecordedTest]
        public async Task GetConnectionStrings2()
        {
            // Example: CosmosDBDatabaseAccountListConnectionStringsMongo
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "mongo-ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);

            await databaseAccount.GetConnectionStringsAsync();
        }

        [RecordedTest]
        public async Task OfflineRegion()
        {
            // Example: CosmosDBDatabaseAccountOfflineRegion
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);
            CosmosDB.Models.RegionForOnlineOffline regionParameterForOffline = new CosmosDB.Models.RegionForOnlineOffline(region: default /* don't find example value for this parameter!*/);

            await databaseAccount.OfflineRegionAsync(regionParameterForOffline);
        }

        [RecordedTest]
        public async Task OnlineRegion()
        {
            // Example: CosmosDBDatabaseAccountOnlineRegion
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);
            CosmosDB.Models.RegionForOnlineOffline regionParameterForOnline = new CosmosDB.Models.RegionForOnlineOffline(region: default /* don't find example value for this parameter!*/);

            await databaseAccount.OnlineRegionAsync(regionParameterForOnline);
        }

        [RecordedTest]
        public async Task GetReadOnlyKeys()
        {
            // Example: CosmosDBDatabaseAccountListReadOnlyKeys
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);

            await databaseAccount.GetReadOnlyKeysAsync();
        }

        [RecordedTest]
        public async Task RegenerateKey()
        {
            // Example: CosmosDBDatabaseAccountRegenerateKey
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);
            CosmosDB.Models.DatabaseAccountRegenerateKeyOptions keyToRegenerate = new CosmosDB.Models.DatabaseAccountRegenerateKeyOptions(keyKind: new CosmosDB.Models.KeyKind("primary"));

            await databaseAccount.RegenerateKeyAsync(keyToRegenerate);
        }

        [RecordedTest]
        public async Task GetMetrics()
        {
            // Example: CosmosDBDatabaseAccountGetMetrics
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);
            string filter = "$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z";

            await foreach (var _ in databaseAccount.GetMetricsAsync(filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetUsages()
        {
            // Example: CosmosDBDatabaseAccountGetUsages
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);
            string filter = "$filter=name.value eq 'Storage'";

            await foreach (var _ in databaseAccount.GetUsagesAsync(filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetMetricDefinitions()
        {
            // Example: CosmosDBDatabaseAccountGetMetricDefinitions
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);

            await foreach (var _ in databaseAccount.GetMetricDefinitionsAsync())
            {
            }
        }

        [RecordedTest]
        public async Task GetMetricsDatabases()
        {
            // Example: CosmosDBDatabaseGetMetrics
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);
            string databaseRid = "rid";
            string filter = "$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z";

            await foreach (var _ in databaseAccount.GetMetricsDatabasesAsync(databaseRid, filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetUsagesDatabases()
        {
            // Example: CosmosDBDatabaseGetUsages
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);
            string databaseRid = "databaseRid";
            string filter = "$filter=name.value eq 'Storage'";

            await foreach (var _ in databaseAccount.GetUsagesDatabasesAsync(databaseRid, filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetMetricDefinitionsDatabases()
        {
            // Example: CosmosDBDatabaseGetMetricDefinitions
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);
            string databaseRid = "databaseRid";

            await foreach (var _ in databaseAccount.GetMetricDefinitionsDatabasesAsync(databaseRid))
            {
            }
        }

        [RecordedTest]
        public async Task GetMetricsCollections()
        {
            // Example: CosmosDBCollectionGetMetrics
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);
            string databaseRid = "databaseRid";
            string collectionRid = "collectionRid";
            string filter = "$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z";

            await foreach (var _ in databaseAccount.GetMetricsCollectionsAsync(databaseRid, collectionRid, filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetUsagesCollections()
        {
            // Example: CosmosDBCollectionGetUsages
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);
            string databaseRid = "databaseRid";
            string collectionRid = "collectionRid";
            string filter = "$filter=name.value eq 'Storage'";

            await foreach (var _ in databaseAccount.GetUsagesCollectionsAsync(databaseRid, collectionRid, filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetMetricDefinitionsCollections()
        {
            // Example: CosmosDBCollectionGetMetricDefinitions
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);
            string databaseRid = "databaseRid";
            string collectionRid = "collectionRid";

            await foreach (var _ in databaseAccount.GetMetricDefinitionsCollectionsAsync(databaseRid, collectionRid))
            {
            }
        }

        [RecordedTest]
        public async Task GetMetricsCollectionRegions()
        {
            // Example: CosmosDBRegionCollectionGetMetrics
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);
            string region = "North Europe";
            string databaseRid = "databaseRid";
            string collectionRid = "collectionRid";
            string filter = "$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z";

            await foreach (var _ in databaseAccount.GetMetricsCollectionRegionsAsync(region, databaseRid, collectionRid, filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetMetricsDatabaseAccountRegions()
        {
            // Example: CosmosDBDatabaseAccountRegionGetMetrics
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);
            string region = "North Europe";
            string filter = "$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z";

            await foreach (var _ in databaseAccount.GetMetricsDatabaseAccountRegionsAsync(region, filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetMetricsPercentileSourceTargets()
        {
            // Example: CosmosDBDatabaseAccountRegionGetMetrics
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);
            string sourceRegion = "West Central US";
            string targetRegion = "East US";
            string filter = "$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z";

            await foreach (var _ in databaseAccount.GetMetricsPercentileSourceTargetsAsync(sourceRegion, targetRegion, filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetMetricsPercentileTargets()
        {
            // Example: CosmosDBDatabaseAccountRegionGetMetrics
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);
            string targetRegion = "East US";
            string filter = "$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z";

            await foreach (var _ in databaseAccount.GetMetricsPercentileTargetsAsync(targetRegion, filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetMetricsPercentiles()
        {
            // Example: CosmosDBDatabaseAccountRegionGetMetrics
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);
            string filter = "$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z";

            await foreach (var _ in databaseAccount.GetMetricsPercentilesAsync(filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetMetricsCollectionPartitionRegions()
        {
            // Example: CosmosDBDatabaseAccountRegionGetMetrics
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);
            string region = "North Europe";
            string databaseRid = "databaseRid";
            string collectionRid = "collectionRid";
            string filter = "$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z";

            await foreach (var _ in databaseAccount.GetMetricsCollectionPartitionRegionsAsync(region, databaseRid, collectionRid, filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetMetricsCollectionPartitions()
        {
            // Example: CosmosDBDatabaseAccountRegionGetMetrics
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);
            string databaseRid = "databaseRid";
            string collectionRid = "collectionRid";
            string filter = "$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z";

            await foreach (var _ in databaseAccount.GetMetricsCollectionPartitionsAsync(databaseRid, collectionRid, filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetUsagesCollectionPartitions()
        {
            // Example: CosmosDBCollectionGetUsages
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);
            string databaseRid = "databaseRid";
            string collectionRid = "collectionRid";
            string filter = "$filter=name.value eq 'Partition Storage'";

            await foreach (var _ in databaseAccount.GetUsagesCollectionPartitionsAsync(databaseRid, collectionRid, filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetMetricsPartitionKeyRangeIds()
        {
            // Example: CosmosDBDatabaseAccountRegionGetMetrics
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);
            string databaseRid = "databaseRid";
            string collectionRid = "collectionRid";
            string partitionKeyRangeId = "0";
            string filter = "$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z";

            await foreach (var _ in databaseAccount.GetMetricsPartitionKeyRangeIdsAsync(databaseRid, collectionRid, partitionKeyRangeId, filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetMetricsPartitionKeyRangeIdRegions()
        {
            // Example: CosmosDBDatabaseAccountRegionGetMetrics
            var databaseAccountId = CosmosDB.DatabaseAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "ddb1");
            var databaseAccount = GetArmClient().GetDatabaseAccount(databaseAccountId);
            string region = "West US";
            string databaseRid = "databaseRid";
            string collectionRid = "collectionRid";
            string partitionKeyRangeId = "0";
            string filter = "$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z";

            await foreach (var _ in databaseAccount.GetMetricsPartitionKeyRangeIdRegionsAsync(region, databaseRid, collectionRid, partitionKeyRangeId, filter))
            {
            }
        }
    }
}
