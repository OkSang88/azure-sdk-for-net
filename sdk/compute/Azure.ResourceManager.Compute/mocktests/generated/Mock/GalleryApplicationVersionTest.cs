// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for GalleryApplicationVersion. </summary>
    public partial class GalleryApplicationVersionMockTests : MockTestBase
    {
        public GalleryApplicationVersionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get a gallery Application Version with replication status.
            var galleryApplicationVersion = GetArmClient().GetGalleryApplicationVersion(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName/applications/myGalleryApplicationName/versions/1.0.0"));
            Compute.Models.ReplicationStatusTypes? expand = new Compute.Models.ReplicationStatusTypes("ReplicationStatus");

            await galleryApplicationVersion.GetAsync(expand);
        }

        [RecordedTest]
        public async Task GetAsync2()
        {
            // Example: Get a gallery Application Version.
            var galleryApplicationVersion = GetArmClient().GetGalleryApplicationVersion(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName/applications/myGalleryApplicationName/versions/1.0.0"));
            Compute.Models.ReplicationStatusTypes? expand = null;

            await galleryApplicationVersion.GetAsync(expand);
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: Delete a gallery Application Version.
            var galleryApplicationVersion = GetArmClient().GetGalleryApplicationVersion(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName/applications/myGalleryApplicationName/versions/1.0.0"));

            await galleryApplicationVersion.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: Update a simple gallery Application Version.
            var galleryApplicationVersion = GetArmClient().GetGalleryApplicationVersion(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName/applications/myGalleryApplicationName/versions/1.0.0"));
            Compute.Models.GalleryApplicationVersionUpdate galleryApplicationVersion2 = new Compute.Models.GalleryApplicationVersionUpdate()
            {
                PublishingProfile = new Compute.Models.GalleryApplicationVersionPublishingProfile(source: new Compute.Models.UserArtifactSource(mediaLink: "https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"))
                {
                    ManageActions = new Compute.Models.UserArtifactManage(install: "powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\"", remove: "del C:\\package "),
                    ReplicaCount = 1,
                    EndOfLifeDate = DateTimeOffset.Parse("2019-07-01T07:00:00Z"),
                    StorageAccountType = new Compute.Models.StorageAccountType("Standard_LRS"),
                },
            };

            await galleryApplicationVersion.UpdateAsync(galleryApplicationVersion2);
        }
    }
}
