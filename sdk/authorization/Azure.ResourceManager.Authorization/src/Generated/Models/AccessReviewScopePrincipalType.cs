// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Authorization.Models
{
    /// <summary> The identity type user/servicePrincipal to review. </summary>
    internal readonly partial struct AccessReviewScopePrincipalType : IEquatable<AccessReviewScopePrincipalType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AccessReviewScopePrincipalType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AccessReviewScopePrincipalType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UserValue = "user";
        private const string GuestUserValue = "guestUser";
        private const string ServicePrincipalValue = "servicePrincipal";
        private const string UserGroupValue = "user,group";
        private const string RedeemedGuestUserValue = "redeemedGuestUser";

        /// <summary> user. </summary>
        public static AccessReviewScopePrincipalType User { get; } = new AccessReviewScopePrincipalType(UserValue);
        /// <summary> guestUser. </summary>
        public static AccessReviewScopePrincipalType GuestUser { get; } = new AccessReviewScopePrincipalType(GuestUserValue);
        /// <summary> servicePrincipal. </summary>
        public static AccessReviewScopePrincipalType ServicePrincipal { get; } = new AccessReviewScopePrincipalType(ServicePrincipalValue);
        /// <summary> user,group. </summary>
        public static AccessReviewScopePrincipalType UserGroup { get; } = new AccessReviewScopePrincipalType(UserGroupValue);
        /// <summary> redeemedGuestUser. </summary>
        public static AccessReviewScopePrincipalType RedeemedGuestUser { get; } = new AccessReviewScopePrincipalType(RedeemedGuestUserValue);
        /// <summary> Determines if two <see cref="AccessReviewScopePrincipalType"/> values are the same. </summary>
        public static bool operator ==(AccessReviewScopePrincipalType left, AccessReviewScopePrincipalType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AccessReviewScopePrincipalType"/> values are not the same. </summary>
        public static bool operator !=(AccessReviewScopePrincipalType left, AccessReviewScopePrincipalType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AccessReviewScopePrincipalType"/>. </summary>
        public static implicit operator AccessReviewScopePrincipalType(string value) => new AccessReviewScopePrincipalType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AccessReviewScopePrincipalType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AccessReviewScopePrincipalType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
