// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Storage;
using Azure.ResourceManager.Storage.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Storage.Tests.Mock
{
    /// <summary> Test for BlobContainer. </summary>
    public partial class BlobContainerMockTests : MockTestBase
    {
        public BlobContainerMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: GetContainers
            var blobContainerId = Storage.BlobContainer.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res9871", "sto6217", "container1634");
            var blobContainer = GetArmClient().GetBlobContainer(blobContainerId);

            await blobContainer.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: DeleteContainers
            var blobContainerId = Storage.BlobContainer.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res4079", "sto4506", "container9689");
            var blobContainer = GetArmClient().GetBlobContainer(blobContainerId);

            await blobContainer.DeleteAsync();
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: UpdateContainers
            var blobContainerId = Storage.BlobContainer.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res3376", "sto328", "container6185");
            var blobContainer = GetArmClient().GetBlobContainer(blobContainerId);
            Storage.BlobContainerData blobContainer2 = new Storage.BlobContainerData()
            {
                PublicAccess = Storage.Models.PublicAccess.Container,
            };

            await blobContainer.UpdateAsync(blobContainer2);
        }

        [RecordedTest]
        public async Task SetLegalHold()
        {
            // Example: SetLegalHoldContainers
            var blobContainerId = Storage.BlobContainer.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res4303", "sto7280", "container8723");
            var blobContainer = GetArmClient().GetBlobContainer(blobContainerId);
            Storage.Models.LegalHold legalHold = new Storage.Models.LegalHold(tags: new List<string>()
{
"tag1","tag2","tag3",});

            await blobContainer.SetLegalHoldAsync(legalHold);
        }

        [RecordedTest]
        public async Task ClearLegalHold()
        {
            // Example: ClearLegalHoldContainers
            var blobContainerId = Storage.BlobContainer.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res4303", "sto7280", "container8723");
            var blobContainer = GetArmClient().GetBlobContainer(blobContainerId);
            Storage.Models.LegalHold legalHold = new Storage.Models.LegalHold(tags: new List<string>()
{
"tag1","tag2","tag3",});

            await blobContainer.ClearLegalHoldAsync(legalHold);
        }

        [RecordedTest]
        public async Task Lease()
        {
            // Example: Acquire a lease on a container
            var blobContainerId = Storage.BlobContainer.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res3376", "sto328", "container6185");
            var blobContainer = GetArmClient().GetBlobContainer(blobContainerId);
            Storage.Models.LeaseContainerRequest parameters = new Storage.Models.LeaseContainerRequest(action: new Storage.Models.LeaseContainerRequestAction("Acquire"))
            {
                LeaseId = null,
                BreakPeriod = null,
                LeaseDuration = -1,
                ProposedLeaseId = null,
            };

            await blobContainer.LeaseAsync(parameters);
        }

        [RecordedTest]
        public async Task Lease2()
        {
            // Example: Break a lease on a container
            var blobContainerId = Storage.BlobContainer.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res3376", "sto328", "container6185");
            var blobContainer = GetArmClient().GetBlobContainer(blobContainerId);
            Storage.Models.LeaseContainerRequest parameters = new Storage.Models.LeaseContainerRequest(action: new Storage.Models.LeaseContainerRequestAction("Break"))
            {
                LeaseId = "8698f513-fa75-44a1-b8eb-30ba336af27d",
                BreakPeriod = null,
                LeaseDuration = null,
                ProposedLeaseId = null,
            };

            await blobContainer.LeaseAsync(parameters);
        }

        [RecordedTest]
        public async Task ObjectLevelWorm()
        {
            // Example: VersionLevelWormContainerMigration
            var blobContainerId = Storage.BlobContainer.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res1782", "sto7069", "container6397");
            var blobContainer = GetArmClient().GetBlobContainer(blobContainerId);

            await blobContainer.ObjectLevelWormAsync();
        }

        [RecordedTest]
        public async Task ImmutabilityPolicyGet()
        {
            // Example: GetImmutabilityPolicy
            var immutabilityPolicyId = Storage.ImmutabilityPolicy.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res5221", "sto9177", "container3489");
            var immutabilityPolicy = GetArmClient().GetImmutabilityPolicy(immutabilityPolicyId);
            string ifMatch = null;

            await immutabilityPolicy.GetAsync(ifMatch);
        }

        [RecordedTest]
        public async Task ImmutabilityPolicyDelete()
        {
            // Example: DeleteImmutabilityPolicy
            var immutabilityPolicyId = Storage.ImmutabilityPolicy.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res1581", "sto9621", "container4910");
            var immutabilityPolicy = GetArmClient().GetImmutabilityPolicy(immutabilityPolicyId);
            string ifMatch = "\"8d59f81a7fa7be0\"";

            await immutabilityPolicy.DeleteAsync(ifMatch);
        }

        [RecordedTest]
        public async Task ImmutabilityPolicyLockImmutabilityPolicy()
        {
            // Example: LockImmutabilityPolicy
            var immutabilityPolicyId = Storage.ImmutabilityPolicy.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res2702", "sto5009", "container1631");
            var immutabilityPolicy = GetArmClient().GetImmutabilityPolicy(immutabilityPolicyId);
            string ifMatch = "\"8d59f825b721dd3\"";

            await immutabilityPolicy.LockImmutabilityPolicyAsync(ifMatch);
        }

        [RecordedTest]
        public async Task ImmutabilityPolicyExtendImmutabilityPolicy()
        {
            // Example: ExtendImmutabilityPolicy
            var immutabilityPolicyId = Storage.ImmutabilityPolicy.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res6238", "sto232", "container5023");
            var immutabilityPolicy = GetArmClient().GetImmutabilityPolicy(immutabilityPolicyId);
            string ifMatch = "\"8d59f830d0c3bf9\"";
            Storage.ImmutabilityPolicyData parameters = new Storage.ImmutabilityPolicyData()
            {
                ImmutabilityPeriodSinceCreationInDays = 100,
            };

            await immutabilityPolicy.ExtendImmutabilityPolicyAsync(ifMatch, parameters);
        }
    }
}
