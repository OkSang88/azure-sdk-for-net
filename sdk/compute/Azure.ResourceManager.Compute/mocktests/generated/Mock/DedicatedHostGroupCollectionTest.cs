// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for DedicatedHostGroup. </summary>
    public partial class DedicatedHostGroupCollectionMockTests : MockTestBase
    {
        public DedicatedHostGroupCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create or update a dedicated host group.
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetDedicatedHostGroups();
            string hostGroupName = "myDedicatedHostGroup";
            Compute.DedicatedHostGroupData parameters = new Compute.DedicatedHostGroupData(location: "westus")
            {
                PlatformFaultDomainCount = 3,
                SupportAutomaticPlacement = true,
            };
            parameters.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>() { ["department"] = "finance", });
            await collection.CreateOrUpdateAsync(hostGroupName, parameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Create a dedicated host group.
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetDedicatedHostGroups();
            string hostGroupName = "myDedicatedHostGroup";
            Compute.Models.InstanceViewTypes? expand = null;

            await collection.GetAsync(hostGroupName, expand);
        }
    }
}
