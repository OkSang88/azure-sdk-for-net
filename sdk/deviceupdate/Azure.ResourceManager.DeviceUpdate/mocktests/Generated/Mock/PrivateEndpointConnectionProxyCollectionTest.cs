// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.DeviceUpdate;
using Azure.ResourceManager.DeviceUpdate.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.DeviceUpdate.Tests.Mock
{
    /// <summary> Test for PrivateEndpointConnectionProxy. </summary>
    public partial class PrivateEndpointConnectionProxyCollectionMockTests : MockTestBase
    {
        public PrivateEndpointConnectionProxyCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: PrivateEndpointConnectionProxyCreateOrUpdate
            var collection = GetArmClient().GetDeviceUpdateAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DeviceUpdate/accounts/contoso")).GetPrivateEndpointConnectionProxies();
            string privateEndpointConnectionProxyId = "peexample01";
            DeviceUpdate.PrivateEndpointConnectionProxyData privateEndpointConnectionProxy = new DeviceUpdate.PrivateEndpointConnectionProxyData()
            {
                RemotePrivateEndpoint = new DeviceUpdate.Models.RemotePrivateEndpoint()
                {
                    Id = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Network/privateEndpoints/{privateEndpointConnectionProxyId}",
                },
            };

            await collection.CreateOrUpdateAsync(privateEndpointConnectionProxyId, privateEndpointConnectionProxy);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: PrivateEndpointConnectionProxyGet
            var collection = GetArmClient().GetDeviceUpdateAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DeviceUpdate/accounts/contoso")).GetPrivateEndpointConnectionProxies();
            string privateEndpointConnectionProxyId = "peexample01";

            await collection.GetAsync(privateEndpointConnectionProxyId);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: PrivateEndpointConnectionProxyList
            var collection = GetArmClient().GetDeviceUpdateAccount(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DeviceUpdate/accounts/contoso")).GetPrivateEndpointConnectionProxies();

            collection.GetAllAsync();
        }
    }
}
