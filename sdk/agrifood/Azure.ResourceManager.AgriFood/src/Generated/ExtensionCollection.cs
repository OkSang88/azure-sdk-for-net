// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.AgriFood.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.AgriFood
{
    /// <summary> A class representing collection of Extension and their operations over its parent. </summary>
    public partial class ExtensionCollection : ArmCollection, IEnumerable<Extension>, IAsyncEnumerable<Extension>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly ExtensionsRestOperations _extensionsRestClient;

        /// <summary> Initializes a new instance of the <see cref="ExtensionCollection"/> class for mocking. </summary>
        protected ExtensionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ExtensionCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal ExtensionCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            ClientOptions.TryGetApiVersion(Extension.ResourceType, out string apiVersion);
            _extensionsRestClient = new ExtensionsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri, apiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != FarmBeats.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, FarmBeats.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Install extension. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="extensionId"> Id of extension resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionId"/> is null. </exception>
        public virtual ExtensionCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string extensionId, CancellationToken cancellationToken = default)
        {
            if (extensionId == null)
            {
                throw new ArgumentNullException(nameof(extensionId));
            }

            using var scope = _clientDiagnostics.CreateScope("ExtensionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _extensionsRestClient.Create(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, extensionId, cancellationToken);
                var operation = new ExtensionCreateOrUpdateOperation(this, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Install extension. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="extensionId"> Id of extension resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionId"/> is null. </exception>
        public async virtual Task<ExtensionCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string extensionId, CancellationToken cancellationToken = default)
        {
            if (extensionId == null)
            {
                throw new ArgumentNullException(nameof(extensionId));
            }

            using var scope = _clientDiagnostics.CreateScope("ExtensionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _extensionsRestClient.CreateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, extensionId, cancellationToken).ConfigureAwait(false);
                var operation = new ExtensionCreateOrUpdateOperation(this, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get installed extension details by extension id. </summary>
        /// <param name="extensionId"> Id of extension resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionId"/> is null. </exception>
        public virtual Response<Extension> Get(string extensionId, CancellationToken cancellationToken = default)
        {
            if (extensionId == null)
            {
                throw new ArgumentNullException(nameof(extensionId));
            }

            using var scope = _clientDiagnostics.CreateScope("ExtensionCollection.Get");
            scope.Start();
            try
            {
                var response = _extensionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, extensionId, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new Extension(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get installed extension details by extension id. </summary>
        /// <param name="extensionId"> Id of extension resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionId"/> is null. </exception>
        public async virtual Task<Response<Extension>> GetAsync(string extensionId, CancellationToken cancellationToken = default)
        {
            if (extensionId == null)
            {
                throw new ArgumentNullException(nameof(extensionId));
            }

            using var scope = _clientDiagnostics.CreateScope("ExtensionCollection.Get");
            scope.Start();
            try
            {
                var response = await _extensionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, extensionId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new Extension(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="extensionId"> Id of extension resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionId"/> is null. </exception>
        public virtual Response<Extension> GetIfExists(string extensionId, CancellationToken cancellationToken = default)
        {
            if (extensionId == null)
            {
                throw new ArgumentNullException(nameof(extensionId));
            }

            using var scope = _clientDiagnostics.CreateScope("ExtensionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _extensionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, extensionId, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<Extension>(null, response.GetRawResponse());
                return Response.FromValue(new Extension(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="extensionId"> Id of extension resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionId"/> is null. </exception>
        public async virtual Task<Response<Extension>> GetIfExistsAsync(string extensionId, CancellationToken cancellationToken = default)
        {
            if (extensionId == null)
            {
                throw new ArgumentNullException(nameof(extensionId));
            }

            using var scope = _clientDiagnostics.CreateScope("ExtensionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _extensionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, extensionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<Extension>(null, response.GetRawResponse());
                return Response.FromValue(new Extension(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="extensionId"> Id of extension resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionId"/> is null. </exception>
        public virtual Response<bool> Exists(string extensionId, CancellationToken cancellationToken = default)
        {
            if (extensionId == null)
            {
                throw new ArgumentNullException(nameof(extensionId));
            }

            using var scope = _clientDiagnostics.CreateScope("ExtensionCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(extensionId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="extensionId"> Id of extension resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionId"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string extensionId, CancellationToken cancellationToken = default)
        {
            if (extensionId == null)
            {
                throw new ArgumentNullException(nameof(extensionId));
            }

            using var scope = _clientDiagnostics.CreateScope("ExtensionCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(extensionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get installed extensions details. </summary>
        /// <param name="extensionIds"> Installed extension ids. </param>
        /// <param name="extensionCategories"> Installed extension categories. </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Extension" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Extension> GetAll(IEnumerable<string> extensionIds = null, IEnumerable<string> extensionCategories = null, int? maxPageSize = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            Page<Extension> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ExtensionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _extensionsRestClient.ListByFarmBeats(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, extensionIds, extensionCategories, pageSizeHint, skipToken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new Extension(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Extension> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ExtensionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _extensionsRestClient.ListByFarmBeatsNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, extensionIds, extensionCategories, pageSizeHint, skipToken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new Extension(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get installed extensions details. </summary>
        /// <param name="extensionIds"> Installed extension ids. </param>
        /// <param name="extensionCategories"> Installed extension categories. </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Extension" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Extension> GetAllAsync(IEnumerable<string> extensionIds = null, IEnumerable<string> extensionCategories = null, int? maxPageSize = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<Extension>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ExtensionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _extensionsRestClient.ListByFarmBeatsAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, extensionIds, extensionCategories, pageSizeHint, skipToken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new Extension(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Extension>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ExtensionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _extensionsRestClient.ListByFarmBeatsNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, extensionIds, extensionCategories, pageSizeHint, skipToken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new Extension(this, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<Extension> IEnumerable<Extension>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<Extension> IAsyncEnumerable<Extension>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, Extension, ExtensionData> Construct() { }
    }
}
