// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using StorSimple8000SeriesManagementClient.Models;

namespace StorSimple8000SeriesManagementClient
{
    internal partial class DevicesRestOperations
    {
        private Uri endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;
        private readonly string _userAgent;

        /// <summary> Initializes a new instance of DevicesRestOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="options"> The client options used to construct the current client. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public DevicesRestOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, ClientOptions options, Uri endpoint = null, string apiVersion = "2017-06-01")
        {
            this.endpoint = endpoint ?? new Uri("https://management.azure.com");
            this.apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _userAgent = HttpMessageUtilities.GetUserAgentName(this, options);
        }

        internal HttpMessage CreateConfigureRequest(string subscriptionId, string resourceGroupName, string managerName, ConfigureDeviceRequest parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, false);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, false);
            uri.AppendPath("/providers/Microsoft.StorSimple/managers/", false);
            uri.AppendPath(managerName, false);
            uri.AppendPath("/configureDevice", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Complete minimal setup before using the device. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="parameters"> The minimal properties to configure a device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, or <paramref name="parameters"/> is null. </exception>
        public async Task<Response> ConfigureAsync(string subscriptionId, string resourceGroupName, string managerName, ConfigureDeviceRequest parameters, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateConfigureRequest(subscriptionId, resourceGroupName, managerName, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Complete minimal setup before using the device. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="parameters"> The minimal properties to configure a device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, or <paramref name="parameters"/> is null. </exception>
        public Response Configure(string subscriptionId, string resourceGroupName, string managerName, ConfigureDeviceRequest parameters, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateConfigureRequest(subscriptionId, resourceGroupName, managerName, parameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListByManagerRequest(string subscriptionId, string resourceGroupName, string managerName, string expand)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, false);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, false);
            uri.AppendPath("/providers/Microsoft.StorSimple/managers/", false);
            uri.AppendPath(managerName, false);
            uri.AppendPath("/devices", false);
            uri.AppendQuery("api-version", apiVersion, true);
            if (expand != null)
            {
                uri.AppendQuery("$expand", expand, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Returns the list of devices for the specified manager. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="expand"> Specify $expand=details to populate additional fields related to the device or $expand=rolloverdetails to populate additional fields related to the service data encryption key rollover on device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, or <paramref name="managerName"/> is null. </exception>
        public async Task<Response<DeviceList>> ListByManagerAsync(string subscriptionId, string resourceGroupName, string managerName, string expand = null, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }

            using var message = CreateListByManagerRequest(subscriptionId, resourceGroupName, managerName, expand);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceList.DeserializeDeviceList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns the list of devices for the specified manager. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="expand"> Specify $expand=details to populate additional fields related to the device or $expand=rolloverdetails to populate additional fields related to the service data encryption key rollover on device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, or <paramref name="managerName"/> is null. </exception>
        public Response<DeviceList> ListByManager(string subscriptionId, string resourceGroupName, string managerName, string expand = null, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }

            using var message = CreateListByManagerRequest(subscriptionId, resourceGroupName, managerName, expand);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceList.DeserializeDeviceList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string managerName, string deviceName, string expand)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, false);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, false);
            uri.AppendPath("/providers/Microsoft.StorSimple/managers/", false);
            uri.AppendPath(managerName, false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceName, false);
            uri.AppendQuery("api-version", apiVersion, true);
            if (expand != null)
            {
                uri.AppendQuery("$expand", expand, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Returns the properties of the specified device. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="expand"> Specify $expand=details to populate additional fields related to the device or $expand=rolloverdetails to populate additional fields related to the service data encryption key rollover on device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, or <paramref name="deviceName"/> is null. </exception>
        public async Task<Response<DeviceData>> GetAsync(string subscriptionId, string resourceGroupName, string managerName, string deviceName, string expand = null, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, managerName, deviceName, expand);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceData.DeserializeDeviceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((DeviceData)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns the properties of the specified device. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="expand"> Specify $expand=details to populate additional fields related to the device or $expand=rolloverdetails to populate additional fields related to the service data encryption key rollover on device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, or <paramref name="deviceName"/> is null. </exception>
        public Response<DeviceData> Get(string subscriptionId, string resourceGroupName, string managerName, string deviceName, string expand = null, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, managerName, deviceName, expand);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceData.DeserializeDeviceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((DeviceData)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRequest(string subscriptionId, string resourceGroupName, string managerName, string deviceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, false);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, false);
            uri.AppendPath("/providers/Microsoft.StorSimple/managers/", false);
            uri.AppendPath(managerName, false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceName, false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Deletes the device. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, or <paramref name="deviceName"/> is null. </exception>
        public async Task<Response> DeleteAsync(string subscriptionId, string resourceGroupName, string managerName, string deviceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, managerName, deviceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes the device. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, or <paramref name="deviceName"/> is null. </exception>
        public Response Delete(string subscriptionId, string resourceGroupName, string managerName, string deviceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, managerName, deviceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRequest(string subscriptionId, string resourceGroupName, string managerName, string deviceName, DevicePatch parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, false);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, false);
            uri.AppendPath("/providers/Microsoft.StorSimple/managers/", false);
            uri.AppendPath(managerName, false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceName, false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Patches the device. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="parameters"> Patch representation of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, <paramref name="deviceName"/>, or <paramref name="parameters"/> is null. </exception>
        public async Task<Response<DeviceData>> UpdateAsync(string subscriptionId, string resourceGroupName, string managerName, string deviceName, DevicePatch parameters, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, managerName, deviceName, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeviceData.DeserializeDeviceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Patches the device. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="parameters"> Patch representation of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, <paramref name="deviceName"/>, or <paramref name="parameters"/> is null. </exception>
        public Response<DeviceData> Update(string subscriptionId, string resourceGroupName, string managerName, string deviceName, DevicePatch parameters, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, managerName, deviceName, parameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeviceData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeviceData.DeserializeDeviceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAuthorizeForServiceEncryptionKeyRolloverRequest(string subscriptionId, string resourceGroupName, string managerName, string deviceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, false);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, false);
            uri.AppendPath("/providers/Microsoft.StorSimple/managers/", false);
            uri.AppendPath(managerName, false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceName, false);
            uri.AppendPath("/authorizeForServiceEncryptionKeyRollover", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Authorizes the specified device for service data encryption key rollover. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, or <paramref name="deviceName"/> is null. </exception>
        public async Task<Response> AuthorizeForServiceEncryptionKeyRolloverAsync(string subscriptionId, string resourceGroupName, string managerName, string deviceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }

            using var message = CreateAuthorizeForServiceEncryptionKeyRolloverRequest(subscriptionId, resourceGroupName, managerName, deviceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Authorizes the specified device for service data encryption key rollover. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, or <paramref name="deviceName"/> is null. </exception>
        public Response AuthorizeForServiceEncryptionKeyRollover(string subscriptionId, string resourceGroupName, string managerName, string deviceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }

            using var message = CreateAuthorizeForServiceEncryptionKeyRolloverRequest(subscriptionId, resourceGroupName, managerName, deviceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeactivateRequest(string subscriptionId, string resourceGroupName, string managerName, string deviceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, false);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, false);
            uri.AppendPath("/providers/Microsoft.StorSimple/managers/", false);
            uri.AppendPath(managerName, false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceName, false);
            uri.AppendPath("/deactivate", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Deactivates the device. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, or <paramref name="deviceName"/> is null. </exception>
        public async Task<Response> DeactivateAsync(string subscriptionId, string resourceGroupName, string managerName, string deviceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }

            using var message = CreateDeactivateRequest(subscriptionId, resourceGroupName, managerName, deviceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deactivates the device. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, or <paramref name="deviceName"/> is null. </exception>
        public Response Deactivate(string subscriptionId, string resourceGroupName, string managerName, string deviceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }

            using var message = CreateDeactivateRequest(subscriptionId, resourceGroupName, managerName, deviceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateInstallUpdatesRequest(string subscriptionId, string resourceGroupName, string managerName, string deviceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, false);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, false);
            uri.AppendPath("/providers/Microsoft.StorSimple/managers/", false);
            uri.AppendPath(managerName, false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceName, false);
            uri.AppendPath("/installUpdates", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Downloads and installs the updates on the device. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, or <paramref name="deviceName"/> is null. </exception>
        public async Task<Response> InstallUpdatesAsync(string subscriptionId, string resourceGroupName, string managerName, string deviceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }

            using var message = CreateInstallUpdatesRequest(subscriptionId, resourceGroupName, managerName, deviceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Downloads and installs the updates on the device. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, or <paramref name="deviceName"/> is null. </exception>
        public Response InstallUpdates(string subscriptionId, string resourceGroupName, string managerName, string deviceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }

            using var message = CreateInstallUpdatesRequest(subscriptionId, resourceGroupName, managerName, deviceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListFailoverSetsRequest(string subscriptionId, string resourceGroupName, string managerName, string deviceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, false);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, false);
            uri.AppendPath("/providers/Microsoft.StorSimple/managers/", false);
            uri.AppendPath(managerName, false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceName, false);
            uri.AppendPath("/listFailoverSets", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Returns all failover sets for a given device and their eligibility for participating in a failover. A failover set refers to a set of volume containers that need to be failed-over as a single unit to maintain data integrity. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, or <paramref name="deviceName"/> is null. </exception>
        public async Task<Response<FailoverSetsList>> ListFailoverSetsAsync(string subscriptionId, string resourceGroupName, string managerName, string deviceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }

            using var message = CreateListFailoverSetsRequest(subscriptionId, resourceGroupName, managerName, deviceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        FailoverSetsList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = FailoverSetsList.DeserializeFailoverSetsList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns all failover sets for a given device and their eligibility for participating in a failover. A failover set refers to a set of volume containers that need to be failed-over as a single unit to maintain data integrity. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, or <paramref name="deviceName"/> is null. </exception>
        public Response<FailoverSetsList> ListFailoverSets(string subscriptionId, string resourceGroupName, string managerName, string deviceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }

            using var message = CreateListFailoverSetsRequest(subscriptionId, resourceGroupName, managerName, deviceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        FailoverSetsList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = FailoverSetsList.DeserializeFailoverSetsList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListMetricsRequest(string subscriptionId, string resourceGroupName, string managerName, string deviceName, string filter)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, false);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, false);
            uri.AppendPath("/providers/Microsoft.StorSimple/managers/", false);
            uri.AppendPath(managerName, false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceName, false);
            uri.AppendPath("/metrics", false);
            uri.AppendQuery("api-version", apiVersion, true);
            uri.AppendQuery("$filter", filter, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Gets the metrics for the specified device. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="filter"> OData Filter options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, <paramref name="deviceName"/>, or <paramref name="filter"/> is null. </exception>
        public async Task<Response<MetricList>> ListMetricsAsync(string subscriptionId, string resourceGroupName, string managerName, string deviceName, string filter, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }
            if (filter == null)
            {
                throw new ArgumentNullException(nameof(filter));
            }

            using var message = CreateListMetricsRequest(subscriptionId, resourceGroupName, managerName, deviceName, filter);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetricList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = MetricList.DeserializeMetricList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the metrics for the specified device. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="filter"> OData Filter options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, <paramref name="deviceName"/>, or <paramref name="filter"/> is null. </exception>
        public Response<MetricList> ListMetrics(string subscriptionId, string resourceGroupName, string managerName, string deviceName, string filter, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }
            if (filter == null)
            {
                throw new ArgumentNullException(nameof(filter));
            }

            using var message = CreateListMetricsRequest(subscriptionId, resourceGroupName, managerName, deviceName, filter);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetricList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = MetricList.DeserializeMetricList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListMetricDefinitionRequest(string subscriptionId, string resourceGroupName, string managerName, string deviceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, false);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, false);
            uri.AppendPath("/providers/Microsoft.StorSimple/managers/", false);
            uri.AppendPath(managerName, false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceName, false);
            uri.AppendPath("/metricsDefinitions", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Gets the metric definitions for the specified device. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, or <paramref name="deviceName"/> is null. </exception>
        public async Task<Response<MetricDefinitionList>> ListMetricDefinitionAsync(string subscriptionId, string resourceGroupName, string managerName, string deviceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }

            using var message = CreateListMetricDefinitionRequest(subscriptionId, resourceGroupName, managerName, deviceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetricDefinitionList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = MetricDefinitionList.DeserializeMetricDefinitionList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the metric definitions for the specified device. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, or <paramref name="deviceName"/> is null. </exception>
        public Response<MetricDefinitionList> ListMetricDefinition(string subscriptionId, string resourceGroupName, string managerName, string deviceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }

            using var message = CreateListMetricDefinitionRequest(subscriptionId, resourceGroupName, managerName, deviceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetricDefinitionList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = MetricDefinitionList.DeserializeMetricDefinitionList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateScanForUpdatesRequest(string subscriptionId, string resourceGroupName, string managerName, string deviceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, false);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, false);
            uri.AppendPath("/providers/Microsoft.StorSimple/managers/", false);
            uri.AppendPath(managerName, false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceName, false);
            uri.AppendPath("/scanForUpdates", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Scans for updates on the device. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, or <paramref name="deviceName"/> is null. </exception>
        public async Task<Response> ScanForUpdatesAsync(string subscriptionId, string resourceGroupName, string managerName, string deviceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }

            using var message = CreateScanForUpdatesRequest(subscriptionId, resourceGroupName, managerName, deviceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Scans for updates on the device. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, or <paramref name="deviceName"/> is null. </exception>
        public Response ScanForUpdates(string subscriptionId, string resourceGroupName, string managerName, string deviceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }

            using var message = CreateScanForUpdatesRequest(subscriptionId, resourceGroupName, managerName, deviceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetUpdateSummaryRequest(string subscriptionId, string resourceGroupName, string managerName, string deviceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, false);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, false);
            uri.AppendPath("/providers/Microsoft.StorSimple/managers/", false);
            uri.AppendPath(managerName, false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(deviceName, false);
            uri.AppendPath("/updateSummary/default", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Returns the update summary of the specified device name. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, or <paramref name="deviceName"/> is null. </exception>
        public async Task<Response<UpdatesData>> GetUpdateSummaryAsync(string subscriptionId, string resourceGroupName, string managerName, string deviceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }

            using var message = CreateGetUpdateSummaryRequest(subscriptionId, resourceGroupName, managerName, deviceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        UpdatesData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = UpdatesData.DeserializeUpdatesData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((UpdatesData)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns the update summary of the specified device name. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="deviceName"> The device name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, or <paramref name="deviceName"/> is null. </exception>
        public Response<UpdatesData> GetUpdateSummary(string subscriptionId, string resourceGroupName, string managerName, string deviceName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (deviceName == null)
            {
                throw new ArgumentNullException(nameof(deviceName));
            }

            using var message = CreateGetUpdateSummaryRequest(subscriptionId, resourceGroupName, managerName, deviceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        UpdatesData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = UpdatesData.DeserializeUpdatesData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((UpdatesData)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateFailoverRequest(string subscriptionId, string resourceGroupName, string managerName, string sourceDeviceName, FailoverRequest parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, false);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, false);
            uri.AppendPath("/providers/Microsoft.StorSimple/managers/", false);
            uri.AppendPath(managerName, false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(sourceDeviceName, false);
            uri.AppendPath("/failover", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Failovers a set of volume containers from a specified source device to a target device. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="sourceDeviceName"> The source device name on which failover is performed. </param>
        /// <param name="parameters"> FailoverRequest containing the source device and the list of volume containers to be failed over. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, <paramref name="sourceDeviceName"/>, or <paramref name="parameters"/> is null. </exception>
        public async Task<Response> FailoverAsync(string subscriptionId, string resourceGroupName, string managerName, string sourceDeviceName, FailoverRequest parameters, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (sourceDeviceName == null)
            {
                throw new ArgumentNullException(nameof(sourceDeviceName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateFailoverRequest(subscriptionId, resourceGroupName, managerName, sourceDeviceName, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Failovers a set of volume containers from a specified source device to a target device. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="sourceDeviceName"> The source device name on which failover is performed. </param>
        /// <param name="parameters"> FailoverRequest containing the source device and the list of volume containers to be failed over. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, <paramref name="sourceDeviceName"/>, or <paramref name="parameters"/> is null. </exception>
        public Response Failover(string subscriptionId, string resourceGroupName, string managerName, string sourceDeviceName, FailoverRequest parameters, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (sourceDeviceName == null)
            {
                throw new ArgumentNullException(nameof(sourceDeviceName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateFailoverRequest(subscriptionId, resourceGroupName, managerName, sourceDeviceName, parameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListFailoverTargetsRequest(string subscriptionId, string resourceGroupName, string managerName, string sourceDeviceName, ListFailoverTargetsRequest parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, false);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, false);
            uri.AppendPath("/providers/Microsoft.StorSimple/managers/", false);
            uri.AppendPath(managerName, false);
            uri.AppendPath("/devices/", false);
            uri.AppendPath(sourceDeviceName, false);
            uri.AppendPath("/listFailoverTargets", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Given a list of volume containers to be failed over from a source device, this method returns the eligibility result, as a failover target, for all devices under that resource. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="sourceDeviceName"> The source device name on which failover is performed. </param>
        /// <param name="parameters"> ListFailoverTargetsRequest containing the list of volume containers to be failed over. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, <paramref name="sourceDeviceName"/>, or <paramref name="parameters"/> is null. </exception>
        public async Task<Response<FailoverTargetsList>> ListFailoverTargetsAsync(string subscriptionId, string resourceGroupName, string managerName, string sourceDeviceName, ListFailoverTargetsRequest parameters, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (sourceDeviceName == null)
            {
                throw new ArgumentNullException(nameof(sourceDeviceName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateListFailoverTargetsRequest(subscriptionId, resourceGroupName, managerName, sourceDeviceName, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        FailoverTargetsList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = FailoverTargetsList.DeserializeFailoverTargetsList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Given a list of volume containers to be failed over from a source device, this method returns the eligibility result, as a failover target, for all devices under that resource. </summary>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="managerName"> The manager name. </param>
        /// <param name="sourceDeviceName"> The source device name on which failover is performed. </param>
        /// <param name="parameters"> ListFailoverTargetsRequest containing the list of volume containers to be failed over. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="managerName"/>, <paramref name="sourceDeviceName"/>, or <paramref name="parameters"/> is null. </exception>
        public Response<FailoverTargetsList> ListFailoverTargets(string subscriptionId, string resourceGroupName, string managerName, string sourceDeviceName, ListFailoverTargetsRequest parameters, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (managerName == null)
            {
                throw new ArgumentNullException(nameof(managerName));
            }
            if (sourceDeviceName == null)
            {
                throw new ArgumentNullException(nameof(sourceDeviceName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateListFailoverTargetsRequest(subscriptionId, resourceGroupName, managerName, sourceDeviceName, parameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        FailoverTargetsList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = FailoverTargetsList.DeserializeFailoverTargetsList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
