// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Migrate.Models;

namespace Azure.ResourceManager.Migrate
{
    internal partial class GroupsRestOperations
    {
        private Uri endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;
        private readonly string _userAgent;

        /// <summary> Initializes a new instance of GroupsRestOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="options"> The client options used to construct the current client. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public GroupsRestOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, ArmClientOptions options, Uri endpoint = null, string apiVersion = default)
        {
            this.endpoint = endpoint ?? new Uri("https://management.azure.com");
            this.apiVersion = apiVersion ?? "2019-10-01";
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _userAgent = HttpMessageUtilities.GetUserAgentName(this, options);
        }

        internal HttpMessage CreateListByProjectRequest(string subscriptionId, string resourceGroupName, string projectName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Migrate/assessmentProjects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/groups", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Get all groups created in the project. Returns a json array of objects of type &apos;group&apos; as specified in the Models section. </summary>
        /// <param name="subscriptionId"> Azure Subscription Id in which project was created. </param>
        /// <param name="resourceGroupName"> Name of the Azure Resource Group that project is part of. </param>
        /// <param name="projectName"> Name of the Azure Migrate project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, or <paramref name="projectName"/> is null. </exception>
        public async Task<Response<GroupResultList>> ListByProjectAsync(string subscriptionId, string resourceGroupName, string projectName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (projectName == null)
            {
                throw new ArgumentNullException(nameof(projectName));
            }

            using var message = CreateListByProjectRequest(subscriptionId, resourceGroupName, projectName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GroupResultList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GroupResultList.DeserializeGroupResultList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get all groups created in the project. Returns a json array of objects of type &apos;group&apos; as specified in the Models section. </summary>
        /// <param name="subscriptionId"> Azure Subscription Id in which project was created. </param>
        /// <param name="resourceGroupName"> Name of the Azure Resource Group that project is part of. </param>
        /// <param name="projectName"> Name of the Azure Migrate project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, or <paramref name="projectName"/> is null. </exception>
        public Response<GroupResultList> ListByProject(string subscriptionId, string resourceGroupName, string projectName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (projectName == null)
            {
                throw new ArgumentNullException(nameof(projectName));
            }

            using var message = CreateListByProjectRequest(subscriptionId, resourceGroupName, projectName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GroupResultList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GroupResultList.DeserializeGroupResultList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string projectName, string groupName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Migrate/assessmentProjects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(groupName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Get information related to a specific group in the project. Returns a json object of type &apos;group&apos; as specified in the models section. </summary>
        /// <param name="subscriptionId"> Azure Subscription Id in which project was created. </param>
        /// <param name="resourceGroupName"> Name of the Azure Resource Group that project is part of. </param>
        /// <param name="projectName"> Name of the Azure Migrate project. </param>
        /// <param name="groupName"> Unique name of a group within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, or <paramref name="groupName"/> is null. </exception>
        public async Task<Response<GroupData>> GetAsync(string subscriptionId, string resourceGroupName, string projectName, string groupName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (projectName == null)
            {
                throw new ArgumentNullException(nameof(projectName));
            }
            if (groupName == null)
            {
                throw new ArgumentNullException(nameof(groupName));
            }

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, projectName, groupName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GroupData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GroupData.DeserializeGroupData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((GroupData)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get information related to a specific group in the project. Returns a json object of type &apos;group&apos; as specified in the models section. </summary>
        /// <param name="subscriptionId"> Azure Subscription Id in which project was created. </param>
        /// <param name="resourceGroupName"> Name of the Azure Resource Group that project is part of. </param>
        /// <param name="projectName"> Name of the Azure Migrate project. </param>
        /// <param name="groupName"> Unique name of a group within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, or <paramref name="groupName"/> is null. </exception>
        public Response<GroupData> Get(string subscriptionId, string resourceGroupName, string projectName, string groupName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (projectName == null)
            {
                throw new ArgumentNullException(nameof(projectName));
            }
            if (groupName == null)
            {
                throw new ArgumentNullException(nameof(groupName));
            }

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, projectName, groupName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GroupData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GroupData.DeserializeGroupData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((GroupData)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateRequest(string subscriptionId, string resourceGroupName, string projectName, string groupName, GroupData group)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Migrate/assessmentProjects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(groupName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (group != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(group);
                request.Content = content;
            }
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary>
        /// Create a new group by sending a json object of type &apos;group&apos; as given in Models section as part of the Request Body. The group name in a project is unique.
        /// 
        /// This operation is Idempotent.
        /// 
        /// </summary>
        /// <param name="subscriptionId"> Azure Subscription Id in which project was created. </param>
        /// <param name="resourceGroupName"> Name of the Azure Resource Group that project is part of. </param>
        /// <param name="projectName"> Name of the Azure Migrate project. </param>
        /// <param name="groupName"> Unique name of a group within a project. </param>
        /// <param name="group"> New or Updated Group object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, or <paramref name="groupName"/> is null. </exception>
        public async Task<Response<GroupData>> CreateAsync(string subscriptionId, string resourceGroupName, string projectName, string groupName, GroupData group = null, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (projectName == null)
            {
                throw new ArgumentNullException(nameof(projectName));
            }
            if (groupName == null)
            {
                throw new ArgumentNullException(nameof(groupName));
            }

            using var message = CreateCreateRequest(subscriptionId, resourceGroupName, projectName, groupName, group);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        GroupData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GroupData.DeserializeGroupData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Create a new group by sending a json object of type &apos;group&apos; as given in Models section as part of the Request Body. The group name in a project is unique.
        /// 
        /// This operation is Idempotent.
        /// 
        /// </summary>
        /// <param name="subscriptionId"> Azure Subscription Id in which project was created. </param>
        /// <param name="resourceGroupName"> Name of the Azure Resource Group that project is part of. </param>
        /// <param name="projectName"> Name of the Azure Migrate project. </param>
        /// <param name="groupName"> Unique name of a group within a project. </param>
        /// <param name="group"> New or Updated Group object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, or <paramref name="groupName"/> is null. </exception>
        public Response<GroupData> Create(string subscriptionId, string resourceGroupName, string projectName, string groupName, GroupData group = null, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (projectName == null)
            {
                throw new ArgumentNullException(nameof(projectName));
            }
            if (groupName == null)
            {
                throw new ArgumentNullException(nameof(groupName));
            }

            using var message = CreateCreateRequest(subscriptionId, resourceGroupName, projectName, groupName, group);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        GroupData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GroupData.DeserializeGroupData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRequest(string subscriptionId, string resourceGroupName, string projectName, string groupName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Migrate/assessmentProjects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(groupName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary>
        /// Delete the group from the project. The machines remain in the project. Deleting a non-existent group results in a no-operation.
        /// 
        /// A group is an aggregation mechanism for machines in a project. Therefore, deleting group does not delete machines in it.
        /// 
        /// </summary>
        /// <param name="subscriptionId"> Azure Subscription Id in which project was created. </param>
        /// <param name="resourceGroupName"> Name of the Azure Resource Group that project is part of. </param>
        /// <param name="projectName"> Name of the Azure Migrate project. </param>
        /// <param name="groupName"> Unique name of a group within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, or <paramref name="groupName"/> is null. </exception>
        public async Task<Response> DeleteAsync(string subscriptionId, string resourceGroupName, string projectName, string groupName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (projectName == null)
            {
                throw new ArgumentNullException(nameof(projectName));
            }
            if (groupName == null)
            {
                throw new ArgumentNullException(nameof(groupName));
            }

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, projectName, groupName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Delete the group from the project. The machines remain in the project. Deleting a non-existent group results in a no-operation.
        /// 
        /// A group is an aggregation mechanism for machines in a project. Therefore, deleting group does not delete machines in it.
        /// 
        /// </summary>
        /// <param name="subscriptionId"> Azure Subscription Id in which project was created. </param>
        /// <param name="resourceGroupName"> Name of the Azure Resource Group that project is part of. </param>
        /// <param name="projectName"> Name of the Azure Migrate project. </param>
        /// <param name="groupName"> Unique name of a group within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, or <paramref name="groupName"/> is null. </exception>
        public Response Delete(string subscriptionId, string resourceGroupName, string projectName, string groupName, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (projectName == null)
            {
                throw new ArgumentNullException(nameof(projectName));
            }
            if (groupName == null)
            {
                throw new ArgumentNullException(nameof(groupName));
            }

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, projectName, groupName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateMachinesRequest(string subscriptionId, string resourceGroupName, string projectName, string groupName, UpdateGroupBody groupUpdateProperties)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Migrate/assessmentProjects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(groupName, true);
            uri.AppendPath("/updateMachines", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (groupUpdateProperties != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(groupUpdateProperties);
                request.Content = content;
            }
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Update machines in group by adding or removing machines. </summary>
        /// <param name="subscriptionId"> Azure Subscription Id in which project was created. </param>
        /// <param name="resourceGroupName"> Name of the Azure Resource Group that project is part of. </param>
        /// <param name="projectName"> Name of the Azure Migrate project. </param>
        /// <param name="groupName"> Unique name of a group within a project. </param>
        /// <param name="groupUpdateProperties"> Machines list to be added or removed from group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, or <paramref name="groupName"/> is null. </exception>
        public async Task<Response<GroupData>> UpdateMachinesAsync(string subscriptionId, string resourceGroupName, string projectName, string groupName, UpdateGroupBody groupUpdateProperties = null, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (projectName == null)
            {
                throw new ArgumentNullException(nameof(projectName));
            }
            if (groupName == null)
            {
                throw new ArgumentNullException(nameof(groupName));
            }

            using var message = CreateUpdateMachinesRequest(subscriptionId, resourceGroupName, projectName, groupName, groupUpdateProperties);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GroupData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GroupData.DeserializeGroupData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update machines in group by adding or removing machines. </summary>
        /// <param name="subscriptionId"> Azure Subscription Id in which project was created. </param>
        /// <param name="resourceGroupName"> Name of the Azure Resource Group that project is part of. </param>
        /// <param name="projectName"> Name of the Azure Migrate project. </param>
        /// <param name="groupName"> Unique name of a group within a project. </param>
        /// <param name="groupUpdateProperties"> Machines list to be added or removed from group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, or <paramref name="groupName"/> is null. </exception>
        public Response<GroupData> UpdateMachines(string subscriptionId, string resourceGroupName, string projectName, string groupName, UpdateGroupBody groupUpdateProperties = null, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (projectName == null)
            {
                throw new ArgumentNullException(nameof(projectName));
            }
            if (groupName == null)
            {
                throw new ArgumentNullException(nameof(groupName));
            }

            using var message = CreateUpdateMachinesRequest(subscriptionId, resourceGroupName, projectName, groupName, groupUpdateProperties);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GroupData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GroupData.DeserializeGroupData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
