// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using BatchManagementClient;

namespace BatchManagementClient.Tests.Mock
{
    /// <summary> Test for ApplicationPackage. </summary>
    public partial class ApplicationPackageCollectionMockTests : MockTestBase
    {
        public ApplicationPackageCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: ApplicationPackageCreate
            string versionName = "1";
            BatchManagementClient.ApplicationPackageData parameters = null;

            var applicationId = BatchManagementClient.Application.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct", "app1");
            var collection = GetArmClient().GetApplication(applicationId).GetApplicationPackages();
            await collection.CreateOrUpdateAsync(true, versionName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: ApplicationPackageGet
            string versionName = "1";

            var applicationId = BatchManagementClient.Application.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct", "app1");
            var collection = GetArmClient().GetApplication(applicationId).GetApplicationPackages();
            await collection.GetAsync(versionName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: ApplicationPackageList
            int? maxresults = null;

            var applicationId = BatchManagementClient.Application.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct", "app1");
            var collection = GetArmClient().GetApplication(applicationId).GetApplicationPackages();
            await foreach (var _ in collection.GetAllAsync(maxresults))
            {
            }
        }
    }
}
