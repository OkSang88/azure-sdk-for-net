// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.StoragePool;
using Azure.ResourceManager.StoragePool.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.StoragePool.Tests.Mock
{
    /// <summary> Test for DiskPool. </summary>
    public partial class DiskPoolMockTests : MockTestBase
    {
        public DiskPoolMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get Disk pool
            var diskPoolId = StoragePool.DiskPool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myDiskPool");
            var diskPool = GetArmClient().GetDiskPool(diskPoolId);

            await diskPool.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Delete Disk pool
            var diskPoolId = StoragePool.DiskPool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myDiskPool");
            var diskPool = GetArmClient().GetDiskPool(diskPoolId);

            await diskPool.DeleteAsync();
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Update Disk pool
            var diskPoolId = StoragePool.DiskPool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myDiskPool");
            var diskPool = GetArmClient().GetDiskPool(diskPoolId);
            StoragePool.Models.DiskPoolUpdate diskPoolUpdatePayload = new StoragePool.Models.DiskPoolUpdate()
            {
                Sku = new StoragePool.Models.Sku(name: "Basic_B1")
                {
                    Tier = "Basic",
                },
            };

            await diskPool.UpdateAsync(diskPoolUpdatePayload);
        }

        [RecordedTest]
        public async Task GetOutboundNetworkDependenciesEndpoints()
        {
            // Example: Get Disk Pool outbound network dependencies
            var diskPoolId = StoragePool.DiskPool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Sample-WestUSResourceGroup", "SampleAse");
            var diskPool = GetArmClient().GetDiskPool(diskPoolId);

            await foreach (var _ in diskPool.GetOutboundNetworkDependenciesEndpointsAsync())
            {
            }
        }

        [RecordedTest]
        public async Task Start()
        {
            // Example: Start Disk Pool
            var diskPoolId = StoragePool.DiskPool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myDiskPool");
            var diskPool = GetArmClient().GetDiskPool(diskPoolId);

            await diskPool.StartAsync();
        }

        [RecordedTest]
        public async Task Deallocate()
        {
            // Example: Deallocate Disk Pool
            var diskPoolId = StoragePool.DiskPool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myDiskPool");
            var diskPool = GetArmClient().GetDiskPool(diskPoolId);

            await diskPool.DeallocateAsync();
        }

        [RecordedTest]
        public async Task Upgrade()
        {
            // Example: Upgrade Disk Pool
            var diskPoolId = StoragePool.DiskPool.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myDiskPool");
            var diskPool = GetArmClient().GetDiskPool(diskPoolId);

            await diskPool.UpgradeAsync();
        }
    }
}
