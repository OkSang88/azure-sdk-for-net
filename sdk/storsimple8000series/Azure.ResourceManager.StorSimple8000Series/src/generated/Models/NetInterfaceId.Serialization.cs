// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace StorSimple8000SeriesManagementClient.Models
{
    internal static partial class NetInterfaceIdExtensions
    {
        public static string ToSerialString(this NetInterfaceId value) => value switch
        {
            NetInterfaceId.Invalid => "Invalid",
            NetInterfaceId.Data0 => "Data0",
            NetInterfaceId.Data1 => "Data1",
            NetInterfaceId.Data2 => "Data2",
            NetInterfaceId.Data3 => "Data3",
            NetInterfaceId.Data4 => "Data4",
            NetInterfaceId.Data5 => "Data5",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown NetInterfaceId value.")
        };

        public static NetInterfaceId ToNetInterfaceId(this string value)
        {
            if (string.Equals(value, "Invalid", StringComparison.InvariantCultureIgnoreCase)) return NetInterfaceId.Invalid;
            if (string.Equals(value, "Data0", StringComparison.InvariantCultureIgnoreCase)) return NetInterfaceId.Data0;
            if (string.Equals(value, "Data1", StringComparison.InvariantCultureIgnoreCase)) return NetInterfaceId.Data1;
            if (string.Equals(value, "Data2", StringComparison.InvariantCultureIgnoreCase)) return NetInterfaceId.Data2;
            if (string.Equals(value, "Data3", StringComparison.InvariantCultureIgnoreCase)) return NetInterfaceId.Data3;
            if (string.Equals(value, "Data4", StringComparison.InvariantCultureIgnoreCase)) return NetInterfaceId.Data4;
            if (string.Equals(value, "Data5", StringComparison.InvariantCultureIgnoreCase)) return NetInterfaceId.Data5;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown NetInterfaceId value.");
        }
    }
}
