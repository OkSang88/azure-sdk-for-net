// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.EdgeOrder.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.EdgeOrder.Tests.Mock
{
    /// <summary> Test for OrderItemResource. </summary>
    public partial class OrderItemResourceMockTests : MockTestBase
    {
        public OrderItemResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: GetOrderItemByName
            var orderItemResource = GetArmClient().GetOrderItemResource(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/orderItems/TestOrderItemName01"));
            string expand = null;

            await orderItemResource.GetAsync(expand);
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: DeleteOrderItemByName
            var orderItemResource = GetArmClient().GetOrderItemResource(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/orderItems/TestOrderItemName01"));

            await orderItemResource.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: UpdateOrderItem
            var orderItemResource = GetArmClient().GetOrderItemResource(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/orderItems/TestOrderItemName01"));
            EdgeOrder.Models.OrderItemUpdateParameter orderItemUpdateParameter = new EdgeOrder.Models.OrderItemUpdateParameter()
            {
                ForwardAddress = new EdgeOrder.Models.AddressProperties(contactDetails: new EdgeOrder.Models.ContactDetails(contactName: "Updated contact name", phone: "2222200000", emailList: new List<string>()
{
"testemail@microsoft.com",})),
                Preferences = new EdgeOrder.Models.OrderItemPreferences()
                {
                    TransportPreferences = new EdgeOrder.Models.TransportPreferences(preferredShipmentType: new EdgeOrder.Models.TransportShipmentTypes("CustomerManaged")),
                },
            };
            string ifMatch = null;

            await orderItemResource.UpdateAsync(orderItemUpdateParameter, ifMatch);
        }

        [RecordedTest]
        public async Task CancelOrderItemAsync()
        {
            // Example: CancelOrderItem
            var orderItemResource = GetArmClient().GetOrderItemResource(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/orderItems/TestOrderItemName1"));
            EdgeOrder.Models.CancellationReason cancellationReason = new EdgeOrder.Models.CancellationReason(reason: "Order cancelled");

            await orderItemResource.CancelOrderItemAsync(cancellationReason);
        }

        [RecordedTest]
        public async Task ReturnOrderItemAsync()
        {
            // Example: ReturnOrderItem
            var orderItemResource = GetArmClient().GetOrderItemResource(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/TestRG/providers/Microsoft.EdgeOrder/orderItems/TestOrderName1"));
            EdgeOrder.Models.ReturnOrderItemDetails returnOrderItemDetails = new EdgeOrder.Models.ReturnOrderItemDetails(returnReason: "Order returned");

            await orderItemResource.ReturnOrderItemAsync(returnOrderItemDetails);
        }
    }
}
