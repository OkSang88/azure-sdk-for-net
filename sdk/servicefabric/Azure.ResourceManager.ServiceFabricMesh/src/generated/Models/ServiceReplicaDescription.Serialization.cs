// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace ServiceFabricMeshManagementClient.Models
{
    public partial class ServiceReplicaDescription : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("replicaName");
            writer.WriteStringValue(ReplicaName);
            writer.WritePropertyName("osType");
            writer.WriteStringValue(OsType.ToString());
            writer.WritePropertyName("codePackages");
            writer.WriteStartArray();
            foreach (var item in CodePackages)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsCollectionDefined(NetworkRefs))
            {
                writer.WritePropertyName("networkRefs");
                writer.WriteStartArray();
                foreach (var item in NetworkRefs)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Diagnostics))
            {
                writer.WritePropertyName("diagnostics");
                writer.WriteObjectValue(Diagnostics);
            }
            writer.WriteEndObject();
        }

        internal static ServiceReplicaDescription DeserializeServiceReplicaDescription(JsonElement element)
        {
            string replicaName = default;
            OperatingSystemType osType = default;
            IList<ContainerCodePackageProperties> codePackages = default;
            Optional<IList<NetworkRef>> networkRefs = default;
            Optional<DiagnosticsRef> diagnostics = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("replicaName"))
                {
                    replicaName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("osType"))
                {
                    osType = new OperatingSystemType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("codePackages"))
                {
                    List<ContainerCodePackageProperties> array = new List<ContainerCodePackageProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ContainerCodePackageProperties.DeserializeContainerCodePackageProperties(item));
                    }
                    codePackages = array;
                    continue;
                }
                if (property.NameEquals("networkRefs"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<NetworkRef> array = new List<NetworkRef>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(NetworkRef.DeserializeNetworkRef(item));
                    }
                    networkRefs = array;
                    continue;
                }
                if (property.NameEquals("diagnostics"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    diagnostics = DiagnosticsRef.DeserializeDiagnosticsRef(property.Value);
                    continue;
                }
            }
            return new ServiceReplicaDescription(osType, codePackages, Optional.ToList(networkRefs), diagnostics.Value, replicaName);
        }
    }
}
