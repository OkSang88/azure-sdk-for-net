// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using AzureMigrateV2.Models;

namespace AzureMigrateV2
{
    /// <summary> A class representing collection of Assessment and their operations over its parent. </summary>
    public partial class AssessmentCollection : ArmCollection, IEnumerable<Assessment>, IAsyncEnumerable<Assessment>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly AssessmentsRestOperations _assessmentsRestClient;

        /// <summary> Initializes a new instance of the <see cref="AssessmentCollection"/> class for mocking. </summary>
        protected AssessmentCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="AssessmentCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal AssessmentCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _assessmentsRestClient = new AssessmentsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != Group.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, Group.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary>
        /// Create a new assessment with the given name and the specified settings. Since name of an assessment in a project is a unique identifier, if an assessment with the name provided already exists, then the existing assessment is updated.
        /// 
        /// Any PUT operation, resulting in either create or update on an assessment, will cause the assessment to go in a &quot;InProgress&quot; state. This will be indicated by the field &apos;computationState&apos; on the Assessment object. During this time no other PUT operation will be allowed on that assessment object, nor will a Delete operation. Once the computation for the assessment is complete, the field &apos;computationState&apos; will be updated to &apos;Ready&apos;, and then other PUT or DELETE operations can happen on the assessment.
        /// 
        /// When assessment is under computation, any PUT will lead to a 400 - Bad Request error.
        /// 
        /// </summary>
        /// <param name="assessmentName"> Unique name of an assessment within a project. </param>
        /// <param name="assessment"> New or Updated Assessment object. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentName"/> is null. </exception>
        public virtual AssessmentCreateOperation CreateOrUpdate(bool waitForCompletion, string assessmentName, AssessmentData assessment = null, CancellationToken cancellationToken = default)
        {
            if (assessmentName == null)
            {
                throw new ArgumentNullException(nameof(assessmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("AssessmentCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _assessmentsRestClient.Create(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, assessmentName, assessment, cancellationToken);
                var operation = new AssessmentCreateOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a new assessment with the given name and the specified settings. Since name of an assessment in a project is a unique identifier, if an assessment with the name provided already exists, then the existing assessment is updated.
        /// 
        /// Any PUT operation, resulting in either create or update on an assessment, will cause the assessment to go in a &quot;InProgress&quot; state. This will be indicated by the field &apos;computationState&apos; on the Assessment object. During this time no other PUT operation will be allowed on that assessment object, nor will a Delete operation. Once the computation for the assessment is complete, the field &apos;computationState&apos; will be updated to &apos;Ready&apos;, and then other PUT or DELETE operations can happen on the assessment.
        /// 
        /// When assessment is under computation, any PUT will lead to a 400 - Bad Request error.
        /// 
        /// </summary>
        /// <param name="assessmentName"> Unique name of an assessment within a project. </param>
        /// <param name="assessment"> New or Updated Assessment object. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentName"/> is null. </exception>
        public async virtual Task<AssessmentCreateOperation> CreateOrUpdateAsync(bool waitForCompletion, string assessmentName, AssessmentData assessment = null, CancellationToken cancellationToken = default)
        {
            if (assessmentName == null)
            {
                throw new ArgumentNullException(nameof(assessmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("AssessmentCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _assessmentsRestClient.CreateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, assessmentName, assessment, cancellationToken).ConfigureAwait(false);
                var operation = new AssessmentCreateOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get an existing assessment with the specified name. Returns a json object of type &apos;assessment&apos; as specified in Models section. </summary>
        /// <param name="assessmentName"> Unique name of an assessment within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentName"/> is null. </exception>
        public virtual Response<Assessment> Get(string assessmentName, CancellationToken cancellationToken = default)
        {
            if (assessmentName == null)
            {
                throw new ArgumentNullException(nameof(assessmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("AssessmentCollection.Get");
            scope.Start();
            try
            {
                var response = _assessmentsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, assessmentName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new Assessment(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get an existing assessment with the specified name. Returns a json object of type &apos;assessment&apos; as specified in Models section. </summary>
        /// <param name="assessmentName"> Unique name of an assessment within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentName"/> is null. </exception>
        public async virtual Task<Response<Assessment>> GetAsync(string assessmentName, CancellationToken cancellationToken = default)
        {
            if (assessmentName == null)
            {
                throw new ArgumentNullException(nameof(assessmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("AssessmentCollection.Get");
            scope.Start();
            try
            {
                var response = await _assessmentsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, assessmentName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new Assessment(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="assessmentName"> Unique name of an assessment within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentName"/> is null. </exception>
        public virtual Response<Assessment> GetIfExists(string assessmentName, CancellationToken cancellationToken = default)
        {
            if (assessmentName == null)
            {
                throw new ArgumentNullException(nameof(assessmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("AssessmentCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _assessmentsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, assessmentName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<Assessment>(null, response.GetRawResponse());
                return Response.FromValue(new Assessment(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="assessmentName"> Unique name of an assessment within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentName"/> is null. </exception>
        public async virtual Task<Response<Assessment>> GetIfExistsAsync(string assessmentName, CancellationToken cancellationToken = default)
        {
            if (assessmentName == null)
            {
                throw new ArgumentNullException(nameof(assessmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("AssessmentCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _assessmentsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, assessmentName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<Assessment>(null, response.GetRawResponse());
                return Response.FromValue(new Assessment(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="assessmentName"> Unique name of an assessment within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentName"/> is null. </exception>
        public virtual Response<bool> Exists(string assessmentName, CancellationToken cancellationToken = default)
        {
            if (assessmentName == null)
            {
                throw new ArgumentNullException(nameof(assessmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("AssessmentCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(assessmentName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="assessmentName"> Unique name of an assessment within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string assessmentName, CancellationToken cancellationToken = default)
        {
            if (assessmentName == null)
            {
                throw new ArgumentNullException(nameof(assessmentName));
            }

            using var scope = _clientDiagnostics.CreateScope("AssessmentCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(assessmentName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get all assessments created for the specified group.
        /// 
        /// Returns a json array of objects of type &apos;assessment&apos; as specified in Models section.
        /// 
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Assessment" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Assessment> GetAll(CancellationToken cancellationToken = default)
        {
            Page<Assessment> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AssessmentCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _assessmentsRestClient.ListByGroup(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new Assessment(Parent, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Get all assessments created for the specified group.
        /// 
        /// Returns a json array of objects of type &apos;assessment&apos; as specified in Models section.
        /// 
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Assessment" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Assessment> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<Assessment>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AssessmentCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _assessmentsRestClient.ListByGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new Assessment(Parent, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        IEnumerator<Assessment> IEnumerable<Assessment>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<Assessment> IAsyncEnumerable<Assessment>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, Assessment, AssessmentData> Construct() { }
    }
}
