// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using RelayAPI;

namespace RelayAPI.Tests.Mock
{
    /// <summary> Test for WcfRelay. </summary>
    public partial class WcfRelayMockTests : MockTestBase
    {
        public WcfRelayMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: RelayGet
            var wcfRelayId = RelayAPI.WcfRelay.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourcegroup", "example-RelayNamespace-9953", "example-Relay-Wcf-1194");
            var wcfRelay = GetArmClient().GetWcfRelay(wcfRelayId);

            await wcfRelay.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: RelayDelete
            var wcfRelayId = RelayAPI.WcfRelay.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "resourcegroup", "example-RelayNamespace-01", "example-Relay-wcf-01");
            var wcfRelay = GetArmClient().GetWcfRelay(wcfRelayId);

            await wcfRelay.DeleteAsync(true);
        }
    }
}
