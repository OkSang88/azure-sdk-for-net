// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.MachineLearningCompute.Tests.Mock;
using Azure.ResourceManager.MachineLearningCompute.Tests.Mock.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.MachineLearningCompute.Tests.Mock.Tests.Mock
{
    /// <summary> Test for OperationalizationCluster. </summary>
    public partial class OperationalizationClusterCollectionMockTests : MockTestBase
    {
        public OperationalizationClusterCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: PUT Operationalization Cluster
            string clusterName = "myCluster";
            MachineLearningCompute.Tests.Mock.OperationalizationClusterData parameters = new MachineLearningCompute.Tests.Mock.OperationalizationClusterData(location: "West US")
            {
                Description = "My Operationalization Cluster",
                ClusterType = new MachineLearningCompute.Tests.Mock.Models.ClusterType("ACS"),
                ContainerService = new MachineLearningCompute.Tests.Mock.Models.AcsClusterProperties(orchestratorType: new MachineLearningCompute.Tests.Mock.Models.OrchestratorType("Kubernetes"))
                {
                    OrchestratorProperties = new MachineLearningCompute.Tests.Mock.Models.KubernetesClusterProperties()
                    {
                        ServicePrincipal = new MachineLearningCompute.Tests.Mock.Models.ServicePrincipalProperties(clientId: "abcdefghijklmnopqrt", secret: "<secret>"),
                    },
                },
                GlobalServiceConfiguration = new MachineLearningCompute.Tests.Mock.Models.GlobalServiceConfiguration()
                {
                    Ssl = new MachineLearningCompute.Tests.Mock.Models.SslConfiguration()
                    {
                        Status = new MachineLearningCompute.Tests.Mock.Models.Status("Enabled"),
                        Cert = "afjdklq2131casfakld=",
                        Key = "flksdafkldsajf=",
                        Cname = "foo.bar.com",
                    },
                },
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>()
            {
                ["key1"] = "alpha",
                ["key2"] = "beta",
            });

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetOperationalizationClusters();
            await collection.CreateOrUpdateAsync(true, clusterName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: GET Operationalization Cluster
            string clusterName = "myCluster";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetOperationalizationClusters();
            await collection.GetAsync(clusterName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List Operationalization Clusters by Resource Group
            string skiptoken = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup")).GetOperationalizationClusters();
            await foreach (var _ in collection.GetAllAsync(skiptoken))
            {
            }
        }
    }
}
