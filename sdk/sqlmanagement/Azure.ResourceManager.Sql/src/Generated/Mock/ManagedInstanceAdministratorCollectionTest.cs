// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for ManagedInstanceAdministrator. </summary>
    public partial class ManagedInstanceAdministratorCollectionMockTests : MockTestBase
    {
        public ManagedInstanceAdministratorCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create administrator of managed instance
            var collection = GetArmClient().GetManagedInstance(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/managedInstance")).GetManagedInstanceAdministrators();
            Sql.Models.AdministratorName administratorName = new Sql.Models.AdministratorName("ActiveDirectory");
            Sql.ManagedInstanceAdministratorData parameters = new Sql.ManagedInstanceAdministratorData()
            {
                AdministratorType = new Sql.Models.ManagedInstanceAdministratorType("ActiveDirectory"),
                Login = "bob@contoso.com",
                Sid = Guid.Parse("44444444-3333-2222-1111-000000000000"),
                TenantId = Guid.Parse("55555555-4444-3333-2222-111111111111"),
            };

            await collection.CreateOrUpdateAsync(administratorName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync2()
        {
            // Example: Update administrator of managed instance
            var collection = GetArmClient().GetManagedInstance(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/managedInstance")).GetManagedInstanceAdministrators();
            Sql.Models.AdministratorName administratorName = new Sql.Models.AdministratorName("ActiveDirectory");
            Sql.ManagedInstanceAdministratorData parameters = new Sql.ManagedInstanceAdministratorData()
            {
                AdministratorType = new Sql.Models.ManagedInstanceAdministratorType("ActiveDirectory"),
                Login = "bob@contoso.com",
                Sid = Guid.Parse("44444444-3333-2222-1111-000000000000"),
                TenantId = Guid.Parse("55555555-4444-3333-2222-111111111111"),
            };

            await collection.CreateOrUpdateAsync(administratorName, parameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get administrator of managed instance
            var collection = GetArmClient().GetManagedInstance(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/managedInstance")).GetManagedInstanceAdministrators();
            Sql.Models.AdministratorName administratorName = new Sql.Models.AdministratorName("ActiveDirectory");

            await collection.GetAsync(administratorName);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: List administrators of managed instance
            var collection = GetArmClient().GetManagedInstance(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/managedInstances/managedInstance")).GetManagedInstanceAdministrators();

            collection.GetAllAsync();
        }
    }
}
