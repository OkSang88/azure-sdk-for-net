// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Support
{
    /// <summary> A class representing collection of ProblemClassification and their operations over its parent. </summary>
    public partial class ProblemClassificationCollection : ArmCollection, IEnumerable<ProblemClassification>, IAsyncEnumerable<ProblemClassification>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly ProblemClassificationsRestOperations _problemClassificationsRestClient;

        /// <summary> Initializes a new instance of the <see cref="ProblemClassificationCollection"/> class for mocking. </summary>
        protected ProblemClassificationCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ProblemClassificationCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal ProblemClassificationCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _problemClassificationsRestClient = new ProblemClassificationsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != Service.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, Service.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Get problem classification details for a specific Azure service. </summary>
        /// <param name="problemClassificationName"> Name of problem classification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="problemClassificationName"/> is null. </exception>
        public virtual Response<ProblemClassification> Get(string problemClassificationName, CancellationToken cancellationToken = default)
        {
            if (problemClassificationName == null)
            {
                throw new ArgumentNullException(nameof(problemClassificationName));
            }

            using var scope = _clientDiagnostics.CreateScope("ProblemClassificationCollection.Get");
            scope.Start();
            try
            {
                var response = _problemClassificationsRestClient.Get(Id.Name, problemClassificationName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ProblemClassification(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get problem classification details for a specific Azure service. </summary>
        /// <param name="problemClassificationName"> Name of problem classification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="problemClassificationName"/> is null. </exception>
        public async virtual Task<Response<ProblemClassification>> GetAsync(string problemClassificationName, CancellationToken cancellationToken = default)
        {
            if (problemClassificationName == null)
            {
                throw new ArgumentNullException(nameof(problemClassificationName));
            }

            using var scope = _clientDiagnostics.CreateScope("ProblemClassificationCollection.Get");
            scope.Start();
            try
            {
                var response = await _problemClassificationsRestClient.GetAsync(Id.Name, problemClassificationName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new ProblemClassification(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="problemClassificationName"> Name of problem classification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="problemClassificationName"/> is null. </exception>
        public virtual Response<ProblemClassification> GetIfExists(string problemClassificationName, CancellationToken cancellationToken = default)
        {
            if (problemClassificationName == null)
            {
                throw new ArgumentNullException(nameof(problemClassificationName));
            }

            using var scope = _clientDiagnostics.CreateScope("ProblemClassificationCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _problemClassificationsRestClient.Get(Id.Name, problemClassificationName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<ProblemClassification>(null, response.GetRawResponse());
                return Response.FromValue(new ProblemClassification(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="problemClassificationName"> Name of problem classification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="problemClassificationName"/> is null. </exception>
        public async virtual Task<Response<ProblemClassification>> GetIfExistsAsync(string problemClassificationName, CancellationToken cancellationToken = default)
        {
            if (problemClassificationName == null)
            {
                throw new ArgumentNullException(nameof(problemClassificationName));
            }

            using var scope = _clientDiagnostics.CreateScope("ProblemClassificationCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _problemClassificationsRestClient.GetAsync(Id.Name, problemClassificationName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<ProblemClassification>(null, response.GetRawResponse());
                return Response.FromValue(new ProblemClassification(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="problemClassificationName"> Name of problem classification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="problemClassificationName"/> is null. </exception>
        public virtual Response<bool> Exists(string problemClassificationName, CancellationToken cancellationToken = default)
        {
            if (problemClassificationName == null)
            {
                throw new ArgumentNullException(nameof(problemClassificationName));
            }

            using var scope = _clientDiagnostics.CreateScope("ProblemClassificationCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(problemClassificationName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="problemClassificationName"> Name of problem classification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="problemClassificationName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string problemClassificationName, CancellationToken cancellationToken = default)
        {
            if (problemClassificationName == null)
            {
                throw new ArgumentNullException(nameof(problemClassificationName));
            }

            using var scope = _clientDiagnostics.CreateScope("ProblemClassificationCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(problemClassificationName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all the problem classifications (categories) available for a specific Azure service. Always use the service and problem classifications obtained programmatically. This practice ensures that you always have the most recent set of service and problem classification Ids. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ProblemClassification" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ProblemClassification> GetAll(CancellationToken cancellationToken = default)
        {
            Page<ProblemClassification> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ProblemClassificationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _problemClassificationsRestClient.List(Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ProblemClassification(Parent, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Lists all the problem classifications (categories) available for a specific Azure service. Always use the service and problem classifications obtained programmatically. This practice ensures that you always have the most recent set of service and problem classification Ids. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ProblemClassification" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ProblemClassification> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ProblemClassification>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ProblemClassificationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _problemClassificationsRestClient.ListAsync(Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ProblemClassification(Parent, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        IEnumerator<ProblemClassification> IEnumerable<ProblemClassification>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ProblemClassification> IAsyncEnumerable<ProblemClassification>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, ProblemClassification, ProblemClassificationData> Construct() { }
    }
}
