// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for VirtualHub. </summary>
    public partial class VirtualHubMockTests : MockTestBase
    {
        public VirtualHubMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: VirtualHubGet
            var virtualHubId = Network.VirtualHub.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "virtualHub1");
            var virtualHub = GetArmClient().GetVirtualHub(virtualHubId);

            await virtualHub.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: VirtualHubDelete
            var virtualHubId = Network.VirtualHub.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "virtualHub1");
            var virtualHub = GetArmClient().GetVirtualHub(virtualHubId);

            await virtualHub.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: VirtualHubUpdate
            var virtualHubId = Network.VirtualHub.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "virtualHub2");
            var virtualHub = GetArmClient().GetVirtualHub(virtualHubId);
            Network.Models.TagsObject virtualHubParameters = new Network.Models.TagsObject();

            await virtualHub.UpdateAsync(virtualHubParameters);
        }

        [RecordedTest]
        public async Task GetEffectiveVirtualHubRoutes()
        {
            // Example: Effective Routes for a Connection resource
            var virtualHubId = Network.VirtualHub.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "virtualHub1");
            var virtualHub = GetArmClient().GetVirtualHub(virtualHubId);
            Network.Models.EffectiveRoutesParameters effectiveRoutesParameters = new Network.Models.EffectiveRoutesParameters()
            {
                ResourceId = "/subscriptions/subid/resourceGroups/resourceGroupName/providers/Microsoft.Network/expressRouteGateways/expressRouteGatewayName/expressRouteConnections/connectionName",
                VirtualWanResourceType = "ExpressRouteConnection",
            };

            await virtualHub.GetEffectiveVirtualHubRoutesAsync(true, effectiveRoutesParameters);
        }

        [RecordedTest]
        public async Task GetEffectiveVirtualHubRoutes2()
        {
            // Example: Effective Routes for a Route Table resource
            var virtualHubId = Network.VirtualHub.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "virtualHub1");
            var virtualHub = GetArmClient().GetVirtualHub(virtualHubId);
            Network.Models.EffectiveRoutesParameters effectiveRoutesParameters = new Network.Models.EffectiveRoutesParameters()
            {
                ResourceId = "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1",
                VirtualWanResourceType = "RouteTable",
            };

            await virtualHub.GetEffectiveVirtualHubRoutesAsync(true, effectiveRoutesParameters);
        }

        [RecordedTest]
        public async Task GetEffectiveVirtualHubRoutes3()
        {
            // Example: Effective Routes for the Virtual Hub
            var virtualHubId = Network.VirtualHub.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "rg1", "virtualHub1");
            var virtualHub = GetArmClient().GetVirtualHub(virtualHubId);
            Network.Models.EffectiveRoutesParameters effectiveRoutesParameters = new Network.Models.EffectiveRoutesParameters();

            await virtualHub.GetEffectiveVirtualHubRoutesAsync(true, effectiveRoutesParameters);
        }
    }
}
