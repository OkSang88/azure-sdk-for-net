// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using Insights;
using Insights.Models;

namespace Insights.Tests.Mock
{
    /// <summary> Test for MetricAlertResource. </summary>
    public partial class MetricAlertResourceCollectionMockTests : MockTestBase
    {
        public MetricAlertResourceCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create or update a dynamic alert rule for Multiple Resources
            string ruleName = "MetricAlertOnMultipleResources";
            Insights.MetricAlertResourceData parameters = new Insights.MetricAlertResourceData(location: "global", description: "This is the description of the rule1", severity: 3, enabled: true, evaluationFrequency: TimeSpan.Parse("PT1M"), windowSize: TimeSpan.Parse("PT15M"), criteria: new Insights.Models.MetricAlertMultipleResourceMultipleMetricCriteria()
            {
                OdataType = new Insights.Models.Odatatype("Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria"),
            })
            {
                TargetResourceType = "Microsoft.Compute/virtualMachines",
                TargetResourceRegion = "southcentralus",
                AutoMitigate = false,
            };
            parameters.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>() { });
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest")).GetMetricAlertResources();
            await collection.CreateOrUpdateAsync(ruleName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Create or update a dynamic alert rule for Single Resource
            string ruleName = "chiricutin";
            Insights.MetricAlertResourceData parameters = new Insights.MetricAlertResourceData(location: "global", description: "This is the description of the rule1", severity: 3, enabled: true, evaluationFrequency: TimeSpan.Parse("PT1M"), windowSize: TimeSpan.Parse("PT15M"), criteria: new Insights.Models.MetricAlertMultipleResourceMultipleMetricCriteria()
            {
                OdataType = new Insights.Models.Odatatype("Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria"),
            })
            {
                TargetResourceType = "Microsoft.Compute/virtualMachines",
                TargetResourceRegion = "southcentralus",
                AutoMitigate = false,
            };
            parameters.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>() { });
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest")).GetMetricAlertResources();
            await collection.CreateOrUpdateAsync(ruleName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate3()
        {
            // Example: Create or update a web test alert rule
            string ruleName = "webtest-name-example";
            Insights.MetricAlertResourceData parameters = new Insights.MetricAlertResourceData(location: "global", description: "Automatically created alert rule for availability test \"component-example\" a", severity: 4, enabled: true, evaluationFrequency: TimeSpan.Parse("PT1M"), windowSize: TimeSpan.Parse("PT15M"), criteria: new Insights.Models.WebtestLocationAvailabilityCriteria(webTestId: "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example", componentId: "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example", failedLocationCount: 2)
            {
                OdataType = new Insights.Models.Odatatype("Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria"),
            })
            {
            };
            parameters.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>() { ["hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example"] = "Resource", ["hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example"] = "Resource", });
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-example")).GetMetricAlertResources();
            await collection.CreateOrUpdateAsync(ruleName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate4()
        {
            // Example: Create or update an alert rule for Multiple Resource
            string ruleName = "MetricAlertOnMultipleResources";
            Insights.MetricAlertResourceData parameters = new Insights.MetricAlertResourceData(location: "global", description: "This is the description of the rule1", severity: 3, enabled: true, evaluationFrequency: TimeSpan.Parse("PT1M"), windowSize: TimeSpan.Parse("PT15M"), criteria: new Insights.Models.MetricAlertMultipleResourceMultipleMetricCriteria()
            {
                OdataType = new Insights.Models.Odatatype("Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria"),
            })
            {
                TargetResourceType = "Microsoft.Compute/virtualMachines",
                TargetResourceRegion = "southcentralus",
                AutoMitigate = false,
            };
            parameters.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>() { });
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest")).GetMetricAlertResources();
            await collection.CreateOrUpdateAsync(ruleName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate5()
        {
            // Example: Create or update an alert rule for Single Resource
            string ruleName = "chiricutin";
            Insights.MetricAlertResourceData parameters = new Insights.MetricAlertResourceData(location: "global", description: "This is the description of the rule1", severity: 3, enabled: true, evaluationFrequency: TimeSpan.Parse("Pt1m"), windowSize: TimeSpan.Parse("Pt15m"), criteria: new Insights.Models.MetricAlertSingleResourceMultipleMetricCriteria()
            {
                OdataType = new Insights.Models.Odatatype("Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"),
            })
            {
                AutoMitigate = false,
            };
            parameters.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>() { });
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest")).GetMetricAlertResources();
            await collection.CreateOrUpdateAsync(ruleName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate6()
        {
            // Example: Create or update an alert rule on Resource group(s)
            string ruleName = "MetricAlertAtResourceGroupLevel";
            Insights.MetricAlertResourceData parameters = new Insights.MetricAlertResourceData(location: "global", description: "This is the description of the rule1", severity: 3, enabled: true, evaluationFrequency: TimeSpan.Parse("PT1M"), windowSize: TimeSpan.Parse("PT15M"), criteria: new Insights.Models.MetricAlertMultipleResourceMultipleMetricCriteria()
            {
                OdataType = new Insights.Models.Odatatype("Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria"),
            })
            {
                TargetResourceType = "Microsoft.Compute/virtualMachines",
                TargetResourceRegion = "southcentralus",
                AutoMitigate = false,
            };
            parameters.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>() { });
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest1")).GetMetricAlertResources();
            await collection.CreateOrUpdateAsync(ruleName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate7()
        {
            // Example: Create or update an alert rule on Subscription 
            string ruleName = "MetricAlertAtSubscriptionLevel";
            Insights.MetricAlertResourceData parameters = new Insights.MetricAlertResourceData(location: "global", description: "This is the description of the rule1", severity: 3, enabled: true, evaluationFrequency: TimeSpan.Parse("PT1M"), windowSize: TimeSpan.Parse("PT15M"), criteria: new Insights.Models.MetricAlertMultipleResourceMultipleMetricCriteria()
            {
                OdataType = new Insights.Models.Odatatype("Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria"),
            })
            {
                TargetResourceType = "Microsoft.Compute/virtualMachines",
                TargetResourceRegion = "southcentralus",
                AutoMitigate = false,
            };
            parameters.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>() { });
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest")).GetMetricAlertResources();
            await collection.CreateOrUpdateAsync(ruleName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get a dynamic alert rule for multiple resources
            string ruleName = "MetricAlertOnMultipleResources";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest")).GetMetricAlertResources();
            await collection.GetAsync(ruleName);
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: Get a dynamic alert rule for single resource
            string ruleName = "chiricutin";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest")).GetMetricAlertResources();
            await collection.GetAsync(ruleName);
        }

        [RecordedTest]
        public async Task Get3()
        {
            // Example: Get a web test alert rule
            string ruleName = "webtest-name-example";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-example")).GetMetricAlertResources();
            await collection.GetAsync(ruleName);
        }

        [RecordedTest]
        public async Task Get4()
        {
            // Example: Get an alert rule for multiple resources
            string ruleName = "MetricAlertOnMultipleResources";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest")).GetMetricAlertResources();
            await collection.GetAsync(ruleName);
        }

        [RecordedTest]
        public async Task Get5()
        {
            // Example: Get an alert rule for single resource
            string ruleName = "chiricutin";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest")).GetMetricAlertResources();
            await collection.GetAsync(ruleName);
        }

        [RecordedTest]
        public async Task Get6()
        {
            // Example: Get an alert rule on resource group(s)
            string ruleName = "MetricAlertAtResourceGroupLevel";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest1")).GetMetricAlertResources();
            await collection.GetAsync(ruleName);
        }

        [RecordedTest]
        public async Task Get7()
        {
            // Example: Get an alert rule on subscription
            string ruleName = "MetricAlertAtSubscriptionLevel";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest")).GetMetricAlertResources();
            await collection.GetAsync(ruleName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List metric alert rules

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest")).GetMetricAlertResources();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
