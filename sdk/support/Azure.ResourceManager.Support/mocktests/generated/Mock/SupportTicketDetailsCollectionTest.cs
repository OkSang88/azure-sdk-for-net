// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Support;
using Azure.ResourceManager.Support.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Support.Tests.Mock
{
    /// <summary> Test for SupportTicketDetails. </summary>
    public partial class SupportTicketDetailsCollectionMockTests : MockTestBase
    {
        public SupportTicketDetailsCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create a ticket for Billing related issues
            string supportTicketName = "testticket";
            Support.SupportTicketDetailsData createSupportTicketParameters = new Support.SupportTicketDetailsData()
            {
                Description = "my description",
                ProblemClassificationId = "/providers/Microsoft.Support/services/billing_service_guid/problemClassifications/billing_problemClassification_guid",
                Severity = new Support.Models.SeverityLevel("moderate"),
                ContactDetails = new Support.Models.ContactProfile(firstName: "abc", lastName: "xyz", preferredContactMethod: new Support.Models.PreferredContactMethod("email"), primaryEmailAddress: "abc@contoso.com", preferredTimeZone: "Pacific Standard Time", country: "usa", preferredSupportLanguage: "en-US"),
                Title = "my title",
                ServiceId = "/providers/Microsoft.Support/services/billing_service_guid",
            };

            var collection = GetArmClient().GetSubscription(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000")).GetSupportTicketDetails();
            await collection.CreateOrUpdateAsync(true, supportTicketName, createSupportTicketParameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Create a ticket for Subscription Management related issues
            string supportTicketName = "testticket";
            Support.SupportTicketDetailsData createSupportTicketParameters = new Support.SupportTicketDetailsData()
            {
                Description = "my description",
                ProblemClassificationId = "/providers/Microsoft.Support/services/subscription_management_service_guid/problemClassifications/subscription_management_problemClassification_guid",
                Severity = new Support.Models.SeverityLevel("moderate"),
                ContactDetails = new Support.Models.ContactProfile(firstName: "abc", lastName: "xyz", preferredContactMethod: new Support.Models.PreferredContactMethod("email"), primaryEmailAddress: "abc@contoso.com", preferredTimeZone: "Pacific Standard Time", country: "usa", preferredSupportLanguage: "en-US"),
                Title = "my title",
                ServiceId = "/providers/Microsoft.Support/services/subscription_management_service_guid",
            };

            var collection = GetArmClient().GetSubscription(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000")).GetSupportTicketDetails();
            await collection.CreateOrUpdateAsync(true, supportTicketName, createSupportTicketParameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate3()
        {
            // Example: Create a ticket for Technical issue related to a specific resource
            string supportTicketName = "testticket";
            Support.SupportTicketDetailsData createSupportTicketParameters = new Support.SupportTicketDetailsData()
            {
                Description = "my description",
                ProblemClassificationId = "/providers/Microsoft.Support/services/virtual_machine_running_linux_service_guid/problemClassifications/problemClassification_guid",
                Severity = new Support.Models.SeverityLevel("moderate"),
                ContactDetails = new Support.Models.ContactProfile(firstName: "abc", lastName: "xyz", preferredContactMethod: new Support.Models.PreferredContactMethod("email"), primaryEmailAddress: "abc@contoso.com", preferredTimeZone: "Pacific Standard Time", country: "usa", preferredSupportLanguage: "en-US"),
                Title = "my title",
                ServiceId = "/providers/Microsoft.Support/services/cddd3eb5-1830-b494-44fd-782f691479dc",
                TechnicalTicketDetails = new Support.Models.TechnicalTicketDetails()
                {
                    ResourceId = "/subscriptions/subid/resourceGroups/test/providers/Microsoft.Compute/virtualMachines/testserver",
                },
            };

            var collection = GetArmClient().GetSubscription(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000")).GetSupportTicketDetails();
            await collection.CreateOrUpdateAsync(true, supportTicketName, createSupportTicketParameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate4()
        {
            // Example: Create a ticket to request Quota increase for Active Jobs and Job Schedules for a Batch account
            string supportTicketName = "testticket";
            Support.SupportTicketDetailsData createSupportTicketParameters = new Support.SupportTicketDetailsData()
            {
                Description = "my description",
                ProblemClassificationId = "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid",
                Severity = new Support.Models.SeverityLevel("moderate"),
                ContactDetails = new Support.Models.ContactProfile(firstName: "abc", lastName: "xyz", preferredContactMethod: new Support.Models.PreferredContactMethod("email"), primaryEmailAddress: "abc@contoso.com", preferredTimeZone: "Pacific Standard Time", country: "usa", preferredSupportLanguage: "en-US"),
                Title = "my title",
                ServiceId = "/providers/Microsoft.Support/services/quota_service_guid",
                QuotaTicketDetails = new Support.Models.QuotaTicketDetails()
                {
                    QuotaChangeRequestSubType = "Account",
                    QuotaChangeRequestVersion = "1.0",
                },
            };

            var collection = GetArmClient().GetSubscription(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000")).GetSupportTicketDetails();
            await collection.CreateOrUpdateAsync(true, supportTicketName, createSupportTicketParameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate5()
        {
            // Example: Create a ticket to request Quota increase for Azure SQL managed instance
            string supportTicketName = "testticket";
            Support.SupportTicketDetailsData createSupportTicketParameters = new Support.SupportTicketDetailsData()
            {
                Description = "my description",
                ProblemClassificationId = "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_managedinstance_problemClassification_guid",
                Severity = new Support.Models.SeverityLevel("moderate"),
                ContactDetails = new Support.Models.ContactProfile(firstName: "abc", lastName: "xyz", preferredContactMethod: new Support.Models.PreferredContactMethod("email"), primaryEmailAddress: "abc@contoso.com", preferredTimeZone: "Pacific Standard Time", country: "usa", preferredSupportLanguage: "en-US"),
                Title = "my title",
                ServiceId = "/providers/Microsoft.Support/services/quota_service_guid",
                QuotaTicketDetails = new Support.Models.QuotaTicketDetails()
                {
                    QuotaChangeRequestSubType = "SQLMI",
                    QuotaChangeRequestVersion = "1.0",
                },
            };

            var collection = GetArmClient().GetSubscription(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000")).GetSupportTicketDetails();
            await collection.CreateOrUpdateAsync(true, supportTicketName, createSupportTicketParameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate6()
        {
            // Example: Create a ticket to request Quota increase for Batch accounts for a subscription
            string supportTicketName = "testticket";
            Support.SupportTicketDetailsData createSupportTicketParameters = new Support.SupportTicketDetailsData()
            {
                Description = "my description",
                ProblemClassificationId = "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid",
                Severity = new Support.Models.SeverityLevel("moderate"),
                ContactDetails = new Support.Models.ContactProfile(firstName: "abc", lastName: "xyz", preferredContactMethod: new Support.Models.PreferredContactMethod("email"), primaryEmailAddress: "abc@contoso.com", preferredTimeZone: "Pacific Standard Time", country: "usa", preferredSupportLanguage: "en-US"),
                Title = "my title",
                ServiceId = "/providers/Microsoft.Support/services/quota_service_guid",
                QuotaTicketDetails = new Support.Models.QuotaTicketDetails()
                {
                    QuotaChangeRequestSubType = "Subscription",
                    QuotaChangeRequestVersion = "1.0",
                },
            };

            var collection = GetArmClient().GetSubscription(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000")).GetSupportTicketDetails();
            await collection.CreateOrUpdateAsync(true, supportTicketName, createSupportTicketParameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate7()
        {
            // Example: Create a ticket to request Quota increase for Compute VM Cores
            string supportTicketName = "testticket";
            Support.SupportTicketDetailsData createSupportTicketParameters = new Support.SupportTicketDetailsData()
            {
                Description = "my description",
                ProblemClassificationId = "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/cores_problemClassification_guid",
                Severity = new Support.Models.SeverityLevel("moderate"),
                ContactDetails = new Support.Models.ContactProfile(firstName: "abc", lastName: "xyz", preferredContactMethod: new Support.Models.PreferredContactMethod("email"), primaryEmailAddress: "abc@contoso.com", preferredTimeZone: "Pacific Standard Time", country: "usa", preferredSupportLanguage: "en-US"),
                Title = "my title",
                ServiceId = "/providers/Microsoft.Support/services/quota_service_guid",
                QuotaTicketDetails = new Support.Models.QuotaTicketDetails()
                {
                    QuotaChangeRequestVersion = "1.0",
                },
            };

            var collection = GetArmClient().GetSubscription(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000")).GetSupportTicketDetails();
            await collection.CreateOrUpdateAsync(true, supportTicketName, createSupportTicketParameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate8()
        {
            // Example: Create a ticket to request Quota increase for DTUs for Azure Synapse Analytics
            string supportTicketName = "testticket";
            Support.SupportTicketDetailsData createSupportTicketParameters = new Support.SupportTicketDetailsData()
            {
                Description = "my description",
                ProblemClassificationId = "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_datawarehouse_problemClassification_guid",
                Severity = new Support.Models.SeverityLevel("moderate"),
                ContactDetails = new Support.Models.ContactProfile(firstName: "abc", lastName: "xyz", preferredContactMethod: new Support.Models.PreferredContactMethod("email"), primaryEmailAddress: "abc@contoso.com", preferredTimeZone: "Pacific Standard Time", country: "usa", preferredSupportLanguage: "en-US"),
                Title = "my title",
                ServiceId = "/providers/Microsoft.Support/services/quota_service_guid",
                QuotaTicketDetails = new Support.Models.QuotaTicketDetails()
                {
                    QuotaChangeRequestSubType = "DTUs",
                    QuotaChangeRequestVersion = "1.0",
                },
            };

            var collection = GetArmClient().GetSubscription(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000")).GetSupportTicketDetails();
            await collection.CreateOrUpdateAsync(true, supportTicketName, createSupportTicketParameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate9()
        {
            // Example: Create a ticket to request Quota increase for DTUs for SQL Database
            string supportTicketName = "testticket";
            Support.SupportTicketDetailsData createSupportTicketParameters = new Support.SupportTicketDetailsData()
            {
                Description = "my description",
                ProblemClassificationId = "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_database_problemClassification_guid",
                Severity = new Support.Models.SeverityLevel("moderate"),
                ContactDetails = new Support.Models.ContactProfile(firstName: "abc", lastName: "xyz", preferredContactMethod: new Support.Models.PreferredContactMethod("email"), primaryEmailAddress: "abc@contoso.com", preferredTimeZone: "Pacific Standard Time", country: "usa", preferredSupportLanguage: "en-US"),
                Title = "my title",
                ServiceId = "/providers/Microsoft.Support/services/quota_service_guid",
                QuotaTicketDetails = new Support.Models.QuotaTicketDetails()
                {
                    QuotaChangeRequestSubType = "DTUs",
                    QuotaChangeRequestVersion = "1.0",
                },
            };

            var collection = GetArmClient().GetSubscription(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000")).GetSupportTicketDetails();
            await collection.CreateOrUpdateAsync(true, supportTicketName, createSupportTicketParameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate10()
        {
            // Example: Create a ticket to request Quota increase for Low-priority cores for Machine Learning service
            string supportTicketName = "testticket";
            Support.SupportTicketDetailsData createSupportTicketParameters = new Support.SupportTicketDetailsData()
            {
                Description = "my description",
                ProblemClassificationId = "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/machine_learning_service_problemClassification_guid",
                Severity = new Support.Models.SeverityLevel("moderate"),
                ContactDetails = new Support.Models.ContactProfile(firstName: "abc", lastName: "xyz", preferredContactMethod: new Support.Models.PreferredContactMethod("email"), primaryEmailAddress: "abc@contoso.com", preferredTimeZone: "Pacific Standard Time", country: "usa", preferredSupportLanguage: "en-US"),
                Title = "my title",
                ServiceId = "/providers/Microsoft.Support/services/quota_service_guid",
                QuotaTicketDetails = new Support.Models.QuotaTicketDetails()
                {
                    QuotaChangeRequestSubType = "BatchAml",
                    QuotaChangeRequestVersion = "1.0",
                },
            };

            var collection = GetArmClient().GetSubscription(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000")).GetSupportTicketDetails();
            await collection.CreateOrUpdateAsync(true, supportTicketName, createSupportTicketParameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate11()
        {
            // Example: Create a ticket to request Quota increase for Low-priority cores for a Batch account
            string supportTicketName = "testticket";
            Support.SupportTicketDetailsData createSupportTicketParameters = new Support.SupportTicketDetailsData()
            {
                Description = "my description",
                ProblemClassificationId = "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid",
                Severity = new Support.Models.SeverityLevel("moderate"),
                ContactDetails = new Support.Models.ContactProfile(firstName: "abc", lastName: "xyz", preferredContactMethod: new Support.Models.PreferredContactMethod("email"), primaryEmailAddress: "abc@contoso.com", preferredTimeZone: "Pacific Standard Time", country: "usa", preferredSupportLanguage: "en-US"),
                Title = "my title",
                ServiceId = "/providers/Microsoft.Support/services/quota_service_guid",
                QuotaTicketDetails = new Support.Models.QuotaTicketDetails()
                {
                    QuotaChangeRequestSubType = "Account",
                    QuotaChangeRequestVersion = "1.0",
                },
            };

            var collection = GetArmClient().GetSubscription(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000")).GetSupportTicketDetails();
            await collection.CreateOrUpdateAsync(true, supportTicketName, createSupportTicketParameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate12()
        {
            // Example: Create a ticket to request Quota increase for Pools for a Batch account
            string supportTicketName = "testticket";
            Support.SupportTicketDetailsData createSupportTicketParameters = new Support.SupportTicketDetailsData()
            {
                Description = "my description",
                ProblemClassificationId = "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid",
                Severity = new Support.Models.SeverityLevel("moderate"),
                ContactDetails = new Support.Models.ContactProfile(firstName: "abc", lastName: "xyz", preferredContactMethod: new Support.Models.PreferredContactMethod("email"), primaryEmailAddress: "abc@contoso.com", preferredTimeZone: "Pacific Standard Time", country: "usa", preferredSupportLanguage: "en-US"),
                Title = "my title",
                ServiceId = "/providers/Microsoft.Support/services/quota_service_guid",
                QuotaTicketDetails = new Support.Models.QuotaTicketDetails()
                {
                    QuotaChangeRequestSubType = "Account",
                    QuotaChangeRequestVersion = "1.0",
                },
            };

            var collection = GetArmClient().GetSubscription(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000")).GetSupportTicketDetails();
            await collection.CreateOrUpdateAsync(true, supportTicketName, createSupportTicketParameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate13()
        {
            // Example: Create a ticket to request Quota increase for Servers for Azure Synapse Analytics
            string supportTicketName = "testticket";
            Support.SupportTicketDetailsData createSupportTicketParameters = new Support.SupportTicketDetailsData()
            {
                Description = "my description",
                ProblemClassificationId = "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_datawarehouse_problemClassification_guid",
                Severity = new Support.Models.SeverityLevel("moderate"),
                ContactDetails = new Support.Models.ContactProfile(firstName: "abc", lastName: "xyz", preferredContactMethod: new Support.Models.PreferredContactMethod("email"), primaryEmailAddress: "abc@contoso.com", preferredTimeZone: "Pacific Standard Time", country: "usa", preferredSupportLanguage: "en-US"),
                Title = "my title",
                ServiceId = "/providers/Microsoft.Support/services/quota_service_guid",
                QuotaTicketDetails = new Support.Models.QuotaTicketDetails()
                {
                    QuotaChangeRequestSubType = "Servers",
                    QuotaChangeRequestVersion = "1.0",
                },
            };

            var collection = GetArmClient().GetSubscription(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000")).GetSupportTicketDetails();
            await collection.CreateOrUpdateAsync(true, supportTicketName, createSupportTicketParameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate14()
        {
            // Example: Create a ticket to request Quota increase for Servers for SQL Database
            string supportTicketName = "testticket";
            Support.SupportTicketDetailsData createSupportTicketParameters = new Support.SupportTicketDetailsData()
            {
                Description = "my description",
                ProblemClassificationId = "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_database_problemClassification_guid",
                Severity = new Support.Models.SeverityLevel("moderate"),
                ContactDetails = new Support.Models.ContactProfile(firstName: "abc", lastName: "xyz", preferredContactMethod: new Support.Models.PreferredContactMethod("email"), primaryEmailAddress: "abc@contoso.com", preferredTimeZone: "Pacific Standard Time", country: "usa", preferredSupportLanguage: "en-US"),
                Title = "my title",
                ServiceId = "/providers/Microsoft.Support/services/quota_service_guid",
                QuotaTicketDetails = new Support.Models.QuotaTicketDetails()
                {
                    QuotaChangeRequestSubType = "Servers",
                    QuotaChangeRequestVersion = "1.0",
                },
            };

            var collection = GetArmClient().GetSubscription(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000")).GetSupportTicketDetails();
            await collection.CreateOrUpdateAsync(true, supportTicketName, createSupportTicketParameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate15()
        {
            // Example: Create a ticket to request Quota increase for services that do not require additional details in the quotaTicketDetails object
            string supportTicketName = "testticket";
            Support.SupportTicketDetailsData createSupportTicketParameters = new Support.SupportTicketDetailsData()
            {
                Description = "Increase the maximum throughput per container limit to 10000 for account foo bar",
                ProblemClassificationId = "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/cosmosdb_problemClassification_guid",
                Severity = new Support.Models.SeverityLevel("moderate"),
                ContactDetails = new Support.Models.ContactProfile(firstName: "abc", lastName: "xyz", preferredContactMethod: new Support.Models.PreferredContactMethod("email"), primaryEmailAddress: "abc@contoso.com", preferredTimeZone: "Pacific Standard Time", country: "usa", preferredSupportLanguage: "en-US"),
                Title = "my title",
                ServiceId = "/providers/Microsoft.Support/services/quota_service_guid",
            };

            var collection = GetArmClient().GetSubscription(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000")).GetSupportTicketDetails();
            await collection.CreateOrUpdateAsync(true, supportTicketName, createSupportTicketParameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate16()
        {
            // Example: Create a ticket to request Quota increase for specific VM family cores for Machine Learning service
            string supportTicketName = "testticket";
            Support.SupportTicketDetailsData createSupportTicketParameters = new Support.SupportTicketDetailsData()
            {
                Description = "my description",
                ProblemClassificationId = "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/machine_learning_service_problemClassification_guid",
                Severity = new Support.Models.SeverityLevel("moderate"),
                ContactDetails = new Support.Models.ContactProfile(firstName: "abc", lastName: "xyz", preferredContactMethod: new Support.Models.PreferredContactMethod("email"), primaryEmailAddress: "abc@contoso.com", preferredTimeZone: "Pacific Standard Time", country: "usa", preferredSupportLanguage: "en-US"),
                Title = "my title",
                ServiceId = "/providers/Microsoft.Support/services/quota_service_guid",
                QuotaTicketDetails = new Support.Models.QuotaTicketDetails()
                {
                    QuotaChangeRequestSubType = "BatchAml",
                    QuotaChangeRequestVersion = "1.0",
                },
            };

            var collection = GetArmClient().GetSubscription(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000")).GetSupportTicketDetails();
            await collection.CreateOrUpdateAsync(true, supportTicketName, createSupportTicketParameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate17()
        {
            // Example: Create a ticket to request Quota increase for specific VM family cores for a Batch account
            string supportTicketName = "testticket";
            Support.SupportTicketDetailsData createSupportTicketParameters = new Support.SupportTicketDetailsData()
            {
                Description = "my description",
                ProblemClassificationId = "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid",
                Severity = new Support.Models.SeverityLevel("moderate"),
                ContactDetails = new Support.Models.ContactProfile(firstName: "abc", lastName: "xyz", preferredContactMethod: new Support.Models.PreferredContactMethod("email"), primaryEmailAddress: "abc@contoso.com", preferredTimeZone: "Pacific Standard Time", country: "usa", preferredSupportLanguage: "en-US"),
                Title = "my title",
                ServiceId = "/providers/Microsoft.Support/services/quota_service_guid",
                QuotaTicketDetails = new Support.Models.QuotaTicketDetails()
                {
                    QuotaChangeRequestSubType = "Account",
                    QuotaChangeRequestVersion = "1.0",
                },
            };

            var collection = GetArmClient().GetSubscription(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000")).GetSupportTicketDetails();
            await collection.CreateOrUpdateAsync(true, supportTicketName, createSupportTicketParameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get details of a subscription ticket
            string supportTicketName = "testticket";

            var collection = GetArmClient().GetSubscription(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000")).GetSupportTicketDetails();
            await collection.GetAsync(supportTicketName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List support tickets created on or after a certain date and in open state for a subscription
            int? top = null;
            string filter = "createdDate ge 2020-03-10T22:08:51Z and status eq 'Open'";

            var collection = GetArmClient().GetSubscription(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000")).GetSupportTicketDetails();
            await foreach (var _ in collection.GetAllAsync(top, filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetAll2()
        {
            // Example: List support tickets for a subscription
            int? top = null;
            string filter = null;

            var collection = GetArmClient().GetSubscription(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000")).GetSupportTicketDetails();
            await foreach (var _ in collection.GetAllAsync(top, filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetAll3()
        {
            // Example: List support tickets in open state for a subscription
            int? top = null;
            string filter = "status eq 'Open'";

            var collection = GetArmClient().GetSubscription(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000")).GetSupportTicketDetails();
            await foreach (var _ in collection.GetAllAsync(top, filter))
            {
            }
        }
    }
}
