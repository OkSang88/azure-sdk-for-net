// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Resources.Tests.Mock
{
    /// <summary> Test for Deployment. </summary>
    public partial class DeploymentMockTests : MockTestBase
    {
        public DeploymentMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task WhatIf()
        {
            // Example: Predict template changes at resource group scope
            var deploymentId = Resources.Deployment.CreateResourceIdentifier("default", "my-deployment");
            var deployment = GetArmClient().GetDeployment(deploymentId);
            string location = null; /* Can't find this parameter in example, please provide value here!*/
            Models.DeploymentWhatIfProperties properties = new Models.DeploymentWhatIfProperties(mode: new Models.DeploymentMode("Incremental"))
            {
                TemplateLink = new Models.TemplateLink(),
                Parameters = new Dictionary<string, object>()
                {
                }
            ,
            };

            await deployment.WhatIfAsync(true, location, properties);
        }

        [RecordedTest]
        public async Task WhatIf2()
        {
            // Example: Predict template changes at management group scope
            var deploymentId = Resources.Deployment.CreateResourceIdentifier("default", "exampleDeploymentName");
            var deployment = GetArmClient().GetDeployment(deploymentId);
            string location = "eastus";
            Models.DeploymentWhatIfProperties properties = new Models.DeploymentWhatIfProperties(mode: new Models.DeploymentMode("Incremental"))
            {
                TemplateLink = new Models.TemplateLink(),
                Parameters = new Dictionary<string, object>()
                {
                }
            ,
            };

            await deployment.WhatIfAsync(true, location, properties);
        }

        [RecordedTest]
        public async Task WhatIf3()
        {
            // Example: Predict template changes at subscription scope
            var deploymentId = Resources.Deployment.CreateResourceIdentifier("default", "my-deployment");
            var deployment = GetArmClient().GetDeployment(deploymentId);
            string location = "westus";
            Models.DeploymentWhatIfProperties properties = new Models.DeploymentWhatIfProperties(mode: new Models.DeploymentMode("Incremental"))
            {
                TemplateLink = new Models.TemplateLink(),
                Parameters = new Dictionary<string, object>()
                {
                }
            ,
            };

            await deployment.WhatIfAsync(true, location, properties);
        }

        [RecordedTest]
        public async Task WhatIf4()
        {
            // Example: Predict template changes at management group scope
            var deploymentId = Resources.Deployment.CreateResourceIdentifier("default", "exampleDeploymentName");
            var deployment = GetArmClient().GetDeployment(deploymentId);
            string location = "eastus";
            Models.DeploymentWhatIfProperties properties = new Models.DeploymentWhatIfProperties(mode: new Models.DeploymentMode("Incremental"))
            {
                TemplateLink = new Models.TemplateLink(),
                Parameters = new Dictionary<string, object>()
                {
                }
            ,
            };

            await deployment.WhatIfAsync(true, location, properties);
        }
    }
}
