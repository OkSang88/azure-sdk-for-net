// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace StorSimple8000SeriesManagementClient.Models
{
    internal static partial class TargetEligibilityResultCodeExtensions
    {
        public static string ToSerialString(this TargetEligibilityResultCode value) => value switch
        {
            TargetEligibilityResultCode.TargetAndSourceCannotBeSameError => "TargetAndSourceCannotBeSameError",
            TargetEligibilityResultCode.TargetIsNotOnlineError => "TargetIsNotOnlineError",
            TargetEligibilityResultCode.TargetSourceIncompatibleVersionError => "TargetSourceIncompatibleVersionError",
            TargetEligibilityResultCode.LocalToTieredVolumesConversionWarning => "LocalToTieredVolumesConversionWarning",
            TargetEligibilityResultCode.TargetInsufficientCapacityError => "TargetInsufficientCapacityError",
            TargetEligibilityResultCode.TargetInsufficientLocalVolumeMemoryError => "TargetInsufficientLocalVolumeMemoryError",
            TargetEligibilityResultCode.TargetInsufficientTieredVolumeMemoryError => "TargetInsufficientTieredVolumeMemoryError",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown TargetEligibilityResultCode value.")
        };

        public static TargetEligibilityResultCode ToTargetEligibilityResultCode(this string value)
        {
            if (string.Equals(value, "TargetAndSourceCannotBeSameError", StringComparison.InvariantCultureIgnoreCase)) return TargetEligibilityResultCode.TargetAndSourceCannotBeSameError;
            if (string.Equals(value, "TargetIsNotOnlineError", StringComparison.InvariantCultureIgnoreCase)) return TargetEligibilityResultCode.TargetIsNotOnlineError;
            if (string.Equals(value, "TargetSourceIncompatibleVersionError", StringComparison.InvariantCultureIgnoreCase)) return TargetEligibilityResultCode.TargetSourceIncompatibleVersionError;
            if (string.Equals(value, "LocalToTieredVolumesConversionWarning", StringComparison.InvariantCultureIgnoreCase)) return TargetEligibilityResultCode.LocalToTieredVolumesConversionWarning;
            if (string.Equals(value, "TargetInsufficientCapacityError", StringComparison.InvariantCultureIgnoreCase)) return TargetEligibilityResultCode.TargetInsufficientCapacityError;
            if (string.Equals(value, "TargetInsufficientLocalVolumeMemoryError", StringComparison.InvariantCultureIgnoreCase)) return TargetEligibilityResultCode.TargetInsufficientLocalVolumeMemoryError;
            if (string.Equals(value, "TargetInsufficientTieredVolumeMemoryError", StringComparison.InvariantCultureIgnoreCase)) return TargetEligibilityResultCode.TargetInsufficientTieredVolumeMemoryError;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown TargetEligibilityResultCode value.");
        }
    }
}
