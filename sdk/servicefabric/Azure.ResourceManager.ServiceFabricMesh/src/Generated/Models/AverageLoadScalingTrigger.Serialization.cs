// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceFabricMesh.Models
{
    public partial class AverageLoadScalingTrigger : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("metric");
            writer.WriteObjectValue(Metric);
            writer.WritePropertyName("lowerLoadThreshold");
            writer.WriteNumberValue(LowerLoadThreshold);
            writer.WritePropertyName("upperLoadThreshold");
            writer.WriteNumberValue(UpperLoadThreshold);
            writer.WritePropertyName("scaleIntervalInSeconds");
            writer.WriteNumberValue(ScaleIntervalInSeconds);
            writer.WritePropertyName("kind");
            writer.WriteStringValue(Kind.ToString());
            writer.WriteEndObject();
        }

        internal static AverageLoadScalingTrigger DeserializeAverageLoadScalingTrigger(JsonElement element)
        {
            AutoScalingMetric metric = default;
            double lowerLoadThreshold = default;
            double upperLoadThreshold = default;
            int scaleIntervalInSeconds = default;
            AutoScalingTriggerKind kind = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("metric"))
                {
                    metric = AutoScalingMetric.DeserializeAutoScalingMetric(property.Value);
                    continue;
                }
                if (property.NameEquals("lowerLoadThreshold"))
                {
                    lowerLoadThreshold = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("upperLoadThreshold"))
                {
                    upperLoadThreshold = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("scaleIntervalInSeconds"))
                {
                    scaleIntervalInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("kind"))
                {
                    kind = new AutoScalingTriggerKind(property.Value.GetString());
                    continue;
                }
            }
            return new AverageLoadScalingTrigger(kind, metric, lowerLoadThreshold, upperLoadThreshold, scaleIntervalInSeconds);
        }
    }
}
