// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using StorSimple8000SeriesManagementClient.Models;

namespace StorSimple8000SeriesManagementClient
{
    /// <summary> A class representing collection of Volume and their operations over its parent. </summary>
    public partial class VolumeCollection : ArmCollection, IEnumerable<Volume>, IAsyncEnumerable<Volume>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly VolumesRestOperations _volumesRestClient;

        /// <summary> Initializes a new instance of the <see cref="VolumeCollection"/> class for mocking. </summary>
        protected VolumeCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="VolumeCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal VolumeCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _volumesRestClient = new VolumesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != VolumeContainer.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, VolumeContainer.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// <summary> Creates or updates the volume. </summary>
        /// <param name="volumeName"> The volume name. </param>
        /// <param name="parameters"> Volume to be created or updated. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="volumeName"/> or <paramref name="parameters"/> is null. </exception>
        public virtual VolumeCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string volumeName, VolumeData parameters, CancellationToken cancellationToken = default)
        {
            if (volumeName == null)
            {
                throw new ArgumentNullException(nameof(volumeName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("VolumeCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _volumesRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, volumeName, parameters, cancellationToken);
                var operation = new VolumeCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _volumesRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, volumeName, parameters).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates the volume. </summary>
        /// <param name="volumeName"> The volume name. </param>
        /// <param name="parameters"> Volume to be created or updated. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="volumeName"/> or <paramref name="parameters"/> is null. </exception>
        public async virtual Task<VolumeCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string volumeName, VolumeData parameters, CancellationToken cancellationToken = default)
        {
            if (volumeName == null)
            {
                throw new ArgumentNullException(nameof(volumeName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("VolumeCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _volumesRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, volumeName, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new VolumeCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _volumesRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, volumeName, parameters).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the properties of the specified volume name. </summary>
        /// <param name="volumeName"> The volume name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="volumeName"/> is null. </exception>
        public virtual Response<Volume> Get(string volumeName, CancellationToken cancellationToken = default)
        {
            if (volumeName == null)
            {
                throw new ArgumentNullException(nameof(volumeName));
            }

            using var scope = _clientDiagnostics.CreateScope("VolumeCollection.Get");
            scope.Start();
            try
            {
                var response = _volumesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, volumeName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new Volume(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the properties of the specified volume name. </summary>
        /// <param name="volumeName"> The volume name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="volumeName"/> is null. </exception>
        public async virtual Task<Response<Volume>> GetAsync(string volumeName, CancellationToken cancellationToken = default)
        {
            if (volumeName == null)
            {
                throw new ArgumentNullException(nameof(volumeName));
            }

            using var scope = _clientDiagnostics.CreateScope("VolumeCollection.Get");
            scope.Start();
            try
            {
                var response = await _volumesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, volumeName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new Volume(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="volumeName"> The volume name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="volumeName"/> is null. </exception>
        public virtual Response<Volume> GetIfExists(string volumeName, CancellationToken cancellationToken = default)
        {
            if (volumeName == null)
            {
                throw new ArgumentNullException(nameof(volumeName));
            }

            using var scope = _clientDiagnostics.CreateScope("VolumeCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _volumesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, volumeName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<Volume>(null, response.GetRawResponse());
                return Response.FromValue(new Volume(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="volumeName"> The volume name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="volumeName"/> is null. </exception>
        public async virtual Task<Response<Volume>> GetIfExistsAsync(string volumeName, CancellationToken cancellationToken = default)
        {
            if (volumeName == null)
            {
                throw new ArgumentNullException(nameof(volumeName));
            }

            using var scope = _clientDiagnostics.CreateScope("VolumeCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _volumesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, volumeName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<Volume>(null, response.GetRawResponse());
                return Response.FromValue(new Volume(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="volumeName"> The volume name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="volumeName"/> is null. </exception>
        public virtual Response<bool> Exists(string volumeName, CancellationToken cancellationToken = default)
        {
            if (volumeName == null)
            {
                throw new ArgumentNullException(nameof(volumeName));
            }

            using var scope = _clientDiagnostics.CreateScope("VolumeCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(volumeName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="volumeName"> The volume name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="volumeName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string volumeName, CancellationToken cancellationToken = default)
        {
            if (volumeName == null)
            {
                throw new ArgumentNullException(nameof(volumeName));
            }

            using var scope = _clientDiagnostics.CreateScope("VolumeCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(volumeName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves all the volumes in a volume container. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Volume" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Volume> GetAll(CancellationToken cancellationToken = default)
        {
            Page<Volume> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("VolumeCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _volumesRestClient.ListByVolumeContainer(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new Volume(Parent, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Retrieves all the volumes in a volume container. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Volume" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Volume> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<Volume>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("VolumeCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _volumesRestClient.ListByVolumeContainerAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new Volume(Parent, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        IEnumerator<Volume> IEnumerable<Volume>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<Volume> IAsyncEnumerable<Volume>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, Volume, VolumeData> Construct() { }
    }
}
