// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.StorSimple8000Series;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.StorSimple8000Series.Tests.Mock
{
    /// <summary> Test for VolumeContainer. </summary>
    public partial class VolumeContainerMockTests : MockTestBase
    {
        public VolumeContainerMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: VolumeContainersGet
            var volumeContainerId = StorSimple8000Series.VolumeContainer.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest", "VolumeContainerForSDKTest");
            var volumeContainer = GetArmClient().GetVolumeContainer(volumeContainerId);

            await volumeContainer.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: VolumeContainersDelete
            var volumeContainerId = StorSimple8000Series.VolumeContainer.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest", "VolumeContainerForSDKTest");
            var volumeContainer = GetArmClient().GetVolumeContainer(volumeContainerId);

            await volumeContainer.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task GetMetrics()
        {
            // Example: VolumeContainersListMetrics
            var volumeContainerId = StorSimple8000Series.VolumeContainer.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest", "vcForOdataFilterTest");
            var volumeContainer = GetArmClient().GetVolumeContainer(volumeContainerId);
            string filter = "name/value eq 'CloudConsumedStorage' and timeGrain eq 'PT1M' and startTime ge '2017-06-17T18:30:00Z' and endTime le '2017-06-21T18:30:00Z' and category eq 'CapacityUtilization'";

            await foreach (var _ in volumeContainer.GetMetricsAsync(filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetMetricDefinition()
        {
            // Example: VolumeContainersListMetricDefinition
            var volumeContainerId = StorSimple8000Series.VolumeContainer.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroupForSDKTest", "ManagerForSDKTest1", "Device05ForSDKTest", "vcForOdataFilterTest");
            var volumeContainer = GetArmClient().GetVolumeContainer(volumeContainerId);

            await foreach (var _ in volumeContainer.GetMetricDefinitionAsync())
            {
            }
        }
    }
}
