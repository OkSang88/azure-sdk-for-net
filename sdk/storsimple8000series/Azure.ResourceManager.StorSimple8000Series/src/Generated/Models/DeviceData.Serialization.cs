// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.StorSimple8000Series.Models;

namespace Azure.ResourceManager.StorSimple8000Series
{
    public partial class DeviceData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind");
                writer.WriteStringValue(Kind);
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            writer.WritePropertyName("friendlyName");
            writer.WriteStringValue(FriendlyName);
            writer.WritePropertyName("activationTime");
            writer.WriteStringValue(ActivationTime, "O");
            writer.WritePropertyName("culture");
            writer.WriteStringValue(Culture);
            writer.WritePropertyName("deviceDescription");
            writer.WriteStringValue(DeviceDescription);
            writer.WritePropertyName("deviceSoftwareVersion");
            writer.WriteStringValue(DeviceSoftwareVersion);
            if (Optional.IsDefined(FriendlySoftwareName))
            {
                writer.WritePropertyName("friendlySoftwareName");
                writer.WriteStringValue(FriendlySoftwareName);
            }
            writer.WritePropertyName("deviceConfigurationStatus");
            writer.WriteStringValue(DeviceConfigurationStatus.ToSerialString());
            writer.WritePropertyName("targetIqn");
            writer.WriteStringValue(TargetIqn);
            writer.WritePropertyName("modelDescription");
            writer.WriteStringValue(ModelDescription);
            writer.WritePropertyName("status");
            writer.WriteStringValue(Status.ToSerialString());
            writer.WritePropertyName("serialNumber");
            writer.WriteStringValue(SerialNumber);
            writer.WritePropertyName("deviceType");
            writer.WriteStringValue(DeviceType.ToSerialString());
            writer.WritePropertyName("activeController");
            writer.WriteStringValue(ActiveController.ToSerialString());
            writer.WritePropertyName("friendlySoftwareVersion");
            writer.WriteStringValue(FriendlySoftwareVersion);
            if (Optional.IsDefined(AvailableLocalStorageInBytes))
            {
                writer.WritePropertyName("availableLocalStorageInBytes");
                writer.WriteNumberValue(AvailableLocalStorageInBytes.Value);
            }
            if (Optional.IsDefined(AvailableTieredStorageInBytes))
            {
                writer.WritePropertyName("availableTieredStorageInBytes");
                writer.WriteNumberValue(AvailableTieredStorageInBytes.Value);
            }
            if (Optional.IsDefined(ProvisionedTieredStorageInBytes))
            {
                writer.WritePropertyName("provisionedTieredStorageInBytes");
                writer.WriteNumberValue(ProvisionedTieredStorageInBytes.Value);
            }
            if (Optional.IsDefined(ProvisionedLocalStorageInBytes))
            {
                writer.WritePropertyName("provisionedLocalStorageInBytes");
                writer.WriteNumberValue(ProvisionedLocalStorageInBytes.Value);
            }
            if (Optional.IsDefined(ProvisionedVolumeSizeInBytes))
            {
                writer.WritePropertyName("provisionedVolumeSizeInBytes");
                writer.WriteNumberValue(ProvisionedVolumeSizeInBytes.Value);
            }
            if (Optional.IsDefined(UsingStorageInBytes))
            {
                writer.WritePropertyName("usingStorageInBytes");
                writer.WriteNumberValue(UsingStorageInBytes.Value);
            }
            if (Optional.IsDefined(TotalTieredStorageInBytes))
            {
                writer.WritePropertyName("totalTieredStorageInBytes");
                writer.WriteNumberValue(TotalTieredStorageInBytes.Value);
            }
            if (Optional.IsDefined(AgentGroupVersion))
            {
                writer.WritePropertyName("agentGroupVersion");
                writer.WriteNumberValue(AgentGroupVersion.Value);
            }
            if (Optional.IsDefined(NetworkInterfaceCardCount))
            {
                writer.WritePropertyName("networkInterfaceCardCount");
                writer.WriteNumberValue(NetworkInterfaceCardCount.Value);
            }
            if (Optional.IsDefined(DeviceLocation))
            {
                writer.WritePropertyName("deviceLocation");
                writer.WriteStringValue(DeviceLocation);
            }
            if (Optional.IsDefined(Details))
            {
                writer.WritePropertyName("details");
                writer.WriteObjectValue(Details);
            }
            if (Optional.IsDefined(RolloverDetails))
            {
                writer.WritePropertyName("rolloverDetails");
                writer.WriteObjectValue(RolloverDetails);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static DeviceData DeserializeDeviceData(JsonElement element)
        {
            Optional<string> kind = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            string friendlyName = default;
            DateTimeOffset activationTime = default;
            string culture = default;
            string deviceDescription = default;
            string deviceSoftwareVersion = default;
            Optional<string> friendlySoftwareName = default;
            DeviceConfigurationStatus deviceConfigurationStatus = default;
            string targetIqn = default;
            string modelDescription = default;
            DeviceStatus status = default;
            string serialNumber = default;
            DeviceType deviceType = default;
            ControllerId activeController = default;
            string friendlySoftwareVersion = default;
            Optional<long> availableLocalStorageInBytes = default;
            Optional<long> availableTieredStorageInBytes = default;
            Optional<long> provisionedTieredStorageInBytes = default;
            Optional<long> provisionedLocalStorageInBytes = default;
            Optional<long> provisionedVolumeSizeInBytes = default;
            Optional<long> usingStorageInBytes = default;
            Optional<long> totalTieredStorageInBytes = default;
            Optional<int> agentGroupVersion = default;
            Optional<int> networkInterfaceCardCount = default;
            Optional<string> deviceLocation = default;
            Optional<VirtualMachineApiType> virtualMachineApiType = default;
            Optional<DeviceDetails> details = default;
            Optional<DeviceRolloverDetails> rolloverDetails = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("friendlyName"))
                        {
                            friendlyName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("activationTime"))
                        {
                            activationTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("culture"))
                        {
                            culture = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("deviceDescription"))
                        {
                            deviceDescription = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("deviceSoftwareVersion"))
                        {
                            deviceSoftwareVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("friendlySoftwareName"))
                        {
                            friendlySoftwareName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("deviceConfigurationStatus"))
                        {
                            deviceConfigurationStatus = property0.Value.GetString().ToDeviceConfigurationStatus();
                            continue;
                        }
                        if (property0.NameEquals("targetIqn"))
                        {
                            targetIqn = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("modelDescription"))
                        {
                            modelDescription = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("status"))
                        {
                            status = property0.Value.GetString().ToDeviceStatus();
                            continue;
                        }
                        if (property0.NameEquals("serialNumber"))
                        {
                            serialNumber = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("deviceType"))
                        {
                            deviceType = property0.Value.GetString().ToDeviceType();
                            continue;
                        }
                        if (property0.NameEquals("activeController"))
                        {
                            activeController = property0.Value.GetString().ToControllerId();
                            continue;
                        }
                        if (property0.NameEquals("friendlySoftwareVersion"))
                        {
                            friendlySoftwareVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("availableLocalStorageInBytes"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            availableLocalStorageInBytes = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("availableTieredStorageInBytes"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            availableTieredStorageInBytes = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("provisionedTieredStorageInBytes"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            provisionedTieredStorageInBytes = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("provisionedLocalStorageInBytes"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            provisionedLocalStorageInBytes = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("provisionedVolumeSizeInBytes"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            provisionedVolumeSizeInBytes = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("usingStorageInBytes"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            usingStorageInBytes = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("totalTieredStorageInBytes"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            totalTieredStorageInBytes = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("agentGroupVersion"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            agentGroupVersion = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("networkInterfaceCardCount"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            networkInterfaceCardCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("deviceLocation"))
                        {
                            deviceLocation = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("virtualMachineApiType"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            virtualMachineApiType = property0.Value.GetString().ToVirtualMachineApiType();
                            continue;
                        }
                        if (property0.NameEquals("details"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            details = DeviceDetails.DeserializeDeviceDetails(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("rolloverDetails"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            rolloverDetails = DeviceRolloverDetails.DeserializeDeviceRolloverDetails(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new DeviceData(id, name, type, kind.Value, friendlyName, activationTime, culture, deviceDescription, deviceSoftwareVersion, friendlySoftwareName.Value, deviceConfigurationStatus, targetIqn, modelDescription, status, serialNumber, deviceType, activeController, friendlySoftwareVersion, Optional.ToNullable(availableLocalStorageInBytes), Optional.ToNullable(availableTieredStorageInBytes), Optional.ToNullable(provisionedTieredStorageInBytes), Optional.ToNullable(provisionedLocalStorageInBytes), Optional.ToNullable(provisionedVolumeSizeInBytes), Optional.ToNullable(usingStorageInBytes), Optional.ToNullable(totalTieredStorageInBytes), Optional.ToNullable(agentGroupVersion), Optional.ToNullable(networkInterfaceCardCount), deviceLocation.Value, Optional.ToNullable(virtualMachineApiType), details.Value, rolloverDetails.Value);
        }
    }
}
