// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using FrontDoorManagementClient.Models;

namespace FrontDoorManagementClient
{
    /// <summary> A class to add extension methods to Tenant. </summary>
    public static partial class TenantExtensions
    {
        private static FrontDoorNameAvailabilityRestOperations GetFrontDoorNameAvailabilityRestOperations(ClientDiagnostics clientDiagnostics, TokenCredential credential, ArmClientOptions clientOptions, HttpPipeline pipeline, Uri endpoint = null)
        {
            return new FrontDoorNameAvailabilityRestOperations(clientDiagnostics, pipeline, clientOptions, endpoint);
        }

        /// <summary> Check the availability of a Front Door resource name. </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="checkFrontDoorNameAvailabilityInput"> Input to check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="checkFrontDoorNameAvailabilityInput"/> is null. </exception>
        public static async Task<Response<CheckNameAvailabilityOutput>> CheckFrontDoorNameAvailabilityAsync(this Tenant tenant, CheckNameAvailabilityInput checkFrontDoorNameAvailabilityInput, CancellationToken cancellationToken = default)
        {
            if (checkFrontDoorNameAvailabilityInput == null)
            {
                throw new ArgumentNullException(nameof(checkFrontDoorNameAvailabilityInput));
            }

            return await tenant.UseClientContext(async (baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                using var scope = clientDiagnostics.CreateScope("TenantExtensions.CheckFrontDoorNameAvailability");
                scope.Start();
                try
                {
                    var restOperations = GetFrontDoorNameAvailabilityRestOperations(clientDiagnostics, credential, options, pipeline, baseUri);
                    var response = await restOperations.CheckAsync(checkFrontDoorNameAvailabilityInput, cancellationToken).ConfigureAwait(false);
                    return response;
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            ).ConfigureAwait(false);
        }

        /// <summary> Check the availability of a Front Door resource name. </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="checkFrontDoorNameAvailabilityInput"> Input to check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="checkFrontDoorNameAvailabilityInput"/> is null. </exception>
        public static Response<CheckNameAvailabilityOutput> CheckFrontDoorNameAvailability(this Tenant tenant, CheckNameAvailabilityInput checkFrontDoorNameAvailabilityInput, CancellationToken cancellationToken = default)
        {
            if (checkFrontDoorNameAvailabilityInput == null)
            {
                throw new ArgumentNullException(nameof(checkFrontDoorNameAvailabilityInput));
            }

            return tenant.UseClientContext((baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                using var scope = clientDiagnostics.CreateScope("TenantExtensions.CheckFrontDoorNameAvailability");
                scope.Start();
                try
                {
                    var restOperations = GetFrontDoorNameAvailabilityRestOperations(clientDiagnostics, credential, options, pipeline, baseUri);
                    var response = restOperations.Check(checkFrontDoorNameAvailabilityInput, cancellationToken);
                    return response;
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            );
        }
    }
}
