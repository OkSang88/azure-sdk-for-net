// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for SyncGroup. </summary>
    public partial class SyncGroupCollectionMockTests : MockTestBase
    {
        public SyncGroupCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create a sync group
            string syncGroupName = "syncgroupcrud-3187";
            Sql.SyncGroupData parameters = new Sql.SyncGroupData()
            {
                Interval = -1,
                ConflictResolutionPolicy = new Sql.Models.SyncConflictResolutionPolicy("HubWin"),
                SyncDatabaseId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-3521/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328",
                HubDatabaseUserName = "hubUser",
                UsePrivateLinkConnection = true,
            };

            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "syncgroupcrud-65440", "syncgroupcrud-8475", "syncgroupcrud-4328");
            var collection = GetArmClient().GetSqlDatabase(sqlDatabaseId).GetSyncGroups();
            await collection.CreateOrUpdateAsync(true, syncGroupName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Update a sync group
            string syncGroupName = "syncgroupcrud-3187";
            Sql.SyncGroupData parameters = new Sql.SyncGroupData()
            {
                Interval = -1,
                ConflictResolutionPolicy = new Sql.Models.SyncConflictResolutionPolicy("HubWin"),
                SyncDatabaseId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-3521/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328",
                HubDatabaseUserName = "hubUser",
                UsePrivateLinkConnection = true,
            };

            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "syncgroupcrud-65440", "syncgroupcrud-8475", "syncgroupcrud-4328");
            var collection = GetArmClient().GetSqlDatabase(sqlDatabaseId).GetSyncGroups();
            await collection.CreateOrUpdateAsync(true, syncGroupName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get a sync group
            string syncGroupName = "syncgroupcrud-3187";

            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "syncgroupcrud-65440", "syncgroupcrud-8475", "syncgroupcrud-4328");
            var collection = GetArmClient().GetSqlDatabase(sqlDatabaseId).GetSyncGroups();
            await collection.GetAsync(syncGroupName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List sync groups under a given database

            var sqlDatabaseId = Sql.SqlDatabase.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "syncgroupcrud-65440", "syncgroupcrud-8475", "syncgroupcrud-4328");
            var collection = GetArmClient().GetSqlDatabase(sqlDatabaseId).GetSyncGroups();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
