// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for P2SVpnGateway. </summary>
    public partial class P2SVpnGatewayMockTests : MockTestBase
    {
        public P2SVpnGatewayMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: P2SVpnGatewayGet
            var p2SVpnGateway = GetArmClient().GetP2SVpnGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/p2svpnGateways/p2sVpnGateway1"));

            await p2SVpnGateway.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: P2SVpnGatewayDelete
            var p2SVpnGateway = GetArmClient().GetP2SVpnGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/p2svpnGateways/p2sVpnGateway1"));

            await p2SVpnGateway.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: P2SVpnGatewayUpdate
            var p2SVpnGateway = GetArmClient().GetP2SVpnGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/p2svpnGateways/p2sVpnGateway1"));
            Network.Models.TagsObject p2SVpnGatewayParameters = new Network.Models.TagsObject();

            await p2SVpnGateway.UpdateAsync(p2SVpnGatewayParameters);
        }

        [RecordedTest]
        public async Task ResetAsync()
        {
            // Example: ResetP2SVpnGateway
            var p2SVpnGateway = GetArmClient().GetP2SVpnGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/p2svpnGateways/p2sVpnGateway1"));

            await p2SVpnGateway.ResetAsync();
        }

        [RecordedTest]
        public async Task GenerateVpnProfileAsync()
        {
            // Example: GenerateP2SVpnGatewayVPNProfile
            var p2SVpnGateway = GetArmClient().GetP2SVpnGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/p2svpnGateways/p2sVpnGateway1"));
            Network.Models.P2SVpnProfileParameters parameters = new Network.Models.P2SVpnProfileParameters()
            {
                AuthenticationMethod = new Network.Models.AuthenticationMethod("EAPTLS"),
            };

            await p2SVpnGateway.GenerateVpnProfileAsync(parameters);
        }

        [RecordedTest]
        public async Task GetP2SVpnConnectionHealthAsync()
        {
            // Example: P2SVpnGatewayGetConnectionHealth
            var p2SVpnGateway = GetArmClient().GetP2SVpnGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/p2svpnGateways/p2sVpnGateway1"));

            await p2SVpnGateway.GetP2SVpnConnectionHealthAsync();
        }

        [RecordedTest]
        public async Task GetP2SVpnConnectionHealthDetailedAsync()
        {
            // Example: P2SVpnGatewayGetConnectionHealthDetailed
            var p2SVpnGateway = GetArmClient().GetP2SVpnGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/p2s-vpn-gateway-test/providers/Microsoft.Network/p2svpnGateways/p2svpngateway"));
            Network.Models.P2SVpnConnectionHealthRequest request = new Network.Models.P2SVpnConnectionHealthRequest()
            {
                OutputBlobSasUrl = "https://blobcortextesturl.blob.core.windows.net/folderforconfig/p2sconnectionhealths?sp=rw&se=2018-01-10T03%3A42%3A04Z&sv=2017-04-17&sig=WvXrT5bDmDFfgHs%2Brz%2BjAu123eRCNE9BO0eQYcPDT7pY%3D&sr=b",
            };

            await p2SVpnGateway.GetP2SVpnConnectionHealthDetailedAsync(request);
        }

        [RecordedTest]
        public async Task DisconnectP2SVpnConnectionsAsync()
        {
            // Example: Disconnect VpnConnections from P2sVpn Gateway
            var p2SVpnGateway = GetArmClient().GetP2SVpnGateway(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/p2s-vpn-gateway-test/providers/Microsoft.Network/p2svpnGateways/p2svpngateway"));
            Network.Models.P2SVpnConnectionRequest request = new Network.Models.P2SVpnConnectionRequest();

            await p2SVpnGateway.DisconnectP2SVpnConnectionsAsync(request);
        }
    }
}
