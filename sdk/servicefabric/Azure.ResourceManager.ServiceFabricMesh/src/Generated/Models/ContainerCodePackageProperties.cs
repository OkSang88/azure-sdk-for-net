// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.ServiceFabricMesh.Models
{
    /// <summary> Describes a container and its runtime properties. </summary>
    public partial class ContainerCodePackageProperties
    {
        /// <summary> Initializes a new instance of ContainerCodePackageProperties. </summary>
        /// <param name="name"> The name of the code package. </param>
        /// <param name="image"> The Container image to use. </param>
        /// <param name="resources"> The resources required by this container. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="image"/>, or <paramref name="resources"/> is null. </exception>
        public ContainerCodePackageProperties(string name, string image, ResourceRequirements resources)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (image == null)
            {
                throw new ArgumentNullException(nameof(image));
            }
            if (resources == null)
            {
                throw new ArgumentNullException(nameof(resources));
            }

            Name = name;
            Image = image;
            Commands = new ChangeTrackingList<string>();
            EnvironmentVariables = new ChangeTrackingList<EnvironmentVariable>();
            Settings = new ChangeTrackingList<Setting>();
            Labels = new ChangeTrackingList<ContainerLabel>();
            Endpoints = new ChangeTrackingList<EndpointProperties>();
            Resources = resources;
            VolumeRefs = new ChangeTrackingList<VolumeReference>();
            Volumes = new ChangeTrackingList<ApplicationScopedVolume>();
            ReliableCollectionsRefs = new ChangeTrackingList<ReliableCollectionsRef>();
        }

        /// <summary> Initializes a new instance of ContainerCodePackageProperties. </summary>
        /// <param name="name"> The name of the code package. </param>
        /// <param name="image"> The Container image to use. </param>
        /// <param name="imageRegistryCredential"> Image registry credential. </param>
        /// <param name="entrypoint"> Override for the default entry point in the container. </param>
        /// <param name="commands"> Command array to execute within the container in exec form. </param>
        /// <param name="environmentVariables"> The environment variables to set in this container. </param>
        /// <param name="settings"> The settings to set in this container. The setting file path can be fetched from environment variable &quot;Fabric_SettingPath&quot;. The path for Windows container is &quot;C:\\secrets&quot;. The path for Linux container is &quot;/var/secrets&quot;. </param>
        /// <param name="labels"> The labels to set in this container. </param>
        /// <param name="endpoints"> The endpoints exposed by this container. </param>
        /// <param name="resources"> The resources required by this container. </param>
        /// <param name="volumeRefs"> Volumes to be attached to the container. The lifetime of these volumes is independent of the application&apos;s lifetime. </param>
        /// <param name="volumes"> Volumes to be attached to the container. The lifetime of these volumes is scoped to the application&apos;s lifetime. </param>
        /// <param name="diagnostics"> Reference to sinks in DiagnosticsDescription. </param>
        /// <param name="reliableCollectionsRefs"> A list of ReliableCollection resources used by this particular code package. Please refer to ReliableCollectionsRef for more details. </param>
        /// <param name="instanceView"> Runtime information of a container instance. </param>
        internal ContainerCodePackageProperties(string name, string image, ImageRegistryCredential imageRegistryCredential, string entrypoint, IList<string> commands, IList<EnvironmentVariable> environmentVariables, IList<Setting> settings, IList<ContainerLabel> labels, IList<EndpointProperties> endpoints, ResourceRequirements resources, IList<VolumeReference> volumeRefs, IList<ApplicationScopedVolume> volumes, DiagnosticsRef diagnostics, IList<ReliableCollectionsRef> reliableCollectionsRefs, ContainerInstanceView instanceView)
        {
            Name = name;
            Image = image;
            ImageRegistryCredential = imageRegistryCredential;
            Entrypoint = entrypoint;
            Commands = commands;
            EnvironmentVariables = environmentVariables;
            Settings = settings;
            Labels = labels;
            Endpoints = endpoints;
            Resources = resources;
            VolumeRefs = volumeRefs;
            Volumes = volumes;
            Diagnostics = diagnostics;
            ReliableCollectionsRefs = reliableCollectionsRefs;
            InstanceView = instanceView;
        }

        /// <summary> The name of the code package. </summary>
        public string Name { get; set; }
        /// <summary> The Container image to use. </summary>
        public string Image { get; set; }
        /// <summary> Image registry credential. </summary>
        public ImageRegistryCredential ImageRegistryCredential { get; set; }
        /// <summary> Override for the default entry point in the container. </summary>
        public string Entrypoint { get; set; }
        /// <summary> Command array to execute within the container in exec form. </summary>
        public IList<string> Commands { get; }
        /// <summary> The environment variables to set in this container. </summary>
        public IList<EnvironmentVariable> EnvironmentVariables { get; }
        /// <summary> The settings to set in this container. The setting file path can be fetched from environment variable &quot;Fabric_SettingPath&quot;. The path for Windows container is &quot;C:\\secrets&quot;. The path for Linux container is &quot;/var/secrets&quot;. </summary>
        public IList<Setting> Settings { get; }
        /// <summary> The labels to set in this container. </summary>
        public IList<ContainerLabel> Labels { get; }
        /// <summary> The endpoints exposed by this container. </summary>
        public IList<EndpointProperties> Endpoints { get; }
        /// <summary> The resources required by this container. </summary>
        public ResourceRequirements Resources { get; set; }
        /// <summary> Volumes to be attached to the container. The lifetime of these volumes is independent of the application&apos;s lifetime. </summary>
        public IList<VolumeReference> VolumeRefs { get; }
        /// <summary> Volumes to be attached to the container. The lifetime of these volumes is scoped to the application&apos;s lifetime. </summary>
        public IList<ApplicationScopedVolume> Volumes { get; }
        /// <summary> Reference to sinks in DiagnosticsDescription. </summary>
        public DiagnosticsRef Diagnostics { get; set; }
        /// <summary> A list of ReliableCollection resources used by this particular code package. Please refer to ReliableCollectionsRef for more details. </summary>
        public IList<ReliableCollectionsRef> ReliableCollectionsRefs { get; }
        /// <summary> Runtime information of a container instance. </summary>
        public ContainerInstanceView InstanceView { get; }
    }
}
