// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Cdn;
using Azure.ResourceManager.Cdn.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Cdn.Tests.Mock
{
    /// <summary> Test for CdnOriginGroup. </summary>
    public partial class CdnOriginGroupMockTests : MockTestBase
    {
        public CdnOriginGroupMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: OriginGroups_Get
            var cdnOriginGroupId = Cdn.CdnOriginGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "RG", "profile1", "endpoint1", "originGroup1");
            var cdnOriginGroup = GetArmClient().GetCdnOriginGroup(cdnOriginGroupId);

            await cdnOriginGroup.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: OriginGroups_Delete
            var cdnOriginGroupId = Cdn.CdnOriginGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "RG", "profile1", "endpoint1", "originGroup1");
            var cdnOriginGroup = GetArmClient().GetCdnOriginGroup(cdnOriginGroupId);

            await cdnOriginGroup.DeleteAsync();
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: OriginGroups_Update
            var cdnOriginGroupId = Cdn.CdnOriginGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "RG", "profile1", "endpoint1", "originGroup1");
            var cdnOriginGroup = GetArmClient().GetCdnOriginGroup(cdnOriginGroupId);
            Cdn.Models.OriginGroupUpdateOptions originGroupUpdateProperties = new Cdn.Models.OriginGroupUpdateOptions()
            {
                HealthProbeSettings = new Cdn.Models.HealthProbeParameters()
                {
                    ProbePath = "/health.aspx",
                    ProbeRequestType = Cdn.Models.HealthProbeRequestType.GET,
                    ProbeProtocol = Cdn.Models.ProbeProtocol.Http,
                    ProbeIntervalInSeconds = 120,
                },
            };

            await cdnOriginGroup.UpdateAsync(originGroupUpdateProperties);
        }
    }
}
