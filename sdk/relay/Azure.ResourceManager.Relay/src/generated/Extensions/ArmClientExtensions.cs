// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure.Core;
using Azure.ResourceManager;

namespace RelayAPI
{
    /// <summary> A class to add extension methods to ArmClient. </summary>
    public static partial class ArmClientExtensions
    {
        #region RelayNamespace
        /// <summary> Gets an object representing a RelayNamespace along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="armClient"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="RelayNamespace" /> object. </returns>
        public static RelayNamespace GetRelayNamespace(this ArmClient armClient, ResourceIdentifier id)
        {
            RelayNamespace.ValidateResourceId(id);
            return armClient.UseClientContext((uri, credential, clientOptions, pipeline) => new RelayNamespace(clientOptions, credential, uri, pipeline, id));
        }
        #endregion

        #region NamespaceAuthorizationRule
        /// <summary> Gets an object representing a NamespaceAuthorizationRule along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="armClient"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="NamespaceAuthorizationRule" /> object. </returns>
        public static NamespaceAuthorizationRule GetNamespaceAuthorizationRule(this ArmClient armClient, ResourceIdentifier id)
        {
            NamespaceAuthorizationRule.ValidateResourceId(id);
            return armClient.UseClientContext((uri, credential, clientOptions, pipeline) => new NamespaceAuthorizationRule(clientOptions, credential, uri, pipeline, id));
        }
        #endregion

        #region NamespaceHybridConnectionAuthorizationRule
        /// <summary> Gets an object representing a NamespaceHybridConnectionAuthorizationRule along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="armClient"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="NamespaceHybridConnectionAuthorizationRule" /> object. </returns>
        public static NamespaceHybridConnectionAuthorizationRule GetNamespaceHybridConnectionAuthorizationRule(this ArmClient armClient, ResourceIdentifier id)
        {
            NamespaceHybridConnectionAuthorizationRule.ValidateResourceId(id);
            return armClient.UseClientContext((uri, credential, clientOptions, pipeline) => new NamespaceHybridConnectionAuthorizationRule(clientOptions, credential, uri, pipeline, id));
        }
        #endregion

        #region NamespaceWcfRelayAuthorizationRule
        /// <summary> Gets an object representing a NamespaceWcfRelayAuthorizationRule along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="armClient"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="NamespaceWcfRelayAuthorizationRule" /> object. </returns>
        public static NamespaceWcfRelayAuthorizationRule GetNamespaceWcfRelayAuthorizationRule(this ArmClient armClient, ResourceIdentifier id)
        {
            NamespaceWcfRelayAuthorizationRule.ValidateResourceId(id);
            return armClient.UseClientContext((uri, credential, clientOptions, pipeline) => new NamespaceWcfRelayAuthorizationRule(clientOptions, credential, uri, pipeline, id));
        }
        #endregion

        #region HybridConnection
        /// <summary> Gets an object representing a HybridConnection along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="armClient"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HybridConnection" /> object. </returns>
        public static HybridConnection GetHybridConnection(this ArmClient armClient, ResourceIdentifier id)
        {
            HybridConnection.ValidateResourceId(id);
            return armClient.UseClientContext((uri, credential, clientOptions, pipeline) => new HybridConnection(clientOptions, credential, uri, pipeline, id));
        }
        #endregion

        #region WcfRelay
        /// <summary> Gets an object representing a WcfRelay along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="armClient"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="WcfRelay" /> object. </returns>
        public static WcfRelay GetWcfRelay(this ArmClient armClient, ResourceIdentifier id)
        {
            WcfRelay.ValidateResourceId(id);
            return armClient.UseClientContext((uri, credential, clientOptions, pipeline) => new WcfRelay(clientOptions, credential, uri, pipeline, id));
        }
        #endregion
    }
}
