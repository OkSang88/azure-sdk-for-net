// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Storage;
using Azure.ResourceManager.Storage.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Storage.Tests.Mock
{
    /// <summary> Test for FileShare. </summary>
    public partial class FileShareCollectionMockTests : MockTestBase
    {
        public FileShareCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create NFS Shares
            string shareName = "share1235";
            Storage.FileShareData fileShare = new Storage.FileShareData()
            {
                EnabledProtocols = new Storage.Models.EnabledProtocols("NFS"),
            };
            string expand = null;

            var fileServiceId = Storage.FileService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res346", "sto666");
            var collection = GetArmClient().GetFileService(fileServiceId).GetFileShares();
            await collection.CreateOrUpdateAsync(true, shareName, fileShare, expand);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: PutShares
            string shareName = "share6185";
            Storage.FileShareData fileShare = new Storage.FileShareData();
            string expand = null;

            var fileServiceId = Storage.FileService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res3376", "sto328");
            var collection = GetArmClient().GetFileService(fileServiceId).GetFileShares();
            await collection.CreateOrUpdateAsync(true, shareName, fileShare, expand);
        }

        [RecordedTest]
        public async Task CreateOrUpdate3()
        {
            // Example: PutShares with Access Tier
            string shareName = "share1235";
            Storage.FileShareData fileShare = new Storage.FileShareData()
            {
                AccessTier = new Storage.Models.ShareAccessTier("Hot"),
            };
            string expand = null;

            var fileServiceId = Storage.FileService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res346", "sto666");
            var collection = GetArmClient().GetFileService(fileServiceId).GetFileShares();
            await collection.CreateOrUpdateAsync(true, shareName, fileShare, expand);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: GetShareStats
            string shareName = "share1634";
            string expand = "stats";
            string xMsSnapshot = null;

            var fileServiceId = Storage.FileService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res9871", "sto6217");
            var collection = GetArmClient().GetFileService(fileServiceId).GetFileShares();
            await collection.GetAsync(shareName, expand, xMsSnapshot);
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: GetShares
            string shareName = "share1634";
            string expand = null;
            string xMsSnapshot = null;

            var fileServiceId = Storage.FileService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res9871", "sto6217");
            var collection = GetArmClient().GetFileService(fileServiceId).GetFileShares();
            await collection.GetAsync(shareName, expand, xMsSnapshot);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: ListDeletedShares
            string maxpagesize = null;
            string filter = null;
            string expand = "deleted";

            var fileServiceId = Storage.FileService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res9290", "sto1590");
            var collection = GetArmClient().GetFileService(fileServiceId).GetFileShares();
            await foreach (var _ in collection.GetAllAsync(maxpagesize, filter, expand))
            {
            }
        }

        [RecordedTest]
        public async Task GetAll2()
        {
            // Example: ListShareSnapshots
            string maxpagesize = null;
            string filter = null;
            string expand = "snapshots";

            var fileServiceId = Storage.FileService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res9290", "sto1590");
            var collection = GetArmClient().GetFileService(fileServiceId).GetFileShares();
            await foreach (var _ in collection.GetAllAsync(maxpagesize, filter, expand))
            {
            }
        }

        [RecordedTest]
        public async Task GetAll3()
        {
            // Example: ListShares
            string maxpagesize = null;
            string filter = null;
            string expand = null;

            var fileServiceId = Storage.FileService.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res9290", "sto1590");
            var collection = GetArmClient().GetFileService(fileServiceId).GetFileShares();
            await foreach (var _ in collection.GetAllAsync(maxpagesize, filter, expand))
            {
            }
        }
    }
}
