// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace SecurityInsights.Models
{
    /// <summary> Describes bookmark properties. </summary>
    internal partial class HuntingBookmarkProperties : EntityCommonProperties
    {
        /// <summary> Initializes a new instance of HuntingBookmarkProperties. </summary>
        /// <param name="displayName"> The display name of the bookmark. </param>
        /// <param name="query"> The query of the bookmark. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="displayName"/> or <paramref name="query"/> is null. </exception>
        internal HuntingBookmarkProperties(string displayName, string query)
        {
            if (displayName == null)
            {
                throw new ArgumentNullException(nameof(displayName));
            }
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }

            DisplayName = displayName;
            Labels = new ChangeTrackingList<string>();
            Query = query;
        }

        /// <summary> The time the bookmark was created. </summary>
        public DateTimeOffset? Created { get; }
        /// <summary> Describes a user that created the bookmark. </summary>
        public UserInfo CreatedBy { get; }
        /// <summary> The display name of the bookmark. </summary>
        public string DisplayName { get; }
        /// <summary> The time of the event. </summary>
        public DateTimeOffset? EventTime { get; }
        /// <summary> List of labels relevant to this bookmark. </summary>
        public IReadOnlyList<string> Labels { get; }
        /// <summary> The notes of the bookmark. </summary>
        public string Notes { get; }
        /// <summary> The query of the bookmark. </summary>
        public string Query { get; }
        /// <summary> The query result of the bookmark. </summary>
        public string QueryResult { get; }
        /// <summary> The last time the bookmark was updated. </summary>
        public DateTimeOffset? Updated { get; }
        /// <summary> Describes a user that updated the bookmark. </summary>
        public UserInfo UpdatedBy { get; }
        /// <summary> Describes an incident that relates to bookmark. </summary>
        public IncidentInfo IncidentInfo { get; }
    }
}
