// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Analysiservices.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Analysiservices
{
    public partial class Sample_AnalysisServicesServerResource
    {
        // Get details of a server
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetDetailsOfAServer()
        {
            // Generated from example definition: specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/getServer.json
            // this example is just showing the usage of "Servers_GetDetails" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AnalysisServicesServerResource created on azure
            // for more information of creating AnalysisServicesServerResource, please refer to the document of AnalysisServicesServerResource
            string subscriptionId = "613192d7-503f-477a-9cfe-4efc3ee2bd60";
            string resourceGroupName = "TestRG";
            string serverName = "azsdktest";
            ResourceIdentifier analysisServicesServerResourceId = Analysiservices.AnalysisServicesServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            Analysiservices.AnalysisServicesServerResource analysisServicesServer = client.GetAnalysisServicesServerResource(analysisServicesServerResourceId);

            // invoke the operation
            Analysiservices.AnalysisServicesServerResource result = await analysisServicesServer.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            Analysiservices.AnalysisServicesServerData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete a server.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteAServer()
        {
            // Generated from example definition: specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/deleteServer.json
            // this example is just showing the usage of "Servers_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AnalysisServicesServerResource created on azure
            // for more information of creating AnalysisServicesServerResource, please refer to the document of AnalysisServicesServerResource
            string subscriptionId = "613192d7-503f-477a-9cfe-4efc3ee2bd60";
            string resourceGroupName = "TestRG";
            string serverName = "azsdktest";
            ResourceIdentifier analysisServicesServerResourceId = Analysiservices.AnalysisServicesServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            Analysiservices.AnalysisServicesServerResource analysisServicesServer = client.GetAnalysisServicesServerResource(analysisServicesServerResourceId);

            // invoke the operation
            await analysisServicesServer.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Update a server.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_UpdateAServer()
        {
            // Generated from example definition: specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/updateServer.json
            // this example is just showing the usage of "Servers_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AnalysisServicesServerResource created on azure
            // for more information of creating AnalysisServicesServerResource, please refer to the document of AnalysisServicesServerResource
            string subscriptionId = "613192d7-503f-477a-9cfe-4efc3ee2bd60";
            string resourceGroupName = "TestRG";
            string serverName = "azsdktest";
            ResourceIdentifier analysisServicesServerResourceId = Analysiservices.AnalysisServicesServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            Analysiservices.AnalysisServicesServerResource analysisServicesServer = client.GetAnalysisServicesServerResource(analysisServicesServerResourceId);

            // invoke the operation
            Analysiservices.Models.AnalysisServicesServerPatch patch = new AnalysisServicesServerPatch()
            {
                Sku = new ResourceSku("S1")
                {
                    Tier = AnalysiservicesSkuTier.Standard,
                    Capacity = 1,
                },
                Tags =
{
["testKey"] = "testValue",
},
            };
            ArmOperation<Analysiservices.AnalysisServicesServerResource> lro = await analysisServicesServer.UpdateAsync(WaitUntil.Completed, patch);
            Analysiservices.AnalysisServicesServerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            Analysiservices.AnalysisServicesServerData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Suspend a server.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Suspend_SuspendAServer()
        {
            // Generated from example definition: specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/suspendServer.json
            // this example is just showing the usage of "Servers_Suspend" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AnalysisServicesServerResource created on azure
            // for more information of creating AnalysisServicesServerResource, please refer to the document of AnalysisServicesServerResource
            string subscriptionId = "613192d7-503f-477a-9cfe-4efc3ee2bd60";
            string resourceGroupName = "TestRG";
            string serverName = "azsdktest";
            ResourceIdentifier analysisServicesServerResourceId = Analysiservices.AnalysisServicesServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            Analysiservices.AnalysisServicesServerResource analysisServicesServer = client.GetAnalysisServicesServerResource(analysisServicesServerResourceId);

            // invoke the operation
            await analysisServicesServer.SuspendAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Resume a server.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Resume_ResumeAServer()
        {
            // Generated from example definition: specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/resumeServer.json
            // this example is just showing the usage of "Servers_Resume" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AnalysisServicesServerResource created on azure
            // for more information of creating AnalysisServicesServerResource, please refer to the document of AnalysisServicesServerResource
            string subscriptionId = "613192d7-503f-477a-9cfe-4efc3ee2bd60";
            string resourceGroupName = "TestRG";
            string serverName = "azsdktest";
            ResourceIdentifier analysisServicesServerResourceId = Analysiservices.AnalysisServicesServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            Analysiservices.AnalysisServicesServerResource analysisServicesServer = client.GetAnalysisServicesServerResource(analysisServicesServerResourceId);

            // invoke the operation
            await analysisServicesServer.ResumeAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // List existing servers under the subscription.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAnalysisServicesServers_ListExistingServersUnderTheSubscription()
        {
            // Generated from example definition: specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/listServers.json
            // this example is just showing the usage of "Servers_List" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "613192d7-503f-477a-9cfe-4efc3ee2bd60";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (Analysiservices.AnalysisServicesServerResource item in subscriptionResource.GetAnalysisServicesServersAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                Analysiservices.AnalysisServicesServerData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // List eligible SKUs for a new server
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetSkusForNewServers_ListEligibleSKUsForANewServer()
        {
            // Generated from example definition: specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/listSkusForNew.json
            // this example is just showing the usage of "Servers_ListSkusForNew" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "613192d7-503f-477a-9cfe-4efc3ee2bd60";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (Analysiservices.Models.ResourceSku item in subscriptionResource.GetSkusForNewServersAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // List eligible SKUs for an existing server
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetSkusForExisting_ListEligibleSKUsForAnExistingServer()
        {
            // Generated from example definition: specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/listSkusForExisting.json
            // this example is just showing the usage of "Servers_ListSkusForExisting" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AnalysisServicesServerResource created on azure
            // for more information of creating AnalysisServicesServerResource, please refer to the document of AnalysisServicesServerResource
            string subscriptionId = "613192d7-503f-477a-9cfe-4efc3ee2bd60";
            string resourceGroupName = "TestRG";
            string serverName = "azsdktest";
            ResourceIdentifier analysisServicesServerResourceId = Analysiservices.AnalysisServicesServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            Analysiservices.AnalysisServicesServerResource analysisServicesServer = client.GetAnalysisServicesServerResource(analysisServicesServerResourceId);

            // invoke the operation and iterate over the result
            await foreach (Analysiservices.Models.ExistingResourceSkuDetails item in analysisServicesServer.GetSkusForExistingAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Get details of a server
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetGatewayStatus_GetDetailsOfAServer()
        {
            // Generated from example definition: specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/listGatewayStatus.json
            // this example is just showing the usage of "Servers_ListGatewayStatus" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AnalysisServicesServerResource created on azure
            // for more information of creating AnalysisServicesServerResource, please refer to the document of AnalysisServicesServerResource
            string subscriptionId = "613192d7-503f-477a-9cfe-4efc3ee2bd60";
            string resourceGroupName = "TestRG";
            string serverName = "azsdktest";
            ResourceIdentifier analysisServicesServerResourceId = Analysiservices.AnalysisServicesServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            Analysiservices.AnalysisServicesServerResource analysisServicesServer = client.GetAnalysisServicesServerResource(analysisServicesServerResourceId);

            // invoke the operation
            Analysiservices.Models.GatewayListStatusLive result = await analysisServicesServer.GetGatewayStatusAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get details of a server
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task DissociateGateway_GetDetailsOfAServer()
        {
            // Generated from example definition: specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/dissociateGateway.json
            // this example is just showing the usage of "Servers_DissociateGateway" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AnalysisServicesServerResource created on azure
            // for more information of creating AnalysisServicesServerResource, please refer to the document of AnalysisServicesServerResource
            string subscriptionId = "613192d7-503f-477a-9cfe-4efc3ee2bd60";
            string resourceGroupName = "TestRG";
            string serverName = "azsdktest";
            ResourceIdentifier analysisServicesServerResourceId = Analysiservices.AnalysisServicesServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName);
            Analysiservices.AnalysisServicesServerResource analysisServicesServer = client.GetAnalysisServicesServerResource(analysisServicesServerResourceId);

            // invoke the operation
            await analysisServicesServer.DissociateGatewayAsync();

            Console.WriteLine($"Succeeded");
        }

        // Get details of a server
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CheckNameAvailabilityServer_GetDetailsOfAServer()
        {
            // Generated from example definition: specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/checkNameAvailability.json
            // this example is just showing the usage of "Servers_CheckNameAvailability" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "613192d7-503f-477a-9cfe-4efc3ee2bd60";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation
            AzureLocation location = new AzureLocation("West US");
            Analysiservices.Models.CheckServerNameAvailabilityContent content = new CheckServerNameAvailabilityContent()
            {
                Name = "azsdktest",
                ResourceType = "Microsoft.AnalysisServices/servers",
            };
            Analysiservices.Models.CheckServerNameAvailabilityResult result = await subscriptionResource.CheckNameAvailabilityServerAsync(location, content);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get details of a server
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetOperationResultsServer_GetDetailsOfAServer()
        {
            // Generated from example definition: specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/operationResults.json
            // this example is just showing the usage of "Servers_ListOperationResults" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "613192d7-503f-477a-9cfe-4efc3ee2bd60";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation
            AzureLocation location = new AzureLocation("West US");
            string operationId = "00000000000000000000000000000000";
            await subscriptionResource.GetOperationResultsServerAsync(location, operationId);

            Console.WriteLine($"Succeeded");
        }

        // Get details of a server
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetOperationStatusesServer_GetDetailsOfAServer()
        {
            // Generated from example definition: specification/analysisservices/resource-manager/Microsoft.AnalysisServices/stable/2017-08-01/examples/operationStatuses.json
            // this example is just showing the usage of "Servers_ListOperationStatuses" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "613192d7-503f-477a-9cfe-4efc3ee2bd60";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation
            AzureLocation location = new AzureLocation("West US");
            string operationId = "testoperationid";
            Analysiservices.Models.OperationStatus result = await subscriptionResource.GetOperationStatusesServerAsync(location, operationId);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
