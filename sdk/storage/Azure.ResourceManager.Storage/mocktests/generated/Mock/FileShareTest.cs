// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Storage;
using Azure.ResourceManager.Storage.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Storage.Tests.Mock
{
    /// <summary> Test for FileShare. </summary>
    public partial class FileShareMockTests : MockTestBase
    {
        public FileShareMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: GetShareStats
            var fileShareId = Storage.FileShare.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res9871", "sto6217", "share1634");
            var fileShare = GetArmClient().GetFileShare(fileShareId);
            string expand = "stats";
            string xMsSnapshot = null;

            await fileShare.GetAsync(expand, xMsSnapshot);
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: GetShares
            var fileShareId = Storage.FileShare.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res9871", "sto6217", "share1634");
            var fileShare = GetArmClient().GetFileShare(fileShareId);
            string expand = null;
            string xMsSnapshot = null;

            await fileShare.GetAsync(expand, xMsSnapshot);
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: DeleteShares
            var fileShareId = Storage.FileShare.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res4079", "sto4506", "share9689");
            var fileShare = GetArmClient().GetFileShare(fileShareId);
            string xMsSnapshot = null;
            string include = null;

            await fileShare.DeleteAsync(true, xMsSnapshot, include);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: UpdateShareAcls
            var fileShareId = Storage.FileShare.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res3376", "sto328", "share6185");
            var fileShare = GetArmClient().GetFileShare(fileShareId);
            Storage.FileShareData fileShare2 = new Storage.FileShareData();

            await fileShare.UpdateAsync(fileShare2);
        }

        [RecordedTest]
        public async Task Update2()
        {
            // Example: UpdateShares
            var fileShareId = Storage.FileShare.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res3376", "sto328", "share6185");
            var fileShare = GetArmClient().GetFileShare(fileShareId);
            Storage.FileShareData fileShare2 = new Storage.FileShareData();

            await fileShare.UpdateAsync(fileShare2);
        }

        [RecordedTest]
        public async Task Restore()
        {
            // Example: RestoreShares
            var fileShareId = Storage.FileShare.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res3376", "sto328", "share1249");
            var fileShare = GetArmClient().GetFileShare(fileShareId);
            Storage.Models.DeletedShare deletedShare = new Storage.Models.DeletedShare(deletedShareName: "share1249", deletedShareVersion: "1234567890");

            await fileShare.RestoreAsync(deletedShare);
        }

        [RecordedTest]
        public async Task Lease()
        {
            // Example: Acquire a lease on a share
            var fileShareId = Storage.FileShare.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res3376", "sto328", "share124");
            var fileShare = GetArmClient().GetFileShare(fileShareId);
            string xMsSnapshot = null;
            Storage.Models.LeaseShareRequest parameters = new Storage.Models.LeaseShareRequest(action: new Storage.Models.LeaseShareAction("Acquire"))
            {
                LeaseId = null,
                BreakPeriod = null,
                LeaseDuration = -1,
                ProposedLeaseId = null,
            };

            await fileShare.LeaseAsync(xMsSnapshot, parameters);
        }

        [RecordedTest]
        public async Task Lease2()
        {
            // Example: Break a lease on a share
            var fileShareId = Storage.FileShare.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "res3376", "sto328", "share12");
            var fileShare = GetArmClient().GetFileShare(fileShareId);
            string xMsSnapshot = null;
            Storage.Models.LeaseShareRequest parameters = new Storage.Models.LeaseShareRequest(action: new Storage.Models.LeaseShareAction("Break"))
            {
                LeaseId = "8698f513-fa75-44a1-b8eb-30ba336af27d",
                BreakPeriod = null,
                LeaseDuration = null,
                ProposedLeaseId = null,
            };

            await fileShare.LeaseAsync(xMsSnapshot, parameters);
        }
    }
}
