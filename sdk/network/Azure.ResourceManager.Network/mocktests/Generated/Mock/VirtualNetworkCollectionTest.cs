// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for VirtualNetwork. </summary>
    public partial class VirtualNetworkCollectionMockTests : MockTestBase
    {
        public VirtualNetworkCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: Create virtual network
            string virtualNetworkName = "test-vnet";
            Network.VirtualNetworkData parameters = new Network.VirtualNetworkData()
            {
                AddressSpace = new Network.Models.AddressSpace(),
                FlowTimeoutInMinutes = 10,
                Location = "eastus",
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetVirtualNetworks();
            await collection.CreateOrUpdateAsync(virtualNetworkName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: Create virtual network with Bgp Communities
            string virtualNetworkName = "test-vnet";
            Network.VirtualNetworkData parameters = new Network.VirtualNetworkData()
            {
                AddressSpace = new Network.Models.AddressSpace(),
                BgpCommunities = new Network.Models.VirtualNetworkBgpCommunities(virtualNetworkCommunity: "12076:20000"),
                Location = "eastus",
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetVirtualNetworks();
            await collection.CreateOrUpdateAsync(virtualNetworkName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate3()
        {
            // Example: Create virtual network with delegated subnets
            string virtualNetworkName = "test-vnet";
            Network.VirtualNetworkData parameters = new Network.VirtualNetworkData()
            {
                AddressSpace = new Network.Models.AddressSpace(),
                Location = "westcentralus",
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetVirtualNetworks();
            await collection.CreateOrUpdateAsync(virtualNetworkName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate4()
        {
            // Example: Create virtual network with service endpoints
            string virtualNetworkName = "vnet1";
            Network.VirtualNetworkData parameters = new Network.VirtualNetworkData()
            {
                AddressSpace = new Network.Models.AddressSpace(),
                Location = "eastus",
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/vnetTest")).GetVirtualNetworks();
            await collection.CreateOrUpdateAsync(virtualNetworkName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate5()
        {
            // Example: Create virtual network with service endpoints and service endpoint policy
            string virtualNetworkName = "vnet1";
            Network.VirtualNetworkData parameters = new Network.VirtualNetworkData()
            {
                AddressSpace = new Network.Models.AddressSpace(),
                Location = "eastus2euap",
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/vnetTest")).GetVirtualNetworks();
            await collection.CreateOrUpdateAsync(virtualNetworkName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate6()
        {
            // Example: Create virtual network with subnet
            string virtualNetworkName = "test-vnet";
            Network.VirtualNetworkData parameters = new Network.VirtualNetworkData()
            {
                AddressSpace = new Network.Models.AddressSpace(),
                Location = "eastus",
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetVirtualNetworks();
            await collection.CreateOrUpdateAsync(virtualNetworkName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdate7()
        {
            // Example: Create virtual network with subnet containing address prefixes
            string virtualNetworkName = "test-vnet";
            Network.VirtualNetworkData parameters = new Network.VirtualNetworkData()
            {
                AddressSpace = new Network.Models.AddressSpace(),
                Location = "eastus",
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetVirtualNetworks();
            await collection.CreateOrUpdateAsync(virtualNetworkName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get virtual network
            string virtualNetworkName = "test-vnet";
            string expand = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetVirtualNetworks();
            await collection.GetAsync(virtualNetworkName, expand);
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: Get virtual network with a delegated subnet
            string virtualNetworkName = "test-vnet";
            string expand = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetVirtualNetworks();
            await collection.GetAsync(virtualNetworkName, expand);
        }

        [RecordedTest]
        public async Task Get3()
        {
            // Example: Get virtual network with service association links
            string virtualNetworkName = "test-vnet";
            string expand = null;

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetVirtualNetworks();
            await collection.GetAsync(virtualNetworkName, expand);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: List virtual networks in resource group

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetVirtualNetworks();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
