// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for ExpressRouteCrossConnection. </summary>
    public partial class ExpressRouteCrossConnectionMockTests : MockTestBase
    {
        public ExpressRouteCrossConnectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: GetExpressRouteCrossConnection
            var expressRouteCrossConnectionId = Network.ExpressRouteCrossConnection.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "CrossConnection-SiliconValley", "<circuitServiceKey>");
            var expressRouteCrossConnection = GetArmClient().GetExpressRouteCrossConnection(expressRouteCrossConnectionId);

            await expressRouteCrossConnection.GetAsync();
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: UpdateExpressRouteCrossConnectionTags
            var expressRouteCrossConnectionId = Network.ExpressRouteCrossConnection.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "CrossConnection-SiliconValley", "<circuitServiceKey>");
            var expressRouteCrossConnection = GetArmClient().GetExpressRouteCrossConnection(expressRouteCrossConnectionId);
            Network.Models.TagsObject crossConnectionParameters = new Network.Models.TagsObject();

            await expressRouteCrossConnection.UpdateAsync(crossConnectionParameters);
        }
    }
}
