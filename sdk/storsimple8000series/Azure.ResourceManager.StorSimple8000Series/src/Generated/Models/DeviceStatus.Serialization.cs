// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.StorSimple8000Series.Models
{
    internal static partial class DeviceStatusExtensions
    {
        public static string ToSerialString(this DeviceStatus value) => value switch
        {
            DeviceStatus.Unknown => "Unknown",
            DeviceStatus.Online => "Online",
            DeviceStatus.Offline => "Offline",
            DeviceStatus.Deactivated => "Deactivated",
            DeviceStatus.RequiresAttention => "RequiresAttention",
            DeviceStatus.MaintenanceMode => "MaintenanceMode",
            DeviceStatus.Creating => "Creating",
            DeviceStatus.Provisioning => "Provisioning",
            DeviceStatus.Deactivating => "Deactivating",
            DeviceStatus.Deleted => "Deleted",
            DeviceStatus.ReadyToSetup => "ReadyToSetup",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown DeviceStatus value.")
        };

        public static DeviceStatus ToDeviceStatus(this string value)
        {
            if (string.Equals(value, "Unknown", StringComparison.InvariantCultureIgnoreCase)) return DeviceStatus.Unknown;
            if (string.Equals(value, "Online", StringComparison.InvariantCultureIgnoreCase)) return DeviceStatus.Online;
            if (string.Equals(value, "Offline", StringComparison.InvariantCultureIgnoreCase)) return DeviceStatus.Offline;
            if (string.Equals(value, "Deactivated", StringComparison.InvariantCultureIgnoreCase)) return DeviceStatus.Deactivated;
            if (string.Equals(value, "RequiresAttention", StringComparison.InvariantCultureIgnoreCase)) return DeviceStatus.RequiresAttention;
            if (string.Equals(value, "MaintenanceMode", StringComparison.InvariantCultureIgnoreCase)) return DeviceStatus.MaintenanceMode;
            if (string.Equals(value, "Creating", StringComparison.InvariantCultureIgnoreCase)) return DeviceStatus.Creating;
            if (string.Equals(value, "Provisioning", StringComparison.InvariantCultureIgnoreCase)) return DeviceStatus.Provisioning;
            if (string.Equals(value, "Deactivating", StringComparison.InvariantCultureIgnoreCase)) return DeviceStatus.Deactivating;
            if (string.Equals(value, "Deleted", StringComparison.InvariantCultureIgnoreCase)) return DeviceStatus.Deleted;
            if (string.Equals(value, "ReadyToSetup", StringComparison.InvariantCultureIgnoreCase)) return DeviceStatus.ReadyToSetup;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown DeviceStatus value.");
        }
    }
}
