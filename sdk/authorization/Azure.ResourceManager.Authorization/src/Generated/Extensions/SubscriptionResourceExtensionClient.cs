// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Authorization.Models;

namespace Azure.ResourceManager.Authorization
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _accessReviewScheduleDefinitionsClientDiagnostics;
        private AccessReviewScheduleDefinitionsRestOperations _accessReviewScheduleDefinitionsRestClient;
        private ClientDiagnostics _accessReviewInstanceClientDiagnostics;
        private AccessReviewInstanceRestOperations _accessReviewInstanceRestClient;
        private ClientDiagnostics _accessReviewInstanceContactedReviewersClientDiagnostics;
        private AccessReviewInstanceContactedReviewersRestOperations _accessReviewInstanceContactedReviewersRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics AccessReviewScheduleDefinitionsClientDiagnostics => _accessReviewScheduleDefinitionsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Authorization", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private AccessReviewScheduleDefinitionsRestOperations AccessReviewScheduleDefinitionsRestClient => _accessReviewScheduleDefinitionsRestClient ??= new AccessReviewScheduleDefinitionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics AccessReviewInstanceClientDiagnostics => _accessReviewInstanceClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Authorization", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private AccessReviewInstanceRestOperations AccessReviewInstanceRestClient => _accessReviewInstanceRestClient ??= new AccessReviewInstanceRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics AccessReviewInstanceContactedReviewersClientDiagnostics => _accessReviewInstanceContactedReviewersClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Authorization", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private AccessReviewInstanceContactedReviewersRestOperations AccessReviewInstanceContactedReviewersRestClient => _accessReviewInstanceContactedReviewersRestClient ??= new AccessReviewInstanceContactedReviewersRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets an object representing a AccessReviewDefaultSettingsResource along with the instance operations that can be performed on it in the SubscriptionResource. </summary>
        /// <returns> Returns a <see cref="AccessReviewDefaultSettingsResource" /> object. </returns>
        public virtual AccessReviewDefaultSettingsResource GetAccessReviewDefaultSettings()
        {
            return new AccessReviewDefaultSettingsResource(Client, new ResourceIdentifier(Id.ToString() + "/providers/Microsoft.Authorization/accessReviewScheduleSettings/default"));
        }

        /// <summary>
        /// Stop access review definition
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/stop
        /// Operation Id: AccessReviewScheduleDefinitions_Stop
        /// </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> StopAccessReviewScheduleDefinitionAsync(string scheduleDefinitionId, CancellationToken cancellationToken = default)
        {
            using var scope = AccessReviewScheduleDefinitionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.StopAccessReviewScheduleDefinition");
            scope.Start();
            try
            {
                var response = await AccessReviewScheduleDefinitionsRestClient.StopAsync(Id.SubscriptionId, scheduleDefinitionId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Stop access review definition
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/stop
        /// Operation Id: AccessReviewScheduleDefinitions_Stop
        /// </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response StopAccessReviewScheduleDefinition(string scheduleDefinitionId, CancellationToken cancellationToken = default)
        {
            using var scope = AccessReviewScheduleDefinitionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.StopAccessReviewScheduleDefinition");
            scope.Start();
            try
            {
                var response = AccessReviewScheduleDefinitionsRestClient.Stop(Id.SubscriptionId, scheduleDefinitionId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// An action to stop an access review instance.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/stop
        /// Operation Id: AccessReviewInstance_Stop
        /// </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> StopAccessReviewInstanceAsync(string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            using var scope = AccessReviewInstanceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.StopAccessReviewInstance");
            scope.Start();
            try
            {
                var response = await AccessReviewInstanceRestClient.StopAsync(Id.SubscriptionId, scheduleDefinitionId, id, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// An action to stop an access review instance.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/stop
        /// Operation Id: AccessReviewInstance_Stop
        /// </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response StopAccessReviewInstance(string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            using var scope = AccessReviewInstanceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.StopAccessReviewInstance");
            scope.Start();
            try
            {
                var response = AccessReviewInstanceRestClient.Stop(Id.SubscriptionId, scheduleDefinitionId, id, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// An action to reset all decisions for an access review instance.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/resetDecisions
        /// Operation Id: AccessReviewInstance_ResetDecisions
        /// </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> ResetDecisionsAccessReviewInstanceAsync(string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            using var scope = AccessReviewInstanceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.ResetDecisionsAccessReviewInstance");
            scope.Start();
            try
            {
                var response = await AccessReviewInstanceRestClient.ResetDecisionsAsync(Id.SubscriptionId, scheduleDefinitionId, id, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// An action to reset all decisions for an access review instance.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/resetDecisions
        /// Operation Id: AccessReviewInstance_ResetDecisions
        /// </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response ResetDecisionsAccessReviewInstance(string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            using var scope = AccessReviewInstanceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.ResetDecisionsAccessReviewInstance");
            scope.Start();
            try
            {
                var response = AccessReviewInstanceRestClient.ResetDecisions(Id.SubscriptionId, scheduleDefinitionId, id, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// An action to apply all decisions for an access review instance.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/applyDecisions
        /// Operation Id: AccessReviewInstance_ApplyDecisions
        /// </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> ApplyDecisionsAccessReviewInstanceAsync(string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            using var scope = AccessReviewInstanceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.ApplyDecisionsAccessReviewInstance");
            scope.Start();
            try
            {
                var response = await AccessReviewInstanceRestClient.ApplyDecisionsAsync(Id.SubscriptionId, scheduleDefinitionId, id, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// An action to apply all decisions for an access review instance.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/applyDecisions
        /// Operation Id: AccessReviewInstance_ApplyDecisions
        /// </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response ApplyDecisionsAccessReviewInstance(string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            using var scope = AccessReviewInstanceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.ApplyDecisionsAccessReviewInstance");
            scope.Start();
            try
            {
                var response = AccessReviewInstanceRestClient.ApplyDecisions(Id.SubscriptionId, scheduleDefinitionId, id, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// An action to send reminders for an access review instance.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/sendReminders
        /// Operation Id: AccessReviewInstance_SendReminders
        /// </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> SendRemindersAccessReviewInstanceAsync(string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            using var scope = AccessReviewInstanceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.SendRemindersAccessReviewInstance");
            scope.Start();
            try
            {
                var response = await AccessReviewInstanceRestClient.SendRemindersAsync(Id.SubscriptionId, scheduleDefinitionId, id, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// An action to send reminders for an access review instance.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/sendReminders
        /// Operation Id: AccessReviewInstance_SendReminders
        /// </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SendRemindersAccessReviewInstance(string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            using var scope = AccessReviewInstanceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.SendRemindersAccessReviewInstance");
            scope.Start();
            try
            {
                var response = AccessReviewInstanceRestClient.SendReminders(Id.SubscriptionId, scheduleDefinitionId, id, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get access review instance contacted reviewers
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/contactedReviewers
        /// Operation Id: AccessReviewInstanceContactedReviewers_List
        /// </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AccessReviewContactedReviewer" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AccessReviewContactedReviewer> GetAccessReviewInstanceContactedReviewersAsync(string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            async Task<Page<AccessReviewContactedReviewer>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AccessReviewInstanceContactedReviewersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAccessReviewInstanceContactedReviewers");
                scope.Start();
                try
                {
                    var response = await AccessReviewInstanceContactedReviewersRestClient.ListAsync(Id.SubscriptionId, scheduleDefinitionId, id, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AccessReviewContactedReviewer>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AccessReviewInstanceContactedReviewersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAccessReviewInstanceContactedReviewers");
                scope.Start();
                try
                {
                    var response = await AccessReviewInstanceContactedReviewersRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, scheduleDefinitionId, id, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get access review instance contacted reviewers
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/contactedReviewers
        /// Operation Id: AccessReviewInstanceContactedReviewers_List
        /// </summary>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AccessReviewContactedReviewer" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AccessReviewContactedReviewer> GetAccessReviewInstanceContactedReviewers(string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            Page<AccessReviewContactedReviewer> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AccessReviewInstanceContactedReviewersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAccessReviewInstanceContactedReviewers");
                scope.Start();
                try
                {
                    var response = AccessReviewInstanceContactedReviewersRestClient.List(Id.SubscriptionId, scheduleDefinitionId, id, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AccessReviewContactedReviewer> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AccessReviewInstanceContactedReviewersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAccessReviewInstanceContactedReviewers");
                scope.Start();
                try
                {
                    var response = AccessReviewInstanceContactedReviewersRestClient.ListNextPage(nextLink, Id.SubscriptionId, scheduleDefinitionId, id, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
