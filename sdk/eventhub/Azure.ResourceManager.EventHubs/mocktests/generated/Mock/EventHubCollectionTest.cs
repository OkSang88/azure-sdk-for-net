// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.EventHubs;
using Azure.ResourceManager.EventHubs.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.EventHubs.Tests.Mock
{
    /// <summary> Test for EventHub. </summary>
    public partial class EventHubCollectionMockTests : MockTestBase
    {
        public EventHubCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: EventHubCreate
            string eventHubName = "sdk-EventHub-6547";
            EventHubs.EventHubData parameters = new EventHubs.EventHubData()
            {
                MessageRetentionInDays = 4,
                PartitionCount = 4,
                Status = EventHubs.Models.EntityStatus.Active,
                CaptureDescription = new EventHubs.Models.CaptureDescription()
                {
                    Enabled = true,
                    Encoding = EventHubs.Models.EncodingCaptureDescription.Avro,
                    IntervalInSeconds = 120,
                    SizeLimitInBytes = 10485763,
                    Destination = new EventHubs.Models.EventHubDestination()
                    {
                        Name = "EventHubArchive.AzureBlockBlob",
                        StorageAccountResourceId = "/subscriptions/e2f361f0-3b27-4503-a9cc-21cfba380093/resourceGroups/Default-Storage-SouthCentralUS/providers/Microsoft.ClassicStorage/storageAccounts/arjunteststorage",
                        BlobContainer = "container",
                        ArchiveNameFormat = "{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}",
                    },
                },
            };

            var eventHubNamespaceId = EventHubs.EventHubNamespace.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-NotificationHubs-AustraliaEast", "sdk-Namespace-5357");
            var collection = GetArmClient().GetEventHubNamespace(eventHubNamespaceId).GetEventHubs();
            await collection.CreateOrUpdateAsync(eventHubName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: EventHubGet
            string eventHubName = "sdk-EventHub-10";

            var eventHubNamespaceId = EventHubs.EventHubNamespace.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-NotificationHubs-AustraliaEast", "sdk-Namespace-716");
            var collection = GetArmClient().GetEventHubNamespace(eventHubNamespaceId).GetEventHubs();
            await collection.GetAsync(eventHubName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: EventHubsListAll
            int? skip = null;
            int? top = null;

            var eventHubNamespaceId = EventHubs.EventHubNamespace.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "Default-NotificationHubs-AustraliaEast", "sdk-Namespace-5357");
            var collection = GetArmClient().GetEventHubNamespace(eventHubNamespaceId).GetEventHubs();
            await foreach (var _ in collection.GetAllAsync(skip, top))
            {
            }
        }
    }
}
