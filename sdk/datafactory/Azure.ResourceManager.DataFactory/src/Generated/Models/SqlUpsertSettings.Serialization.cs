// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    public partial class SqlUpsertSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(UseTempDB))
            {
                writer.WritePropertyName("useTempDB");
                writer.WriteObjectValue(UseTempDB);
            }
            if (Optional.IsDefined(InterimSchemaName))
            {
                writer.WritePropertyName("interimSchemaName");
                writer.WriteObjectValue(InterimSchemaName);
            }
            if (Optional.IsDefined(Keys))
            {
                writer.WritePropertyName("keys");
                writer.WriteObjectValue(Keys);
            }
            writer.WriteEndObject();
        }

        internal static SqlUpsertSettings DeserializeSqlUpsertSettings(JsonElement element)
        {
            Optional<object> useTempDB = default;
            Optional<object> interimSchemaName = default;
            Optional<object> keys = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("useTempDB"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    useTempDB = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("interimSchemaName"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    interimSchemaName = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("keys"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    keys = property.Value.GetObject();
                    continue;
                }
            }
            return new SqlUpsertSettings(useTempDB.Value, interimSchemaName.Value, keys.Value);
        }
    }
}
