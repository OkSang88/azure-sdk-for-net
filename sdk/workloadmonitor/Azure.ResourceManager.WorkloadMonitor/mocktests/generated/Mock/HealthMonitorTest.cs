// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using Azure.ResourceManager.WorkloadMonitor.Tests.Mock;

namespace Azure.ResourceManager.WorkloadMonitor.Tests.Mock.Tests.Mock
{
    /// <summary> Test for HealthMonitor. </summary>
    public partial class HealthMonitorMockTests : MockTestBase
    {
        public HealthMonitorMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get monitor with default values
            var healthMonitorId = WorkloadMonitor.Tests.Mock.HealthMonitor.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "tugamidiAlerts", "Microsoft.Compute", "virtualMachines", "linuxEUS", "logical-disks|C@3A|free-space");
            var healthMonitor = GetArmClient().GetHealthMonitor(healthMonitorId);
            string expand = null;

            await healthMonitor.GetAsync(expand);
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: Get monitor with expanded values
            var healthMonitorId = WorkloadMonitor.Tests.Mock.HealthMonitor.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "tugamidiAlerts", "Microsoft.Compute", "virtualMachines", "linuxEUS", "logical-disks|C@3A|free-space");
            var healthMonitor = GetArmClient().GetHealthMonitor(healthMonitorId);
            string expand = "evidence";

            await healthMonitor.GetAsync(expand);
        }
    }
}
