// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using DataFactoryManagementClient;
using DataFactoryManagementClient.Models;

namespace DataFactoryManagementClient.Tests.Mock
{
    /// <summary> Test for LinkedServiceResource. </summary>
    public partial class LinkedServiceResourceCollectionMockTests : MockTestBase
    {
        public LinkedServiceResourceCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: LinkedServices_Create
            string linkedServiceName = "exampleLinkedService";
            DataFactoryManagementClient.LinkedServiceResourceData linkedService = new DataFactoryManagementClient.LinkedServiceResourceData(properties: new DataFactoryManagementClient.Models.AzureStorageLinkedService()
            {
                ConnectionString = new Dictionary<string, object>()
                {
                    ["type"] = "SecureString",
                    ["value"] = "DefaultEndpointsProtocol=https;AccountName=examplestorageaccount;AccountKey=<storage key>",
                }
            ,
                Type = "AzureStorage",
            });
            string ifMatch = null;

            var factoryId = DataFactoryManagementClient.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var collection = GetArmClient().GetFactory(factoryId).GetLinkedServiceResources();
            await collection.CreateOrUpdateAsync(true, linkedServiceName, linkedService, ifMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: LinkedServices_Update
            string linkedServiceName = "exampleLinkedService";
            DataFactoryManagementClient.LinkedServiceResourceData linkedService = new DataFactoryManagementClient.LinkedServiceResourceData(properties: new DataFactoryManagementClient.Models.AzureStorageLinkedService()
            {
                ConnectionString = new Dictionary<string, object>()
                {
                    ["type"] = "SecureString",
                    ["value"] = "DefaultEndpointsProtocol=https;AccountName=examplestorageaccount;AccountKey=<storage key>",
                }
            ,
                Type = "AzureStorage",
                Description = "Example description",
            });
            string ifMatch = null;

            var factoryId = DataFactoryManagementClient.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var collection = GetArmClient().GetFactory(factoryId).GetLinkedServiceResources();
            await collection.CreateOrUpdateAsync(true, linkedServiceName, linkedService, ifMatch);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: LinkedServices_Get
            string linkedServiceName = "exampleLinkedService";
            string ifNoneMatch = null;

            var factoryId = DataFactoryManagementClient.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var collection = GetArmClient().GetFactory(factoryId).GetLinkedServiceResources();
            await collection.GetAsync(linkedServiceName, ifNoneMatch);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: LinkedServices_ListByFactory

            var factoryId = DataFactoryManagementClient.Factory.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "exampleFactoryName");
            var collection = GetArmClient().GetFactory(factoryId).GetLinkedServiceResources();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
