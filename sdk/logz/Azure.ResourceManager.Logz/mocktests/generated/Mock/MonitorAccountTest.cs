// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using MicrosoftLogz;
using MicrosoftLogz.Models;

namespace MicrosoftLogz.Tests.Mock
{
    /// <summary> Test for LogzMonitorResource. </summary>
    public partial class MonitorAccountMockTests : MockTestBase
    {
        public MonitorAccountMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: SubAccount_Get
            var monitorAccountId = MicrosoftLogz.MonitorAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor", "SubAccount1");
            var monitorAccount = GetArmClient().GetMonitorAccount(monitorAccountId);

            await monitorAccount.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: SubAccount_Delete
            var monitorAccountId = MicrosoftLogz.MonitorAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor", "someName");
            var monitorAccount = GetArmClient().GetMonitorAccount(monitorAccountId);

            await monitorAccount.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: SubAccount_Update
            var monitorAccountId = MicrosoftLogz.MonitorAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor", "SubAccount1");
            var monitorAccount = GetArmClient().GetMonitorAccount(monitorAccountId);
            MicrosoftLogz.Models.LogzMonitorResourceUpdateParameters body = null;

            await monitorAccount.UpdateAsync(body);
        }

        [RecordedTest]
        public async Task GetMonitoredResources()
        {
            // Example: SubAccount_MonitoredResources_List
            var monitorAccountId = MicrosoftLogz.MonitorAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor", "SubAccount1");
            var monitorAccount = GetArmClient().GetMonitorAccount(monitorAccountId);

            await foreach (var _ in monitorAccount.GetMonitoredResourcesAsync())
            {
            }
        }

        [RecordedTest]
        public async Task VMHostPayload()
        {
            // Example: SubAccount_VMHosts_Payload
            var monitorAccountId = MicrosoftLogz.MonitorAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor", "SubAccount1");
            var monitorAccount = GetArmClient().GetMonitorAccount(monitorAccountId);

            await monitorAccount.VMHostPayloadAsync();
        }

        [RecordedTest]
        public async Task GetVmHostUpdate()
        {
            // Example: SubAccount_VMHosts_Update
            var monitorAccountId = MicrosoftLogz.MonitorAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor", "SubAccount1");
            var monitorAccount = GetArmClient().GetMonitorAccount(monitorAccountId);
            MicrosoftLogz.Models.VMHostUpdateRequest body = null;

            await foreach (var _ in monitorAccount.GetVmHostUpdateAsync(body))
            {
            }
        }

        [RecordedTest]
        public async Task GetVMHosts()
        {
            // Example: SubAccount_VMHosts_List
            var monitorAccountId = MicrosoftLogz.MonitorAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myMonitor", "SubAccount1");
            var monitorAccount = GetArmClient().GetMonitorAccount(monitorAccountId);

            await foreach (var _ in monitorAccount.GetVMHostsAsync())
            {
            }
        }
    }
}
