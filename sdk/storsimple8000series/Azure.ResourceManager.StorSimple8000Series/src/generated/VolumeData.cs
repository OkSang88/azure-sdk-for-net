// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using StorSimple8000SeriesManagementClient.Models;

namespace StorSimple8000SeriesManagementClient
{
    /// <summary> A class representing the Volume data model. </summary>
    public partial class VolumeData : BaseModel
    {
        /// <summary> Initializes a new instance of VolumeData. </summary>
        /// <param name="sizeInBytes"> The size of the volume in bytes. </param>
        /// <param name="volumeType"> The type of the volume. </param>
        /// <param name="accessControlRecordIds"> The IDs of the access control records, associated with the volume. </param>
        /// <param name="volumeStatus"> The volume status. </param>
        /// <param name="monitoringStatus"> The monitoring status of the volume. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accessControlRecordIds"/> is null. </exception>
        public VolumeData(long sizeInBytes, VolumeType volumeType, IEnumerable<string> accessControlRecordIds, VolumeStatus volumeStatus, MonitoringStatus monitoringStatus)
        {
            if (accessControlRecordIds == null)
            {
                throw new ArgumentNullException(nameof(accessControlRecordIds));
            }

            SizeInBytes = sizeInBytes;
            VolumeType = volumeType;
            AccessControlRecordIds = accessControlRecordIds.ToList();
            VolumeStatus = volumeStatus;
            MonitoringStatus = monitoringStatus;
            BackupPolicyIds = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of VolumeData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="type"> The type. </param>
        /// <param name="kind"> The Kind of the object. Currently only Series8000 is supported. </param>
        /// <param name="sizeInBytes"> The size of the volume in bytes. </param>
        /// <param name="volumeType"> The type of the volume. </param>
        /// <param name="volumeContainerId"> The ID of the volume container, in which this volume is created. </param>
        /// <param name="accessControlRecordIds"> The IDs of the access control records, associated with the volume. </param>
        /// <param name="volumeStatus"> The volume status. </param>
        /// <param name="operationStatus"> The operation status on the volume. </param>
        /// <param name="backupStatus"> The backup status of the volume. </param>
        /// <param name="monitoringStatus"> The monitoring status of the volume. </param>
        /// <param name="backupPolicyIds"> The IDs of the backup policies, in which this volume is part of. </param>
        internal VolumeData(ResourceIdentifier id, string name, ResourceType type, string kind, long sizeInBytes, VolumeType volumeType, string volumeContainerId, IList<string> accessControlRecordIds, VolumeStatus volumeStatus, OperationStatus? operationStatus, BackupStatus? backupStatus, MonitoringStatus monitoringStatus, IReadOnlyList<string> backupPolicyIds) : base(id, name, type, kind)
        {
            SizeInBytes = sizeInBytes;
            VolumeType = volumeType;
            VolumeContainerId = volumeContainerId;
            AccessControlRecordIds = accessControlRecordIds;
            VolumeStatus = volumeStatus;
            OperationStatus = operationStatus;
            BackupStatus = backupStatus;
            MonitoringStatus = monitoringStatus;
            BackupPolicyIds = backupPolicyIds;
        }

        /// <summary> The size of the volume in bytes. </summary>
        public long SizeInBytes { get; set; }
        /// <summary> The type of the volume. </summary>
        public VolumeType VolumeType { get; set; }
        /// <summary> The ID of the volume container, in which this volume is created. </summary>
        public string VolumeContainerId { get; }
        /// <summary> The IDs of the access control records, associated with the volume. </summary>
        public IList<string> AccessControlRecordIds { get; }
        /// <summary> The volume status. </summary>
        public VolumeStatus VolumeStatus { get; set; }
        /// <summary> The operation status on the volume. </summary>
        public OperationStatus? OperationStatus { get; }
        /// <summary> The backup status of the volume. </summary>
        public BackupStatus? BackupStatus { get; }
        /// <summary> The monitoring status of the volume. </summary>
        public MonitoringStatus MonitoringStatus { get; set; }
        /// <summary> The IDs of the backup policies, in which this volume is part of. </summary>
        public IReadOnlyList<string> BackupPolicyIds { get; }
    }
}
