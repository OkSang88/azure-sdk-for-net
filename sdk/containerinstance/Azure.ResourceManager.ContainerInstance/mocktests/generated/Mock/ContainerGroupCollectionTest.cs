// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.ContainerInstance.Tests.Mock;
using Azure.ResourceManager.ContainerInstance.Tests.Mock.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.ContainerInstance.Tests.Mock.Tests.Mock
{
    /// <summary> Test for ContainerGroup. </summary>
    public partial class ContainerGroupCollectionMockTests : MockTestBase
    {
        public ContainerGroupCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: ContainerGroupsCreateOrUpdate
            string containerGroupName = "demo1";
            ContainerInstance.Tests.Mock.ContainerGroupData containerGroup = new ContainerInstance.Tests.Mock.ContainerGroupData(location: "west us", containers: new List<ContainerInstance.Tests.Mock.Models.Container>()
{
new ContainerInstance.Tests.Mock.Models.Container(name: "demo1",image: "nginx",resources: new ContainerInstance.Tests.Mock.Models.ResourceRequirements(requests: new ContainerInstance.Tests.Mock.Models.ResourceRequests(memoryInGB: 1.5,cpu: 1)
{
Gpu = new ContainerInstance.Tests.Mock.Models.GpuResource(count: 1,sku: new ContainerInstance.Tests.Mock.Models.GpuSku("K80")), })),}, osType: new ContainerInstance.Tests.Mock.Models.OperatingSystemTypes("Linux"))
            {
                Identity = new ResourceIdentity(),
                IpAddress = new ContainerInstance.Tests.Mock.Models.IpAddress(ports: new List<ContainerInstance.Tests.Mock.Models.Port>()
{
new ContainerInstance.Tests.Mock.Models.Port(portValue: 80)
{
Protocol = new ContainerInstance.Tests.Mock.Models.ContainerGroupNetworkProtocol("TCP"), },}, type: new ContainerInstance.Tests.Mock.Models.ContainerGroupIpAddressType("Public"))
                {
                    DnsNameLabel = "dnsnamelabel1",
                },
                Diagnostics = new ContainerInstance.Tests.Mock.Models.ContainerGroupDiagnostics()
                {
                    LogAnalytics = new ContainerInstance.Tests.Mock.Models.LogAnalytics(workspaceId: "workspaceid", workspaceKey: "workspaceKey")
                    {
                        LogType = new ContainerInstance.Tests.Mock.Models.LogAnalyticsLogType("ContainerInsights"),
                        WorkspaceResourceId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg/providers/microsoft.operationalinsights/workspaces/workspace",
                    },
                },
                DnsConfig = new ContainerInstance.Tests.Mock.Models.DnsConfiguration(nameServers: new List<string>()
{
"1.1.1.1",})
                {
                    SearchDomains = "cluster.local svc.cluster.local",
                    Options = "ndots:2",
                },
            };

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/demo")).GetContainerGroups();
            await collection.CreateOrUpdateAsync(true, containerGroupName, containerGroup);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: ContainerGroupsGet_Failed
            string containerGroupName = "demo1";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/demo")).GetContainerGroups();
            await collection.GetAsync(containerGroupName);
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: ContainerGroupsGet_Succeeded
            string containerGroupName = "demo1";

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/demo")).GetContainerGroups();
            await collection.GetAsync(containerGroupName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: ContainerGroupsListByResourceGroup

            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/demo")).GetContainerGroups();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
