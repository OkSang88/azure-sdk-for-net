// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MicrosoftStorageSync.Models
{
    /// <summary> Type of the ProgressType. </summary>
    internal readonly partial struct ProgressType : IEquatable<ProgressType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ProgressType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProgressType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "none";
        private const string InitializeValue = "initialize";
        private const string DownloadValue = "download";
        private const string UploadValue = "upload";
        private const string RecallValue = "recall";

        /// <summary> none. </summary>
        public static ProgressType None { get; } = new ProgressType(NoneValue);
        /// <summary> initialize. </summary>
        public static ProgressType Initialize { get; } = new ProgressType(InitializeValue);
        /// <summary> download. </summary>
        public static ProgressType Download { get; } = new ProgressType(DownloadValue);
        /// <summary> upload. </summary>
        public static ProgressType Upload { get; } = new ProgressType(UploadValue);
        /// <summary> recall. </summary>
        public static ProgressType Recall { get; } = new ProgressType(RecallValue);
        /// <summary> Determines if two <see cref="ProgressType"/> values are the same. </summary>
        public static bool operator ==(ProgressType left, ProgressType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProgressType"/> values are not the same. </summary>
        public static bool operator !=(ProgressType left, ProgressType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ProgressType"/>. </summary>
        public static implicit operator ProgressType(string value) => new ProgressType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProgressType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProgressType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
