// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.StorageSync.Tests.Mock;
using Azure.ResourceManager.StorageSync.Tests.Mock.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.StorageSync.Tests.Mock.Tests.Mock
{
    /// <summary> Test for ServerEndpoint. </summary>
    public partial class ServerEndpointCollectionMockTests : MockTestBase
    {
        public ServerEndpointCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: ServerEndpoints_Create
            string serverEndpointName = "SampleServerEndpoint_1";
            StorageSync.Tests.Mock.Models.ServerEndpointCreateParameters parameters = new StorageSync.Tests.Mock.Models.ServerEndpointCreateParameters()
            {
                ServerLocalPath = "D:\\SampleServerEndpoint_1",
                CloudTiering = new StorageSync.Tests.Mock.Models.FeatureStatus("off"),
                VolumeFreeSpacePercent = 100,
                TierFilesOlderThanDays = 0,
                ServerResourceId = "/subscriptions/52b8da2f-61e0-4a1f-8dde-336911f367fb/resourceGroups/SampleResourceGroup_1/providers/Microsoft.StorageSync/storageSyncServices/SampleStorageSyncService_1/registeredServers/080d4133-bdb5-40a0-96a0-71a6057bfe9a",
                OfflineDataTransfer = new StorageSync.Tests.Mock.Models.FeatureStatus("on"),
                OfflineDataTransferShareName = "myfileshare",
                InitialDownloadPolicy = new StorageSync.Tests.Mock.Models.InitialDownloadPolicy("NamespaceThenModifiedFiles"),
                LocalCacheMode = new StorageSync.Tests.Mock.Models.LocalCacheMode("UpdateLocallyCachedFiles"),
                InitialUploadPolicy = new StorageSync.Tests.Mock.Models.InitialUploadPolicy("ServerAuthoritative"),
            };

            var syncGroupId = StorageSync.Tests.Mock.SyncGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "SampleResourceGroup_1", "SampleStorageSyncService_1", "SampleSyncGroup_1");
            var collection = GetArmClient().GetSyncGroup(syncGroupId).GetServerEndpoints();
            await collection.CreateOrUpdateAsync(true, serverEndpointName, parameters);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: ServerEndpoints_Get
            string serverEndpointName = "SampleServerEndpoint_1";

            var syncGroupId = StorageSync.Tests.Mock.SyncGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "SampleResourceGroup_1", "SampleStorageSyncService_1", "SampleSyncGroup_1");
            var collection = GetArmClient().GetSyncGroup(syncGroupId).GetServerEndpoints();
            await collection.GetAsync(serverEndpointName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: ServerEndpoints_ListBySyncGroup

            var syncGroupId = StorageSync.Tests.Mock.SyncGroup.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "SampleResourceGroup_1", "SampleStorageSyncService_1", "SampleSyncGroup_1");
            var collection = GetArmClient().GetSyncGroup(syncGroupId).GetServerEndpoints();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
