// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using AzureAgriFoodRPService;

namespace AzureAgriFoodRPService.Tests.Mock
{
    /// <summary> Test for Extension. </summary>
    public partial class ExtensionMockTests : MockTestBase
    {
        public ExtensionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Extensions_Get
            var extensionId = AzureAgriFoodRPService.Extension.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "examples-rg", "examples-farmbeatsResourceName", "provider.extension");
            var extension = GetArmClient().GetExtension(extensionId);

            await extension.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Extensions_Delete
            var extensionId = AzureAgriFoodRPService.Extension.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "examples-rg", "examples-farmbeatsResourceName", "provider.extension");
            var extension = GetArmClient().GetExtension(extensionId);

            await extension.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: Extensions_Update
            var extensionId = AzureAgriFoodRPService.Extension.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "examples-rg", "examples-farmbeatsResourceName", "provider.extension");
            var extension = GetArmClient().GetExtension(extensionId);

            await extension.UpdateAsync();
        }
    }
}
