// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for ExpressRoutePort. </summary>
    public partial class ExpressRoutePortCollectionMockTests : MockTestBase
    {
        public ExpressRoutePortCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: ExpressRoutePortCreate
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetExpressRoutePorts();
            string expressRoutePortName = "portName";
            Network.ExpressRoutePortData parameters = new Network.ExpressRoutePortData()
            {
                PeeringLocation = "peeringLocationName",
                BandwidthInGbps = 100,
                Encapsulation = new Network.Models.ExpressRoutePortsEncapsulation("QinQ"),
                Location = "westus",
            };

            await collection.CreateOrUpdateAsync(expressRoutePortName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync2()
        {
            // Example: ExpressRoutePortUpdateLink
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetExpressRoutePorts();
            string expressRoutePortName = "portName";
            Network.ExpressRoutePortData parameters = new Network.ExpressRoutePortData()
            {
                PeeringLocation = "peeringLocationName",
                BandwidthInGbps = 100,
                Encapsulation = new Network.Models.ExpressRoutePortsEncapsulation("QinQ"),
                Location = "westus",
            };

            await collection.CreateOrUpdateAsync(expressRoutePortName, parameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: ExpressRoutePortGet
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetExpressRoutePorts();
            string expressRoutePortName = "portName";

            await collection.GetAsync(expressRoutePortName);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: ExpressRoutePortListByResourceGroup
            var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1")).GetExpressRoutePorts();

            collection.GetAllAsync();
        }
    }
}
