// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Authorization.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Authorization
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.Authorization. </summary>
    public static partial class AuthorizationExtensions
    {
        private static TenantResourceExtensionClient GetExtensionClient(TenantResource tenantResource)
        {
            return tenantResource.GetCachedClient((client) =>
            {
                return new TenantResourceExtensionClient(client, tenantResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of AccessReviewDecisionResources in the TenantResource. </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        /// <returns> An object representing collection of AccessReviewDecisionResources and their operations over a AccessReviewDecisionResource. </returns>
        public static AccessReviewDecisionCollection GetAccessReviewDecisions(this TenantResource tenantResource, string scheduleDefinitionId, string id)
        {
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            return GetExtensionClient(tenantResource).GetAccessReviewDecisions(scheduleDefinitionId, id);
        }

        /// <summary>
        /// Get my single access review instance decision.
        /// Request Path: /providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/decisions/{decisionId}
        /// Operation Id: AccessReviewInstanceMyDecisions_GetById
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="decisionId"> The id of the decision record. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/>, <paramref name="id"/> or <paramref name="decisionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/>, <paramref name="id"/> or <paramref name="decisionId"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<AccessReviewDecisionResource>> GetAccessReviewDecisionAsync(this TenantResource tenantResource, string scheduleDefinitionId, string id, string decisionId, CancellationToken cancellationToken = default)
        {
            return await tenantResource.GetAccessReviewDecisions(scheduleDefinitionId, id).GetAsync(decisionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get my single access review instance decision.
        /// Request Path: /providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/decisions/{decisionId}
        /// Operation Id: AccessReviewInstanceMyDecisions_GetById
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="decisionId"> The id of the decision record. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/>, <paramref name="id"/> or <paramref name="decisionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/>, <paramref name="id"/> or <paramref name="decisionId"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<AccessReviewDecisionResource> GetAccessReviewDecision(this TenantResource tenantResource, string scheduleDefinitionId, string id, string decisionId, CancellationToken cancellationToken = default)
        {
            return tenantResource.GetAccessReviewDecisions(scheduleDefinitionId, id).Get(decisionId, cancellationToken);
        }

        /// <summary>
        /// An action to accept recommendations for decision in an access review instance.
        /// Request Path: /providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/acceptRecommendations
        /// Operation Id: AccessReviewInstance_AcceptRecommendations
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        public static async Task<Response> AcceptRecommendationsAccessReviewInstanceAsync(this TenantResource tenantResource, string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            return await GetExtensionClient(tenantResource).AcceptRecommendationsAccessReviewInstanceAsync(scheduleDefinitionId, id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// An action to accept recommendations for decision in an access review instance.
        /// Request Path: /providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/acceptRecommendations
        /// Operation Id: AccessReviewInstance_AcceptRecommendations
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        public static Response AcceptRecommendationsAccessReviewInstance(this TenantResource tenantResource, string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            return GetExtensionClient(tenantResource).AcceptRecommendationsAccessReviewInstance(scheduleDefinitionId, id, cancellationToken);
        }

        /// <summary>
        /// Get access review instance contacted reviewers
        /// Request Path: /providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/contactedReviewers
        /// Operation Id: TenantLevelAccessReviewInstanceContactedReviewers_List
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        /// <returns> An async collection of <see cref="AccessReviewContactedReviewer" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AccessReviewContactedReviewer> GetTenantLevelAccessReviewInstanceContactedReviewersAsync(this TenantResource tenantResource, string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            return GetExtensionClient(tenantResource).GetTenantLevelAccessReviewInstanceContactedReviewersAsync(scheduleDefinitionId, id, cancellationToken);
        }

        /// <summary>
        /// Get access review instance contacted reviewers
        /// Request Path: /providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/contactedReviewers
        /// Operation Id: TenantLevelAccessReviewInstanceContactedReviewers_List
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        /// <returns> A collection of <see cref="AccessReviewContactedReviewer" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AccessReviewContactedReviewer> GetTenantLevelAccessReviewInstanceContactedReviewers(this TenantResource tenantResource, string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            return GetExtensionClient(tenantResource).GetTenantLevelAccessReviewInstanceContactedReviewers(scheduleDefinitionId, id, cancellationToken);
        }

        private static SubscriptionResourceExtensionClient GetExtensionClient(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient((client) =>
            {
                return new SubscriptionResourceExtensionClient(client, subscriptionResource.Id);
            }
            );
        }

        /// <summary> Gets an object representing a AccessReviewDefaultSettingsResource along with the instance operations that can be performed on it in the SubscriptionResource. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="AccessReviewDefaultSettingsResource" /> object. </returns>
        public static AccessReviewDefaultSettingsResource GetAccessReviewDefaultSettings(this SubscriptionResource subscriptionResource)
        {
            return GetExtensionClient(subscriptionResource).GetAccessReviewDefaultSettings();
        }

        /// <summary>
        /// Stop access review definition
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/stop
        /// Operation Id: AccessReviewScheduleDefinitions_Stop
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> is null. </exception>
        public static async Task<Response> StopAccessReviewScheduleDefinitionAsync(this SubscriptionResource subscriptionResource, string scheduleDefinitionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));

            return await GetExtensionClient(subscriptionResource).StopAccessReviewScheduleDefinitionAsync(scheduleDefinitionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Stop access review definition
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/stop
        /// Operation Id: AccessReviewScheduleDefinitions_Stop
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> is null. </exception>
        public static Response StopAccessReviewScheduleDefinition(this SubscriptionResource subscriptionResource, string scheduleDefinitionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));

            return GetExtensionClient(subscriptionResource).StopAccessReviewScheduleDefinition(scheduleDefinitionId, cancellationToken);
        }

        /// <summary>
        /// An action to stop an access review instance.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/stop
        /// Operation Id: AccessReviewInstance_Stop
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        public static async Task<Response> StopAccessReviewInstanceAsync(this SubscriptionResource subscriptionResource, string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            return await GetExtensionClient(subscriptionResource).StopAccessReviewInstanceAsync(scheduleDefinitionId, id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// An action to stop an access review instance.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/stop
        /// Operation Id: AccessReviewInstance_Stop
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        public static Response StopAccessReviewInstance(this SubscriptionResource subscriptionResource, string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            return GetExtensionClient(subscriptionResource).StopAccessReviewInstance(scheduleDefinitionId, id, cancellationToken);
        }

        /// <summary>
        /// An action to reset all decisions for an access review instance.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/resetDecisions
        /// Operation Id: AccessReviewInstance_ResetDecisions
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        public static async Task<Response> ResetDecisionsAccessReviewInstanceAsync(this SubscriptionResource subscriptionResource, string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            return await GetExtensionClient(subscriptionResource).ResetDecisionsAccessReviewInstanceAsync(scheduleDefinitionId, id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// An action to reset all decisions for an access review instance.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/resetDecisions
        /// Operation Id: AccessReviewInstance_ResetDecisions
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        public static Response ResetDecisionsAccessReviewInstance(this SubscriptionResource subscriptionResource, string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            return GetExtensionClient(subscriptionResource).ResetDecisionsAccessReviewInstance(scheduleDefinitionId, id, cancellationToken);
        }

        /// <summary>
        /// An action to apply all decisions for an access review instance.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/applyDecisions
        /// Operation Id: AccessReviewInstance_ApplyDecisions
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        public static async Task<Response> ApplyDecisionsAccessReviewInstanceAsync(this SubscriptionResource subscriptionResource, string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            return await GetExtensionClient(subscriptionResource).ApplyDecisionsAccessReviewInstanceAsync(scheduleDefinitionId, id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// An action to apply all decisions for an access review instance.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/applyDecisions
        /// Operation Id: AccessReviewInstance_ApplyDecisions
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        public static Response ApplyDecisionsAccessReviewInstance(this SubscriptionResource subscriptionResource, string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            return GetExtensionClient(subscriptionResource).ApplyDecisionsAccessReviewInstance(scheduleDefinitionId, id, cancellationToken);
        }

        /// <summary>
        /// An action to send reminders for an access review instance.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/sendReminders
        /// Operation Id: AccessReviewInstance_SendReminders
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        public static async Task<Response> SendRemindersAccessReviewInstanceAsync(this SubscriptionResource subscriptionResource, string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            return await GetExtensionClient(subscriptionResource).SendRemindersAccessReviewInstanceAsync(scheduleDefinitionId, id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// An action to send reminders for an access review instance.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/sendReminders
        /// Operation Id: AccessReviewInstance_SendReminders
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        public static Response SendRemindersAccessReviewInstance(this SubscriptionResource subscriptionResource, string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            return GetExtensionClient(subscriptionResource).SendRemindersAccessReviewInstance(scheduleDefinitionId, id, cancellationToken);
        }

        /// <summary>
        /// Get access review instance contacted reviewers
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/contactedReviewers
        /// Operation Id: AccessReviewInstanceContactedReviewers_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        /// <returns> An async collection of <see cref="AccessReviewContactedReviewer" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AccessReviewContactedReviewer> GetAccessReviewInstanceContactedReviewersAsync(this SubscriptionResource subscriptionResource, string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            return GetExtensionClient(subscriptionResource).GetAccessReviewInstanceContactedReviewersAsync(scheduleDefinitionId, id, cancellationToken);
        }

        /// <summary>
        /// Get access review instance contacted reviewers
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}/contactedReviewers
        /// Operation Id: AccessReviewInstanceContactedReviewers_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="scheduleDefinitionId"> The id of the access review schedule definition. </param>
        /// <param name="id"> The id of the access review instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduleDefinitionId"/> or <paramref name="id"/> is null. </exception>
        /// <returns> A collection of <see cref="AccessReviewContactedReviewer" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AccessReviewContactedReviewer> GetAccessReviewInstanceContactedReviewers(this SubscriptionResource subscriptionResource, string scheduleDefinitionId, string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduleDefinitionId, nameof(scheduleDefinitionId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            return GetExtensionClient(subscriptionResource).GetAccessReviewInstanceContactedReviewers(scheduleDefinitionId, id, cancellationToken);
        }

        #region AccessReviewDefaultSettingsResource
        /// <summary>
        /// Gets an object representing an <see cref="AccessReviewDefaultSettingsResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AccessReviewDefaultSettingsResource.CreateResourceIdentifier" /> to create an <see cref="AccessReviewDefaultSettingsResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AccessReviewDefaultSettingsResource" /> object. </returns>
        public static AccessReviewDefaultSettingsResource GetAccessReviewDefaultSettingsResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AccessReviewDefaultSettingsResource.ValidateResourceId(id);
                return new AccessReviewDefaultSettingsResource(client, id);
            }
            );
        }
        #endregion

        #region AccessReviewDecisionResource
        /// <summary>
        /// Gets an object representing an <see cref="AccessReviewDecisionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AccessReviewDecisionResource.CreateResourceIdentifier" /> to create an <see cref="AccessReviewDecisionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AccessReviewDecisionResource" /> object. </returns>
        public static AccessReviewDecisionResource GetAccessReviewDecisionResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AccessReviewDecisionResource.ValidateResourceId(id);
                return new AccessReviewDecisionResource(client, id);
            }
            );
        }
        #endregion
    }
}
