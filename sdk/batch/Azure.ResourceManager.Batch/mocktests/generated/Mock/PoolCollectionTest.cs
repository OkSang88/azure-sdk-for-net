// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Batch;
using Azure.ResourceManager.Batch.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Batch.Tests.Mock
{
    /// <summary> Test for Pool. </summary>
    public partial class PoolCollectionMockTests : MockTestBase
    {
        public PoolCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: CreatePool - Custom Image
            string poolName = "testpool";
            Batch.PoolData parameters = new Batch.PoolData()
            {
                VmSize = "STANDARD_D4",
                DeploymentConfiguration = new Batch.Models.DeploymentConfiguration()
                {
                    VirtualMachineConfiguration = new Batch.Models.VirtualMachineConfiguration(imageReference: new Batch.Models.ImageReference()
                    {
                        Id = "/subscriptions/subid/resourceGroups/networking-group/providers/Microsoft.Compute/galleries/testgallery/images/testimagedef/versions/0.0.1",
                    }, nodeAgentSkuId: "batch.node.ubuntu 18.04"),
                },
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var batchAccountId = Batch.BatchAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct");
            var collection = GetArmClient().GetBatchAccount(batchAccountId).GetPools();
            await collection.CreateOrUpdateAsync(true, poolName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate2()
        {
            // Example: CreatePool - Full CloudServiceConfiguration
            string poolName = "testpool";
            Batch.PoolData parameters = new Batch.PoolData()
            {
                DisplayName = "my-pool-name",
                VmSize = "STANDARD_D4",
                DeploymentConfiguration = new Batch.Models.DeploymentConfiguration()
                {
                    CloudServiceConfiguration = new Batch.Models.CloudServiceConfiguration(osFamily: "4")
                    {
                        OsVersion = "WA-GUEST-OS-4.45_201708-01",
                    },
                },
                ScaleSettings = new Batch.Models.ScaleSettings()
                {
                    FixedScale = new Batch.Models.FixedScaleSettings()
                    {
                        ResizeTimeout = TimeSpan.Parse("PT8M"),
                        TargetDedicatedNodes = 6,
                        TargetLowPriorityNodes = 28,
                        NodeDeallocationOption = Batch.Models.ComputeNodeDeallocationOption.TaskCompletion,
                    },
                },
                InterNodeCommunication = Batch.Models.InterNodeCommunicationState.Enabled,
                NetworkConfiguration = new Batch.Models.NetworkConfiguration()
                {
                    SubnetId = "/subscriptions/subid/resourceGroups/rg1234/providers/Microsoft.Network/virtualNetworks/network1234/subnets/subnet123",
                    PublicIPAddressConfiguration = new Batch.Models.PublicIPAddressConfiguration()
                    {
                        Provision = Batch.Models.IPAddressProvisioningType.UserManaged,
                    },
                },
                TaskSlotsPerNode = 13,
                TaskSchedulingPolicy = new Batch.Models.TaskSchedulingPolicy(nodeFillType: Batch.Models.ComputeNodeFillType.Pack),
                StartTask = new Batch.Models.StartTask()
                {
                    CommandLine = "cmd /c SET",
                    UserIdentity = new Batch.Models.UserIdentity()
                    {
                        AutoUser = new Batch.Models.AutoUserSpecification()
                        {
                            Scope = Batch.Models.AutoUserScope.Pool,
                            ElevationLevel = Batch.Models.ElevationLevel.Admin,
                        },
                    },
                    MaxTaskRetryCount = 6,
                    WaitForSuccess = true,
                },
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var batchAccountId = Batch.BatchAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct");
            var collection = GetArmClient().GetBatchAccount(batchAccountId).GetPools();
            await collection.CreateOrUpdateAsync(true, poolName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate3()
        {
            // Example: CreatePool - Full VirtualMachineConfiguration
            string poolName = "testpool";
            Batch.PoolData parameters = new Batch.PoolData()
            {
                VmSize = "STANDARD_D4",
                DeploymentConfiguration = new Batch.Models.DeploymentConfiguration()
                {
                    VirtualMachineConfiguration = new Batch.Models.VirtualMachineConfiguration(imageReference: new Batch.Models.ImageReference()
                    {
                        Publisher = "MicrosoftWindowsServer",
                        Offer = "WindowsServer",
                        Sku = "2016-Datacenter-SmallDisk",
                        Version = "latest",
                    }, nodeAgentSkuId: "batch.node.windows amd64")
                    {
                        WindowsConfiguration = new Batch.Models.WindowsConfiguration()
                        {
                            EnableAutomaticUpdates = false,
                        },
                        LicenseType = "Windows_Server",
                        DiskEncryptionConfiguration = new Batch.Models.DiskEncryptionConfiguration(),
                        NodePlacementConfiguration = new Batch.Models.NodePlacementConfiguration()
                        {
                            Policy = Batch.Models.NodePlacementPolicyType.Zonal,
                        },
                        OsDisk = new Batch.Models.OSDisk()
                        {
                            EphemeralOSDiskSettings = new Batch.Models.DiffDiskSettings()
                            {
                                Placement = "CacheDisk",
                            },
                        },
                    },
                },
                ScaleSettings = new Batch.Models.ScaleSettings()
                {
                    AutoScale = new Batch.Models.AutoScaleSettings(formula: "$TargetDedicatedNodes=1")
                    {
                        EvaluationInterval = TimeSpan.Parse("PT5M"),
                    },
                },
                NetworkConfiguration = new Batch.Models.NetworkConfiguration()
                {
                    EndpointConfiguration = new Batch.Models.PoolEndpointConfiguration(inboundNatPools: new List<Batch.Models.InboundNatPool>()
{
new Batch.Models.InboundNatPool(name: "testnat",protocol: Batch.Models.InboundEndpointProtocol.TCP,backendPort: 12001,frontendPortRangeStart: 15000,frontendPortRangeEnd: 15100),}),
                },
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var batchAccountId = Batch.BatchAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct");
            var collection = GetArmClient().GetBatchAccount(batchAccountId).GetPools();
            await collection.CreateOrUpdateAsync(true, poolName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate4()
        {
            // Example: CreatePool - Minimal CloudServiceConfiguration
            string poolName = "testpool";
            Batch.PoolData parameters = new Batch.PoolData()
            {
                VmSize = "STANDARD_D4",
                DeploymentConfiguration = new Batch.Models.DeploymentConfiguration()
                {
                    CloudServiceConfiguration = new Batch.Models.CloudServiceConfiguration(osFamily: "5"),
                },
                ScaleSettings = new Batch.Models.ScaleSettings()
                {
                    FixedScale = new Batch.Models.FixedScaleSettings()
                    {
                        TargetDedicatedNodes = 3,
                    },
                },
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var batchAccountId = Batch.BatchAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct");
            var collection = GetArmClient().GetBatchAccount(batchAccountId).GetPools();
            await collection.CreateOrUpdateAsync(true, poolName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate5()
        {
            // Example: CreatePool - Minimal VirtualMachineConfiguration
            string poolName = "testpool";
            Batch.PoolData parameters = new Batch.PoolData()
            {
                VmSize = "STANDARD_D4",
                DeploymentConfiguration = new Batch.Models.DeploymentConfiguration()
                {
                    VirtualMachineConfiguration = new Batch.Models.VirtualMachineConfiguration(imageReference: new Batch.Models.ImageReference()
                    {
                        Publisher = "Canonical",
                        Offer = "UbuntuServer",
                        Sku = "18.04-LTS",
                        Version = "latest",
                    }, nodeAgentSkuId: "batch.node.ubuntu 18.04"),
                },
                ScaleSettings = new Batch.Models.ScaleSettings()
                {
                    AutoScale = new Batch.Models.AutoScaleSettings(formula: "$TargetDedicatedNodes=1")
                    {
                        EvaluationInterval = TimeSpan.Parse("PT5M"),
                    },
                },
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var batchAccountId = Batch.BatchAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct");
            var collection = GetArmClient().GetBatchAccount(batchAccountId).GetPools();
            await collection.CreateOrUpdateAsync(true, poolName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate6()
        {
            // Example: CreatePool - No public IP
            string poolName = "testpool";
            Batch.PoolData parameters = new Batch.PoolData()
            {
                VmSize = "STANDARD_D4",
                DeploymentConfiguration = new Batch.Models.DeploymentConfiguration()
                {
                    VirtualMachineConfiguration = new Batch.Models.VirtualMachineConfiguration(imageReference: new Batch.Models.ImageReference()
                    {
                        Id = "/subscriptions/subid/resourceGroups/networking-group/providers/Microsoft.Compute/galleries/testgallery/images/testimagedef/versions/0.0.1",
                    }, nodeAgentSkuId: "batch.node.ubuntu 18.04"),
                },
                NetworkConfiguration = new Batch.Models.NetworkConfiguration()
                {
                    SubnetId = "/subscriptions/subid/resourceGroups/rg1234/providers/Microsoft.Network/virtualNetworks/network1234/subnets/subnet123",
                    PublicIPAddressConfiguration = new Batch.Models.PublicIPAddressConfiguration()
                    {
                        Provision = Batch.Models.IPAddressProvisioningType.NoPublicIPAddresses,
                    },
                },
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var batchAccountId = Batch.BatchAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct");
            var collection = GetArmClient().GetBatchAccount(batchAccountId).GetPools();
            await collection.CreateOrUpdateAsync(true, poolName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate7()
        {
            // Example: CreatePool - Public IPs
            string poolName = "testpool";
            Batch.PoolData parameters = new Batch.PoolData()
            {
                VmSize = "STANDARD_D4",
                DeploymentConfiguration = new Batch.Models.DeploymentConfiguration()
                {
                    VirtualMachineConfiguration = new Batch.Models.VirtualMachineConfiguration(imageReference: new Batch.Models.ImageReference()
                    {
                        Id = "/subscriptions/subid/resourceGroups/networking-group/providers/Microsoft.Compute/galleries/testgallery/images/testimagedef/versions/0.0.1",
                    }, nodeAgentSkuId: "batch.node.ubuntu 18.04"),
                },
                NetworkConfiguration = new Batch.Models.NetworkConfiguration()
                {
                    SubnetId = "/subscriptions/subid/resourceGroups/rg1234/providers/Microsoft.Network/virtualNetworks/network1234/subnets/subnet123",
                    PublicIPAddressConfiguration = new Batch.Models.PublicIPAddressConfiguration()
                    {
                        Provision = Batch.Models.IPAddressProvisioningType.UserManaged,
                    },
                },
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var batchAccountId = Batch.BatchAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct");
            var collection = GetArmClient().GetBatchAccount(batchAccountId).GetPools();
            await collection.CreateOrUpdateAsync(true, poolName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate8()
        {
            // Example: CreatePool - UserAssignedIdentities
            string poolName = "testpool";
            Batch.PoolData parameters = new Batch.PoolData()
            {
                Identity = new Batch.Models.BatchPoolIdentity(type: Batch.Models.PoolIdentityType.UserAssigned),
                VmSize = "STANDARD_D4",
                DeploymentConfiguration = new Batch.Models.DeploymentConfiguration()
                {
                    VirtualMachineConfiguration = new Batch.Models.VirtualMachineConfiguration(imageReference: new Batch.Models.ImageReference()
                    {
                        Publisher = "Canonical",
                        Offer = "UbuntuServer",
                        Sku = "18.04-LTS",
                        Version = "latest",
                    }, nodeAgentSkuId: "batch.node.ubuntu 18.04"),
                },
                ScaleSettings = new Batch.Models.ScaleSettings()
                {
                    AutoScale = new Batch.Models.AutoScaleSettings(formula: "$TargetDedicatedNodes=1")
                    {
                        EvaluationInterval = TimeSpan.Parse("PT5M"),
                    },
                },
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var batchAccountId = Batch.BatchAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct");
            var collection = GetArmClient().GetBatchAccount(batchAccountId).GetPools();
            await collection.CreateOrUpdateAsync(true, poolName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task CreateOrUpdate9()
        {
            // Example: CreatePool - VirtualMachineConfiguration Extensions
            string poolName = "testpool";
            Batch.PoolData parameters = new Batch.PoolData()
            {
                VmSize = "STANDARD_D4",
                DeploymentConfiguration = new Batch.Models.DeploymentConfiguration()
                {
                    VirtualMachineConfiguration = new Batch.Models.VirtualMachineConfiguration(imageReference: new Batch.Models.ImageReference()
                    {
                        Publisher = "Canonical",
                        Offer = "0001-com-ubuntu-server-focal",
                        Sku = "20_04-lts",
                    }, nodeAgentSkuId: "batch.node.ubuntu 20.04"),
                },
                ScaleSettings = new Batch.Models.ScaleSettings()
                {
                    AutoScale = new Batch.Models.AutoScaleSettings(formula: "$TargetDedicatedNodes=1")
                    {
                        EvaluationInterval = TimeSpan.Parse("PT5M"),
                    },
                },
            };
            string ifMatch = null;
            string ifNoneMatch = null;

            var batchAccountId = Batch.BatchAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct");
            var collection = GetArmClient().GetBatchAccount(batchAccountId).GetPools();
            await collection.CreateOrUpdateAsync(true, poolName, parameters, ifMatch, ifNoneMatch);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: GetPool
            string poolName = "testpool";

            var batchAccountId = Batch.BatchAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct");
            var collection = GetArmClient().GetBatchAccount(batchAccountId).GetPools();
            await collection.GetAsync(poolName);
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: GetPool - VirtualMachineConfiguration Extensions
            string poolName = "testpool";

            var batchAccountId = Batch.BatchAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct");
            var collection = GetArmClient().GetBatchAccount(batchAccountId).GetPools();
            await collection.GetAsync(poolName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: ListPool
            int? maxresults = null;
            string select = null;
            string filter = null;

            var batchAccountId = Batch.BatchAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct");
            var collection = GetArmClient().GetBatchAccount(batchAccountId).GetPools();
            await foreach (var _ in collection.GetAllAsync(maxresults, select, filter))
            {
            }
        }

        [RecordedTest]
        public async Task GetAll2()
        {
            // Example: ListPoolWithFilter
            int? maxresults = null;
            string select = "properties/allocationState,properties/provisioningStateTransitionTime,properties/currentDedicatedNodes,properties/currentLowPriorityNodes";
            string filter = "startswith(name, 'po') or (properties/allocationState eq 'Steady' and properties/provisioningStateTransitionTime lt datetime'2017-02-02')";

            var batchAccountId = Batch.BatchAccount.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "default-azurebatch-japaneast", "sampleacct");
            var collection = GetArmClient().GetBatchAccount(batchAccountId).GetPools();
            await foreach (var _ in collection.GetAllAsync(maxresults, select, filter))
            {
            }
        }
    }
}
