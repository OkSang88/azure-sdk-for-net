// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.DeviceProvisioningServices;
using Azure.ResourceManager.DeviceProvisioningServices.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.DeviceProvisioningServices.Tests.Mock
{
    /// <summary> Test for CertificateResponse. </summary>
    public partial class CertificateResponseCollectionMockTests : MockTestBase
    {
        public CertificateResponseCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: DPSCreateOrUpdateCertificate
            string certificateName = "cert";
            DeviceProvisioningServices.Models.CertificateBodyDescription certificateDescription = new DeviceProvisioningServices.Models.CertificateBodyDescription()
            {
                Certificate = "############################################",
            };
            string ifMatch = null;

            var provisioningServiceDescriptionId = DeviceProvisioningServices.ProvisioningServiceDescription.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myFirstProvisioningService");
            var collection = GetArmClient().GetProvisioningServiceDescription(provisioningServiceDescriptionId).GetCertificateResponses();
            await collection.CreateOrUpdateAsync(true, certificateName, certificateDescription, ifMatch);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: DPSGetCertificate
            string certificateName = "cert";
            string ifMatch = null;

            var provisioningServiceDescriptionId = DeviceProvisioningServices.ProvisioningServiceDescription.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myFirstProvisioningService");
            var collection = GetArmClient().GetProvisioningServiceDescription(provisioningServiceDescriptionId).GetCertificateResponses();
            await collection.GetAsync(certificateName, ifMatch);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: DPSGetCertificates

            var provisioningServiceDescriptionId = DeviceProvisioningServices.ProvisioningServiceDescription.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myFirstProvisioningService");
            var collection = GetArmClient().GetProvisioningServiceDescription(provisioningServiceDescriptionId).GetCertificateResponses();
            await foreach (var _ in collection.GetAllAsync())
            {
            }
        }
    }
}
