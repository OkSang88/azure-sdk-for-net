// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Storage;
using Azure.ResourceManager.Storage.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Storage.Tests.Mock
{
    /// <summary> Test for StorageQueue. </summary>
    public partial class StorageQueueCollectionMockTests : MockTestBase
    {
        public StorageQueueCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: QueueOperationPut
            var collection = GetArmClient().GetQueueService(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/queueServices/default")).GetStorageQueues();
            string queueName = "queue6185";
            Storage.StorageQueueData queue = new Storage.StorageQueueData();

            await collection.CreateOrUpdateAsync(queueName, queue);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync2()
        {
            // Example: QueueOperationPutWithMetadata
            var collection = GetArmClient().GetQueueService(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/queueServices/default")).GetStorageQueues();
            string queueName = "queue6185";
            Storage.StorageQueueData queue = new Storage.StorageQueueData();

            await collection.CreateOrUpdateAsync(queueName, queue);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: QueueOperationGet
            var collection = GetArmClient().GetQueueService(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/queueServices/default")).GetStorageQueues();
            string queueName = "queue6185";

            await collection.GetAsync(queueName);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: QueueOperationList
            var collection = GetArmClient().GetQueueService(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto328/queueServices/default")).GetStorageQueues();
            string maxpagesize = null;
            string filter = null;

            collection.GetAllAsync(maxpagesize, filter);
        }
    }
}
