// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Resources.Tests.Mock
{
    /// <summary> Test for DeploymentScript. </summary>
    public partial class DeploymentScriptMockTests : MockTestBase
    {
        public DeploymentScriptMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: DeploymentScriptsGet
            var deploymentScript = GetArmClient().GetDeploymentScript(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/script-rg/providers/Microsoft.Resources/deploymentScripts/MyDeploymentScript"));

            await deploymentScript.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: DeploymentScriptsDelete
            var deploymentScript = GetArmClient().GetDeploymentScript(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/script-rg/providers/Microsoft.Resources/deploymentScripts/MyDeploymentScript"));

            await deploymentScript.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: DeploymentScriptsUpdate
            var deploymentScript = GetArmClient().GetDeploymentScript(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/script-rg/providers/Microsoft.Resources/deploymentScripts/MyDeploymentScript"));
            IDictionary<string, string> tags = new Dictionary<string, string>()
            {
            };

            await deploymentScript.UpdateAsync(tags);
        }

        [RecordedTest]
        public async Task GetLogsAsync()
        {
            // Example: DeploymentScriptsGetLogs
            var deploymentScript = GetArmClient().GetDeploymentScript(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/script-rg/providers/Microsoft.Resources/deploymentScripts/MyDeploymentScript"));

            await deploymentScript.GetLogsAsync();
        }

        [RecordedTest]
        public async Task ScriptLogGetAsync()
        {
            // Example: DeploymentScriptsGetLogs
            var scriptLog = GetArmClient().GetScriptLog(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/script-rg/providers/Microsoft.Resources/deploymentScripts/MyDeploymentScript/logs/default"));
            int? tail = null;

            await scriptLog.GetAsync(tail);
        }

        [RecordedTest]
        public async Task ScriptLogGetAsync2()
        {
            // Example: DeploymentScriptsGetLogsWithTail
            var scriptLog = GetArmClient().GetScriptLog(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/script-rg/providers/Microsoft.Resources/deploymentScripts/MyDeploymentScript/logs/default"));
            int? tail = 5;

            await scriptLog.GetAsync(tail);
        }
    }
}
