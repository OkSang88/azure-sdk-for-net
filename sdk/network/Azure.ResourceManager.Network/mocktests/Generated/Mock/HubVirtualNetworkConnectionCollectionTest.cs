// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Network;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Network.Tests.Mock
{
    /// <summary> Test for HubVirtualNetworkConnection. </summary>
    public partial class HubVirtualNetworkConnectionCollectionMockTests : MockTestBase
    {
        public HubVirtualNetworkConnectionCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: HubVirtualNetworkConnectionPut
            var collection = GetArmClient().GetVirtualHub(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1")).GetHubVirtualNetworkConnections();
            string connectionName = "connection1";
            Network.HubVirtualNetworkConnectionData hubVirtualNetworkConnectionParameters = new Network.HubVirtualNetworkConnectionData()
            {
                RemoteVirtualNetwork = new WritableSubResource()
                {
                    Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/SpokeVnet1"),
                },
                EnableInternetSecurity = false,
                RoutingConfiguration = new Network.Models.RoutingConfiguration()
                {
                    AssociatedRouteTable = new WritableSubResource()
                    {
                        Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
                    },
                    PropagatedRouteTables = new Network.Models.PropagatedRouteTable(),
                    VnetRoutes = new Network.Models.VnetRoute(),
                },
            };

            await collection.CreateOrUpdateAsync(connectionName, hubVirtualNetworkConnectionParameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: HubVirtualNetworkConnectionGet
            var collection = GetArmClient().GetVirtualHub(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1")).GetHubVirtualNetworkConnections();
            string connectionName = "connection1";

            await collection.GetAsync(connectionName);
        }

        [RecordedTest]
        public void GetAllAsync()
        {
            // Example: HubVirtualNetworkConnectionList
            var collection = GetArmClient().GetVirtualHub(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1")).GetHubVirtualNetworkConnections();

            collection.GetAllAsync();
        }
    }
}
