// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for VirtualMachineScaleSet. </summary>
    public partial class VirtualMachineScaleSetMockTests : MockTestBase
    {
        public VirtualMachineScaleSetMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Get a virtual machine scale set placed on a dedicated host group through automatic placement.
            var virtualMachineScaleSetId = Compute.VirtualMachineScaleSet.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myVirtualMachineScaleSet");
            var virtualMachineScaleSet = GetArmClient().GetVirtualMachineScaleSet(virtualMachineScaleSetId);
            Compute.Models.ExpandTypesForGetVMScaleSets? expand = null;

            await virtualMachineScaleSet.GetAsync(expand);
        }

        [RecordedTest]
        public async Task Get2()
        {
            // Example: Get a virtual machine scale set with UserData
            var virtualMachineScaleSetId = Compute.VirtualMachineScaleSet.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myVirtualMachineScaleSet");
            var virtualMachineScaleSet = GetArmClient().GetVirtualMachineScaleSet(virtualMachineScaleSetId);
            Compute.Models.ExpandTypesForGetVMScaleSets? expand = null;

            await virtualMachineScaleSet.GetAsync(expand);
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: Force Delete a VM scale set.
            var virtualMachineScaleSetId = Compute.VirtualMachineScaleSet.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "myvmScaleSet");
            var virtualMachineScaleSet = GetArmClient().GetVirtualMachineScaleSet(virtualMachineScaleSetId);
            bool? forceDeletion = true;

            await virtualMachineScaleSet.DeleteAsync(true, forceDeletion);
        }

        [RecordedTest]
        public async Task StartExtensionUpgradeVirtualMachineScaleSetRollingUpgrade()
        {
            // Example: Start an extension rolling upgrade.
            var virtualMachineScaleSetId = Compute.VirtualMachineScaleSet.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "myResourceGroup", "{vmss-name}");
            var virtualMachineScaleSet = GetArmClient().GetVirtualMachineScaleSet(virtualMachineScaleSetId);

            await virtualMachineScaleSet.StartExtensionUpgradeVirtualMachineScaleSetRollingUpgradeAsync(true);
        }
    }
}
