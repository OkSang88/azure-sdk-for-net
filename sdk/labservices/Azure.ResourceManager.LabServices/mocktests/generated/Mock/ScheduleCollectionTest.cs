// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.TestFramework;
using LabServicesClient;
using LabServicesClient.Models;

namespace LabServicesClient.Tests.Mock
{
    /// <summary> Test for Schedule. </summary>
    public partial class ScheduleCollectionMockTests : MockTestBase
    {
        public ScheduleCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            // Example: putSchedule
            string scheduleName = "schedule1";
            LabServicesClient.ScheduleData body = new LabServicesClient.ScheduleData()
            {
                StartAt = DateTimeOffset.Parse("2020-05-26T12:00:00Z"),
                StopAt = DateTimeOffset.Parse("2020-05-26T18:00:00Z"),
                RecurrencePattern = new LabServicesClient.Models.RecurrencePattern(frequency: LabServicesClient.Models.RecurrenceFrequency.Daily, expirationDate: DateTimeOffset.Parse("2020-08-14"))
                {
                    Interval = 2,
                },
                TimeZoneId = "America/Los_Angeles",
                Notes = "Schedule 1 for students",
            };

            var labId = LabServicesClient.Lab.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg123", "testlab");
            var collection = GetArmClient().GetLab(labId).GetSchedules();
            await collection.CreateOrUpdateAsync(true, scheduleName, body);
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: getSchedule
            string scheduleName = "schedule1";

            var labId = LabServicesClient.Lab.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg123", "testlab");
            var collection = GetArmClient().GetLab(labId).GetSchedules();
            await collection.GetAsync(scheduleName);
        }

        [RecordedTest]
        public async Task GetAll()
        {
            // Example: getListSchedule
            string filter = null;

            var labId = LabServicesClient.Lab.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "testrg123", "testlab");
            var collection = GetArmClient().GetLab(labId).GetSchedules();
            await foreach (var _ in collection.GetAllAsync(filter))
            {
            }
        }
    }
}
