// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.EventHubs;
using Azure.ResourceManager.EventHubs.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.EventHubs.Tests.Mock
{
    /// <summary> Test for EventHubNamespace. </summary>
    public partial class EventHubNamespaceMockTests : MockTestBase
    {
        public EventHubNamespaceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: NameSpaceGet
            var eventHubNamespaceId = EventHubs.EventHubNamespace.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResurceGroupSample", "NamespaceSample");
            var eventHubNamespace = GetArmClient().GetEventHubNamespace(eventHubNamespaceId);

            await eventHubNamespace.GetAsync();
        }

        [RecordedTest]
        public async Task Delete()
        {
            // Example: NameSpaceDelete
            var eventHubNamespaceId = EventHubs.EventHubNamespace.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResurceGroupSample", "NamespaceSample");
            var eventHubNamespace = GetArmClient().GetEventHubNamespace(eventHubNamespaceId);

            await eventHubNamespace.DeleteAsync(true);
        }

        [RecordedTest]
        public async Task Update()
        {
            // Example: NamespacesUpdate
            var eventHubNamespaceId = EventHubs.EventHubNamespace.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResurceGroupSample", "NamespaceSample");
            var eventHubNamespace = GetArmClient().GetEventHubNamespace(eventHubNamespaceId);
            EventHubs.EventHubNamespaceData parameters = new EventHubs.EventHubNamespaceData(location: "East US")
            {
                Identity = new ResourceIdentity(),
            };

            await eventHubNamespace.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task GetPrivateLinkResources()
        {
            // Example: NameSpacePrivateLinkResourcesGet
            var eventHubNamespaceId = EventHubs.EventHubNamespace.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ArunMonocle", "sdk-Namespace-2924");
            var eventHubNamespace = GetArmClient().GetEventHubNamespace(eventHubNamespaceId);

            await foreach (var _ in eventHubNamespace.GetPrivateLinkResourcesAsync())
            {
            }
        }

        [RecordedTest]
        public async Task CheckNameAvailabilityDisasterRecoveryConfig()
        {
            // Example: NamespacesCheckNameAvailability
            var eventHubNamespaceId = EventHubs.EventHubNamespace.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "exampleResourceGroup", "sdk-Namespace-9080");
            var eventHubNamespace = GetArmClient().GetEventHubNamespace(eventHubNamespaceId);
            EventHubs.Models.CheckNameAvailabilityOptions parameters = new EventHubs.Models.CheckNameAvailabilityOptions(name: "sdk-DisasterRecovery-9474");

            await eventHubNamespace.CheckNameAvailabilityDisasterRecoveryConfigAsync(parameters);
        }

        [RecordedTest]
        public async Task NetworkRuleSetGet()
        {
            // Example: NameSpaceNetworkRuleSetGet
            var networkRuleSetId = EventHubs.NetworkRuleSet.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000", "ResourceGroup", "sdk-Namespace-6019");
            var networkRuleSet = GetArmClient().GetNetworkRuleSet(networkRuleSetId);

            await networkRuleSet.GetAsync();
        }
    }
}
